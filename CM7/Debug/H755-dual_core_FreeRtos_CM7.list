
H755-dual_core_FreeRtos_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08006378  08006378  00007378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800666c  0800666c  00008114  2**0
                  CONTENTS
  4 .ARM          00000008  0800666c  0800666c  0000766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006674  08006674  00008114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006674  08006674  00007674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006678  08006678  00007678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  24000000  0800667c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  24000114  08006790  00008114  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400038c  08006790  0000838c  2**0
                  ALLOC
 11 .openamp_section 0000008c  38000000  08006790  00009000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00008114  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013728  00000000  00000000  00008142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bb8  00000000  00000000  0001b86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  0001f428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aee  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003d3f1  00000000  00000000  00020e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b71  00000000  00000000  0005e207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00179e0a  00000000  00000000  00075d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001efb82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042c8  00000000  00000000  001efbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001f3e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000114 	.word	0x24000114
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006360 	.word	0x08006360

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000118 	.word	0x24000118
 80002dc:	08006360 	.word	0x08006360

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003a4:	4b3d      	ldr	r3, [pc, #244]	@ (800049c <SystemInit+0xfc>)
 80003a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003aa:	4a3c      	ldr	r2, [pc, #240]	@ (800049c <SystemInit+0xfc>)
 80003ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003b4:	4b39      	ldr	r3, [pc, #228]	@ (800049c <SystemInit+0xfc>)
 80003b6:	691b      	ldr	r3, [r3, #16]
 80003b8:	4a38      	ldr	r2, [pc, #224]	@ (800049c <SystemInit+0xfc>)
 80003ba:	f043 0310 	orr.w	r3, r3, #16
 80003be:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003c0:	4b37      	ldr	r3, [pc, #220]	@ (80004a0 <SystemInit+0x100>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f003 030f 	and.w	r3, r3, #15
 80003c8:	2b06      	cmp	r3, #6
 80003ca:	d807      	bhi.n	80003dc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003cc:	4b34      	ldr	r3, [pc, #208]	@ (80004a0 <SystemInit+0x100>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f023 030f 	bic.w	r3, r3, #15
 80003d4:	4a32      	ldr	r2, [pc, #200]	@ (80004a0 <SystemInit+0x100>)
 80003d6:	f043 0307 	orr.w	r3, r3, #7
 80003da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003dc:	4b31      	ldr	r3, [pc, #196]	@ (80004a4 <SystemInit+0x104>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a30      	ldr	r2, [pc, #192]	@ (80004a4 <SystemInit+0x104>)
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003e8:	4b2e      	ldr	r3, [pc, #184]	@ (80004a4 <SystemInit+0x104>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ee:	4b2d      	ldr	r3, [pc, #180]	@ (80004a4 <SystemInit+0x104>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	492c      	ldr	r1, [pc, #176]	@ (80004a4 <SystemInit+0x104>)
 80003f4:	4b2c      	ldr	r3, [pc, #176]	@ (80004a8 <SystemInit+0x108>)
 80003f6:	4013      	ands	r3, r2
 80003f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003fa:	4b29      	ldr	r3, [pc, #164]	@ (80004a0 <SystemInit+0x100>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f003 0308 	and.w	r3, r3, #8
 8000402:	2b00      	cmp	r3, #0
 8000404:	d007      	beq.n	8000416 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000406:	4b26      	ldr	r3, [pc, #152]	@ (80004a0 <SystemInit+0x100>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f023 030f 	bic.w	r3, r3, #15
 800040e:	4a24      	ldr	r2, [pc, #144]	@ (80004a0 <SystemInit+0x100>)
 8000410:	f043 0307 	orr.w	r3, r3, #7
 8000414:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000416:	4b23      	ldr	r3, [pc, #140]	@ (80004a4 <SystemInit+0x104>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800041c:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <SystemInit+0x104>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000422:	4b20      	ldr	r3, [pc, #128]	@ (80004a4 <SystemInit+0x104>)
 8000424:	2200      	movs	r2, #0
 8000426:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000428:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <SystemInit+0x104>)
 800042a:	4a20      	ldr	r2, [pc, #128]	@ (80004ac <SystemInit+0x10c>)
 800042c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800042e:	4b1d      	ldr	r3, [pc, #116]	@ (80004a4 <SystemInit+0x104>)
 8000430:	4a1f      	ldr	r2, [pc, #124]	@ (80004b0 <SystemInit+0x110>)
 8000432:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <SystemInit+0x104>)
 8000436:	4a1f      	ldr	r2, [pc, #124]	@ (80004b4 <SystemInit+0x114>)
 8000438:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800043a:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <SystemInit+0x104>)
 800043c:	2200      	movs	r2, #0
 800043e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000440:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <SystemInit+0x104>)
 8000442:	4a1c      	ldr	r2, [pc, #112]	@ (80004b4 <SystemInit+0x114>)
 8000444:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000446:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <SystemInit+0x104>)
 8000448:	2200      	movs	r2, #0
 800044a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800044c:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <SystemInit+0x104>)
 800044e:	4a19      	ldr	r2, [pc, #100]	@ (80004b4 <SystemInit+0x114>)
 8000450:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000452:	4b14      	ldr	r3, [pc, #80]	@ (80004a4 <SystemInit+0x104>)
 8000454:	2200      	movs	r2, #0
 8000456:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000458:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <SystemInit+0x104>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a11      	ldr	r2, [pc, #68]	@ (80004a4 <SystemInit+0x104>)
 800045e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000462:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <SystemInit+0x104>)
 8000466:	2200      	movs	r2, #0
 8000468:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800046a:	4b13      	ldr	r3, [pc, #76]	@ (80004b8 <SystemInit+0x118>)
 800046c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800046e:	4a12      	ldr	r2, [pc, #72]	@ (80004b8 <SystemInit+0x118>)
 8000470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000474:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000476:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <SystemInit+0x11c>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <SystemInit+0x120>)
 800047c:	4013      	ands	r3, r2
 800047e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000482:	d202      	bcs.n	800048a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000484:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <SystemInit+0x124>)
 8000486:	2201      	movs	r2, #1
 8000488:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800048a:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <SystemInit+0x128>)
 800048c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000490:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	e000ed00 	.word	0xe000ed00
 80004a0:	52002000 	.word	0x52002000
 80004a4:	58024400 	.word	0x58024400
 80004a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004ac:	02020200 	.word	0x02020200
 80004b0:	01ff0000 	.word	0x01ff0000
 80004b4:	01010280 	.word	0x01010280
 80004b8:	580000c0 	.word	0x580000c0
 80004bc:	5c001000 	.word	0x5c001000
 80004c0:	ffff0000 	.word	0xffff0000
 80004c4:	51008108 	.word	0x51008108
 80004c8:	52004000 	.word	0x52004000

080004cc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	@ 0x28
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b5a      	ldr	r3, [pc, #360]	@ (800064c <MX_GPIO_Init+0x180>)
 80004e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004e8:	4a58      	ldr	r2, [pc, #352]	@ (800064c <MX_GPIO_Init+0x180>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004f2:	4b56      	ldr	r3, [pc, #344]	@ (800064c <MX_GPIO_Init+0x180>)
 80004f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	613b      	str	r3, [r7, #16]
 80004fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000500:	4b52      	ldr	r3, [pc, #328]	@ (800064c <MX_GPIO_Init+0x180>)
 8000502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000506:	4a51      	ldr	r2, [pc, #324]	@ (800064c <MX_GPIO_Init+0x180>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000510:	4b4e      	ldr	r3, [pc, #312]	@ (800064c <MX_GPIO_Init+0x180>)
 8000512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b4b      	ldr	r3, [pc, #300]	@ (800064c <MX_GPIO_Init+0x180>)
 8000520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000524:	4a49      	ldr	r2, [pc, #292]	@ (800064c <MX_GPIO_Init+0x180>)
 8000526:	f043 0302 	orr.w	r3, r3, #2
 800052a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800052e:	4b47      	ldr	r3, [pc, #284]	@ (800064c <MX_GPIO_Init+0x180>)
 8000530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000534:	f003 0302 	and.w	r3, r3, #2
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800053c:	4b43      	ldr	r3, [pc, #268]	@ (800064c <MX_GPIO_Init+0x180>)
 800053e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000542:	4a42      	ldr	r2, [pc, #264]	@ (800064c <MX_GPIO_Init+0x180>)
 8000544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800054c:	4b3f      	ldr	r3, [pc, #252]	@ (800064c <MX_GPIO_Init+0x180>)
 800054e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000560:	483b      	ldr	r0, [pc, #236]	@ (8000650 <MX_GPIO_Init+0x184>)
 8000562:	f000 fff5 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000566:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4619      	mov	r1, r3
 800057a:	4836      	ldr	r0, [pc, #216]	@ (8000654 <MX_GPIO_Init+0x188>)
 800057c:	f000 fe38 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000580:	2332      	movs	r3, #50	@ 0x32
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000584:	2302      	movs	r3, #2
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2300      	movs	r3, #0
 800058e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000590:	230b      	movs	r3, #11
 8000592:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	482e      	ldr	r0, [pc, #184]	@ (8000654 <MX_GPIO_Init+0x188>)
 800059c:	f000 fe28 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80005a0:	2386      	movs	r3, #134	@ 0x86
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005b0:	230b      	movs	r3, #11
 80005b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	4827      	ldr	r0, [pc, #156]	@ (8000658 <MX_GPIO_Init+0x18c>)
 80005bc:	f000 fe18 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80005c0:	f244 0301 	movw	r3, #16385	@ 0x4001
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	481d      	ldr	r0, [pc, #116]	@ (8000650 <MX_GPIO_Init+0x184>)
 80005da:	f000 fe09 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005f0:	230b      	movs	r3, #11
 80005f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	4815      	ldr	r0, [pc, #84]	@ (8000650 <MX_GPIO_Init+0x184>)
 80005fc:	f000 fdf8 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000600:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000606:	2302      	movs	r3, #2
 8000608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2300      	movs	r3, #0
 8000610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000612:	230a      	movs	r3, #10
 8000614:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	480e      	ldr	r0, [pc, #56]	@ (8000658 <MX_GPIO_Init+0x18c>)
 800061e:	f000 fde7 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000622:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000628:	2302      	movs	r3, #2
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000634:	230b      	movs	r3, #11
 8000636:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	4807      	ldr	r0, [pc, #28]	@ (800065c <MX_GPIO_Init+0x190>)
 8000640:	f000 fdd6 	bl	80011f0 <HAL_GPIO_Init>

}
 8000644:	bf00      	nop
 8000646:	3728      	adds	r7, #40	@ 0x28
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	58024400 	.word	0x58024400
 8000650:	58020400 	.word	0x58020400
 8000654:	58020800 	.word	0x58020800
 8000658:	58020000 	.word	0x58020000
 800065c:	58021800 	.word	0x58021800

08000660 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af02      	add	r7, sp, #8
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000674:	d101      	bne.n	800067a <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <rpmsg_send+0x3c>)
 8000678:	e00c      	b.n	8000694 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000682:	2301      	movs	r3, #1
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f003 f9bb 	bl	8003a08 <rpmsg_send_offchannel_raw>
 8000692:	4603      	mov	r3, r0
					 len, true);
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	fffff829 	.word	0xfffff829

080006a0 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	2220      	movs	r2, #32
 80006b2:	68b9      	ldr	r1, [r7, #8]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f005 f886 	bl	80057c6 <strncpy>
	ept->addr = src;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	69ba      	ldr	r2, [r7, #24]
 80006ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	69fa      	ldr	r2, [r7, #28]
 80006d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006e2:	f000 f9c1 	bl	8000a68 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006e6:	4b77      	ldr	r3, [pc, #476]	@ (80008c4 <main+0x1e8>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d11b      	bne.n	800072a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006f2:	f3bf 8f4f 	dsb	sy
}
 80006f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006f8:	f3bf 8f6f 	isb	sy
}
 80006fc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006fe:	4b71      	ldr	r3, [pc, #452]	@ (80008c4 <main+0x1e8>)
 8000700:	2200      	movs	r2, #0
 8000702:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000706:	f3bf 8f4f 	dsb	sy
}
 800070a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800070c:	f3bf 8f6f 	isb	sy
}
 8000710:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000712:	4b6c      	ldr	r3, [pc, #432]	@ (80008c4 <main+0x1e8>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a6b      	ldr	r2, [pc, #428]	@ (80008c4 <main+0x1e8>)
 8000718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800071c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800071e:	f3bf 8f4f 	dsb	sy
}
 8000722:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000724:	f3bf 8f6f 	isb	sy
}
 8000728:	e000      	b.n	800072c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800072a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800072c:	4b65      	ldr	r3, [pc, #404]	@ (80008c4 <main+0x1e8>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000734:	2b00      	cmp	r3, #0
 8000736:	d138      	bne.n	80007aa <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000738:	4b62      	ldr	r3, [pc, #392]	@ (80008c4 <main+0x1e8>)
 800073a:	2200      	movs	r2, #0
 800073c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000740:	f3bf 8f4f 	dsb	sy
}
 8000744:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000746:	4b5f      	ldr	r3, [pc, #380]	@ (80008c4 <main+0x1e8>)
 8000748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800074c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	0b5b      	lsrs	r3, r3, #13
 8000752:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000756:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	08db      	lsrs	r3, r3, #3
 800075c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000760:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	015a      	lsls	r2, r3, #5
 8000766:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800076a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000770:	4954      	ldr	r1, [pc, #336]	@ (80008c4 <main+0x1e8>)
 8000772:	4313      	orrs	r3, r2
 8000774:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	1e5a      	subs	r2, r3, #1
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1ef      	bne.n	8000762 <main+0x86>
    } while(sets-- != 0U);
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	60ba      	str	r2, [r7, #8]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1e5      	bne.n	8000758 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800078c:	f3bf 8f4f 	dsb	sy
}
 8000790:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000792:	4b4c      	ldr	r3, [pc, #304]	@ (80008c4 <main+0x1e8>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a4b      	ldr	r2, [pc, #300]	@ (80008c4 <main+0x1e8>)
 8000798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800079c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800079e:	f3bf 8f4f 	dsb	sy
}
 80007a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007a4:	f3bf 8f6f 	isb	sy
}
 80007a8:	e000      	b.n	80007ac <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007aa:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b0:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b2:	bf00      	nop
 80007b4:	4b44      	ldr	r3, [pc, #272]	@ (80008c8 <main+0x1ec>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d004      	beq.n	80007ca <main+0xee>
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	1e5a      	subs	r2, r3, #1
 80007c4:	617a      	str	r2, [r7, #20]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	dcf4      	bgt.n	80007b4 <main+0xd8>
  if ( timeout < 0 )
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	da01      	bge.n	80007d4 <main+0xf8>
  {
  Error_Handler();
 80007d0:	f000 f977 	bl	8000ac2 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f000 fac2 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f882 	bl	80008e0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007dc:	4b3a      	ldr	r3, [pc, #232]	@ (80008c8 <main+0x1ec>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e2:	4a39      	ldr	r2, [pc, #228]	@ (80008c8 <main+0x1ec>)
 80007e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ec:	4b36      	ldr	r3, [pc, #216]	@ (80008c8 <main+0x1ec>)
 80007ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 fec2 	bl	8001584 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000800:	2100      	movs	r1, #0
 8000802:	2000      	movs	r0, #0
 8000804:	f000 fed8 	bl	80015b8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000808:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800080c:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800080e:	bf00      	nop
 8000810:	4b2d      	ldr	r3, [pc, #180]	@ (80008c8 <main+0x1ec>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000818:	2b00      	cmp	r3, #0
 800081a:	d104      	bne.n	8000826 <main+0x14a>
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	1e5a      	subs	r2, r3, #1
 8000820:	617a      	str	r2, [r7, #20]
 8000822:	2b00      	cmp	r3, #0
 8000824:	dcf4      	bgt.n	8000810 <main+0x134>
if ( timeout < 0 )
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	2b00      	cmp	r3, #0
 800082a:	da01      	bge.n	8000830 <main+0x154>
{
Error_Handler();
 800082c:	f000 f949 	bl	8000ac2 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000830:	f7ff fe4c 	bl	80004cc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  int32_t status = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]

  MAILBOX_Init();
 8000838:	f004 fb70 	bl	8004f1c <MAILBOX_Init>

  rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY, NULL, NULL);
 800083c:	2300      	movs	r3, #0
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	2300      	movs	r3, #0
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	f04f 33ff 	mov.w	r3, #4294967295
 8000848:	f04f 32ff 	mov.w	r2, #4294967295
 800084c:	491f      	ldr	r1, [pc, #124]	@ (80008cc <main+0x1f0>)
 800084e:	4820      	ldr	r0, [pc, #128]	@ (80008d0 <main+0x1f4>)
 8000850:	f7ff ff26 	bl	80006a0 <rpmsg_init_ept>

  if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb) != HAL_OK) {
 8000854:	491f      	ldr	r1, [pc, #124]	@ (80008d4 <main+0x1f8>)
 8000856:	2000      	movs	r0, #0
 8000858:	f004 fc7a 	bl	8005150 <MX_OPENAMP_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <main+0x18a>
	  Error_Handler();
 8000862:	f000 f92e 	bl	8000ac2 <Error_Handler>
  }

  OPENAMP_Wait_EndPointready(&rp_endpoint);
 8000866:	481a      	ldr	r0, [pc, #104]	@ (80008d0 <main+0x1f4>)
 8000868:	f004 fd3e 	bl	80052e8 <OPENAMP_Wait_EndPointready>

	while(message < 11) {
 800086c:	e01a      	b.n	80008a4 <main+0x1c8>
		status = OPENAMP_send (&rp_endpoint, &message, sizeof(message));
 800086e:	2204      	movs	r2, #4
 8000870:	4919      	ldr	r1, [pc, #100]	@ (80008d8 <main+0x1fc>)
 8000872:	4817      	ldr	r0, [pc, #92]	@ (80008d0 <main+0x1f4>)
 8000874:	f7ff fef4 	bl	8000660 <rpmsg_send>
 8000878:	6138      	str	r0, [r7, #16]
		message++;
 800087a:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <main+0x1fc>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	3301      	adds	r3, #1
 8000880:	4a15      	ldr	r2, [pc, #84]	@ (80008d8 <main+0x1fc>)
 8000882:	6013      	str	r3, [r2, #0]
		if (status < 0) {
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	2b00      	cmp	r3, #0
 8000888:	da01      	bge.n	800088e <main+0x1b2>
			Error_Handler();
 800088a:	f000 f91a 	bl	8000ac2 <Error_Handler>
		}

		HAL_Delay(500);
 800088e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000892:	f000 faf5 	bl	8000e80 <HAL_Delay>
		if (message > 10) {
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <main+0x1fc>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b0a      	cmp	r3, #10
 800089c:	d902      	bls.n	80008a4 <main+0x1c8>
			message = 0;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <main+0x1fc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
	while(message < 11) {
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <main+0x1fc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b0a      	cmp	r3, #10
 80008aa:	d9e0      	bls.n	800086e <main+0x192>
		}
	}


	while(service_created) {
 80008ac:	e001      	b.n	80008b2 <main+0x1d6>
		OPENAMP_check_for_message();
 80008ae:	f004 fd0f 	bl	80052d0 <OPENAMP_check_for_message>
	while(service_created) {
 80008b2:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <main+0x200>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f9      	bne.n	80008ae <main+0x1d2>
	}

	OPENAMP_DeInit();
 80008ba:	f004 fcdf 	bl	800527c <OPENAMP_DeInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008be:	bf00      	nop
 80008c0:	e7fd      	b.n	80008be <main+0x1e2>
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	58024400 	.word	0x58024400
 80008cc:	08006378 	.word	0x08006378
 80008d0:	24000140 	.word	0x24000140
 80008d4:	08000a2d 	.word	0x08000a2d
 80008d8:	24000130 	.word	0x24000130
 80008dc:	24000138 	.word	0x24000138

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b09c      	sub	sp, #112	@ 0x70
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ea:	224c      	movs	r2, #76	@ 0x4c
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 ff4f 	bl	8005792 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2220      	movs	r2, #32
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f004 ff49 	bl	8005792 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000900:	2004      	movs	r0, #4
 8000902:	f000 fe99 	bl	8001638 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b31      	ldr	r3, [pc, #196]	@ (80009d0 <SystemClock_Config+0xf0>)
 800090c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800090e:	4a30      	ldr	r2, [pc, #192]	@ (80009d0 <SystemClock_Config+0xf0>)
 8000910:	f023 0301 	bic.w	r3, r3, #1
 8000914:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000916:	4b2e      	ldr	r3, [pc, #184]	@ (80009d0 <SystemClock_Config+0xf0>)
 8000918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	4b2c      	ldr	r3, [pc, #176]	@ (80009d4 <SystemClock_Config+0xf4>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a2b      	ldr	r2, [pc, #172]	@ (80009d4 <SystemClock_Config+0xf4>)
 8000926:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b29      	ldr	r3, [pc, #164]	@ (80009d4 <SystemClock_Config+0xf4>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000938:	bf00      	nop
 800093a:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <SystemClock_Config+0xf4>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000946:	d1f8      	bne.n	800093a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000948:	2302      	movs	r3, #2
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800094c:	2301      	movs	r3, #1
 800094e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000950:	2340      	movs	r3, #64	@ 0x40
 8000952:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000954:	2302      	movs	r3, #2
 8000956:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000958:	2300      	movs	r3, #0
 800095a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800095c:	2304      	movs	r3, #4
 800095e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000960:	2332      	movs	r3, #50	@ 0x32
 8000962:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000968:	2305      	movs	r3, #5
 800096a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800096c:	2302      	movs	r3, #2
 800096e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000970:	230c      	movs	r3, #12
 8000972:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000974:	2300      	movs	r3, #0
 8000976:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000980:	4618      	mov	r0, r3
 8000982:	f000 feb3 	bl	80016ec <HAL_RCC_OscConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800098c:	f000 f899 	bl	8000ac2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000990:	233f      	movs	r3, #63	@ 0x3f
 8000992:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000994:	2303      	movs	r3, #3
 8000996:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800099c:	2308      	movs	r3, #8
 800099e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009a0:	2340      	movs	r3, #64	@ 0x40
 80009a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009a4:	2340      	movs	r3, #64	@ 0x40
 80009a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009ae:	2340      	movs	r3, #64	@ 0x40
 80009b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2102      	movs	r1, #2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 faf2 	bl	8001fa0 <HAL_RCC_ClockConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80009c2:	f000 f87e 	bl	8000ac2 <Error_Handler>
  }
}
 80009c6:	bf00      	nop
 80009c8:	3770      	adds	r7, #112	@ 0x70
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	58000400 	.word	0x58000400
 80009d4:	58024800 	.word	0x58024800

080009d8 <rpmsg_recv_callback>:

/* USER CODE BEGIN 4 */

static int rpmsg_recv_callback (struct rpmsg_endpoint *ept, void *data, size_t len, uint32_t src, void *priv) {
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a06      	ldr	r2, [pc, #24]	@ (8000a04 <rpmsg_recv_callback+0x2c>)
 80009ec:	6013      	str	r3, [r2, #0]
	message_received = 1;
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <rpmsg_recv_callback+0x30>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	601a      	str	r2, [r3, #0]

	return 0;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	2400013c 	.word	0x2400013c
 8000a08:	24000134 	.word	0x24000134

08000a0c <service_destroy_cb>:

void service_destroy_cb (struct rpmsg_endpoint *ept) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	service_created = 0;
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <service_destroy_cb+0x1c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	24000138 	.word	0x24000138

08000a2c <new_service_cb>:

void new_service_cb (struct rpmsg_device *rdev, const char *name, uint32_t dest) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback, service_destroy_cb);
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <new_service_cb+0x2c>)
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <new_service_cb+0x30>)
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	4807      	ldr	r0, [pc, #28]	@ (8000a60 <new_service_cb+0x34>)
 8000a44:	f004 fc26 	bl	8005294 <OPENAMP_create_endpoint>

	service_created = 1;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <new_service_cb+0x38>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	601a      	str	r2, [r3, #0]
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	08000a0d 	.word	0x08000a0d
 8000a5c:	080009d9 	.word	0x080009d9
 8000a60:	24000140 	.word	0x24000140
 8000a64:	24000138 	.word	0x24000138

08000a68 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a7a:	f000 fb41 	bl	8001100 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000a86:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000a8a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aac:	463b      	mov	r3, r7
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fb5e 	bl	8001170 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ab4:	2004      	movs	r0, #4
 8000ab6:	f000 fb3b 	bl	8001130 <HAL_MPU_Enable>

}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac6:	b672      	cpsid	i
}
 8000ac8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aca:	bf00      	nop
 8000acc:	e7fd      	b.n	8000aca <Error_Handler+0x8>
	...

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b0c <HAL_MspInit+0x3c>)
 8000ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000adc:	4a0b      	ldr	r2, [pc, #44]	@ (8000b0c <HAL_MspInit+0x3c>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <HAL_MspInit+0x3c>)
 8000ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	207d      	movs	r0, #125	@ 0x7d
 8000afa:	f000 facc 	bl	8001096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000afe:	207d      	movs	r0, #125	@ 0x7d
 8000b00:	f000 fae3 	bl	80010ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58024400 	.word	0x58024400

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <NMI_Handler+0x4>

08000b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <MemManage_Handler+0x4>

08000b28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b66:	f000 f96b 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000b72:	f000 fd47 	bl	8001604 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  return 1;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_kill>:

int _kill(int pid, int sig)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b94:	f004 fe80 	bl	8005898 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2216      	movs	r2, #22
 8000b9c:	601a      	str	r2, [r3, #0]
  return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_exit>:

void _exit (int status)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffe7 	bl	8000b8a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <_exit+0x12>

08000bc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e00a      	b.n	8000be8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bd2:	f3af 8000 	nop.w
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	b2ca      	uxtb	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf0      	blt.n	8000bd2 <_read+0x12>
  }

  return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e009      	b.n	8000c20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf1      	blt.n	8000c0c <_write+0x12>
  }
  return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_close>:

int _close(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_isatty>:

int _isatty(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f004 fde4 	bl	8005898 <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	24080000 	.word	0x24080000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	24000180 	.word	0x24000180
 8000d04:	24000390 	.word	0x24000390

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d0c:	f7ff fb48 	bl	80003a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f004 fdb5 	bl	80058a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fccf 	bl	80006dc <main>
  bx  lr
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d48:	24000114 	.word	0x24000114
  ldr r2, =_sidata
 8000d4c:	0800667c 	.word	0x0800667c
  ldr r2, =_sbss
 8000d50:	24000114 	.word	0x24000114
  ldr r4, =_ebss
 8000d54:	2400038c 	.word	0x2400038c

08000d58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC3_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d62:	2003      	movs	r0, #3
 8000d64:	f000 f98c 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d68:	f001 fad0 	bl	800230c <HAL_RCC_GetSysClockFreq>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_Init+0x68>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	0a1b      	lsrs	r3, r3, #8
 8000d74:	f003 030f 	and.w	r3, r3, #15
 8000d78:	4913      	ldr	r1, [pc, #76]	@ (8000dc8 <HAL_Init+0x6c>)
 8000d7a:	5ccb      	ldrb	r3, [r1, r3]
 8000d7c:	f003 031f 	and.w	r3, r3, #31
 8000d80:	fa22 f303 	lsr.w	r3, r2, r3
 8000d84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <HAL_Init+0x68>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc8 <HAL_Init+0x6c>)
 8000d90:	5cd3      	ldrb	r3, [r2, r3]
 8000d92:	f003 031f 	and.w	r3, r3, #31
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dcc <HAL_Init+0x70>)
 8000d9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000da0:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd0 <HAL_Init+0x74>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 f814 	bl	8000dd4 <HAL_InitTick>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e002      	b.n	8000dbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000db6:	f7ff fe8b 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	08006588 	.word	0x08006588
 8000dcc:	24000004 	.word	0x24000004
 8000dd0:	24000000 	.word	0x24000000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ddc:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <HAL_InitTick+0x60>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d101      	bne.n	8000de8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e021      	b.n	8000e2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <HAL_InitTick+0x64>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <HAL_InitTick+0x60>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f971 	bl	80010e6 <HAL_SYSTICK_Config>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00e      	b.n	8000e2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d80a      	bhi.n	8000e2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f000 f93b 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e20:	4a06      	ldr	r2, [pc, #24]	@ (8000e3c <HAL_InitTick+0x68>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2400000c 	.word	0x2400000c
 8000e38:	24000000 	.word	0x24000000
 8000e3c:	24000008 	.word	0x24000008

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	2400000c 	.word	0x2400000c
 8000e64:	24000184 	.word	0x24000184

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	24000184 	.word	0x24000184

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2400000c 	.word	0x2400000c

08000ec8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ecc:	4b03      	ldr	r3, [pc, #12]	@ (8000edc <HAL_GetREVID+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0c1b      	lsrs	r3, r3, #16
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	5c001000 	.word	0x5c001000

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x40>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	05fa0000 	.word	0x05fa0000

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	@ (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	@ (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	@ (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	@ 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	@ 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f7ff ff8e 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	@ (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff29 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff40 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff90 	bl	8000fd4 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5f 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff33 	bl	8000f44 <__NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffa4 	bl	800103c <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001104:	f3bf 8f5f 	dmb	sy
}
 8001108:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800110a:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <HAL_MPU_Disable+0x28>)
 800110c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110e:	4a06      	ldr	r2, [pc, #24]	@ (8001128 <HAL_MPU_Disable+0x28>)
 8001110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001114:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001116:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_MPU_Disable+0x2c>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00
 800112c:	e000ed90 	.word	0xe000ed90

08001130 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001138:	4a0b      	ldr	r2, [pc, #44]	@ (8001168 <HAL_MPU_Enable+0x38>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <HAL_MPU_Enable+0x3c>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001146:	4a09      	ldr	r2, [pc, #36]	@ (800116c <HAL_MPU_Enable+0x3c>)
 8001148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800114c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800114e:	f3bf 8f4f 	dsb	sy
}
 8001152:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001154:	f3bf 8f6f 	isb	sy
}
 8001158:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed90 	.word	0xe000ed90
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	785a      	ldrb	r2, [r3, #1]
 800117c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <HAL_MPU_ConfigRegion+0x7c>)
 800117e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <HAL_MPU_ConfigRegion+0x7c>)
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	4a19      	ldr	r2, [pc, #100]	@ (80011ec <HAL_MPU_ConfigRegion+0x7c>)
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800118c:	4a17      	ldr	r2, [pc, #92]	@ (80011ec <HAL_MPU_ConfigRegion+0x7c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7b1b      	ldrb	r3, [r3, #12]
 8001198:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7adb      	ldrb	r3, [r3, #11]
 800119e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7a9b      	ldrb	r3, [r3, #10]
 80011a6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7b5b      	ldrb	r3, [r3, #13]
 80011ae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7b9b      	ldrb	r3, [r3, #14]
 80011b6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7bdb      	ldrb	r3, [r3, #15]
 80011be:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7a5b      	ldrb	r3, [r3, #9]
 80011c6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7a1b      	ldrb	r3, [r3, #8]
 80011ce:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011d0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011d8:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011da:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011dc:	6113      	str	r3, [r2, #16]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed90 	.word	0xe000ed90

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	@ 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011fe:	4b89      	ldr	r3, [pc, #548]	@ (8001424 <HAL_GPIO_Init+0x234>)
 8001200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001202:	e194      	b.n	800152e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8186 	beq.w	8001528 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b01      	cmp	r3, #1
 8001226:	d005      	beq.n	8001234 <HAL_GPIO_Init+0x44>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d130      	bne.n	8001296 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800126a:	2201      	movs	r2, #1
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	f003 0201 	and.w	r2, r3, #1
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d017      	beq.n	80012d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	2203      	movs	r2, #3
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d123      	bne.n	8001326 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	08da      	lsrs	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3208      	adds	r2, #8
 80012e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	691a      	ldr	r2, [r3, #16]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	08da      	lsrs	r2, r3, #3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3208      	adds	r2, #8
 8001320:	69b9      	ldr	r1, [r7, #24]
 8001322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0203 	and.w	r2, r3, #3
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 80e0 	beq.w	8001528 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001368:	4b2f      	ldr	r3, [pc, #188]	@ (8001428 <HAL_GPIO_Init+0x238>)
 800136a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800136e:	4a2e      	ldr	r2, [pc, #184]	@ (8001428 <HAL_GPIO_Init+0x238>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001378:	4b2b      	ldr	r3, [pc, #172]	@ (8001428 <HAL_GPIO_Init+0x238>)
 800137a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001386:	4a29      	ldr	r2, [pc, #164]	@ (800142c <HAL_GPIO_Init+0x23c>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a20      	ldr	r2, [pc, #128]	@ (8001430 <HAL_GPIO_Init+0x240>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d052      	beq.n	8001458 <HAL_GPIO_Init+0x268>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001434 <HAL_GPIO_Init+0x244>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d031      	beq.n	800141e <HAL_GPIO_Init+0x22e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001438 <HAL_GPIO_Init+0x248>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d02b      	beq.n	800141a <HAL_GPIO_Init+0x22a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a1d      	ldr	r2, [pc, #116]	@ (800143c <HAL_GPIO_Init+0x24c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d025      	beq.n	8001416 <HAL_GPIO_Init+0x226>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001440 <HAL_GPIO_Init+0x250>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d01f      	beq.n	8001412 <HAL_GPIO_Init+0x222>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001444 <HAL_GPIO_Init+0x254>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d019      	beq.n	800140e <HAL_GPIO_Init+0x21e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001448 <HAL_GPIO_Init+0x258>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_GPIO_Init+0x21a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a19      	ldr	r2, [pc, #100]	@ (800144c <HAL_GPIO_Init+0x25c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00d      	beq.n	8001406 <HAL_GPIO_Init+0x216>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a18      	ldr	r2, [pc, #96]	@ (8001450 <HAL_GPIO_Init+0x260>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d007      	beq.n	8001402 <HAL_GPIO_Init+0x212>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a17      	ldr	r2, [pc, #92]	@ (8001454 <HAL_GPIO_Init+0x264>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <HAL_GPIO_Init+0x20e>
 80013fa:	2309      	movs	r3, #9
 80013fc:	e02d      	b.n	800145a <HAL_GPIO_Init+0x26a>
 80013fe:	230a      	movs	r3, #10
 8001400:	e02b      	b.n	800145a <HAL_GPIO_Init+0x26a>
 8001402:	2308      	movs	r3, #8
 8001404:	e029      	b.n	800145a <HAL_GPIO_Init+0x26a>
 8001406:	2307      	movs	r3, #7
 8001408:	e027      	b.n	800145a <HAL_GPIO_Init+0x26a>
 800140a:	2306      	movs	r3, #6
 800140c:	e025      	b.n	800145a <HAL_GPIO_Init+0x26a>
 800140e:	2305      	movs	r3, #5
 8001410:	e023      	b.n	800145a <HAL_GPIO_Init+0x26a>
 8001412:	2304      	movs	r3, #4
 8001414:	e021      	b.n	800145a <HAL_GPIO_Init+0x26a>
 8001416:	2303      	movs	r3, #3
 8001418:	e01f      	b.n	800145a <HAL_GPIO_Init+0x26a>
 800141a:	2302      	movs	r3, #2
 800141c:	e01d      	b.n	800145a <HAL_GPIO_Init+0x26a>
 800141e:	2301      	movs	r3, #1
 8001420:	e01b      	b.n	800145a <HAL_GPIO_Init+0x26a>
 8001422:	bf00      	nop
 8001424:	58000080 	.word	0x58000080
 8001428:	58024400 	.word	0x58024400
 800142c:	58000400 	.word	0x58000400
 8001430:	58020000 	.word	0x58020000
 8001434:	58020400 	.word	0x58020400
 8001438:	58020800 	.word	0x58020800
 800143c:	58020c00 	.word	0x58020c00
 8001440:	58021000 	.word	0x58021000
 8001444:	58021400 	.word	0x58021400
 8001448:	58021800 	.word	0x58021800
 800144c:	58021c00 	.word	0x58021c00
 8001450:	58022000 	.word	0x58022000
 8001454:	58022400 	.word	0x58022400
 8001458:	2300      	movs	r3, #0
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	f002 0203 	and.w	r2, r2, #3
 8001460:	0092      	lsls	r2, r2, #2
 8001462:	4093      	lsls	r3, r2
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800146a:	4938      	ldr	r1, [pc, #224]	@ (800154c <HAL_GPIO_Init+0x35c>)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800149e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	3301      	adds	r3, #1
 800152c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa22 f303 	lsr.w	r3, r2, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	f47f ae63 	bne.w	8001204 <HAL_GPIO_Init+0x14>
  }
}
 800153e:	bf00      	nop
 8001540:	bf00      	nop
 8001542:	3724      	adds	r7, #36	@ 0x24
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	58000400 	.word	0x58000400

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800158c:	4a08      	ldr	r2, [pc, #32]	@ (80015b0 <HAL_HSEM_FastTake+0x2c>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3320      	adds	r3, #32
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <HAL_HSEM_FastTake+0x30>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d101      	bne.n	80015a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	e000      	b.n	80015a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	58026400 	.word	0x58026400
 80015b4:	80000300 	.word	0x80000300

080015b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80015c2:	4906      	ldr	r1, [pc, #24]	@ (80015dc <HAL_HSEM_Release+0x24>)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	58026400 	.word	0x58026400

080015e0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <HAL_HSEM_ActivateNotification+0x20>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4904      	ldr	r1, [pc, #16]	@ (8001600 <HAL_HSEM_ActivateNotification+0x20>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	600b      	str	r3, [r1, #0]
#endif
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	58026500 	.word	0x58026500

08001604 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <HAL_HSEM_IRQHandler+0x30>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <HAL_HSEM_IRQHandler+0x30>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	43db      	mvns	r3, r3
 8001618:	4906      	ldr	r1, [pc, #24]	@ (8001634 <HAL_HSEM_IRQHandler+0x30>)
 800161a:	4013      	ands	r3, r2
 800161c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800161e:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <HAL_HSEM_IRQHandler+0x30>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f003 fc69 	bl	8004efc <HAL_HSEM_FreeCallback>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	58026500 	.word	0x58026500

08001638 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001640:	4b29      	ldr	r3, [pc, #164]	@ (80016e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	2b06      	cmp	r3, #6
 800164a:	d00a      	beq.n	8001662 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800164c:	4b26      	ldr	r3, [pc, #152]	@ (80016e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	d001      	beq.n	800165e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e040      	b.n	80016e0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e03e      	b.n	80016e0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001662:	4b21      	ldr	r3, [pc, #132]	@ (80016e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800166a:	491f      	ldr	r1, [pc, #124]	@ (80016e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4313      	orrs	r3, r2
 8001670:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001672:	f7ff fbf9 	bl	8000e68 <HAL_GetTick>
 8001676:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001678:	e009      	b.n	800168e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800167a:	f7ff fbf5 	bl	8000e68 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001688:	d901      	bls.n	800168e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e028      	b.n	80016e0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800168e:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800169a:	d1ee      	bne.n	800167a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b1e      	cmp	r3, #30
 80016a0:	d008      	beq.n	80016b4 <HAL_PWREx_ConfigSupply+0x7c>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80016a6:	d005      	beq.n	80016b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b1d      	cmp	r3, #29
 80016ac:	d002      	beq.n	80016b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b2d      	cmp	r3, #45	@ 0x2d
 80016b2:	d114      	bne.n	80016de <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80016b4:	f7ff fbd8 	bl	8000e68 <HAL_GetTick>
 80016b8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016ba:	e009      	b.n	80016d0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016bc:	f7ff fbd4 	bl	8000e68 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016ca:	d901      	bls.n	80016d0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e007      	b.n	80016e0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <HAL_PWREx_ConfigSupply+0xb0>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016dc:	d1ee      	bne.n	80016bc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	58024800 	.word	0x58024800

080016ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	@ 0x30
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f000 bc48 	b.w	8001f90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8088 	beq.w	800181e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170e:	4b99      	ldr	r3, [pc, #612]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001718:	4b96      	ldr	r3, [pc, #600]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 800171a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800171e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001720:	2b10      	cmp	r3, #16
 8001722:	d007      	beq.n	8001734 <HAL_RCC_OscConfig+0x48>
 8001724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001726:	2b18      	cmp	r3, #24
 8001728:	d111      	bne.n	800174e <HAL_RCC_OscConfig+0x62>
 800172a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d10c      	bne.n	800174e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	4b8f      	ldr	r3, [pc, #572]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d06d      	beq.n	800181c <HAL_RCC_OscConfig+0x130>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d169      	bne.n	800181c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	f000 bc21 	b.w	8001f90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x7a>
 8001758:	4b86      	ldr	r3, [pc, #536]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a85      	ldr	r2, [pc, #532]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 800175e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e02e      	b.n	80017c4 <HAL_RCC_OscConfig+0xd8>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0x9c>
 800176e:	4b81      	ldr	r3, [pc, #516]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a80      	ldr	r2, [pc, #512]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	4b7e      	ldr	r3, [pc, #504]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a7d      	ldr	r2, [pc, #500]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001780:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e01d      	b.n	80017c4 <HAL_RCC_OscConfig+0xd8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0xc0>
 8001792:	4b78      	ldr	r3, [pc, #480]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a77      	ldr	r2, [pc, #476]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001798:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b75      	ldr	r3, [pc, #468]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a74      	ldr	r2, [pc, #464]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0xd8>
 80017ac:	4b71      	ldr	r3, [pc, #452]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a70      	ldr	r2, [pc, #448]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 80017b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b6e      	ldr	r3, [pc, #440]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a6d      	ldr	r2, [pc, #436]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 80017be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d013      	beq.n	80017f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb4c 	bl	8000e68 <HAL_GetTick>
 80017d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d4:	f7ff fb48 	bl	8000e68 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	@ 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e3d4      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017e6:	4b63      	ldr	r3, [pc, #396]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0xe8>
 80017f2:	e014      	b.n	800181e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fb38 	bl	8000e68 <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fb34 	bl	8000e68 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	@ 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e3c0      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800180e:	4b59      	ldr	r3, [pc, #356]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x110>
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 80ca 	beq.w	80019c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182c:	4b51      	ldr	r3, [pc, #324]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001834:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001836:	4b4f      	ldr	r3, [pc, #316]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d007      	beq.n	8001852 <HAL_RCC_OscConfig+0x166>
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	2b18      	cmp	r3, #24
 8001846:	d156      	bne.n	80018f6 <HAL_RCC_OscConfig+0x20a>
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d151      	bne.n	80018f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001852:	4b48      	ldr	r3, [pc, #288]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_RCC_OscConfig+0x17e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e392      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800186a:	4b42      	ldr	r3, [pc, #264]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 0219 	bic.w	r2, r3, #25
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	493f      	ldr	r1, [pc, #252]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff faf4 	bl	8000e68 <HAL_GetTick>
 8001880:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001884:	f7ff faf0 	bl	8000e68 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e37c      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001896:	4b37      	ldr	r3, [pc, #220]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a2:	f7ff fb11 	bl	8000ec8 <HAL_GetREVID>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d817      	bhi.n	80018e0 <HAL_RCC_OscConfig+0x1f4>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	2b40      	cmp	r3, #64	@ 0x40
 80018b6:	d108      	bne.n	80018ca <HAL_RCC_OscConfig+0x1de>
 80018b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80018c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 80018c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c8:	e07a      	b.n	80019c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	031b      	lsls	r3, r3, #12
 80018d8:	4926      	ldr	r1, [pc, #152]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018de:	e06f      	b.n	80019c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	061b      	lsls	r3, r3, #24
 80018ee:	4921      	ldr	r1, [pc, #132]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	e064      	b.n	80019c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d047      	beq.n	800198e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 0219 	bic.w	r2, r3, #25
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	491a      	ldr	r1, [pc, #104]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff faaa 	bl	8000e68 <HAL_GetTick>
 8001914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff faa6 	bl	8000e68 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e332      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	f7ff fac7 	bl	8000ec8 <HAL_GetREVID>
 800193a:	4603      	mov	r3, r0
 800193c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001940:	4293      	cmp	r3, r2
 8001942:	d819      	bhi.n	8001978 <HAL_RCC_OscConfig+0x28c>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	2b40      	cmp	r3, #64	@ 0x40
 800194a:	d108      	bne.n	800195e <HAL_RCC_OscConfig+0x272>
 800194c:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001954:	4a07      	ldr	r2, [pc, #28]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800195a:	6053      	str	r3, [r2, #4]
 800195c:	e030      	b.n	80019c0 <HAL_RCC_OscConfig+0x2d4>
 800195e:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	031b      	lsls	r3, r3, #12
 800196c:	4901      	ldr	r1, [pc, #4]	@ (8001974 <HAL_RCC_OscConfig+0x288>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
 8001972:	e025      	b.n	80019c0 <HAL_RCC_OscConfig+0x2d4>
 8001974:	58024400 	.word	0x58024400
 8001978:	4b9a      	ldr	r3, [pc, #616]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	4997      	ldr	r1, [pc, #604]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
 800198c:	e018      	b.n	80019c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198e:	4b95      	ldr	r3, [pc, #596]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a94      	ldr	r2, [pc, #592]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff fa65 	bl	8000e68 <HAL_GetTick>
 800199e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff fa61 	bl	8000e68 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e2ed      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019b4:	4b8b      	ldr	r3, [pc, #556]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80a9 	beq.w	8001b20 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ce:	4b85      	ldr	r3, [pc, #532]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019d8:	4b82      	ldr	r3, [pc, #520]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 80019da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d007      	beq.n	80019f4 <HAL_RCC_OscConfig+0x308>
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	2b18      	cmp	r3, #24
 80019e8:	d13a      	bne.n	8001a60 <HAL_RCC_OscConfig+0x374>
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d135      	bne.n	8001a60 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019f4:	4b7b      	ldr	r3, [pc, #492]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_OscConfig+0x320>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	2b80      	cmp	r3, #128	@ 0x80
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e2c1      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a0c:	f7ff fa5c 	bl	8000ec8 <HAL_GetREVID>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d817      	bhi.n	8001a4a <HAL_RCC_OscConfig+0x35e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	d108      	bne.n	8001a34 <HAL_RCC_OscConfig+0x348>
 8001a22:	4b70      	ldr	r3, [pc, #448]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001a2a:	4a6e      	ldr	r2, [pc, #440]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001a2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a30:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a32:	e075      	b.n	8001b20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a34:	4b6b      	ldr	r3, [pc, #428]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	069b      	lsls	r3, r3, #26
 8001a42:	4968      	ldr	r1, [pc, #416]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a48:	e06a      	b.n	8001b20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a4a:	4b66      	ldr	r3, [pc, #408]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	061b      	lsls	r3, r3, #24
 8001a58:	4962      	ldr	r1, [pc, #392]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a5e:	e05f      	b.n	8001b20 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d042      	beq.n	8001aee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a68:	4b5e      	ldr	r3, [pc, #376]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a5d      	ldr	r2, [pc, #372]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff f9f8 	bl	8000e68 <HAL_GetTick>
 8001a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a7c:	f7ff f9f4 	bl	8000e68 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e280      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a8e:	4b55      	ldr	r3, [pc, #340]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a9a:	f7ff fa15 	bl	8000ec8 <HAL_GetREVID>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d817      	bhi.n	8001ad8 <HAL_RCC_OscConfig+0x3ec>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	d108      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3d6>
 8001ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ab8:	4a4a      	ldr	r2, [pc, #296]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001aba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001abe:	6053      	str	r3, [r2, #4]
 8001ac0:	e02e      	b.n	8001b20 <HAL_RCC_OscConfig+0x434>
 8001ac2:	4b48      	ldr	r3, [pc, #288]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	069b      	lsls	r3, r3, #26
 8001ad0:	4944      	ldr	r1, [pc, #272]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
 8001ad6:	e023      	b.n	8001b20 <HAL_RCC_OscConfig+0x434>
 8001ad8:	4b42      	ldr	r3, [pc, #264]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	061b      	lsls	r3, r3, #24
 8001ae6:	493f      	ldr	r1, [pc, #252]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	60cb      	str	r3, [r1, #12]
 8001aec:	e018      	b.n	8001b20 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001aee:	4b3d      	ldr	r3, [pc, #244]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a3c      	ldr	r2, [pc, #240]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001af4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7ff f9b5 	bl	8000e68 <HAL_GetTick>
 8001afe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b02:	f7ff f9b1 	bl	8000e68 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e23d      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b14:	4b33      	ldr	r3, [pc, #204]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d036      	beq.n	8001b9a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d019      	beq.n	8001b68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b34:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b38:	4a2a      	ldr	r2, [pc, #168]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff f992 	bl	8000e68 <HAL_GetTick>
 8001b44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b48:	f7ff f98e 	bl	8000e68 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e21a      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b5a:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x45c>
 8001b66:	e018      	b.n	8001b9a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b68:	4b1e      	ldr	r3, [pc, #120]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7ff f978 	bl	8000e68 <HAL_GetTick>
 8001b78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7c:	f7ff f974 	bl	8000e68 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e200      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0320 	and.w	r3, r3, #32
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d039      	beq.n	8001c1a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01c      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bae:	4b0d      	ldr	r3, [pc, #52]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001bb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bba:	f7ff f955 	bl	8000e68 <HAL_GetTick>
 8001bbe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bc2:	f7ff f951 	bl	8000e68 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1dd      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bd4:	4b03      	ldr	r3, [pc, #12]	@ (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x4d6>
 8001be0:	e01b      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
 8001be2:	bf00      	nop
 8001be4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001be8:	4b9b      	ldr	r3, [pc, #620]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a9a      	ldr	r2, [pc, #616]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001bee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f938 	bl	8000e68 <HAL_GetTick>
 8001bf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bfc:	f7ff f934 	bl	8000e68 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1c0      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c0e:	4b92      	ldr	r3, [pc, #584]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8081 	beq.w	8001d2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c28:	4b8c      	ldr	r3, [pc, #560]	@ (8001e5c <HAL_RCC_OscConfig+0x770>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a8b      	ldr	r2, [pc, #556]	@ (8001e5c <HAL_RCC_OscConfig+0x770>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c34:	f7ff f918 	bl	8000e68 <HAL_GetTick>
 8001c38:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3c:	f7ff f914 	bl	8000e68 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	@ 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1a0      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c4e:	4b83      	ldr	r3, [pc, #524]	@ (8001e5c <HAL_RCC_OscConfig+0x770>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d106      	bne.n	8001c70 <HAL_RCC_OscConfig+0x584>
 8001c62:	4b7d      	ldr	r3, [pc, #500]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c66:	4a7c      	ldr	r2, [pc, #496]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c6e:	e02d      	b.n	8001ccc <HAL_RCC_OscConfig+0x5e0>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10c      	bne.n	8001c92 <HAL_RCC_OscConfig+0x5a6>
 8001c78:	4b77      	ldr	r3, [pc, #476]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7c:	4a76      	ldr	r2, [pc, #472]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c84:	4b74      	ldr	r3, [pc, #464]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c88:	4a73      	ldr	r2, [pc, #460]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001c8a:	f023 0304 	bic.w	r3, r3, #4
 8001c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c90:	e01c      	b.n	8001ccc <HAL_RCC_OscConfig+0x5e0>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b05      	cmp	r3, #5
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x5c8>
 8001c9a:	4b6f      	ldr	r3, [pc, #444]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9e:	4a6e      	ldr	r2, [pc, #440]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001caa:	4a6b      	ldr	r2, [pc, #428]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0x5e0>
 8001cb4:	4b68      	ldr	r3, [pc, #416]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb8:	4a67      	ldr	r2, [pc, #412]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cc0:	4b65      	ldr	r3, [pc, #404]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc4:	4a64      	ldr	r2, [pc, #400]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001cc6:	f023 0304 	bic.w	r3, r3, #4
 8001cca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d015      	beq.n	8001d00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff f8c8 	bl	8000e68 <HAL_GetTick>
 8001cd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f7ff f8c4 	bl	8000e68 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e14e      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cf2:	4b59      	ldr	r3, [pc, #356]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0ee      	beq.n	8001cdc <HAL_RCC_OscConfig+0x5f0>
 8001cfe:	e014      	b.n	8001d2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7ff f8b2 	bl	8000e68 <HAL_GetTick>
 8001d04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f7ff f8ae 	bl	8000e68 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e138      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ee      	bne.n	8001d08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 812d 	beq.w	8001f8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d34:	4b48      	ldr	r3, [pc, #288]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d3c:	2b18      	cmp	r3, #24
 8001d3e:	f000 80bd 	beq.w	8001ebc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	f040 809e 	bne.w	8001e88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4c:	4b42      	ldr	r3, [pc, #264]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a41      	ldr	r2, [pc, #260]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff f886 	bl	8000e68 <HAL_GetTick>
 8001d5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7ff f882 	bl	8000e68 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e10e      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d72:	4b39      	ldr	r3, [pc, #228]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d7e:	4b36      	ldr	r3, [pc, #216]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001d80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d82:	4b37      	ldr	r3, [pc, #220]	@ (8001e60 <HAL_RCC_OscConfig+0x774>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	430a      	orrs	r2, r1
 8001d92:	4931      	ldr	r1, [pc, #196]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	628b      	str	r3, [r1, #40]	@ 0x28
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da6:	3b01      	subs	r3, #1
 8001da8:	025b      	lsls	r3, r3, #9
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db2:	3b01      	subs	r3, #1
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	061b      	lsls	r3, r3, #24
 8001dc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001dc8:	4923      	ldr	r1, [pc, #140]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001dce:	4b22      	ldr	r3, [pc, #136]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd2:	4a21      	ldr	r2, [pc, #132]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001dda:	4b1f      	ldr	r3, [pc, #124]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dde:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <HAL_RCC_OscConfig+0x778>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001de6:	00d2      	lsls	r2, r2, #3
 8001de8:	491b      	ldr	r1, [pc, #108]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df2:	f023 020c 	bic.w	r2, r3, #12
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	4917      	ldr	r1, [pc, #92]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e00:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e04:	f023 0202 	bic.w	r2, r3, #2
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0c:	4912      	ldr	r1, [pc, #72]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e16:	4a10      	ldr	r2, [pc, #64]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e22:	4a0d      	ldr	r2, [pc, #52]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001e36:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3a:	4a07      	ldr	r2, [pc, #28]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e42:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <HAL_RCC_OscConfig+0x76c>)
 8001e48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff f80b 	bl	8000e68 <HAL_GetTick>
 8001e52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e54:	e011      	b.n	8001e7a <HAL_RCC_OscConfig+0x78e>
 8001e56:	bf00      	nop
 8001e58:	58024400 	.word	0x58024400
 8001e5c:	58024800 	.word	0x58024800
 8001e60:	fffffc0c 	.word	0xfffffc0c
 8001e64:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e68:	f7fe fffe 	bl	8000e68 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e08a      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e7a:	4b47      	ldr	r3, [pc, #284]	@ (8001f98 <HAL_RCC_OscConfig+0x8ac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x77c>
 8001e86:	e082      	b.n	8001f8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e88:	4b43      	ldr	r3, [pc, #268]	@ (8001f98 <HAL_RCC_OscConfig+0x8ac>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a42      	ldr	r2, [pc, #264]	@ (8001f98 <HAL_RCC_OscConfig+0x8ac>)
 8001e8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7fe ffe8 	bl	8000e68 <HAL_GetTick>
 8001e98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7fe ffe4 	bl	8000e68 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e070      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eae:	4b3a      	ldr	r3, [pc, #232]	@ (8001f98 <HAL_RCC_OscConfig+0x8ac>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x7b0>
 8001eba:	e068      	b.n	8001f8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ebc:	4b36      	ldr	r3, [pc, #216]	@ (8001f98 <HAL_RCC_OscConfig+0x8ac>)
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ec2:	4b35      	ldr	r3, [pc, #212]	@ (8001f98 <HAL_RCC_OscConfig+0x8ac>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d031      	beq.n	8001f34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f003 0203 	and.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d12a      	bne.n	8001f34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d122      	bne.n	8001f34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d11a      	bne.n	8001f34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	0a5b      	lsrs	r3, r3, #9
 8001f02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d111      	bne.n	8001f34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	0c1b      	lsrs	r3, r3, #16
 8001f14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d108      	bne.n	8001f34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	0e1b      	lsrs	r3, r3, #24
 8001f26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e02b      	b.n	8001f90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001f38:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <HAL_RCC_OscConfig+0x8ac>)
 8001f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f3c:	08db      	lsrs	r3, r3, #3
 8001f3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d01f      	beq.n	8001f8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001f4e:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <HAL_RCC_OscConfig+0x8ac>)
 8001f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f52:	4a11      	ldr	r2, [pc, #68]	@ (8001f98 <HAL_RCC_OscConfig+0x8ac>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f5a:	f7fe ff85 	bl	8000e68 <HAL_GetTick>
 8001f5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001f60:	bf00      	nop
 8001f62:	f7fe ff81 	bl	8000e68 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d0f9      	beq.n	8001f62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_RCC_OscConfig+0x8ac>)
 8001f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f72:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <HAL_RCC_OscConfig+0x8b0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f7a:	00d2      	lsls	r2, r2, #3
 8001f7c:	4906      	ldr	r1, [pc, #24]	@ (8001f98 <HAL_RCC_OscConfig+0x8ac>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_RCC_OscConfig+0x8ac>)
 8001f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f86:	4a04      	ldr	r2, [pc, #16]	@ (8001f98 <HAL_RCC_OscConfig+0x8ac>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3730      	adds	r7, #48	@ 0x30
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	58024400 	.word	0x58024400
 8001f9c:	ffff0007 	.word	0xffff0007

08001fa0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e19c      	b.n	80022ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b8a      	ldr	r3, [pc, #552]	@ (80021e0 <HAL_RCC_ClockConfig+0x240>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d910      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b87      	ldr	r3, [pc, #540]	@ (80021e0 <HAL_RCC_ClockConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 020f 	bic.w	r2, r3, #15
 8001fca:	4985      	ldr	r1, [pc, #532]	@ (80021e0 <HAL_RCC_ClockConfig+0x240>)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b83      	ldr	r3, [pc, #524]	@ (80021e0 <HAL_RCC_ClockConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e184      	b.n	80022ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	4b7b      	ldr	r3, [pc, #492]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d908      	bls.n	8002012 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002000:	4b78      	ldr	r3, [pc, #480]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	4975      	ldr	r1, [pc, #468]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 800200e:	4313      	orrs	r3, r2
 8002010:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d010      	beq.n	8002040 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	4b70      	ldr	r3, [pc, #448]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800202a:	429a      	cmp	r2, r3
 800202c:	d908      	bls.n	8002040 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800202e:	4b6d      	ldr	r3, [pc, #436]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	496a      	ldr	r1, [pc, #424]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 800203c:	4313      	orrs	r3, r2
 800203e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	d010      	beq.n	800206e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	4b64      	ldr	r3, [pc, #400]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002058:	429a      	cmp	r2, r3
 800205a:	d908      	bls.n	800206e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800205c:	4b61      	ldr	r3, [pc, #388]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	495e      	ldr	r1, [pc, #376]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 800206a:	4313      	orrs	r3, r2
 800206c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d010      	beq.n	800209c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	4b59      	ldr	r3, [pc, #356]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002086:	429a      	cmp	r2, r3
 8002088:	d908      	bls.n	800209c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800208a:	4b56      	ldr	r3, [pc, #344]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4953      	ldr	r1, [pc, #332]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 8002098:	4313      	orrs	r3, r2
 800209a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d010      	beq.n	80020ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	4b4d      	ldr	r3, [pc, #308]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d908      	bls.n	80020ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4b4a      	ldr	r3, [pc, #296]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f023 020f 	bic.w	r2, r3, #15
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4947      	ldr	r1, [pc, #284]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d055      	beq.n	8002182 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020d6:	4b43      	ldr	r3, [pc, #268]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	4940      	ldr	r1, [pc, #256]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020f0:	4b3c      	ldr	r3, [pc, #240]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d121      	bne.n	8002140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0f6      	b.n	80022ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d107      	bne.n	8002118 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002108:	4b36      	ldr	r3, [pc, #216]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d115      	bne.n	8002140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0ea      	b.n	80022ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d107      	bne.n	8002130 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002120:	4b30      	ldr	r3, [pc, #192]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0de      	b.n	80022ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002130:	4b2c      	ldr	r3, [pc, #176]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0d6      	b.n	80022ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002140:	4b28      	ldr	r3, [pc, #160]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f023 0207 	bic.w	r2, r3, #7
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4925      	ldr	r1, [pc, #148]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 800214e:	4313      	orrs	r3, r2
 8002150:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002152:	f7fe fe89 	bl	8000e68 <HAL_GetTick>
 8002156:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002158:	e00a      	b.n	8002170 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215a:	f7fe fe85 	bl	8000e68 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0be      	b.n	80022ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002170:	4b1c      	ldr	r3, [pc, #112]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	429a      	cmp	r2, r3
 8002180:	d1eb      	bne.n	800215a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d010      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	4b14      	ldr	r3, [pc, #80]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	429a      	cmp	r2, r3
 800219c:	d208      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800219e:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f023 020f 	bic.w	r2, r3, #15
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	490e      	ldr	r1, [pc, #56]	@ (80021e4 <HAL_RCC_ClockConfig+0x244>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b0:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <HAL_RCC_ClockConfig+0x240>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d214      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <HAL_RCC_ClockConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 020f 	bic.w	r2, r3, #15
 80021c6:	4906      	ldr	r1, [pc, #24]	@ (80021e0 <HAL_RCC_ClockConfig+0x240>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <HAL_RCC_ClockConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e086      	b.n	80022ee <HAL_RCC_ClockConfig+0x34e>
 80021e0:	52002000 	.word	0x52002000
 80021e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d010      	beq.n	8002216 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	4b3f      	ldr	r3, [pc, #252]	@ (80022f8 <HAL_RCC_ClockConfig+0x358>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002200:	429a      	cmp	r2, r3
 8002202:	d208      	bcs.n	8002216 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002204:	4b3c      	ldr	r3, [pc, #240]	@ (80022f8 <HAL_RCC_ClockConfig+0x358>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	4939      	ldr	r1, [pc, #228]	@ (80022f8 <HAL_RCC_ClockConfig+0x358>)
 8002212:	4313      	orrs	r3, r2
 8002214:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d010      	beq.n	8002244 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	4b34      	ldr	r3, [pc, #208]	@ (80022f8 <HAL_RCC_ClockConfig+0x358>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800222e:	429a      	cmp	r2, r3
 8002230:	d208      	bcs.n	8002244 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002232:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <HAL_RCC_ClockConfig+0x358>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	492e      	ldr	r1, [pc, #184]	@ (80022f8 <HAL_RCC_ClockConfig+0x358>)
 8002240:	4313      	orrs	r3, r2
 8002242:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b00      	cmp	r3, #0
 800224e:	d010      	beq.n	8002272 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699a      	ldr	r2, [r3, #24]
 8002254:	4b28      	ldr	r3, [pc, #160]	@ (80022f8 <HAL_RCC_ClockConfig+0x358>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800225c:	429a      	cmp	r2, r3
 800225e:	d208      	bcs.n	8002272 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002260:	4b25      	ldr	r3, [pc, #148]	@ (80022f8 <HAL_RCC_ClockConfig+0x358>)
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4922      	ldr	r1, [pc, #136]	@ (80022f8 <HAL_RCC_ClockConfig+0x358>)
 800226e:	4313      	orrs	r3, r2
 8002270:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	2b00      	cmp	r3, #0
 800227c:	d010      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	4b1d      	ldr	r3, [pc, #116]	@ (80022f8 <HAL_RCC_ClockConfig+0x358>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800228a:	429a      	cmp	r2, r3
 800228c:	d208      	bcs.n	80022a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800228e:	4b1a      	ldr	r3, [pc, #104]	@ (80022f8 <HAL_RCC_ClockConfig+0x358>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4917      	ldr	r1, [pc, #92]	@ (80022f8 <HAL_RCC_ClockConfig+0x358>)
 800229c:	4313      	orrs	r3, r2
 800229e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022a0:	f000 f834 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <HAL_RCC_ClockConfig+0x358>)
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	4912      	ldr	r1, [pc, #72]	@ (80022fc <HAL_RCC_ClockConfig+0x35c>)
 80022b2:	5ccb      	ldrb	r3, [r1, r3]
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022be:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <HAL_RCC_ClockConfig+0x358>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	4a0d      	ldr	r2, [pc, #52]	@ (80022fc <HAL_RCC_ClockConfig+0x35c>)
 80022c8:	5cd3      	ldrb	r3, [r2, r3]
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
 80022d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002300 <HAL_RCC_ClockConfig+0x360>)
 80022d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <HAL_RCC_ClockConfig+0x364>)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80022de:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <HAL_RCC_ClockConfig+0x368>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fd76 	bl	8000dd4 <HAL_InitTick>
 80022e8:	4603      	mov	r3, r0
 80022ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	58024400 	.word	0x58024400
 80022fc:	08006588 	.word	0x08006588
 8002300:	24000004 	.word	0x24000004
 8002304:	24000000 	.word	0x24000000
 8002308:	24000008 	.word	0x24000008

0800230c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	@ 0x24
 8002310:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002312:	4bb3      	ldr	r3, [pc, #716]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800231a:	2b18      	cmp	r3, #24
 800231c:	f200 8155 	bhi.w	80025ca <HAL_RCC_GetSysClockFreq+0x2be>
 8002320:	a201      	add	r2, pc, #4	@ (adr r2, 8002328 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	0800238d 	.word	0x0800238d
 800232c:	080025cb 	.word	0x080025cb
 8002330:	080025cb 	.word	0x080025cb
 8002334:	080025cb 	.word	0x080025cb
 8002338:	080025cb 	.word	0x080025cb
 800233c:	080025cb 	.word	0x080025cb
 8002340:	080025cb 	.word	0x080025cb
 8002344:	080025cb 	.word	0x080025cb
 8002348:	080023b3 	.word	0x080023b3
 800234c:	080025cb 	.word	0x080025cb
 8002350:	080025cb 	.word	0x080025cb
 8002354:	080025cb 	.word	0x080025cb
 8002358:	080025cb 	.word	0x080025cb
 800235c:	080025cb 	.word	0x080025cb
 8002360:	080025cb 	.word	0x080025cb
 8002364:	080025cb 	.word	0x080025cb
 8002368:	080023b9 	.word	0x080023b9
 800236c:	080025cb 	.word	0x080025cb
 8002370:	080025cb 	.word	0x080025cb
 8002374:	080025cb 	.word	0x080025cb
 8002378:	080025cb 	.word	0x080025cb
 800237c:	080025cb 	.word	0x080025cb
 8002380:	080025cb 	.word	0x080025cb
 8002384:	080025cb 	.word	0x080025cb
 8002388:	080023bf 	.word	0x080023bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800238c:	4b94      	ldr	r3, [pc, #592]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0320 	and.w	r3, r3, #32
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002398:	4b91      	ldr	r3, [pc, #580]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	08db      	lsrs	r3, r3, #3
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	4a90      	ldr	r2, [pc, #576]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
 80023a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80023aa:	e111      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023ac:	4b8d      	ldr	r3, [pc, #564]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023ae:	61bb      	str	r3, [r7, #24]
      break;
 80023b0:	e10e      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80023b2:	4b8d      	ldr	r3, [pc, #564]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023b4:	61bb      	str	r3, [r7, #24]
      break;
 80023b6:	e10b      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80023b8:	4b8c      	ldr	r3, [pc, #560]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023ba:	61bb      	str	r3, [r7, #24]
      break;
 80023bc:	e108      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023be:	4b88      	ldr	r3, [pc, #544]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80023c8:	4b85      	ldr	r3, [pc, #532]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023d4:	4b82      	ldr	r3, [pc, #520]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80023de:	4b80      	ldr	r3, [pc, #512]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023e2:	08db      	lsrs	r3, r3, #3
 80023e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80e1 	beq.w	80025c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2b02      	cmp	r3, #2
 8002406:	f000 8083 	beq.w	8002510 <HAL_RCC_GetSysClockFreq+0x204>
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b02      	cmp	r3, #2
 800240e:	f200 80a1 	bhi.w	8002554 <HAL_RCC_GetSysClockFreq+0x248>
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0x114>
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d056      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800241e:	e099      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002420:	4b6f      	ldr	r3, [pc, #444]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d02d      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800242c:	4b6c      	ldr	r3, [pc, #432]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	08db      	lsrs	r3, r3, #3
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	4a6b      	ldr	r2, [pc, #428]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
 800243c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	ee07 3a90 	vmov	s15, r3
 8002444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002456:	4b62      	ldr	r3, [pc, #392]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245e:	ee07 3a90 	vmov	s15, r3
 8002462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002466:	ed97 6a02 	vldr	s12, [r7, #8]
 800246a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80025f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800246e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800247a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800247e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002482:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002486:	e087      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002492:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80025f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800249a:	4b51      	ldr	r3, [pc, #324]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80025f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024ca:	e065      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80025f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024de:	4b40      	ldr	r3, [pc, #256]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80024f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80025f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800250e:	e043      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80025fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800251e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002522:	4b2f      	ldr	r3, [pc, #188]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252a:	ee07 3a90 	vmov	s15, r3
 800252e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002532:	ed97 6a02 	vldr	s12, [r7, #8]
 8002536:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80025f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800253a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800253e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800254a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002552:	e021      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800255e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80025f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002566:	4b1e      	ldr	r3, [pc, #120]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002576:	ed97 6a02 	vldr	s12, [r7, #8]
 800257a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80025f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800257e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800258a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800258e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002592:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002596:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002598:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259c:	0a5b      	lsrs	r3, r3, #9
 800259e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025a2:	3301      	adds	r3, #1
 80025a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	ee07 3a90 	vmov	s15, r3
 80025ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80025b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025bc:	ee17 3a90 	vmov	r3, s15
 80025c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80025c2:	e005      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
      break;
 80025c8:	e002      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80025ca:	4b07      	ldr	r3, [pc, #28]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025cc:	61bb      	str	r3, [r7, #24]
      break;
 80025ce:	bf00      	nop
  }

  return sysclockfreq;
 80025d0:	69bb      	ldr	r3, [r7, #24]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	@ 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	58024400 	.word	0x58024400
 80025e4:	03d09000 	.word	0x03d09000
 80025e8:	003d0900 	.word	0x003d0900
 80025ec:	017d7840 	.word	0x017d7840
 80025f0:	46000000 	.word	0x46000000
 80025f4:	4c742400 	.word	0x4c742400
 80025f8:	4a742400 	.word	0x4a742400
 80025fc:	4bbebc20 	.word	0x4bbebc20

08002600 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	601a      	str	r2, [r3, #0]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	601a      	str	r2, [r3, #0]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8002660:	6839      	ldr	r1, [r7, #0]
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ffdd 	bl	8002622 <metal_list_add_before>
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6852      	ldr	r2, [r2, #4]
 8002680:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 80026b0:	6839      	ldr	r1, [r7, #0]
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f002 f848 	bl	8004748 <metal_machine_cache_flush>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 80026ca:	6839      	ldr	r1, [r7, #0]
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f002 f846 	bl	800475e <metal_machine_cache_invalidate>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 80026e4:	6839      	ldr	r1, [r7, #0]
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffdd 	bl	80026a6 <__metal_cache_flush>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 80026fe:	6839      	ldr	r1, [r7, #0]
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ffdd 	bl	80026c0 <__metal_cache_invalidate>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <metal_bus_register+0x20>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d004      	beq.n	8002730 <metal_bus_register+0x20>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <metal_bus_register+0x26>
		return -EINVAL;
 8002730:	f06f 0315 	mvn.w	r3, #21
 8002734:	e026      	b.n	8002784 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f855 	bl	80027ec <metal_bus_find>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <metal_bus_register+0x3e>
		return -EEXIST;
 8002748:	f06f 0310 	mvn.w	r3, #16
 800274c:	e01a      	b.n	8002784 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	331c      	adds	r3, #28
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff ff54 	bl	8002600 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3324      	adds	r3, #36	@ 0x24
 800275c:	4619      	mov	r1, r3
 800275e:	480b      	ldr	r0, [pc, #44]	@ (800278c <metal_bus_register+0x7c>)
 8002760:	f7ff ff79 	bl	8002656 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8002764:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <metal_bus_register+0x80>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b06      	cmp	r3, #6
 800276a:	d90a      	bls.n	8002782 <metal_bus_register+0x72>
 800276c:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <metal_bus_register+0x80>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d006      	beq.n	8002782 <metal_bus_register+0x72>
 8002774:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <metal_bus_register+0x80>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	4905      	ldr	r1, [pc, #20]	@ (8002794 <metal_bus_register+0x84>)
 800277e:	2007      	movs	r0, #7
 8002780:	4798      	blx	r3
	return 0;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	24000190 	.word	0x24000190
 8002790:	24000188 	.word	0x24000188
 8002794:	08006388 	.word	0x08006388

08002798 <metal_bus_unregister>:

int metal_bus_unregister(struct metal_bus *bus)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	metal_list_del(&bus->node);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3324      	adds	r3, #36	@ 0x24
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff63 	bl	8002670 <metal_list_del>
	if (bus->ops.bus_close)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <metal_bus_unregister+0x22>
		bus->ops.bus_close(bus);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
 80027ba:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <metal_bus_unregister+0x4c>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d90a      	bls.n	80027d8 <metal_bus_unregister+0x40>
 80027c2:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <metal_bus_unregister+0x4c>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d006      	beq.n	80027d8 <metal_bus_unregister+0x40>
 80027ca:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <metal_bus_unregister+0x4c>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	4905      	ldr	r1, [pc, #20]	@ (80027e8 <metal_bus_unregister+0x50>)
 80027d4:	2007      	movs	r0, #7
 80027d6:	4798      	blx	r3
	return 0;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	24000188 	.word	0x24000188
 80027e8:	0800639c 	.word	0x0800639c

080027ec <metal_bus_find>:

int metal_bus_find(const char *name, struct metal_bus **result)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 80027f6:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <metal_bus_find+0x58>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	e017      	b.n	800282e <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	3b24      	subs	r3, #36	@ 0x24
 8002802:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fd fd68 	bl	80002e0 <strcmp>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d107      	bne.n	8002826 <metal_bus_find+0x3a>
			continue;
		if (result)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <metal_bus_find+0x36>
			*result = bus;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	601a      	str	r2, [r3, #0]
		return 0;
 8002822:	2300      	movs	r3, #0
 8002824:	e009      	b.n	800283a <metal_bus_find+0x4e>
			continue;
 8002826:	bf00      	nop
	metal_list_for_each(&_metal.common.bus_list, node) {
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4a05      	ldr	r2, [pc, #20]	@ (8002848 <metal_bus_find+0x5c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d1e3      	bne.n	80027fe <metal_bus_find+0x12>
	}
	return -ENOENT;
 8002836:	f06f 0301 	mvn.w	r3, #1
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	24000188 	.word	0x24000188
 8002848:	24000190 	.word	0x24000190

0800284c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <metal_device_open+0x2e>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <metal_device_open+0x2e>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <metal_device_open+0x2e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 800287a:	f06f 0315 	mvn.w	r3, #21
 800287e:	e01f      	b.n	80028c0 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	4619      	mov	r1, r3
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7ff ffb0 	bl	80027ec <metal_bus_find>
 800288c:	6178      	str	r0, [r7, #20]
	if (error)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <metal_device_open+0x4c>
		return error;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	e013      	b.n	80028c0 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <metal_device_open+0x5a>
		return -ENODEV;
 80028a0:	f06f 0312 	mvn.w	r3, #18
 80028a4:	e00c      	b.n	80028c0 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	6938      	ldr	r0, [r7, #16]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	4798      	blx	r3
 80028b2:	6178      	str	r0, [r7, #20]
	if (error)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <metal_device_open+0x72>
		return error;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	e000      	b.n	80028c0 <metal_device_open+0x74>

	return 0;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <metal_register_generic_device+0x22>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d902      	bls.n	80028f0 <metal_register_generic_device+0x28>
		return -EINVAL;
 80028ea:	f06f 0315 	mvn.w	r3, #21
 80028ee:	e009      	b.n	8002904 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a06      	ldr	r2, [pc, #24]	@ (800290c <metal_register_generic_device+0x44>)
 80028f4:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	336c      	adds	r3, #108	@ 0x6c
 80028fa:	4619      	mov	r1, r3
 80028fc:	4804      	ldr	r0, [pc, #16]	@ (8002910 <metal_register_generic_device+0x48>)
 80028fe:	f7ff feaa 	bl	8002656 <metal_list_add_tail>
			    &device->node);
	return 0;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	24000010 	.word	0x24000010
 8002910:	240001a0 	.word	0x240001a0

08002914 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8002920:	4b12      	ldr	r3, [pc, #72]	@ (800296c <metal_generic_dev_open+0x58>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	e017      	b.n	8002958 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	3b6c      	subs	r3, #108	@ 0x6c
 800292c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fcd3 	bl	80002e0 <strcmp>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d107      	bne.n	8002950 <metal_generic_dev_open+0x3c>
			continue;
		*device = dev;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8002946:	6938      	ldr	r0, [r7, #16]
 8002948:	f000 f890 	bl	8002a6c <metal_generic_dev_sys_open>
 800294c:	4603      	mov	r3, r0
 800294e:	e009      	b.n	8002964 <metal_generic_dev_open+0x50>
			continue;
 8002950:	bf00      	nop
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	4a05      	ldr	r2, [pc, #20]	@ (8002970 <metal_generic_dev_open+0x5c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d1e3      	bne.n	8002928 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8002960:	f06f 0312 	mvn.w	r3, #18
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	24000188 	.word	0x24000188
 8002970:	240001a0 	.word	0x240001a0

08002974 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8002982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d009      	beq.n	800299e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 800298a:	6a3a      	ldr	r2, [r7, #32]
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	461a      	mov	r2, r3
 8002996:	6839      	ldr	r1, [r7, #0]
 8002998:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800299a:	f002 ffaa 	bl	80058f2 <memcpy>
	for (i = 0; i < nents_in; i++) {
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	e02f      	b.n	8002a04 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d114      	bne.n	80029d4 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	461a      	mov	r2, r3
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	4413      	add	r3, r2
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	461a      	mov	r2, r3
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	4413      	add	r3, r2
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	4619      	mov	r1, r3
 80029d0:	f7ff fe83 	bl	80026da <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	461a      	mov	r2, r3
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	4413      	add	r3, r2
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	461a      	mov	r2, r3
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	4413      	add	r3, r2
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4619      	mov	r1, r3
 80029fa:	f7ff fe7b 	bl	80026f4 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3301      	adds	r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	dbcb      	blt.n	80029a4 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e017      	b.n	8002a5a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	461a      	mov	r2, r3
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	4413      	add	r3, r2
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	461a      	mov	r2, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f7ff fe50 	bl	80026f4 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	3301      	adds	r3, #1
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	dbe3      	blt.n	8002a2a <metal_generic_dev_dma_unmap+0x14>
	}
}
 8002a62:	bf00      	nop
 8002a64:	bf00      	nop
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	e013      	b.n	8002aa2 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	3308      	adds	r3, #8
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8002a96:	68b8      	ldr	r0, [r7, #8]
 8002a98:	f000 f828 	bl	8002aec <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d3e6      	bcc.n	8002a7a <metal_generic_dev_sys_open+0xe>
 8002aac:	e000      	b.n	8002ab0 <metal_generic_dev_sys_open+0x44>
			break;
 8002aae:	bf00      	nop
	}

	return 0;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8002ac4:	4803      	ldr	r0, [pc, #12]	@ (8002ad4 <metal_sys_init+0x18>)
 8002ac6:	f7ff fe23 	bl	8002710 <metal_bus_register>
	return 0;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	24000010 	.word	0x24000010

08002ad8 <metal_sys_finish>:

void metal_sys_finish(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	metal_bus_unregister(&metal_generic_bus);
 8002adc:	4802      	ldr	r0, [pc, #8]	@ (8002ae8 <metal_sys_finish+0x10>)
 8002ade:	f7ff fe5b 	bl	8002798 <metal_bus_unregister>
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	24000010 	.word	0x24000010

08002aec <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	613b      	str	r3, [r7, #16]
	if (psize) {
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d02c      	beq.n	8002b60 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	e013      	b.n	8002b4e <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f001 fe1b 	bl	8004774 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4413      	add	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d9e2      	bls.n	8002b26 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8002b60:	bf00      	nop
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <metal_list_init>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	601a      	str	r2, [r3, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	int error = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8002b98:	2220      	movs	r2, #32
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4810      	ldr	r0, [pc, #64]	@ (8002be0 <metal_init+0x54>)
 8002b9e:	f002 fdf8 	bl	8005792 <memset>

	_metal.common.log_handler   = params->log_handler;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8002be0 <metal_init+0x54>)
 8002ba8:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	791a      	ldrb	r2, [r3, #4]
 8002bae:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <metal_init+0x54>)
 8002bb0:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8002bb2:	480c      	ldr	r0, [pc, #48]	@ (8002be4 <metal_init+0x58>)
 8002bb4:	f7ff ffd8 	bl	8002b68 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8002bb8:	480b      	ldr	r0, [pc, #44]	@ (8002be8 <metal_init+0x5c>)
 8002bba:	f7ff ffd5 	bl	8002b68 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8002bbe:	480b      	ldr	r0, [pc, #44]	@ (8002bec <metal_init+0x60>)
 8002bc0:	f7ff ffd2 	bl	8002b68 <metal_list_init>

	error = metal_sys_init(params);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff ff79 	bl	8002abc <metal_sys_init>
 8002bca:	60f8      	str	r0, [r7, #12]
	if (error)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <metal_init+0x4a>
		return error;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	e000      	b.n	8002bd8 <metal_init+0x4c>

	return error;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	24000188 	.word	0x24000188
 8002be4:	24000190 	.word	0x24000190
 8002be8:	24000198 	.word	0x24000198
 8002bec:	240001a0 	.word	0x240001a0

08002bf0 <metal_finish>:

void metal_finish(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	metal_sys_finish();
 8002bf4:	f7ff ff70 	bl	8002ad8 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4802      	ldr	r0, [pc, #8]	@ (8002c08 <metal_finish+0x18>)
 8002bfe:	f002 fdc8 	bl	8005792 <memset>
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	24000188 	.word	0x24000188

08002c0c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d009      	beq.n	8002c34 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d804      	bhi.n	8002c34 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	e000      	b.n	8002c36 <metal_io_virt+0x2a>
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8002c42:	b5b0      	push	{r4, r5, r7, lr}
 8002c44:	b08a      	sub	sp, #40	@ 0x28
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
 8002c60:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	605a      	str	r2, [r3, #4]
	io->size = size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c78:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7c:	2b1f      	cmp	r3, #31
 8002c7e:	d904      	bls.n	8002c8a <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f04f 32ff 	mov.w	r2, #4294967295
 8002c86:	611a      	str	r2, [r3, #16]
 8002c88:	e006      	b.n	8002c98 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	1e5a      	subs	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c9c:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8002c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00b      	beq.n	8002cbc <metal_io_init+0x7a>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ca8:	f103 0418 	add.w	r4, r3, #24
 8002cac:	4615      	mov	r5, r2
 8002cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002cb6:	e884 0003 	stmia.w	r4, {r0, r1}
 8002cba:	e00a      	b.n	8002cd2 <metal_io_init+0x90>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f103 0418 	add.w	r4, r3, #24
 8002cc2:	f107 0510 	add.w	r5, r7, #16
 8002cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002cce:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7ff ff0a 	bl	8002aec <metal_sys_io_mem_map>
}
 8002cd8:	bf00      	nop
 8002cda:	3728      	adds	r7, #40	@ 0x28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bdb0      	pop	{r4, r5, r7, pc}

08002ce0 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b08b      	sub	sp, #44	@ 0x2c
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7ff ff8b 	bl	8002c0c <metal_io_virt>
 8002cf6:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d902      	bls.n	8002d0c <metal_io_block_read+0x2c>
		return -ERANGE;
 8002d06:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8002d0a:	e05c      	b.n	8002dc6 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	441a      	add	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d904      	bls.n	8002d24 <metal_io_block_read+0x44>
		len = io->size - offset;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	603b      	str	r3, [r7, #0]
	retlen = len;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a1c      	ldr	r4, [r3, #32]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	2305      	movs	r3, #5
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	47a0      	blx	r4
 8002d42:	6178      	str	r0, [r7, #20]
 8002d44:	e03e      	b.n	8002dc4 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8002d46:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8002d4a:	e00c      	b.n	8002d66 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	701a      	strb	r2, [r3, #0]
			dest++;
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	3301      	adds	r3, #1
 8002d58:	61bb      	str	r3, [r7, #24]
			ptr++;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	61fb      	str	r3, [r7, #28]
			len--;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	603b      	str	r3, [r7, #0]
		while ( len && (
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d017      	beq.n	8002d9c <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1ea      	bne.n	8002d4c <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e5      	bne.n	8002d4c <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8002d80:	e00c      	b.n	8002d9c <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	3304      	adds	r3, #4
 8002d94:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	3b04      	subs	r3, #4
 8002d9a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	dcef      	bgt.n	8002d82 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8002da2:	e00c      	b.n	8002dbe <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	3301      	adds	r3, #1
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3301      	adds	r3, #1
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ef      	bne.n	8002da4 <metal_io_block_read+0xc4>
	}
	return retlen;
 8002dc4:	697b      	ldr	r3, [r7, #20]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3724      	adds	r7, #36	@ 0x24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd90      	pop	{r4, r7, pc}

08002dce <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8002dce:	b590      	push	{r4, r7, lr}
 8002dd0:	b08b      	sub	sp, #44	@ 0x2c
 8002dd2:	af02      	add	r7, sp, #8
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7ff ff14 	bl	8002c0c <metal_io_virt>
 8002de4:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d902      	bls.n	8002dfa <metal_io_block_write+0x2c>
		return -ERANGE;
 8002df4:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8002df8:	e05b      	b.n	8002eb2 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	441a      	add	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d904      	bls.n	8002e12 <metal_io_block_write+0x44>
		len = io->size - offset;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	603b      	str	r3, [r7, #0]
	retlen = len;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d017      	beq.n	8002e4e <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	2305      	movs	r3, #5
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	47a0      	blx	r4
 8002e30:	6178      	str	r0, [r7, #20]
 8002e32:	e03d      	b.n	8002eb0 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	701a      	strb	r2, [r3, #0]
			ptr++;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	61fb      	str	r3, [r7, #28]
			source++;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	3301      	adds	r3, #1
 8002e46:	61bb      	str	r3, [r7, #24]
			len--;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	603b      	str	r3, [r7, #0]
		while ( len && (
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d017      	beq.n	8002e84 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1ea      	bne.n	8002e34 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e5      	bne.n	8002e34 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8002e68:	e00c      	b.n	8002e84 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3304      	adds	r3, #4
 8002e76:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	3b04      	subs	r3, #4
 8002e82:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	dcef      	bgt.n	8002e6a <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8002e8a:	e00c      	b.n	8002ea6 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	3301      	adds	r3, #1
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1ef      	bne.n	8002e8c <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8002eac:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8002eb0:	697b      	ldr	r3, [r7, #20]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	@ 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd90      	pop	{r4, r7, pc}

08002eba <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 8002eba:	b590      	push	{r4, r7, lr}
 8002ebc:	b08b      	sub	sp, #44	@ 0x2c
 8002ebe:	af02      	add	r7, sp, #8
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f7ff fe9d 	bl	8002c0c <metal_io_virt>
 8002ed2:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d902      	bls.n	8002ee8 <metal_io_block_set+0x2e>
		return -ERANGE;
 8002ee2:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8002ee6:	e05d      	b.n	8002fa4 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	441a      	add	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d904      	bls.n	8002f00 <metal_io_block_set+0x46>
		len = io->size - offset;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	603b      	str	r3, [r7, #0]
	retlen = len;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d009      	beq.n	8002f20 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8002f10:	79fa      	ldrb	r2, [r7, #7]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	2305      	movs	r3, #5
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	47a0      	blx	r4
 8002f1e:	e040      	b.n	8002fa2 <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8002f24:	2301      	movs	r3, #1
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	e00a      	b.n	8002f40 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 8002f2a:	79fa      	ldrb	r2, [r7, #7]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d9f1      	bls.n	8002f2a <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8002f46:	e008      	b.n	8002f5a <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	79fa      	ldrb	r2, [r7, #7]
 8002f4c:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3301      	adds	r3, #1
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	603b      	str	r3, [r7, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00e      	beq.n	8002f7e <metal_io_block_set+0xc4>
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1ee      	bne.n	8002f48 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8002f6a:	e008      	b.n	8002f7e <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3304      	adds	r3, #4
 8002f76:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	3b04      	subs	r3, #4
 8002f7c:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	dcf3      	bgt.n	8002f6c <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 8002f84:	e008      	b.n	8002f98 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	79fa      	ldrb	r2, [r7, #7]
 8002f8a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f3      	bne.n	8002f86 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 8002f9e:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8002fa2:	693b      	ldr	r3, [r7, #16]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3724      	adds	r7, #36	@ 0x24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd90      	pop	{r4, r7, pc}

08002fac <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8002fac:	b40e      	push	{r1, r2, r3}
 8002fae:	b480      	push	{r7}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	b003      	add	sp, #12
 8002fc4:	4770      	bx	lr

08002fc6 <metal_io_virt>:
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d009      	beq.n	8002fee <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d804      	bhi.n	8002fee <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4413      	add	r3, r2
 8002fec:	e000      	b.n	8002ff0 <metal_io_virt+0x2a>
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	429a      	cmp	r2, r3
 8003018:	d201      	bcs.n	800301e <metal_io_virt_to_offset+0x22>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	e001      	b.n	8003022 <metal_io_virt_to_offset+0x26>
 800301e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	b08c      	sub	sp, #48	@ 0x30
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7ff ffbf 	bl	8002fc6 <metal_io_virt>
 8003048:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	699c      	ldr	r4, [r3, #24]
 8003056:	79fa      	ldrb	r2, [r7, #7]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	47a0      	blx	r4
 8003060:	4604      	mov	r4, r0
 8003062:	460d      	mov	r5, r1
 8003064:	e059      	b.n	800311a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 8003066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d012      	beq.n	8003092 <metal_io_read+0x62>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d10f      	bne.n	8003092 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8003072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003074:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003078:	f3bf 8f5b 	dmb	ish
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	f3bf 8f5b 	dmb	ish
 8003082:	b2db      	uxtb	r3, r3
 8003084:	76fb      	strb	r3, [r7, #27]
 8003086:	7efb      	ldrb	r3, [r7, #27]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2200      	movs	r2, #0
 800308c:	461c      	mov	r4, r3
 800308e:	4615      	mov	r5, r2
 8003090:	e043      	b.n	800311a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 8003092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d012      	beq.n	80030be <metal_io_read+0x8e>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d10f      	bne.n	80030be <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 800309e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	f3bf 8f5b 	dmb	ish
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	f3bf 8f5b 	dmb	ish
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	833b      	strh	r3, [r7, #24]
 80030b2:	8b3b      	ldrh	r3, [r7, #24]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2200      	movs	r2, #0
 80030b8:	461c      	mov	r4, r3
 80030ba:	4615      	mov	r5, r2
 80030bc:	e02d      	b.n	800311a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 80030be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d010      	beq.n	80030e6 <metal_io_read+0xb6>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d10d      	bne.n	80030e6 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 80030ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030cc:	623b      	str	r3, [r7, #32]
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	f3bf 8f5b 	dmb	ish
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f3bf 8f5b 	dmb	ish
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2200      	movs	r2, #0
 80030e0:	461c      	mov	r4, r3
 80030e2:	4615      	mov	r5, r2
 80030e4:	e019      	b.n	800311a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 80030e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d010      	beq.n	800310e <metal_io_read+0xde>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d10d      	bne.n	800310e <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 80030f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f3bf 8f5b 	dmb	ish
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f3bf 8f5b 	dmb	ish
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2200      	movs	r2, #0
 8003108:	461c      	mov	r4, r3
 800310a:	4615      	mov	r5, r2
 800310c:	e005      	b.n	800311a <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 800310e:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <metal_io_read+0xf8>)
 8003110:	4a06      	ldr	r2, [pc, #24]	@ (800312c <metal_io_read+0xfc>)
 8003112:	21f0      	movs	r1, #240	@ 0xf0
 8003114:	4806      	ldr	r0, [pc, #24]	@ (8003130 <metal_io_read+0x100>)
 8003116:	f002 f949 	bl	80053ac <__assert_func>
	return 0; /* quiet compiler */
}
 800311a:	4622      	mov	r2, r4
 800311c:	462b      	mov	r3, r5
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	3730      	adds	r7, #48	@ 0x30
 8003124:	46bd      	mov	sp, r7
 8003126:	bdb0      	pop	{r4, r5, r7, pc}
 8003128:	08006454 	.word	0x08006454
 800312c:	080065dc 	.word	0x080065dc
 8003130:	08006458 	.word	0x08006458

08003134 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b08f      	sub	sp, #60	@ 0x3c
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f7ff ff3e 	bl	8002fc6 <metal_io_virt>
 800314a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (io->ops.write)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00c      	beq.n	800316e <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	69dc      	ldr	r4, [r3, #28]
 8003158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 800316c:	e04e      	b.n	800320c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 800316e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00e      	beq.n	8003192 <metal_io_write+0x5e>
 8003174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10b      	bne.n	8003192 <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 800317a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800317e:	783b      	ldrb	r3, [r7, #0]
 8003180:	76fb      	strb	r3, [r7, #27]
 8003182:	7efa      	ldrb	r2, [r7, #27]
 8003184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003186:	f3bf 8f5b 	dmb	ish
 800318a:	701a      	strb	r2, [r3, #0]
 800318c:	f3bf 8f5b 	dmb	ish
 8003190:	e03c      	b.n	800320c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 8003192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00e      	beq.n	80031b6 <metal_io_write+0x82>
 8003198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800319a:	2b02      	cmp	r3, #2
 800319c:	d10b      	bne.n	80031b6 <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 800319e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a2:	883b      	ldrh	r3, [r7, #0]
 80031a4:	833b      	strh	r3, [r7, #24]
 80031a6:	8b3a      	ldrh	r2, [r7, #24]
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	f3bf 8f5b 	dmb	ish
 80031ae:	801a      	strh	r2, [r3, #0]
 80031b0:	f3bf 8f5b 	dmb	ish
 80031b4:	e02a      	b.n	800320c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 80031b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00e      	beq.n	80031da <metal_io_write+0xa6>
 80031bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d10b      	bne.n	80031da <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 80031c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c4:	623b      	str	r3, [r7, #32]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	f3bf 8f5b 	dmb	ish
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	f3bf 8f5b 	dmb	ish
 80031d8:	e018      	b.n	800320c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 80031da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00e      	beq.n	80031fe <metal_io_write+0xca>
 80031e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d10b      	bne.n	80031fe <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 80031e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e8:	61fb      	str	r3, [r7, #28]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f3bf 8f5b 	dmb	ish
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f3bf 8f5b 	dmb	ish
 80031fc:	e006      	b.n	800320c <metal_io_write+0xd8>
		metal_assert (0);
 80031fe:	4b05      	ldr	r3, [pc, #20]	@ (8003214 <metal_io_write+0xe0>)
 8003200:	4a05      	ldr	r2, [pc, #20]	@ (8003218 <metal_io_write+0xe4>)
 8003202:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8003206:	4805      	ldr	r0, [pc, #20]	@ (800321c <metal_io_write+0xe8>)
 8003208:	f002 f8d0 	bl	80053ac <__assert_func>
}
 800320c:	bf00      	nop
 800320e:	3734      	adds	r7, #52	@ 0x34
 8003210:	46bd      	mov	sp, r7
 8003212:	bd90      	pop	{r4, r7, pc}
 8003214:	08006454 	.word	0x08006454
 8003218:	080065ec 	.word	0x080065ec
 800321c:	08006458 	.word	0x08006458

08003220 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f002 f8dd 	bl	80053e8 <malloc>
 800322e:	4603      	mov	r3, r0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	free(ptr);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f002 f8d9 	bl	80053f8 <free>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3307      	adds	r3, #7
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff ffde 	bl	8003220 <metal_allocate_memory>
 8003264:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	2100      	movs	r1, #0
 8003270:	68b8      	ldr	r0, [r7, #8]
 8003272:	f002 fa8e 	bl	8005792 <memset>
	}

	return vqs;
 8003276:	68bb      	ldr	r3, [r7, #8]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	891b      	ldrh	r3, [r3, #8]
 800328c:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	3b18      	subs	r3, #24
 8003298:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d905      	bls.n	80032b0 <rproc_virtio_virtqueue_notify+0x30>
 80032a4:	4b0d      	ldr	r3, [pc, #52]	@ (80032dc <rproc_virtio_virtqueue_notify+0x5c>)
 80032a6:	4a0e      	ldr	r2, [pc, #56]	@ (80032e0 <rproc_virtio_virtqueue_notify+0x60>)
 80032a8:	2133      	movs	r1, #51	@ 0x33
 80032aa:	480e      	ldr	r0, [pc, #56]	@ (80032e4 <rproc_virtio_virtqueue_notify+0x64>)
 80032ac:	f002 f87e 	bl	80053ac <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	440b      	add	r3, r1
 80032c0:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	6810      	ldr	r0, [r2, #0]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	6912      	ldr	r2, [r2, #16]
 80032ce:	4611      	mov	r1, r2
 80032d0:	4798      	blx	r3
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	080064a0 	.word	0x080064a0
 80032e0:	080065bc 	.word	0x080065bc
 80032e4:	080064bc 	.word	0x080064bc

080032e8 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b18      	subs	r3, #24
 80032f4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	3318      	adds	r3, #24
 8003306:	4619      	mov	r1, r3
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f7ff fe77 	bl	8002ffc <metal_io_virt_to_offset>
 800330e:	4601      	mov	r1, r0
 8003310:	2301      	movs	r3, #1
 8003312:	2205      	movs	r2, #5
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f7ff fe8b 	bl	8003030 <metal_io_read>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4613      	mov	r3, r2
 8003320:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8003322:	7afb      	ldrb	r3, [r7, #11]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 800332c:	b5b0      	push	{r4, r5, r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af02      	add	r7, sp, #8
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b18      	subs	r3, #24
 800333c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	3318      	adds	r3, #24
 800334e:	4619      	mov	r1, r3
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7ff fe53 	bl	8002ffc <metal_io_virt_to_offset>
 8003356:	4601      	mov	r1, r0
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	2200      	movs	r2, #0
 800335c:	461c      	mov	r4, r3
 800335e:	4615      	mov	r5, r2
 8003360:	2301      	movs	r3, #1
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	2305      	movs	r3, #5
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	4622      	mov	r2, r4
 800336a:	462b      	mov	r3, r5
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f7ff fee1 	bl	8003134 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	6810      	ldr	r0, [r2, #0]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	4611      	mov	r1, r2
 8003380:	4798      	blx	r3
}
 8003382:	bf00      	nop
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bdb0      	pop	{r4, r5, r7, pc}

0800338a <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3b18      	subs	r3, #24
 8003396:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	330c      	adds	r3, #12
 80033a8:	4619      	mov	r1, r3
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f7ff fe26 	bl	8002ffc <metal_io_virt_to_offset>
 80033b0:	4601      	mov	r1, r0
 80033b2:	2304      	movs	r3, #4
 80033b4:	2205      	movs	r2, #5
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f7ff fe3a 	bl	8003030 <metal_io_read>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4613      	mov	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 80033c4:	68bb      	ldr	r3, [r7, #8]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 80033ce:	b5b0      	push	{r4, r5, r7, lr}
 80033d0:	b088      	sub	sp, #32
 80033d2:	af02      	add	r7, sp, #8
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3b18      	subs	r3, #24
 80033dc:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	330c      	adds	r3, #12
 80033ee:	4619      	mov	r1, r3
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f7ff fe03 	bl	8002ffc <metal_io_virt_to_offset>
 80033f6:	4601      	mov	r1, r0
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2200      	movs	r2, #0
 80033fc:	461c      	mov	r4, r3
 80033fe:	4615      	mov	r5, r2
 8003400:	2304      	movs	r3, #4
 8003402:	9301      	str	r3, [sp, #4]
 8003404:	2305      	movs	r3, #5
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	4622      	mov	r2, r4
 800340a:	462b      	mov	r3, r5
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7ff fe91 	bl	8003134 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	6810      	ldr	r0, [r2, #0]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	4611      	mov	r1, r2
 8003420:	4798      	blx	r3
}
 8003422:	bf00      	nop
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bdb0      	pop	{r4, r5, r7, pc}

0800342a <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d103      	bne.n	800348e <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 8003486:	2140      	movs	r1, #64	@ 0x40
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ff4f 	bl	800332c <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08e      	sub	sp, #56	@ 0x38
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 80034aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ac:	7e5b      	ldrb	r3, [r3, #25]
 80034ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 80034b0:	2050      	movs	r0, #80	@ 0x50
 80034b2:	f7ff feb5 	bl	8003220 <metal_allocate_memory>
 80034b6:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
 80034b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	e092      	b.n	80035e8 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 80034c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034c4:	4613      	mov	r3, r2
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fea7 	bl	8003220 <metal_allocate_memory>
 80034d2:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8081 	beq.w	80035de <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 80034dc:	2250      	movs	r2, #80	@ 0x50
 80034de:	2100      	movs	r1, #0
 80034e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034e2:	f002 f956 	bl	8005792 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 80034e6:	2218      	movs	r2, #24
 80034e8:	2100      	movs	r1, #0
 80034ea:	6a38      	ldr	r0, [r7, #32]
 80034ec:	f002 f951 	bl	8005792 <memset>
	vdev = &rpvdev->vdev;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	3318      	adds	r3, #24
 80034f4:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 80034f6:	2300      	movs	r3, #0
 80034f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80034fa:	e025      	b.n	8003548 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8003500:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	3318      	adds	r3, #24
 800350c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800350e:	4413      	add	r3, r2
 8003510:	3304      	adds	r3, #4
 8003512:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8003520:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003522:	f7ff fe94 	bl	800324e <virtqueue_allocate>
 8003526:	6178      	str	r0, [r7, #20]
		if (!vq)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d031      	beq.n	8003592 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 800352e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003530:	4613      	mov	r3, r2
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	4413      	add	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	461a      	mov	r2, r3
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	4413      	add	r3, r2
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 8003542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003544:	3301      	adds	r3, #1
 8003546:	637b      	str	r3, [r7, #52]	@ 0x34
 8003548:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800354a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354c:	429a      	cmp	r2, r3
 800354e:	d3d5      	bcc.n	80034fc <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003554:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800355a:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	6a3a      	ldr	r2, [r7, #32]
 8003560:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003566:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800357e:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003584:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4a19      	ldr	r2, [pc, #100]	@ (80035f0 <rproc_virtio_create_vdev+0x158>)
 800358a:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	3318      	adds	r3, #24
 8003590:	e02a      	b.n	80035e8 <rproc_virtio_create_vdev+0x150>
			goto err1;
 8003592:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8003594:	2300      	movs	r3, #0
 8003596:	637b      	str	r3, [r7, #52]	@ 0x34
 8003598:	e019      	b.n	80035ce <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 800359a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800359c:	4613      	mov	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4413      	add	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	461a      	mov	r2, r3
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	4413      	add	r3, r2
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00b      	beq.n	80035c8 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 80035b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035b2:	4613      	mov	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	4413      	add	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	461a      	mov	r2, r3
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	4413      	add	r3, r2
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fe38 	bl	8003238 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 80035c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ca:	3301      	adds	r3, #1
 80035cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80035ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d3e1      	bcc.n	800359a <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 80035d6:	6a38      	ldr	r0, [r7, #32]
 80035d8:	f7ff fe2e 	bl	8003238 <metal_free_memory>
 80035dc:	e000      	b.n	80035e0 <rproc_virtio_create_vdev+0x148>
		goto err0;
 80035de:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 80035e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035e2:	f7ff fe29 	bl	8003238 <metal_free_memory>
	return NULL;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3738      	adds	r7, #56	@ 0x38
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	08006598 	.word	0x08006598

080035f4 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003606:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	429a      	cmp	r2, r3
 800360e:	d302      	bcc.n	8003616 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8003610:	f06f 0301 	mvn.w	r3, #1
 8003614:	e019      	b.n	800364a <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	440b      	add	r3, r1
 8003626:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	6a3a      	ldr	r2, [r7, #32]
 800362c:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	b29a      	uxth	r2, r3
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003646:	609a      	str	r2, [r3, #8]

	return 0;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b086      	sub	sp, #24
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d102      	bne.n	800366c <rproc_virtio_notified+0x16>
		return -EINVAL;
 8003666:	f06f 0315 	mvn.w	r3, #21
 800366a:	e02c      	b.n	80036c6 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d101      	bne.n	800367a <rproc_virtio_notified+0x24>
		return 0;
 8003676:	2300      	movs	r3, #0
 8003678:	e025      	b.n	80036c6 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	e01a      	b.n	80036bc <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	440b      	add	r3, r1
 8003696:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d003      	beq.n	80036aa <rproc_virtio_notified+0x54>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d105      	bne.n	80036b6 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 80036b0:	68b8      	ldr	r0, [r7, #8]
 80036b2:	f001 fbca 	bl	8004e4a <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	3301      	adds	r3, #1
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d3e0      	bcc.n	8003686 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fe02 	bl	80032e8 <rproc_virtio_get_status>
 80036e4:	4603      	mov	r3, r0
 80036e6:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d102      	bne.n	80036f8 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 80036f2:	e7f4      	b.n	80036de <rproc_virtio_wait_remote_ready+0x10>
		return;
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <rproc_virtio_wait_remote_ready+0x2c>
			return;
 80036f8:	bf00      	nop
	}
}
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8003708:	bf00      	nop
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	4611      	mov	r1, r2
 8003710:	f3bf 8f5b 	dmb	ish
 8003714:	e8d3 2f4f 	ldrexb	r2, [r3]
 8003718:	e8c3 1f40 	strexb	r0, r1, [r3]
 800371c:	2800      	cmp	r0, #0
 800371e:	d1f9      	bne.n	8003714 <__metal_mutex_acquire+0x14>
 8003720:	f3bf 8f5b 	dmb	ish
 8003724:	b2d3      	uxtb	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1ef      	bne.n	800370a <__metal_mutex_acquire+0xa>
		;
	}
}
 800372a:	bf00      	nop
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f3bf 8f5b 	dmb	ish
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
 800374a:	f3bf 8f5b 	dmb	ish
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ffcc 	bl	8003700 <__metal_mutex_acquire>
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ffdd 	bl	8003738 <__metal_mutex_release>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <metal_list_add_before>:
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	601a      	str	r2, [r3, #0]
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <metal_list_add_tail>:
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 80037c4:	6839      	ldr	r1, [r7, #0]
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff ffdd 	bl	8003786 <metal_list_add_before>
}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <metal_list_del>:
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6852      	ldr	r2, [r2, #4]
 80037e4:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	601a      	str	r2, [r3, #0]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	009a      	lsls	r2, r3, #2
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	440a      	add	r2, r1
 800381e:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	f002 021f 	and.w	r2, r2, #31
 8003826:	2001      	movs	r0, #1
 8003828:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4403      	add	r3, r0
 8003832:	430a      	orrs	r2, r1
 8003834:	601a      	str	r2, [r3, #0]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	4413      	add	r3, r2
 8003856:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2101      	movs	r1, #1
 8003860:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8003864:	4013      	ands	r3, r2
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	009a      	lsls	r2, r3, #2
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	440a      	add	r2, r1
 8003886:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	f002 021f 	and.w	r2, r2, #31
 800388e:	2001      	movs	r0, #1
 8003890:	fa00 f202 	lsl.w	r2, r0, r2
 8003894:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4403      	add	r3, r0
 800389c:	400a      	ands	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 80038b6:	6839      	ldr	r1, [r7, #0]
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ffc2 	bl	8003842 <metal_bitmap_is_bit_set>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e002      	b.n	80038ea <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3301      	adds	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d207      	bcs.n	8003902 <metal_bitmap_next_clear_bit+0x30>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	4619      	mov	r1, r3
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7ff ffd8 	bl	80038ac <metal_bitmap_is_bit_clear>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8003902:	697b      	ldr	r3, [r7, #20]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	4618      	mov	r0, r3
 8003922:	f001 ff50 	bl	80057c6 <strncpy>
	ept->addr = src;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800393e:	bf00      	nop
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
 8003954:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	2100      	movs	r1, #0
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ffb8 	bl	80038d2 <metal_bitmap_next_clear_bit>
 8003962:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	429a      	cmp	r2, r3
 800396a:	d206      	bcs.n	800397a <rpmsg_get_address+0x34>
		addr = nextbit;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff48 	bl	800380a <metal_bitmap_set_bit>
	}

	return addr;
 800397a:	68fb      	ldr	r3, [r7, #12]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	429a      	cmp	r2, r3
 8003996:	da03      	bge.n	80039a0 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff ff69 	bl	8003872 <metal_bitmap_clear_bit>
}
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
	if (addr < size)
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	da05      	bge.n	80039c8 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f7ff ff3f 	bl	8003842 <metal_bitmap_is_bit_set>
 80039c4:	4603      	mov	r3, r0
 80039c6:	e000      	b.n	80039ca <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 80039c8:	4b02      	ldr	r3, [pc, #8]	@ (80039d4 <rpmsg_is_address_set+0x2c>)
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	fffff82d 	.word	0xfffff82d

080039d8 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	da05      	bge.n	80039f8 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff ff0b 	bl	800380a <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e000      	b.n	80039fa <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 80039f8:	4b02      	ldr	r3, [pc, #8]	@ (8003a04 <rpmsg_set_address+0x2c>)
	}
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	fffff82d 	.word	0xfffff82d

08003a08 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8003a08:	b590      	push	{r4, r7, lr}
 8003a0a:	b089      	sub	sp, #36	@ 0x24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <rpmsg_send_offchannel_raw+0x2a>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d006      	beq.n	8003a32 <rpmsg_send_offchannel_raw+0x2a>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <rpmsg_send_offchannel_raw+0x2a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a30:	d101      	bne.n	8003a36 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8003a32:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <rpmsg_send_offchannel_raw+0x60>)
 8003a34:	e014      	b.n	8003a60 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00c      	beq.n	8003a5e <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8003a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	6978      	ldr	r0, [r7, #20]
 8003a58:	47a0      	blx	r4
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	e000      	b.n	8003a60 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8003a5e:	4b02      	ldr	r3, [pc, #8]	@ (8003a68 <rpmsg_send_offchannel_raw+0x60>)
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd90      	pop	{r4, r7, pc}
 8003a68:	fffff82d 	.word	0xfffff82d

08003a6c <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b090      	sub	sp, #64	@ 0x40
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	f107 030c 	add.w	r3, r7, #12
 8003a86:	2220      	movs	r2, #32
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f001 fe9c 	bl	80057c6 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003a92:	f107 030c 	add.w	r3, r7, #12
 8003a96:	2201      	movs	r2, #1
 8003a98:	9201      	str	r2, [sp, #4]
 8003a9a:	2228      	movs	r2, #40	@ 0x28
 8003a9c:	9200      	str	r2, [sp, #0]
 8003a9e:	2235      	movs	r2, #53	@ 0x35
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ffb1 	bl	8003a08 <rpmsg_send_offchannel_raw>
 8003aa6:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	da01      	bge.n	8003ab2 <rpmsg_send_ns_message+0x46>
		return ret;
 8003aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab0:	e000      	b.n	8003ab4 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3738      	adds	r7, #56	@ 0x38
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	e04b      	b.n	8003b6a <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3b34      	subs	r3, #52	@ 0x34
 8003ada:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d006      	beq.n	8003af2 <rpmsg_get_endpoint+0x36>
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d101      	bne.n	8003af2 <rpmsg_get_endpoint+0x36>
			return ept;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	e040      	b.n	8003b74 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d106      	bne.n	8003b0a <rpmsg_get_endpoint+0x4e>
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d101      	bne.n	8003b0a <rpmsg_get_endpoint+0x4e>
			return ept;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	e034      	b.n	8003b74 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00c      	beq.n	8003b2a <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2220      	movs	r2, #32
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 fe43 	bl	80057a2 <strncmp>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bf0c      	ite	eq
 8003b22:	2301      	moveq	r3, #1
 8003b24:	2300      	movne	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d018      	beq.n	8003b62 <rpmsg_get_endpoint+0xa6>
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d015      	beq.n	8003b62 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d006      	beq.n	8003b4c <rpmsg_get_endpoint+0x90>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d101      	bne.n	8003b4c <rpmsg_get_endpoint+0x90>
			return ept;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	e013      	b.n	8003b74 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d107      	bne.n	8003b64 <rpmsg_get_endpoint+0xa8>
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d102      	bne.n	8003b64 <rpmsg_get_endpoint+0xa8>
			return ept;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	e008      	b.n	8003b74 <rpmsg_get_endpoint+0xb8>
			continue;
 8003b62:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d1af      	bne.n	8003ad2 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3720      	adds	r7, #32
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d016      	beq.n	8003bb8 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d008      	beq.n	8003bac <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2180      	movs	r1, #128	@ 0x80
 8003ba8:	f7ff feec 	bl	8003984 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3334      	adds	r3, #52	@ 0x34
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fe0f 	bl	80037d4 <metal_list_del>
 8003bb6:	e000      	b.n	8003bba <rpmsg_unregister_endpoint+0x3e>
		return;
 8003bb8:	bf00      	nop
}
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	3334      	adds	r3, #52	@ 0x34
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4610      	mov	r0, r2
 8003bda:	f7ff fdee 	bl	80037ba <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	613b      	str	r3, [r7, #16]

	if (!ept)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8003c00:	4b37      	ldr	r3, [pc, #220]	@ (8003ce0 <rpmsg_create_ept+0xf8>)
 8003c02:	e068      	b.n	8003cd6 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	3358      	adds	r3, #88	@ 0x58
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fda6 	bl	800375a <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c14:	d018      	beq.n	8003c48 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	3348      	adds	r3, #72	@ 0x48
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	2180      	movs	r1, #128	@ 0x80
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fec2 	bl	80039a8 <rpmsg_is_address_set>
 8003c24:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	3348      	adds	r3, #72	@ 0x48
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	2180      	movs	r1, #128	@ 0x80
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fecf 	bl	80039d8 <rpmsg_set_address>
 8003c3a:	e00c      	b.n	8003c56 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	dd40      	ble.n	8003cc4 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8003c46:	e040      	b.n	8003cca <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	3348      	adds	r3, #72	@ 0x48
 8003c4c:	2180      	movs	r1, #128	@ 0x80
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fe79 	bl	8003946 <rpmsg_get_address>
 8003c54:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8003c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7ff fe51 	bl	800390c <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	68b8      	ldr	r0, [r7, #8]
 8003c6e:	f7ff ffa7 	bl	8003bc0 <rpmsg_register_endpoint>
 8003c72:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	da06      	bge.n	8003c88 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	3348      	adds	r3, #72	@ 0x48
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	2180      	movs	r1, #128	@ 0x80
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fe7e 	bl	8003984 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d11c      	bne.n	8003cc8 <rpmsg_create_ept+0xe0>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c96:	d117      	bne.n	8003cc8 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3358      	adds	r3, #88	@ 0x58
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fd67 	bl	8003770 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff fee1 	bl	8003a6c <rpmsg_send_ns_message>
 8003caa:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	3358      	adds	r3, #88	@ 0x58
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fd52 	bl	800375a <metal_mutex_acquire>
		if (status)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff ff5d 	bl	8003b7c <rpmsg_unregister_endpoint>
 8003cc2:	e002      	b.n	8003cca <rpmsg_create_ept+0xe2>
			goto ret_status;
 8003cc4:	bf00      	nop
 8003cc6:	e000      	b.n	8003cca <rpmsg_create_ept+0xe2>
	}

ret_status:
 8003cc8:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	3358      	adds	r3, #88	@ 0x58
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fd4e 	bl	8003770 <metal_mutex_release>
	return status;
 8003cd4:	697b      	ldr	r3, [r7, #20]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	fffff82d 	.word	0xfffff82d

08003ce4 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d018      	beq.n	8003d24 <rpmsg_destroy_ept+0x40>
		return;

	rdev = ept->rdev;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	60fb      	str	r3, [r7, #12]
	if (ept->addr != RPMSG_NS_EPT_ADDR)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	2b35      	cmp	r3, #53	@ 0x35
 8003cfe:	d003      	beq.n	8003d08 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
 8003d00:	2101      	movs	r1, #1
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff feb2 	bl	8003a6c <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3358      	adds	r3, #88	@ 0x58
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fd24 	bl	800375a <metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ff32 	bl	8003b7c <rpmsg_unregister_endpoint>
	metal_mutex_release(&rdev->lock);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3358      	adds	r3, #88	@ 0x58
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fd27 	bl	8003770 <metal_mutex_release>
 8003d22:	e000      	b.n	8003d26 <rpmsg_destroy_ept+0x42>
		return;
 8003d24:	bf00      	nop
}
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <__metal_cache_invalidate>:
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8003d36:	6839      	ldr	r1, [r7, #0]
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fd10 	bl	800475e <metal_machine_cache_invalidate>
}
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <metal_cache_invalidate>:
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8003d50:	6839      	ldr	r1, [r7, #0]
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff ffea 	bl	8003d2c <__metal_cache_invalidate>
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ffee 	bl	8003d60 <__metal_sleep_usec>
 8003d84:	4603      	mov	r3, r0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <metal_list_init>:
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	605a      	str	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	601a      	str	r2, [r3, #0]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <metal_list_is_empty>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	return list->next == list;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	bf0c      	ite	eq
 8003dc2:	2301      	moveq	r3, #1
 8003dc4:	2300      	movne	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <metal_io_virt_to_offset>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d201      	bcs.n	8003df6 <metal_io_virt_to_offset+0x22>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	e001      	b.n	8003dfa <metal_io_virt_to_offset+0x26>
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <__metal_mutex_init>:
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f3bf 8f5b 	dmb	ish
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	f3bf 8f5b 	dmb	ish
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <__metal_mutex_deinit>:
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <__metal_mutex_acquire>:
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8003e4e:	bf00      	nop
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	4611      	mov	r1, r2
 8003e56:	f3bf 8f5b 	dmb	ish
 8003e5a:	e8d3 2f4f 	ldrexb	r2, [r3]
 8003e5e:	e8c3 1f40 	strexb	r0, r1, [r3]
 8003e62:	2800      	cmp	r0, #0
 8003e64:	d1f9      	bne.n	8003e5a <__metal_mutex_acquire+0x14>
 8003e66:	f3bf 8f5b 	dmb	ish
 8003e6a:	b2d3      	uxtb	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1ef      	bne.n	8003e50 <__metal_mutex_acquire+0xa>
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <__metal_mutex_release>:
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f3bf 8f5b 	dmb	ish
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	f3bf 8f5b 	dmb	ish
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <metal_mutex_init>:
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff ffac 	bl	8003e06 <__metal_mutex_init>
}
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <metal_mutex_deinit>:
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
	__metal_mutex_deinit(mutex);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff ffb7 	bl	8003e32 <__metal_mutex_deinit>
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <metal_mutex_acquire>:
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ffb6 	bl	8003e46 <__metal_mutex_acquire>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <metal_mutex_release>:
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff ffc7 	bl	8003e7e <__metal_mutex_release>
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <rpmsg_init_ept>:
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f001 fc5a 	bl	80057c6 <strncpy>
	ept->addr = src;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f3e:	699b      	ldr	r3, [r3, #24]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003f64:	78f9      	ldrb	r1, [r7, #3]
 8003f66:	4610      	mov	r0, r2
 8003f68:	4798      	blx	r3
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003f86:	4610      	mov	r0, r2
 8003f88:	4798      	blx	r3
 8003f8a:	4603      	mov	r3, r0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4798      	blx	r3
 8003fac:	4603      	mov	r3, r0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b086      	sub	sp, #24
 8003fba:	af02      	add	r7, sp, #8
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	f000 fc19 	bl	8004808 <virtio_create_virtqueues>
 8003fd6:	4603      	mov	r3, r0
					callbacks);
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff fd62 	bl	8003abc <rpmsg_get_endpoint>
 8003ff8:	4603      	mov	r3, r0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8004002:	b480      	push	{r7}
 8004004:	b085      	sub	sp, #20
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d901      	bls.n	800401a <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8004016:	2300      	movs	r3, #0
 8004018:	e00f      	b.n	800403a <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6899      	ldr	r1, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	1acb      	subs	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	1ad2      	subs	r2, r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	605a      	str	r2, [r3, #4]

	return buffer;
 8004038:	68fb      	ldr	r3, [r7, #12]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01d      	beq.n	8004094 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d004      	beq.n	8004072 <rpmsg_virtio_init_shm_pool+0x2c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f023 0303 	bic.w	r3, r3, #3
 800406e:	3304      	adds	r3, #4
 8004070:	e000      	b.n	8004074 <rpmsg_virtio_init_shm_pool+0x2e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d004      	beq.n	800408c <rpmsg_virtio_init_shm_pool+0x46>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f023 0303 	bic.w	r3, r3, #3
 8004088:	3304      	adds	r3, #4
 800408a:	e000      	b.n	800408e <rpmsg_virtio_init_shm_pool+0x48>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	6053      	str	r3, [r2, #4]
 8004092:	e000      	b.n	8004096 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8004094:	bf00      	nop
}
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	@ 0x28
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f7ff ff3f 	bl	8003f32 <rpmsg_virtio_get_role>
 80040b4:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10d      	bne.n	80040d8 <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80040c8:	f107 0114 	add.w	r1, r7, #20
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	2301      	movs	r3, #1
 80040d2:	2200      	movs	r2, #0
 80040d4:	f000 fce7 	bl	8004aa6 <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 80040d8:	bf00      	nop
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	@ 0x28
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f7ff ff1f 	bl	8003f32 <rpmsg_virtio_get_role>
 80040f4:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10f      	bne.n	800411c <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8004108:	f107 0114 	add.w	r1, r7, #20
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2301      	movs	r3, #1
 8004112:	2200      	movs	r2, #0
 8004114:	f000 fcc7 	bl	8004aa6 <virtqueue_add_buffer>
 8004118:	4603      	mov	r3, r0
 800411a:	e000      	b.n	800411e <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b086      	sub	sp, #24
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7ff fefd 	bl	8003f32 <rpmsg_virtio_get_role>
 8004138:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d116      	bne.n	8004172 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fcee 	bl	8004b2e <virtqueue_get_buffer>
 8004152:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff ff4d 	bl	8004002 <rpmsg_virtio_shm_pool_get_buffer>
 8004168:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004170:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8004172:	697b      	ldr	r3, [r7, #20]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f7ff fed2 	bl	8003f32 <rpmsg_virtio_get_role>
 800418e:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d107      	bne.n	80041aa <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fcc3 	bl	8004b2e <virtqueue_get_buffer>
 80041a8:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4619      	mov	r1, r3
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	f7ff fdc5 	bl	8003d46 <metal_cache_invalidate>
	}

	return data;
 80041bc:	697b      	ldr	r3, [r7, #20]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff feaf 	bl	8003f32 <rpmsg_virtio_get_role>
 80041d4:	60b8      	str	r0, [r7, #8]
	int length = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 80041e0:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 80041e4:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 80041e6:	68fb      	ldr	r3, [r7, #12]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b090      	sub	sp, #64	@ 0x40
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned short idx;
	int tick_count = 0;
 8004202:	2300      	movs	r3, #0
 8004204:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	637b      	str	r3, [r7, #52]	@ 0x34

	status = rpmsg_virtio_get_status(rvdev);
 800420a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800420c:	f7ff feb1 	bl	8003f72 <rpmsg_virtio_get_status>
 8004210:	4603      	mov	r3, r0
 8004212:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8004214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 800421e:	4b46      	ldr	r3, [pc, #280]	@ (8004338 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8004220:	e086      	b.n	8004330 <rpmsg_virtio_send_offchannel_raw+0x140>
	}

	if (wait)
 8004222:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8004228:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800422c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800422e:	e001      	b.n	8004234 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3358      	adds	r3, #88	@ 0x58
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff fe47 	bl	8003ecc <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 800423e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004240:	f7ff ffc1 	bl	80041c6 <_rpmsg_virtio_get_buffer_size>
 8004244:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (size <= avail_size)
 8004246:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800424a:	429a      	cmp	r2, r3
 800424c:	dc08      	bgt.n	8004260 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 800424e:	f107 0216 	add.w	r2, r7, #22
 8004252:	f107 0310 	add.w	r3, r7, #16
 8004256:	4619      	mov	r1, r3
 8004258:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800425a:	f7ff ff64 	bl	8004126 <rpmsg_virtio_get_tx_buffer>
 800425e:	63f8      	str	r0, [r7, #60]	@ 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3358      	adds	r3, #88	@ 0x58
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff fe3c 	bl	8003ee2 <metal_mutex_release>
		if (buffer || !tick_count)
 800426a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10e      	bne.n	800428e <rpmsg_virtio_send_offchannel_raw+0x9e>
 8004270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00b      	beq.n	800428e <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 8004276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 800427c:	4b2f      	ldr	r3, [pc, #188]	@ (800433c <rpmsg_virtio_send_offchannel_raw+0x14c>)
 800427e:	e057      	b.n	8004330 <rpmsg_virtio_send_offchannel_raw+0x140>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8004280:	200a      	movs	r0, #10
 8004282:	f7ff fd78 	bl	8003d76 <metal_sleep_usec>
		tick_count--;
 8004286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004288:	3b01      	subs	r3, #1
 800428a:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
 800428c:	e7d2      	b.n	8004234 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 800428e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8004294:	4b2a      	ldr	r3, [pc, #168]	@ (8004340 <rpmsg_virtio_send_offchannel_raw+0x150>)
 8004296:	e04b      	b.n	8004330 <rpmsg_virtio_send_offchannel_raw+0x140>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 80042a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
	rp_hdr.reserved = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 80042aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 80042b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042b4:	f7ff fd8e 	bl	8003dd4 <metal_io_virt_to_offset>
 80042b8:	4601      	mov	r1, r0
 80042ba:	f107 0218 	add.w	r2, r7, #24
 80042be:	2310      	movs	r3, #16
 80042c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042c2:	f7fe fd84 	bl	8002dce <metal_io_block_write>
 80042c6:	6338      	str	r0, [r7, #48]	@ 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 80042c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ca:	2b10      	cmp	r3, #16
 80042cc:	d001      	beq.n	80042d2 <rpmsg_virtio_send_offchannel_raw+0xe2>
 80042ce:	bf00      	nop
 80042d0:	e7fd      	b.n	80042ce <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 80042d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d4:	3310      	adds	r3, #16
 80042d6:	4619      	mov	r1, r3
 80042d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042da:	f7ff fd7b 	bl	8003dd4 <metal_io_virt_to_offset>
 80042de:	4601      	mov	r1, r0
 80042e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042e6:	f7fe fd72 	bl	8002dce <metal_io_block_write>
 80042ea:	6338      	str	r0, [r7, #48]	@ 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 80042ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d001      	beq.n	80042f8 <rpmsg_virtio_send_offchannel_raw+0x108>
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <rpmsg_virtio_send_offchannel_raw+0x104>
	metal_mutex_acquire(&rdev->lock);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	3358      	adds	r3, #88	@ 0x58
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff fde5 	bl	8003ecc <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	8afb      	ldrh	r3, [r7, #22]
 8004306:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004308:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800430a:	f7ff fee9 	bl	80040e0 <rpmsg_virtio_enqueue_buffer>
 800430e:	6338      	str	r0, [r7, #48]	@ 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8004310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <rpmsg_virtio_send_offchannel_raw+0x12a>
 8004316:	bf00      	nop
 8004318:	e7fd      	b.n	8004316 <rpmsg_virtio_send_offchannel_raw+0x126>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 800431a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fc7f 	bl	8004c22 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3358      	adds	r3, #88	@ 0x58
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fdda 	bl	8003ee2 <metal_mutex_release>

	return size;
 800432e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004330:	4618      	mov	r0, r3
 8004332:	3740      	adds	r7, #64	@ 0x40
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	fffff82c 	.word	0xfffff82c
 800433c:	fffff82b 	.word	0xfffff82b
 8004340:	fffff82e 	.word	0xfffff82e

08004344 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b08d      	sub	sp, #52	@ 0x34
 800435c:	af02      	add	r7, sp, #8
 800435e:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	3358      	adds	r3, #88	@ 0x58
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fda9 	bl	8003ecc <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 800437a:	f107 020a 	add.w	r2, r7, #10
 800437e:	f107 030c 	add.w	r3, r7, #12
 8004382:	4619      	mov	r1, r3
 8004384:	69f8      	ldr	r0, [r7, #28]
 8004386:	f7ff fef9 	bl	800417c <rpmsg_virtio_get_rx_buffer>
 800438a:	6278      	str	r0, [r7, #36]	@ 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	3358      	adds	r3, #88	@ 0x58
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff fda6 	bl	8003ee2 <metal_mutex_release>

	while (rp_hdr) {
 8004396:	e04d      	b.n	8004434 <rpmsg_virtio_rx_callback+0xdc>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	3358      	adds	r3, #88	@ 0x58
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fd95 	bl	8003ecc <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4619      	mov	r1, r3
 80043a8:	69b8      	ldr	r0, [r7, #24]
 80043aa:	f7ff fe19 	bl	8003fe0 <rpmsg_get_ept_from_addr>
 80043ae:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	3358      	adds	r3, #88	@ 0x58
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fd94 	bl	8003ee2 <metal_mutex_release>

		if (!ept)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d03d      	beq.n	800443c <rpmsg_virtio_rx_callback+0xe4>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d103      	bne.n	80043d2 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	899b      	ldrh	r3, [r3, #12]
 80043e0:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 80043e2:	4618      	mov	r0, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	4613      	mov	r3, r2
 80043f0:	4602      	mov	r2, r0
 80043f2:	6978      	ldr	r0, [r7, #20]
 80043f4:	47a0      	blx	r4
 80043f6:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <rpmsg_virtio_rx_callback+0xaa>
 80043fe:	bf00      	nop
 8004400:	e7fd      	b.n	80043fe <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	3358      	adds	r3, #88	@ 0x58
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff fd60 	bl	8003ecc <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	897b      	ldrh	r3, [r7, #10]
 8004410:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004412:	69f8      	ldr	r0, [r7, #28]
 8004414:	f7ff fe44 	bl	80040a0 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8004418:	f107 020a 	add.w	r2, r7, #10
 800441c:	f107 030c 	add.w	r3, r7, #12
 8004420:	4619      	mov	r1, r3
 8004422:	69f8      	ldr	r0, [r7, #28]
 8004424:	f7ff feaa 	bl	800417c <rpmsg_virtio_get_rx_buffer>
 8004428:	6278      	str	r0, [r7, #36]	@ 0x24
		metal_mutex_release(&rdev->lock);
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	3358      	adds	r3, #88	@ 0x58
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fd57 	bl	8003ee2 <metal_mutex_release>
	while (rp_hdr) {
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1ae      	bne.n	8004398 <rpmsg_virtio_rx_callback+0x40>
 800443a:	e000      	b.n	800443e <rpmsg_virtio_rx_callback+0xe6>
			return;
 800443c:	bf00      	nop
	}
}
 800443e:	372c      	adds	r7, #44	@ 0x2c
 8004440:	46bd      	mov	sp, r7
 8004442:	bd90      	pop	{r4, r7, pc}

08004444 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b092      	sub	sp, #72	@ 0x48
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8004458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800445a:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 800445c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800445e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004460:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b28      	cmp	r3, #40	@ 0x28
 800446a:	d001      	beq.n	8004470 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 800446c:	2300      	movs	r3, #0
 800446e:	e057      	b.n	8004520 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 8004470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
 8004472:	4619      	mov	r1, r3
 8004474:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004476:	f7ff fcad 	bl	8003dd4 <metal_io_virt_to_offset>
 800447a:	4601      	mov	r1, r0
 800447c:	f107 0210 	add.w	r2, r7, #16
 8004480:	2320      	movs	r3, #32
 8004482:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004484:	f7fe fc2c 	bl	8002ce0 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8004488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 800448e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004490:	3358      	adds	r3, #88	@ 0x58
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fd1a 	bl	8003ecc <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8004498:	f107 0110 	add.w	r1, r7, #16
 800449c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800449e:	f04f 32ff 	mov.w	r2, #4294967295
 80044a2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80044a4:	f7ff fb0a 	bl	8003abc <rpmsg_get_endpoint>
 80044a8:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 80044aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d017      	beq.n	80044e6 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 80044b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	f04f 32ff 	mov.w	r2, #4294967295
 80044c2:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
 80044c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044c6:	3358      	adds	r3, #88	@ 0x58
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fd0a 	bl	8003ee2 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 80044ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d024      	beq.n	800451e <rpmsg_virtio_ns_callback+0xda>
 80044d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d020      	beq.n	800451e <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 80044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	4798      	blx	r3
 80044e4:	e01b      	b.n	800451e <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 80044e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d110      	bne.n	800450e <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 80044ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ee:	3358      	adds	r3, #88	@ 0x58
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fcf6 	bl	8003ee2 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 80044f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00f      	beq.n	800451e <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 80044fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004502:	f107 0110 	add.w	r1, r7, #16
 8004506:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004508:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800450a:	4798      	blx	r3
 800450c:	e007      	b.n	800451e <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 800450e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004510:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004512:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
 8004514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004516:	3358      	adds	r3, #88	@ 0x58
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff fce2 	bl	8003ee2 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3748      	adds	r7, #72	@ 0x48
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b094      	sub	sp, #80	@ 0x50
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	63bb      	str	r3, [r7, #56]	@ 0x38
	memset(rdev, 0, sizeof(*rdev));
 800453a:	2264      	movs	r2, #100	@ 0x64
 800453c:	2100      	movs	r1, #0
 800453e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004540:	f001 f927 	bl	8005792 <memset>
	metal_mutex_init(&rdev->lock);
 8004544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004546:	3358      	adds	r3, #88	@ 0x58
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fca9 	bl	8003ea0 <metal_mutex_init>
	rvdev->vdev = vdev;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8004554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8004560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004562:	4a5d      	ldr	r2, [pc, #372]	@ (80046d8 <rpmsg_init_vdev+0x1b0>)
 8004564:	661a      	str	r2, [r3, #96]	@ 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7ff fce3 	bl	8003f32 <rpmsg_virtio_get_role>
 800456c:	6378      	str	r0, [r7, #52]	@ 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800456e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004570:	2b00      	cmp	r3, #0
 8004572:	d120      	bne.n	80045b6 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 8004574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 800457a:	4b58      	ldr	r3, [pc, #352]	@ (80046dc <rpmsg_init_vdev+0x1b4>)
 800457c:	e0a7      	b.n	80046ce <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 800457e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 8004586:	4b56      	ldr	r3, [pc, #344]	@ (80046e0 <rpmsg_init_vdev+0x1b8>)
 8004588:	e0a1      	b.n	80046ce <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800458e:	675a      	str	r2, [r3, #116]	@ 0x74

		vq_names[0] = "rx_vq";
 8004590:	4b54      	ldr	r3, [pc, #336]	@ (80046e4 <rpmsg_init_vdev+0x1bc>)
 8004592:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 8004594:	4b54      	ldr	r3, [pc, #336]	@ (80046e8 <rpmsg_init_vdev+0x1c0>)
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 8004598:	4b54      	ldr	r3, [pc, #336]	@ (80046ec <rpmsg_init_vdev+0x1c4>)
 800459a:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 800459c:	4b54      	ldr	r3, [pc, #336]	@ (80046f0 <rpmsg_init_vdev+0x1c8>)
 800459e:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	669a      	str	r2, [r3, #104]	@ 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ae:	3318      	adds	r3, #24
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	66da      	str	r2, [r3, #108]	@ 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	671a      	str	r2, [r3, #112]	@ 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 80045bc:	f107 0220 	add.w	r2, r7, #32
 80045c0:	f107 0318 	add.w	r3, r7, #24
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	2202      	movs	r2, #2
 80045ca:	2100      	movs	r1, #0
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7ff fcf2 	bl	8003fb6 <rpmsg_virtio_create_virtqueues>
 80045d2:	6478      	str	r0, [r7, #68]	@ 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 80045d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <rpmsg_init_vdev+0xb6>
		return status;
 80045da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045dc:	e077      	b.n	80046ce <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 80045de:	2300      	movs	r3, #0
 80045e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80045e2:	e00f      	b.n	8004604 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80045e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045ea:	4613      	mov	r3, r2
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4413      	add	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	440b      	add	r3, r1
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	62bb      	str	r3, [r7, #40]	@ 0x28
		vq->shm_io = shm_io;
 80045f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 80045fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004600:	3301      	adds	r3, #1
 8004602:	643b      	str	r3, [r7, #64]	@ 0x40
 8004604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004606:	2b01      	cmp	r3, #1
 8004608:	d9ec      	bls.n	80045e4 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800460a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460c:	2b00      	cmp	r3, #0
 800460e:	d137      	bne.n	8004680 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 8004610:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004614:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8004616:	2300      	movs	r3, #0
 8004618:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800461a:	e02a      	b.n	8004672 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 800461c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004620:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004622:	f7ff fcee 	bl	8004002 <rpmsg_virtio_shm_pool_get_buffer>
 8004626:	6338      	str	r0, [r7, #48]	@ 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 8004628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 800462e:	4b2c      	ldr	r3, [pc, #176]	@ (80046e0 <rpmsg_init_vdev+0x1b8>)
 8004630:	e04d      	b.n	80046ce <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 8004632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004634:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 8004636:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004638:	6838      	ldr	r0, [r7, #0]
 800463a:	f7ff fbcb 	bl	8003dd4 <metal_io_virt_to_offset>
 800463e:	4601      	mov	r1, r0
 8004640:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004644:	2200      	movs	r2, #0
 8004646:	6838      	ldr	r0, [r7, #0]
 8004648:	f7fe fc37 	bl	8002eba <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8004650:	f107 0110 	add.w	r1, r7, #16
 8004654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	2301      	movs	r3, #1
 800465a:	2200      	movs	r2, #0
 800465c:	f000 fa23 	bl	8004aa6 <virtqueue_add_buffer>
 8004660:	6478      	str	r0, [r7, #68]	@ 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 8004662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <rpmsg_init_vdev+0x144>
				return status;
 8004668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800466a:	e030      	b.n	80046ce <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800466c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800466e:	3301      	adds	r3, #1
 8004670:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004676:	895b      	ldrh	r3, [r3, #10]
 8004678:	461a      	mov	r2, r3
 800467a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800467c:	4293      	cmp	r3, r2
 800467e:	d3cd      	bcc.n	800461c <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8004680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fb83 	bl	8003d8e <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7ff fc83 	bl	8003f94 <rpmsg_virtio_get_features>
 800468e:	62f8      	str	r0, [r7, #44]	@ 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8004690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d011      	beq.n	80046be <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 800469a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469c:	f103 0008 	add.w	r0, r3, #8
 80046a0:	2300      	movs	r3, #0
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	4b13      	ldr	r3, [pc, #76]	@ (80046f4 <rpmsg_init_vdev+0x1cc>)
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	2335      	movs	r3, #53	@ 0x35
 80046aa:	2235      	movs	r2, #53	@ 0x35
 80046ac:	4912      	ldr	r1, [pc, #72]	@ (80046f8 <rpmsg_init_vdev+0x1d0>)
 80046ae:	f7ff fc23 	bl	8003ef8 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 80046b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b4:	3308      	adds	r3, #8
 80046b6:	4619      	mov	r1, r3
 80046b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80046ba:	f7ff fa81 	bl	8003bc0 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 80046be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d103      	bne.n	80046cc <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 80046c4:	2104      	movs	r1, #4
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff fc40 	bl	8003f4c <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 80046cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3748      	adds	r7, #72	@ 0x48
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	080041f1 	.word	0x080041f1
 80046dc:	fffff82d 	.word	0xfffff82d
 80046e0:	fffff82e 	.word	0xfffff82e
 80046e4:	08006554 	.word	0x08006554
 80046e8:	0800655c 	.word	0x0800655c
 80046ec:	08004359 	.word	0x08004359
 80046f0:	08004345 	.word	0x08004345
 80046f4:	08004445 	.word	0x08004445
 80046f8:	08006564 	.word	0x08006564

080046fc <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	617b      	str	r3, [r7, #20]
	while (!metal_list_is_empty(&rdev->endpoints)) {
 8004708:	e008      	b.n	800471c <rpmsg_deinit_vdev+0x20>
		node = rdev->endpoints.next;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	613b      	str	r3, [r7, #16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	3b34      	subs	r3, #52	@ 0x34
 8004714:	60fb      	str	r3, [r7, #12]
		rpmsg_destroy_ept(ept);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff fae4 	bl	8003ce4 <rpmsg_destroy_ept>
	while (!metal_list_is_empty(&rdev->endpoints)) {
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fb46 	bl	8003db0 <metal_list_is_empty>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0ef      	beq.n	800470a <rpmsg_deinit_vdev+0xe>
	}

	rvdev->rvq = 0;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	669a      	str	r2, [r3, #104]	@ 0x68
	rvdev->svq = 0;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	66da      	str	r2, [r3, #108]	@ 0x6c

	metal_mutex_deinit(&rdev->lock);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	3358      	adds	r3, #88	@ 0x58
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fbbb 	bl	8003eb6 <metal_mutex_deinit>
}
 8004740:	bf00      	nop
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8004782:	68fb      	ldr	r3, [r7, #12]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3303      	adds	r3, #3
 80047a4:	005a      	lsls	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	4413      	add	r3, r2
 80047b2:	1e5a      	subs	r2, r3, #1
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	425b      	negs	r3, r3
 80047b8:	4013      	ands	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	3306      	adds	r3, #6
 80047c6:	60fb      	str	r3, [r7, #12]

	return size;
 80047c8:	68fb      	ldr	r3, [r7, #12]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <metal_io_virt_to_offset>:
{
 80047d6:	b480      	push	{r7}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d201      	bcs.n	80047f8 <metal_io_virt_to_offset+0x22>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	e001      	b.n	80047fc <metal_io_virt_to_offset+0x26>
 80047f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b091      	sub	sp, #68	@ 0x44
 800480c:	af04      	add	r7, sp, #16
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (nvqs > num_vrings)
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004820:	429a      	cmp	r2, r3
 8004822:	d902      	bls.n	800482a <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8004824:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8004828:	e053      	b.n	80048d2 <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 800482a:	2300      	movs	r3, #0
 800482c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800482e:	e04b      	b.n	80048c8 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004834:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004836:	4613      	mov	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	4413      	add	r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	440b      	add	r3, r1
 8004840:	627b      	str	r3, [r7, #36]	@ 0x24

		vring_alloc = &vring_info->info;
 8004842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004844:	3304      	adds	r3, #4
 8004846:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d118      	bne.n	8004882 <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4619      	mov	r1, r3
 800485c:	69f8      	ldr	r0, [r7, #28]
 800485e:	f7ff ffba 	bl	80047d6 <metal_io_virt_to_offset>
 8004862:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 8004868:	461a      	mov	r2, r3
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	4619      	mov	r1, r3
 8004870:	4610      	mov	r0, r2
 8004872:	f7ff ff8d 	bl	8004790 <vring_size>
 8004876:	4603      	mov	r3, r0
 8004878:	2200      	movs	r2, #0
 800487a:	69b9      	ldr	r1, [r7, #24]
 800487c:	69f8      	ldr	r0, [r7, #28]
 800487e:	f7fe fb1c 	bl	8002eba <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8004882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004884:	b298      	uxth	r0, r3
 8004886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	4413      	add	r3, r2
 800488e:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8004890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004896:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8004898:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	6a12      	ldr	r2, [r2, #32]
 800489e:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 80048a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048a2:	6809      	ldr	r1, [r1, #0]
 80048a4:	9102      	str	r1, [sp, #8]
 80048a6:	9201      	str	r2, [sp, #4]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	4622      	mov	r2, r4
 80048ae:	4601      	mov	r1, r0
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f8c4 	bl	8004a3e <virtqueue_create>
 80048b6:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <virtio_create_virtqueues+0xba>
			return ret;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	e007      	b.n	80048d2 <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 80048c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c4:	3301      	adds	r3, #1
 80048c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d3af      	bcc.n	8004830 <virtio_create_virtqueues+0x28>
	}
	return 0;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3734      	adds	r7, #52	@ 0x34
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd90      	pop	{r4, r7, pc}

080048da <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 80048da:	b480      	push	{r7}
 80048dc:	b085      	sub	sp, #20
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	603b      	str	r3, [r7, #0]
	vr->num = num;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	441a      	add	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	4413      	add	r3, r2
 800490a:	3304      	adds	r3, #4
 800490c:	461a      	mov	r2, r3
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	425b      	negs	r3, r3
 8004918:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 800491a:	461a      	mov	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	60da      	str	r2, [r3, #12]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	80fb      	strh	r3, [r7, #6]
 8004936:	460b      	mov	r3, r1
 8004938:	80bb      	strh	r3, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 800493e:	88ba      	ldrh	r2, [r7, #4]
 8004940:	88fb      	ldrh	r3, [r7, #6]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 800494a:	88b9      	ldrh	r1, [r7, #4]
 800494c:	887b      	ldrh	r3, [r7, #2]
 800494e:	1acb      	subs	r3, r1, r3
 8004950:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8004952:	429a      	cmp	r2, r3
 8004954:	bf34      	ite	cc
 8004956:	2301      	movcc	r3, #1
 8004958:	2300      	movcs	r3, #0
 800495a:	b2db      	uxtb	r3, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <metal_io_virt_to_offset>:
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	429a      	cmp	r2, r3
 8004984:	d201      	bcs.n	800498a <metal_io_virt_to_offset+0x22>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	e001      	b.n	800498e <metal_io_virt_to_offset+0x26>
 800498a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <metal_io_phys>:
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 80049a8:	2b1f      	cmp	r3, #31
 80049aa:	d805      	bhi.n	80049b8 <metal_io_phys+0x1e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	fa22 f303 	lsr.w	r3, r2, r3
 80049b6:	e000      	b.n	80049ba <metal_io_phys+0x20>
 80049b8:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 80049ba:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d010      	beq.n	80049e6 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d80b      	bhi.n	80049e6 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6919      	ldr	r1, [r3, #16]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 80049e2:	4413      	add	r3, r2
 80049e4:	e001      	b.n	80049ea <metal_io_phys+0x50>
 80049e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <metal_io_virt_to_phys>:
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff ffb0 	bl	8004968 <metal_io_virt_to_offset>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ffc4 	bl	800499a <metal_io_phys>
 8004a12:	4603      	mov	r3, r0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2a:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff ffe1 	bl	80049f6 <metal_io_virt_to_phys>
 8004a34:	4603      	mov	r3, r0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d121      	bne.n	8004a9c <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8004a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8004a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8004a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a66:	897a      	ldrh	r2, [r7, #10]
 8004a68:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	891a      	ldrh	r2, [r3, #8]
 8004a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a70:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8004a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a74:	895a      	ldrh	r2, [r3, #10]
 8004a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a78:	851a      	strh	r2, [r3, #40]	@ 0x28
		vq->callback = callback;
 8004a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7c:	6a3a      	ldr	r2, [r7, #32]
 8004a7e:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8004a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a84:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6819      	ldr	r1, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a92:	f000 f97a 	bl	8004d8a <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8004a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a98:	f000 f899 	bl	8004bce <virtqueue_disable_cb>
	}

	return (status);
 8004a9c:	697b      	ldr	r3, [r7, #20]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b08a      	sub	sp, #40	@ 0x28
 8004aaa:	af02      	add	r7, sp, #8
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d12c      	bne.n	8004b24 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8004ace:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 8004ad0:	8a7b      	ldrh	r3, [r7, #18]
 8004ad2:	3307      	adds	r3, #7
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ae0:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	69d9      	ldr	r1, [r3, #28]
 8004aee:	8a7a      	ldrh	r2, [r7, #18]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f8a7 	bl	8004c4e <vq_ring_add_buffer>
 8004b00:	4603      	mov	r3, r0
 8004b02:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8a3a      	ldrh	r2, [r7, #16]
 8004b08:	861a      	strh	r2, [r3, #48]	@ 0x30
		vq->vq_free_cnt -= needed;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	851a      	strh	r2, [r3, #40]	@ 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 8004b1a:	8a7b      	ldrh	r3, [r7, #18]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f966 	bl	8004df0 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 8004b24:	69bb      	ldr	r3, [r7, #24]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b088      	sub	sp, #32
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d006      	beq.n	8004b4e <virtqueue_get_buffer+0x20>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b48:	885b      	ldrh	r3, [r3, #2]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d101      	bne.n	8004b52 <virtqueue_get_buffer+0x24>
		return (NULL);
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e039      	b.n	8004bc6 <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	b291      	uxth	r1, r2
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	8651      	strh	r1, [r2, #50]	@ 0x32
 8004b5e:	b21a      	sxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	895b      	ldrh	r3, [r3, #10]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	b21b      	sxth	r3, r3
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	b21b      	sxth	r3, r3
 8004b6e:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b74:	8bfb      	ldrh	r3, [r7, #30]
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4413      	add	r3, r2
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 8004b7e:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	82fb      	strh	r3, [r7, #22]
	if (len)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <virtqueue_get_buffer+0x68>
		*len = uep->len;
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 8004b96:	8afb      	ldrh	r3, [r7, #22]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f8ae 	bl	8004cfc <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 8004ba0:	8afa      	ldrh	r2, [r7, #22]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3207      	adds	r2, #7
 8004ba6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004baa:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 8004bac:	8afa      	ldrh	r2, [r7, #22]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3207      	adds	r2, #7
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	8bfa      	ldrh	r2, [r7, #30]
 8004bc2:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 8004bc4:	693b      	ldr	r3, [r7, #16]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3720      	adds	r7, #32
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d010      	beq.n	8004c04 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	895b      	ldrh	r3, [r3, #10]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1a      	ldr	r2, [r3, #32]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8004bf6:	3901      	subs	r1, #1
 8004bf8:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	4413      	add	r3, r2
 8004bfe:	460a      	mov	r2, r1
 8004c00:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8004c02:	e008      	b.n	8004c16 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	881a      	ldrh	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	b292      	uxth	r2, r2
 8004c14:	801a      	strh	r2, [r3, #0]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8004c2a:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f91d 	bl	8004e6e <vq_ring_must_notify_host>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f94d 	bl	8004eda <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	855a      	strh	r2, [r3, #42]	@ 0x2a

	VQUEUE_IDLE(vq);
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 8004c4e:	b5b0      	push	{r4, r5, r7, lr}
 8004c50:	b088      	sub	sp, #32
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 8004c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c62:	4413      	add	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	837b      	strh	r3, [r7, #26]
 8004c6e:	e03c      	b.n	8004cea <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 8004c70:	8b7b      	ldrh	r3, [r7, #26]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	4413      	add	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	4413      	add	r3, r2
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4619      	mov	r1, r3
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f7ff fec8 	bl	8004a1c <virtqueue_virt_to_phys>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2200      	movs	r2, #0
 8004c90:	461c      	mov	r4, r3
 8004c92:	4615      	mov	r5, r2
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	e9c3 4500 	strd	r4, r5, [r3]
		dp->len = buf_list[i].len;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2200      	movs	r2, #0
 8004cae:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	da06      	bge.n	8004cc8 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	899b      	ldrh	r3, [r3, #12]
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	db06      	blt.n	8004cde <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	899b      	ldrh	r3, [r3, #12]
 8004cd4:	f043 0302 	orr.w	r3, r3, #2
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	89db      	ldrh	r3, [r3, #14]
 8004ce8:	837b      	strh	r3, [r7, #26]
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	dbbe      	blt.n	8004c70 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 8004cf2:	8b7b      	ldrh	r3, [r7, #26]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3720      	adds	r7, #32
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bdb0      	pop	{r4, r5, r7, pc}

08004cfc <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	887b      	ldrh	r3, [r7, #2]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	4413      	add	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 8004d14:	887b      	ldrh	r3, [r7, #2]
 8004d16:	3307      	adds	r3, #7
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	889b      	ldrh	r3, [r3, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
	dxp->ndescs--;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	889b      	ldrh	r3, [r3, #4]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	899b      	ldrh	r3, [r3, #12]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d113      	bne.n	8004d70 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 8004d48:	e00c      	b.n	8004d64 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69da      	ldr	r2, [r3, #28]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	89db      	ldrh	r3, [r3, #14]
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	4413      	add	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	889b      	ldrh	r3, [r3, #4]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	899b      	ldrh	r3, [r3, #12]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ec      	bne.n	8004d4a <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	887a      	ldrh	r2, [r7, #2]
 8004d7c:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b088      	sub	sp, #32
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	895b      	ldrh	r3, [r3, #10]
 8004d9a:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3318      	adds	r3, #24
 8004da0:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8004da2:	69b9      	ldr	r1, [r7, #24]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	6978      	ldr	r0, [r7, #20]
 8004daa:	f7ff fd96 	bl	80048da <vring_init>

	for (i = 0; i < size - 1; i++)
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	e00c      	b.n	8004dce <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	6859      	ldr	r1, [r3, #4]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	440b      	add	r3, r1
 8004dc2:	3201      	adds	r2, #1
 8004dc4:	b292      	uxth	r2, r2
 8004dc6:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	dbed      	blt.n	8004db4 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	4413      	add	r3, r2
 8004de2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004de6:	81da      	strh	r2, [r3, #14]
}
 8004de8:	bf00      	nop
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	885b      	ldrh	r3, [r3, #2]
 8004e02:	b21a      	sxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	895b      	ldrh	r3, [r3, #10]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	b21b      	sxth	r3, r3
 8004e0e:	4013      	ands	r3, r2
 8004e10:	b21b      	sxth	r3, r3
 8004e12:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1a      	ldr	r2, [r3, #32]
 8004e18:	89fb      	ldrh	r3, [r7, #14]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	4413      	add	r3, r2
 8004e1e:	887a      	ldrh	r2, [r7, #2]
 8004e20:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8004e22:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	885a      	ldrh	r2, [r3, #2]
 8004e2c:	3201      	adds	r2, #1
 8004e2e:	b292      	uxth	r2, r2
 8004e30:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e36:	3301      	adds	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e3e:	bf00      	nop
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8004e52:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <virtqueue_notification+0x1c>
		vq->callback(vq);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01d      	beq.n	8004ebe <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	885b      	ldrh	r3, [r3, #2]
 8004e88:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8e:	89fa      	ldrh	r2, [r7, #14]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	4413      	add	r3, r2
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8004ea4:	89ba      	ldrh	r2, [r7, #12]
 8004ea6:	89f9      	ldrh	r1, [r7, #14]
 8004ea8:	897b      	ldrh	r3, [r7, #10]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fd3e 	bl	800492c <vring_need_event>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bf14      	ite	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	2300      	moveq	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	e009      	b.n	8004ed2 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	bf0c      	ite	eq
 8004ecc:	2301      	moveq	r3, #1
 8004ece:	2300      	movne	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	4798      	blx	r3
}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8004f04:	4b04      	ldr	r3, [pc, #16]	@ (8004f18 <HAL_HSEM_FreeCallback+0x1c>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8004f0a:	2002      	movs	r0, #2
 8004f0c:	f7fc fb68 	bl	80015e0 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	240001a8 	.word	0x240001a8

08004f1c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8004f22:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <MAILBOX_Init+0x34>)
 8004f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f28:	4a09      	ldr	r2, [pc, #36]	@ (8004f50 <MAILBOX_Init+0x34>)
 8004f2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f32:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <MAILBOX_Init+0x34>)
 8004f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8004f40:	2002      	movs	r0, #2
 8004f42:	f7fc fb4d 	bl	80015e0 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3708      	adds	r7, #8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	58024400 	.word	0x58024400

08004f54 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8004f5c:	4b09      	ldr	r3, [pc, #36]	@ (8004f84 <MAILBOX_Poll+0x30>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d108      	bne.n	8004f76 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 8004f64:	2100      	movs	r1, #0
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fe fb75 	bl	8003656 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8004f6c:	4b05      	ldr	r3, [pc, #20]	@ (8004f84 <MAILBOX_Poll+0x30>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
    return 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	e001      	b.n	8004f7a <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8004f76:	f06f 030a 	mvn.w	r3, #10
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	240001a8 	.word	0x240001a8

08004f88 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8004f92:	2000      	movs	r0, #0
 8004f94:	f7fc faf6 	bl	8001584 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 8004f98:	2100      	movs	r1, #0
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	f7fc fb0c 	bl	80015b8 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d006      	beq.n	8004fca <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc4:	d001      	beq.n	8004fca <is_rpmsg_ept_ready+0x20>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <is_rpmsg_ept_ready+0x22>
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d209      	bcs.n	8005000 <metal_device_io_region+0x28>
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	4413      	add	r3, r2
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	e000      	b.n	8005002 <metal_device_io_region+0x2a>
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8005010:	b590      	push	{r4, r7, lr}
 8005012:	b08d      	sub	sp, #52	@ 0x34
 8005014:	af04      	add	r7, sp, #16
 8005016:	6078      	str	r0, [r7, #4]
  int status = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 800501c:	2300      	movs	r3, #0
 800501e:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8005020:	4a41      	ldr	r2, [pc, #260]	@ (8005128 <OPENAMP_shmem_init+0x118>)
 8005022:	f107 0310 	add.w	r3, r7, #16
 8005026:	e892 0003 	ldmia.w	r2, {r0, r1}
 800502a:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8005032:	2300      	movs	r3, #0
 8005034:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8005036:	f107 0310 	add.w	r3, r7, #16
 800503a:	4618      	mov	r0, r3
 800503c:	f7fd fda6 	bl	8002b8c <metal_init>

  status = metal_register_generic_device(&shm_device);
 8005040:	483a      	ldr	r0, [pc, #232]	@ (800512c <OPENAMP_shmem_init+0x11c>)
 8005042:	f7fd fc41 	bl	80028c8 <metal_register_generic_device>
 8005046:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <OPENAMP_shmem_init+0x42>
    return status;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	e066      	b.n	8005120 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8005052:	f107 0318 	add.w	r3, r7, #24
 8005056:	461a      	mov	r2, r3
 8005058:	4935      	ldr	r1, [pc, #212]	@ (8005130 <OPENAMP_shmem_init+0x120>)
 800505a:	4836      	ldr	r0, [pc, #216]	@ (8005134 <OPENAMP_shmem_init+0x124>)
 800505c:	f7fd fbf6 	bl	800284c <metal_device_open>
 8005060:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <OPENAMP_shmem_init+0x5c>
    return status;
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	e059      	b.n	8005120 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 800506c:	4a32      	ldr	r2, [pc, #200]	@ (8005138 <OPENAMP_shmem_init+0x128>)
 800506e:	4b33      	ldr	r3, [pc, #204]	@ (800513c <OPENAMP_shmem_init+0x12c>)
 8005070:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8005078:	4a31      	ldr	r2, [pc, #196]	@ (8005140 <OPENAMP_shmem_init+0x130>)
 800507a:	4b2f      	ldr	r3, [pc, #188]	@ (8005138 <OPENAMP_shmem_init+0x128>)
 800507c:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800507e:	461a      	mov	r2, r3
 8005080:	2300      	movs	r3, #0
 8005082:	9302      	str	r3, [sp, #8]
 8005084:	2300      	movs	r3, #0
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	f04f 33ff 	mov.w	r3, #4294967295
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	4613      	mov	r3, r2
 8005090:	4a2a      	ldr	r2, [pc, #168]	@ (800513c <OPENAMP_shmem_init+0x12c>)
 8005092:	4929      	ldr	r1, [pc, #164]	@ (8005138 <OPENAMP_shmem_init+0x128>)
 8005094:	f7fd fdd5 	bl	8002c42 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ff9b 	bl	8004fd8 <metal_device_io_region>
 80050a2:	4603      	mov	r3, r0
 80050a4:	4a27      	ldr	r2, [pc, #156]	@ (8005144 <OPENAMP_shmem_init+0x134>)
 80050a6:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 80050a8:	4b26      	ldr	r3, [pc, #152]	@ (8005144 <OPENAMP_shmem_init+0x134>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d102      	bne.n	80050b6 <OPENAMP_shmem_init+0xa6>
    return -1;
 80050b0:	f04f 33ff 	mov.w	r3, #4294967295
 80050b4:	e034      	b.n	8005120 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 80050b6:	f107 0208 	add.w	r2, r7, #8
 80050ba:	f107 030c 	add.w	r3, r7, #12
 80050be:	4619      	mov	r1, r3
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f929 	bl	8005318 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005148 <OPENAMP_shmem_init+0x138>)
 80050ca:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 80050cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005148 <OPENAMP_shmem_init+0x138>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d102      	bne.n	80050da <OPENAMP_shmem_init+0xca>
  {
    return -1;
 80050d4:	f04f 33ff 	mov.w	r3, #4294967295
 80050d8:	e022      	b.n	8005120 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80050e0:	4b19      	ldr	r3, [pc, #100]	@ (8005148 <OPENAMP_shmem_init+0x138>)
 80050e2:	6819      	ldr	r1, [r3, #0]
 80050e4:	4b18      	ldr	r3, [pc, #96]	@ (8005148 <OPENAMP_shmem_init+0x138>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	461c      	mov	r4, r3
 80050ec:	2300      	movs	r3, #0
 80050ee:	9302      	str	r3, [sp, #8]
 80050f0:	2300      	movs	r3, #0
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	f04f 33ff 	mov.w	r3, #4294967295
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	4623      	mov	r3, r4
 80050fc:	f7fd fda1 	bl	8002c42 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	2101      	movs	r1, #1
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff ff67 	bl	8004fd8 <metal_device_io_region>
 800510a:	4603      	mov	r3, r0
 800510c:	4a0f      	ldr	r2, [pc, #60]	@ (800514c <OPENAMP_shmem_init+0x13c>)
 800510e:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8005110:	4b0e      	ldr	r3, [pc, #56]	@ (800514c <OPENAMP_shmem_init+0x13c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d102      	bne.n	800511e <OPENAMP_shmem_init+0x10e>
    return -1;
 8005118:	f04f 33ff 	mov.w	r3, #4294967295
 800511c:	e000      	b.n	8005120 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3724      	adds	r7, #36	@ 0x24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd90      	pop	{r4, r7, pc}
 8005128:	0800657c 	.word	0x0800657c
 800512c:	2400003c 	.word	0x2400003c
 8005130:	08006568 	.word	0x08006568
 8005134:	08006574 	.word	0x08006574
 8005138:	38000400 	.word	0x38000400
 800513c:	2400023c 	.word	0x2400023c
 8005140:	38010000 	.word	0x38010000
 8005144:	240001ac 	.word	0x240001ac
 8005148:	240001b4 	.word	0x240001b4
 800514c:	240001b0 	.word	0x240001b0

08005150 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8005150:	b590      	push	{r4, r7, lr}
 8005152:	b08b      	sub	sp, #44	@ 0x2c
 8005154:	af04      	add	r7, sp, #16
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 800515e:	2300      	movs	r3, #0
 8005160:	613b      	str	r3, [r7, #16]
  int status = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 8005166:	f7ff fed9 	bl	8004f1c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff ff50 	bl	8005010 <OPENAMP_shmem_init>
 8005170:	60f8      	str	r0, [r7, #12]
  if(status)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	e06a      	b.n	8005252 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	4b37      	ldr	r3, [pc, #220]	@ (800525c <MX_OPENAMP_Init+0x10c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f103 0218 	add.w	r2, r3, #24
 8005186:	4b36      	ldr	r3, [pc, #216]	@ (8005260 <MX_OPENAMP_Init+0x110>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2100      	movs	r1, #0
 800518c:	9102      	str	r1, [sp, #8]
 800518e:	4935      	ldr	r1, [pc, #212]	@ (8005264 <MX_OPENAMP_Init+0x114>)
 8005190:	9101      	str	r1, [sp, #4]
 8005192:	2100      	movs	r1, #0
 8005194:	9100      	str	r1, [sp, #0]
 8005196:	21ff      	movs	r1, #255	@ 0xff
 8005198:	f7fe f97e 	bl	8003498 <rproc_virtio_create_vdev>
 800519c:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 80051a4:	f04f 33ff 	mov.w	r3, #4294967295
 80051a8:	e053      	b.n	8005252 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 80051aa:	6938      	ldr	r0, [r7, #16]
 80051ac:	f7fe fa8f 	bl	80036ce <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 80051b0:	4b2a      	ldr	r3, [pc, #168]	@ (800525c <MX_OPENAMP_Init+0x10c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3334      	adds	r3, #52	@ 0x34
 80051b6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 80051c0:	461c      	mov	r4, r3
 80051c2:	4b29      	ldr	r3, [pc, #164]	@ (8005268 <MX_OPENAMP_Init+0x118>)
 80051c4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	6892      	ldr	r2, [r2, #8]
 80051ca:	6979      	ldr	r1, [r7, #20]
 80051cc:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 80051ce:	9102      	str	r1, [sp, #8]
 80051d0:	9201      	str	r2, [sp, #4]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	4623      	mov	r3, r4
 80051d6:	4602      	mov	r2, r0
 80051d8:	2100      	movs	r1, #0
 80051da:	6938      	ldr	r0, [r7, #16]
 80051dc:	f7fe fa0a 	bl	80035f4 <rproc_virtio_init_vring>
 80051e0:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <MX_OPENAMP_Init+0x9c>
  {
    return status;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	e032      	b.n	8005252 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 80051ec:	4b1b      	ldr	r3, [pc, #108]	@ (800525c <MX_OPENAMP_Init+0x10c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3348      	adds	r3, #72	@ 0x48
 80051f2:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 80051fc:	461c      	mov	r4, r3
 80051fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005268 <MX_OPENAMP_Init+0x118>)
 8005200:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	6892      	ldr	r2, [r2, #8]
 8005206:	6979      	ldr	r1, [r7, #20]
 8005208:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800520a:	9102      	str	r1, [sp, #8]
 800520c:	9201      	str	r2, [sp, #4]
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	4623      	mov	r3, r4
 8005212:	4602      	mov	r2, r0
 8005214:	2101      	movs	r1, #1
 8005216:	6938      	ldr	r0, [r7, #16]
 8005218:	f7fe f9ec 	bl	80035f4 <rproc_virtio_init_vring>
 800521c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	e014      	b.n	8005252 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8005228:	4b10      	ldr	r3, [pc, #64]	@ (800526c <MX_OPENAMP_Init+0x11c>)
 800522a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800522e:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8005230:	4a0f      	ldr	r2, [pc, #60]	@ (8005270 <MX_OPENAMP_Init+0x120>)
 8005232:	4b0e      	ldr	r3, [pc, #56]	@ (800526c <MX_OPENAMP_Init+0x11c>)
 8005234:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8005236:	461a      	mov	r2, r3
 8005238:	480e      	ldr	r0, [pc, #56]	@ (8005274 <MX_OPENAMP_Init+0x124>)
 800523a:	f7fe ff04 	bl	8004046 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 800523e:	4b0a      	ldr	r3, [pc, #40]	@ (8005268 <MX_OPENAMP_Init+0x118>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a0c      	ldr	r2, [pc, #48]	@ (8005274 <MX_OPENAMP_Init+0x124>)
 8005244:	9200      	str	r2, [sp, #0]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	6939      	ldr	r1, [r7, #16]
 800524a:	480b      	ldr	r0, [pc, #44]	@ (8005278 <MX_OPENAMP_Init+0x128>)
 800524c:	f7ff f96c 	bl	8004528 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	bd90      	pop	{r4, r7, pc}
 800525a:	bf00      	nop
 800525c:	240001b4 	.word	0x240001b4
 8005260:	240001b0 	.word	0x240001b0
 8005264:	08004f89 	.word	0x08004f89
 8005268:	240001ac 	.word	0x240001ac
 800526c:	38000400 	.word	0x38000400
 8005270:	38010000 	.word	0x38010000
 8005274:	240001b8 	.word	0x240001b8
 8005278:	240001c4 	.word	0x240001c4

0800527c <OPENAMP_DeInit>:

void OPENAMP_DeInit()
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN PRE_OPENAMP_DEINIT */

  /* USER CODE END PRE_OPENAMP_DEINIT */

  rpmsg_deinit_vdev(&rvdev);
 8005280:	4803      	ldr	r0, [pc, #12]	@ (8005290 <OPENAMP_DeInit+0x14>)
 8005282:	f7ff fa3b 	bl	80046fc <rpmsg_deinit_vdev>

  metal_finish();
 8005286:	f7fd fcb3 	bl	8002bf0 <metal_finish>

  /* USER CODE BEGIN POST_OPENAMP_DEINIT */

  /* USER CODE END POST_OPENAMP_DEINIT */
}
 800528a:	bf00      	nop
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	240001c4 	.word	0x240001c4

08005294 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	@ 0x28
 8005298:	af04      	add	r7, sp, #16
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
  int ret = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	9302      	str	r3, [sp, #8]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	f04f 33ff 	mov.w	r3, #4294967295
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4904      	ldr	r1, [pc, #16]	@ (80052cc <OPENAMP_create_endpoint+0x38>)
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f7fe fc94 	bl	8003be8 <rpmsg_create_ept>
 80052c0:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 80052c2:	697b      	ldr	r3, [r7, #20]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	240001c4 	.word	0x240001c4

080052d0 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 80052d4:	4b03      	ldr	r3, [pc, #12]	@ (80052e4 <OPENAMP_check_for_message+0x14>)
 80052d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff fe3b 	bl	8004f54 <MAILBOX_Poll>
}
 80052de:	bf00      	nop
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	240001c4 	.word	0x240001c4

080052e8 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 80052f0:	e004      	b.n	80052fc <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 80052f2:	4b08      	ldr	r3, [pc, #32]	@ (8005314 <OPENAMP_Wait_EndPointready+0x2c>)
 80052f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fe2c 	bl	8004f54 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff fe54 	bl	8004faa <is_rpmsg_ept_ready>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0f4      	beq.n	80052f2 <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	240001c4 	.word	0x240001c4

08005318 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 8005324:	228c      	movs	r2, #140	@ 0x8c
 8005326:	2100      	movs	r1, #0
 8005328:	481e      	ldr	r0, [pc, #120]	@ (80053a4 <resource_table_init+0x8c>)
 800532a:	f000 fa32 	bl	8005792 <memset>
	resource_table.num = 1;
 800532e:	4b1d      	ldr	r3, [pc, #116]	@ (80053a4 <resource_table_init+0x8c>)
 8005330:	2201      	movs	r2, #1
 8005332:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 8005334:	4b1b      	ldr	r3, [pc, #108]	@ (80053a4 <resource_table_init+0x8c>)
 8005336:	2201      	movs	r2, #1
 8005338:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 800533a:	4b1a      	ldr	r3, [pc, #104]	@ (80053a4 <resource_table_init+0x8c>)
 800533c:	2218      	movs	r2, #24
 800533e:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 8005340:	4b19      	ldr	r3, [pc, #100]	@ (80053a8 <resource_table_init+0x90>)
 8005342:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005346:	4a17      	ldr	r2, [pc, #92]	@ (80053a4 <resource_table_init+0x8c>)
 8005348:	6353      	str	r3, [r2, #52]	@ 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 800534a:	4b16      	ldr	r3, [pc, #88]	@ (80053a4 <resource_table_init+0x8c>)
 800534c:	2204      	movs	r2, #4
 800534e:	639a      	str	r2, [r3, #56]	@ 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 8005350:	4b14      	ldr	r3, [pc, #80]	@ (80053a4 <resource_table_init+0x8c>)
 8005352:	2204      	movs	r2, #4
 8005354:	63da      	str	r2, [r3, #60]	@ 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 8005356:	4b13      	ldr	r3, [pc, #76]	@ (80053a4 <resource_table_init+0x8c>)
 8005358:	2200      	movs	r2, #0
 800535a:	641a      	str	r2, [r3, #64]	@ 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 800535c:	4a12      	ldr	r2, [pc, #72]	@ (80053a8 <resource_table_init+0x90>)
 800535e:	4b11      	ldr	r3, [pc, #68]	@ (80053a4 <resource_table_init+0x8c>)
 8005360:	649a      	str	r2, [r3, #72]	@ 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 8005362:	4b10      	ldr	r3, [pc, #64]	@ (80053a4 <resource_table_init+0x8c>)
 8005364:	2204      	movs	r2, #4
 8005366:	64da      	str	r2, [r3, #76]	@ 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 8005368:	4b0e      	ldr	r3, [pc, #56]	@ (80053a4 <resource_table_init+0x8c>)
 800536a:	2204      	movs	r2, #4
 800536c:	651a      	str	r2, [r3, #80]	@ 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 800536e:	4b0d      	ldr	r3, [pc, #52]	@ (80053a4 <resource_table_init+0x8c>)
 8005370:	2201      	movs	r2, #1
 8005372:	655a      	str	r2, [r3, #84]	@ 0x54

	resource_table.vdev.type = RSC_VDEV;
 8005374:	4b0b      	ldr	r3, [pc, #44]	@ (80053a4 <resource_table_init+0x8c>)
 8005376:	2203      	movs	r2, #3
 8005378:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 800537a:	4b0a      	ldr	r3, [pc, #40]	@ (80053a4 <resource_table_init+0x8c>)
 800537c:	2207      	movs	r2, #7
 800537e:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 8005380:	4b08      	ldr	r3, [pc, #32]	@ (80053a4 <resource_table_init+0x8c>)
 8005382:	2202      	movs	r2, #2
 8005384:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 8005388:	4b06      	ldr	r3, [pc, #24]	@ (80053a4 <resource_table_init+0x8c>)
 800538a:	2201      	movs	r2, #1
 800538c:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	228c      	movs	r2, #140	@ 0x8c
 8005392:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4a03      	ldr	r2, [pc, #12]	@ (80053a4 <resource_table_init+0x8c>)
 8005398:	601a      	str	r2, [r3, #0]
}
 800539a:	bf00      	nop
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	38000000 	.word	0x38000000
 80053a8:	38000400 	.word	0x38000400

080053ac <__assert_func>:
 80053ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053ae:	4614      	mov	r4, r2
 80053b0:	461a      	mov	r2, r3
 80053b2:	4b09      	ldr	r3, [pc, #36]	@ (80053d8 <__assert_func+0x2c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4605      	mov	r5, r0
 80053b8:	68d8      	ldr	r0, [r3, #12]
 80053ba:	b954      	cbnz	r4, 80053d2 <__assert_func+0x26>
 80053bc:	4b07      	ldr	r3, [pc, #28]	@ (80053dc <__assert_func+0x30>)
 80053be:	461c      	mov	r4, r3
 80053c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80053c4:	9100      	str	r1, [sp, #0]
 80053c6:	462b      	mov	r3, r5
 80053c8:	4905      	ldr	r1, [pc, #20]	@ (80053e0 <__assert_func+0x34>)
 80053ca:	f000 f96f 	bl	80056ac <fiprintf>
 80053ce:	f000 fa9e 	bl	800590e <abort>
 80053d2:	4b04      	ldr	r3, [pc, #16]	@ (80053e4 <__assert_func+0x38>)
 80053d4:	e7f4      	b.n	80053c0 <__assert_func+0x14>
 80053d6:	bf00      	nop
 80053d8:	240000c4 	.word	0x240000c4
 80053dc:	08006636 	.word	0x08006636
 80053e0:	08006608 	.word	0x08006608
 80053e4:	080065fb 	.word	0x080065fb

080053e8 <malloc>:
 80053e8:	4b02      	ldr	r3, [pc, #8]	@ (80053f4 <malloc+0xc>)
 80053ea:	4601      	mov	r1, r0
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	f000 b82d 	b.w	800544c <_malloc_r>
 80053f2:	bf00      	nop
 80053f4:	240000c4 	.word	0x240000c4

080053f8 <free>:
 80053f8:	4b02      	ldr	r3, [pc, #8]	@ (8005404 <free+0xc>)
 80053fa:	4601      	mov	r1, r0
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	f000 ba8d 	b.w	800591c <_free_r>
 8005402:	bf00      	nop
 8005404:	240000c4 	.word	0x240000c4

08005408 <sbrk_aligned>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	4e0f      	ldr	r6, [pc, #60]	@ (8005448 <sbrk_aligned+0x40>)
 800540c:	460c      	mov	r4, r1
 800540e:	6831      	ldr	r1, [r6, #0]
 8005410:	4605      	mov	r5, r0
 8005412:	b911      	cbnz	r1, 800541a <sbrk_aligned+0x12>
 8005414:	f000 fa1e 	bl	8005854 <_sbrk_r>
 8005418:	6030      	str	r0, [r6, #0]
 800541a:	4621      	mov	r1, r4
 800541c:	4628      	mov	r0, r5
 800541e:	f000 fa19 	bl	8005854 <_sbrk_r>
 8005422:	1c43      	adds	r3, r0, #1
 8005424:	d103      	bne.n	800542e <sbrk_aligned+0x26>
 8005426:	f04f 34ff 	mov.w	r4, #4294967295
 800542a:	4620      	mov	r0, r4
 800542c:	bd70      	pop	{r4, r5, r6, pc}
 800542e:	1cc4      	adds	r4, r0, #3
 8005430:	f024 0403 	bic.w	r4, r4, #3
 8005434:	42a0      	cmp	r0, r4
 8005436:	d0f8      	beq.n	800542a <sbrk_aligned+0x22>
 8005438:	1a21      	subs	r1, r4, r0
 800543a:	4628      	mov	r0, r5
 800543c:	f000 fa0a 	bl	8005854 <_sbrk_r>
 8005440:	3001      	adds	r0, #1
 8005442:	d1f2      	bne.n	800542a <sbrk_aligned+0x22>
 8005444:	e7ef      	b.n	8005426 <sbrk_aligned+0x1e>
 8005446:	bf00      	nop
 8005448:	24000240 	.word	0x24000240

0800544c <_malloc_r>:
 800544c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005450:	1ccd      	adds	r5, r1, #3
 8005452:	f025 0503 	bic.w	r5, r5, #3
 8005456:	3508      	adds	r5, #8
 8005458:	2d0c      	cmp	r5, #12
 800545a:	bf38      	it	cc
 800545c:	250c      	movcc	r5, #12
 800545e:	2d00      	cmp	r5, #0
 8005460:	4606      	mov	r6, r0
 8005462:	db01      	blt.n	8005468 <_malloc_r+0x1c>
 8005464:	42a9      	cmp	r1, r5
 8005466:	d904      	bls.n	8005472 <_malloc_r+0x26>
 8005468:	230c      	movs	r3, #12
 800546a:	6033      	str	r3, [r6, #0]
 800546c:	2000      	movs	r0, #0
 800546e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005472:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005548 <_malloc_r+0xfc>
 8005476:	f000 f869 	bl	800554c <__malloc_lock>
 800547a:	f8d8 3000 	ldr.w	r3, [r8]
 800547e:	461c      	mov	r4, r3
 8005480:	bb44      	cbnz	r4, 80054d4 <_malloc_r+0x88>
 8005482:	4629      	mov	r1, r5
 8005484:	4630      	mov	r0, r6
 8005486:	f7ff ffbf 	bl	8005408 <sbrk_aligned>
 800548a:	1c43      	adds	r3, r0, #1
 800548c:	4604      	mov	r4, r0
 800548e:	d158      	bne.n	8005542 <_malloc_r+0xf6>
 8005490:	f8d8 4000 	ldr.w	r4, [r8]
 8005494:	4627      	mov	r7, r4
 8005496:	2f00      	cmp	r7, #0
 8005498:	d143      	bne.n	8005522 <_malloc_r+0xd6>
 800549a:	2c00      	cmp	r4, #0
 800549c:	d04b      	beq.n	8005536 <_malloc_r+0xea>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	4639      	mov	r1, r7
 80054a2:	4630      	mov	r0, r6
 80054a4:	eb04 0903 	add.w	r9, r4, r3
 80054a8:	f000 f9d4 	bl	8005854 <_sbrk_r>
 80054ac:	4581      	cmp	r9, r0
 80054ae:	d142      	bne.n	8005536 <_malloc_r+0xea>
 80054b0:	6821      	ldr	r1, [r4, #0]
 80054b2:	1a6d      	subs	r5, r5, r1
 80054b4:	4629      	mov	r1, r5
 80054b6:	4630      	mov	r0, r6
 80054b8:	f7ff ffa6 	bl	8005408 <sbrk_aligned>
 80054bc:	3001      	adds	r0, #1
 80054be:	d03a      	beq.n	8005536 <_malloc_r+0xea>
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	442b      	add	r3, r5
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	f8d8 3000 	ldr.w	r3, [r8]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	bb62      	cbnz	r2, 8005528 <_malloc_r+0xdc>
 80054ce:	f8c8 7000 	str.w	r7, [r8]
 80054d2:	e00f      	b.n	80054f4 <_malloc_r+0xa8>
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	1b52      	subs	r2, r2, r5
 80054d8:	d420      	bmi.n	800551c <_malloc_r+0xd0>
 80054da:	2a0b      	cmp	r2, #11
 80054dc:	d917      	bls.n	800550e <_malloc_r+0xc2>
 80054de:	1961      	adds	r1, r4, r5
 80054e0:	42a3      	cmp	r3, r4
 80054e2:	6025      	str	r5, [r4, #0]
 80054e4:	bf18      	it	ne
 80054e6:	6059      	strne	r1, [r3, #4]
 80054e8:	6863      	ldr	r3, [r4, #4]
 80054ea:	bf08      	it	eq
 80054ec:	f8c8 1000 	streq.w	r1, [r8]
 80054f0:	5162      	str	r2, [r4, r5]
 80054f2:	604b      	str	r3, [r1, #4]
 80054f4:	4630      	mov	r0, r6
 80054f6:	f000 f82f 	bl	8005558 <__malloc_unlock>
 80054fa:	f104 000b 	add.w	r0, r4, #11
 80054fe:	1d23      	adds	r3, r4, #4
 8005500:	f020 0007 	bic.w	r0, r0, #7
 8005504:	1ac2      	subs	r2, r0, r3
 8005506:	bf1c      	itt	ne
 8005508:	1a1b      	subne	r3, r3, r0
 800550a:	50a3      	strne	r3, [r4, r2]
 800550c:	e7af      	b.n	800546e <_malloc_r+0x22>
 800550e:	6862      	ldr	r2, [r4, #4]
 8005510:	42a3      	cmp	r3, r4
 8005512:	bf0c      	ite	eq
 8005514:	f8c8 2000 	streq.w	r2, [r8]
 8005518:	605a      	strne	r2, [r3, #4]
 800551a:	e7eb      	b.n	80054f4 <_malloc_r+0xa8>
 800551c:	4623      	mov	r3, r4
 800551e:	6864      	ldr	r4, [r4, #4]
 8005520:	e7ae      	b.n	8005480 <_malloc_r+0x34>
 8005522:	463c      	mov	r4, r7
 8005524:	687f      	ldr	r7, [r7, #4]
 8005526:	e7b6      	b.n	8005496 <_malloc_r+0x4a>
 8005528:	461a      	mov	r2, r3
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	42a3      	cmp	r3, r4
 800552e:	d1fb      	bne.n	8005528 <_malloc_r+0xdc>
 8005530:	2300      	movs	r3, #0
 8005532:	6053      	str	r3, [r2, #4]
 8005534:	e7de      	b.n	80054f4 <_malloc_r+0xa8>
 8005536:	230c      	movs	r3, #12
 8005538:	6033      	str	r3, [r6, #0]
 800553a:	4630      	mov	r0, r6
 800553c:	f000 f80c 	bl	8005558 <__malloc_unlock>
 8005540:	e794      	b.n	800546c <_malloc_r+0x20>
 8005542:	6005      	str	r5, [r0, #0]
 8005544:	e7d6      	b.n	80054f4 <_malloc_r+0xa8>
 8005546:	bf00      	nop
 8005548:	24000244 	.word	0x24000244

0800554c <__malloc_lock>:
 800554c:	4801      	ldr	r0, [pc, #4]	@ (8005554 <__malloc_lock+0x8>)
 800554e:	f000 b9ce 	b.w	80058ee <__retarget_lock_acquire_recursive>
 8005552:	bf00      	nop
 8005554:	24000388 	.word	0x24000388

08005558 <__malloc_unlock>:
 8005558:	4801      	ldr	r0, [pc, #4]	@ (8005560 <__malloc_unlock+0x8>)
 800555a:	f000 b9c9 	b.w	80058f0 <__retarget_lock_release_recursive>
 800555e:	bf00      	nop
 8005560:	24000388 	.word	0x24000388

08005564 <std>:
 8005564:	2300      	movs	r3, #0
 8005566:	b510      	push	{r4, lr}
 8005568:	4604      	mov	r4, r0
 800556a:	e9c0 3300 	strd	r3, r3, [r0]
 800556e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005572:	6083      	str	r3, [r0, #8]
 8005574:	8181      	strh	r1, [r0, #12]
 8005576:	6643      	str	r3, [r0, #100]	@ 0x64
 8005578:	81c2      	strh	r2, [r0, #14]
 800557a:	6183      	str	r3, [r0, #24]
 800557c:	4619      	mov	r1, r3
 800557e:	2208      	movs	r2, #8
 8005580:	305c      	adds	r0, #92	@ 0x5c
 8005582:	f000 f906 	bl	8005792 <memset>
 8005586:	4b0d      	ldr	r3, [pc, #52]	@ (80055bc <std+0x58>)
 8005588:	6263      	str	r3, [r4, #36]	@ 0x24
 800558a:	4b0d      	ldr	r3, [pc, #52]	@ (80055c0 <std+0x5c>)
 800558c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800558e:	4b0d      	ldr	r3, [pc, #52]	@ (80055c4 <std+0x60>)
 8005590:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005592:	4b0d      	ldr	r3, [pc, #52]	@ (80055c8 <std+0x64>)
 8005594:	6323      	str	r3, [r4, #48]	@ 0x30
 8005596:	4b0d      	ldr	r3, [pc, #52]	@ (80055cc <std+0x68>)
 8005598:	6224      	str	r4, [r4, #32]
 800559a:	429c      	cmp	r4, r3
 800559c:	d006      	beq.n	80055ac <std+0x48>
 800559e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80055a2:	4294      	cmp	r4, r2
 80055a4:	d002      	beq.n	80055ac <std+0x48>
 80055a6:	33d0      	adds	r3, #208	@ 0xd0
 80055a8:	429c      	cmp	r4, r3
 80055aa:	d105      	bne.n	80055b8 <std+0x54>
 80055ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80055b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b4:	f000 b99a 	b.w	80058ec <__retarget_lock_init_recursive>
 80055b8:	bd10      	pop	{r4, pc}
 80055ba:	bf00      	nop
 80055bc:	0800570d 	.word	0x0800570d
 80055c0:	0800572f 	.word	0x0800572f
 80055c4:	08005767 	.word	0x08005767
 80055c8:	0800578b 	.word	0x0800578b
 80055cc:	24000248 	.word	0x24000248

080055d0 <stdio_exit_handler>:
 80055d0:	4a02      	ldr	r2, [pc, #8]	@ (80055dc <stdio_exit_handler+0xc>)
 80055d2:	4903      	ldr	r1, [pc, #12]	@ (80055e0 <stdio_exit_handler+0x10>)
 80055d4:	4803      	ldr	r0, [pc, #12]	@ (80055e4 <stdio_exit_handler+0x14>)
 80055d6:	f000 b87b 	b.w	80056d0 <_fwalk_sglue>
 80055da:	bf00      	nop
 80055dc:	240000b8 	.word	0x240000b8
 80055e0:	08006059 	.word	0x08006059
 80055e4:	240000c8 	.word	0x240000c8

080055e8 <cleanup_stdio>:
 80055e8:	6841      	ldr	r1, [r0, #4]
 80055ea:	4b0c      	ldr	r3, [pc, #48]	@ (800561c <cleanup_stdio+0x34>)
 80055ec:	4299      	cmp	r1, r3
 80055ee:	b510      	push	{r4, lr}
 80055f0:	4604      	mov	r4, r0
 80055f2:	d001      	beq.n	80055f8 <cleanup_stdio+0x10>
 80055f4:	f000 fd30 	bl	8006058 <_fflush_r>
 80055f8:	68a1      	ldr	r1, [r4, #8]
 80055fa:	4b09      	ldr	r3, [pc, #36]	@ (8005620 <cleanup_stdio+0x38>)
 80055fc:	4299      	cmp	r1, r3
 80055fe:	d002      	beq.n	8005606 <cleanup_stdio+0x1e>
 8005600:	4620      	mov	r0, r4
 8005602:	f000 fd29 	bl	8006058 <_fflush_r>
 8005606:	68e1      	ldr	r1, [r4, #12]
 8005608:	4b06      	ldr	r3, [pc, #24]	@ (8005624 <cleanup_stdio+0x3c>)
 800560a:	4299      	cmp	r1, r3
 800560c:	d004      	beq.n	8005618 <cleanup_stdio+0x30>
 800560e:	4620      	mov	r0, r4
 8005610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005614:	f000 bd20 	b.w	8006058 <_fflush_r>
 8005618:	bd10      	pop	{r4, pc}
 800561a:	bf00      	nop
 800561c:	24000248 	.word	0x24000248
 8005620:	240002b0 	.word	0x240002b0
 8005624:	24000318 	.word	0x24000318

08005628 <global_stdio_init.part.0>:
 8005628:	b510      	push	{r4, lr}
 800562a:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <global_stdio_init.part.0+0x30>)
 800562c:	4c0b      	ldr	r4, [pc, #44]	@ (800565c <global_stdio_init.part.0+0x34>)
 800562e:	4a0c      	ldr	r2, [pc, #48]	@ (8005660 <global_stdio_init.part.0+0x38>)
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	4620      	mov	r0, r4
 8005634:	2200      	movs	r2, #0
 8005636:	2104      	movs	r1, #4
 8005638:	f7ff ff94 	bl	8005564 <std>
 800563c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005640:	2201      	movs	r2, #1
 8005642:	2109      	movs	r1, #9
 8005644:	f7ff ff8e 	bl	8005564 <std>
 8005648:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800564c:	2202      	movs	r2, #2
 800564e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005652:	2112      	movs	r1, #18
 8005654:	f7ff bf86 	b.w	8005564 <std>
 8005658:	24000380 	.word	0x24000380
 800565c:	24000248 	.word	0x24000248
 8005660:	080055d1 	.word	0x080055d1

08005664 <__sfp_lock_acquire>:
 8005664:	4801      	ldr	r0, [pc, #4]	@ (800566c <__sfp_lock_acquire+0x8>)
 8005666:	f000 b942 	b.w	80058ee <__retarget_lock_acquire_recursive>
 800566a:	bf00      	nop
 800566c:	24000389 	.word	0x24000389

08005670 <__sfp_lock_release>:
 8005670:	4801      	ldr	r0, [pc, #4]	@ (8005678 <__sfp_lock_release+0x8>)
 8005672:	f000 b93d 	b.w	80058f0 <__retarget_lock_release_recursive>
 8005676:	bf00      	nop
 8005678:	24000389 	.word	0x24000389

0800567c <__sinit>:
 800567c:	b510      	push	{r4, lr}
 800567e:	4604      	mov	r4, r0
 8005680:	f7ff fff0 	bl	8005664 <__sfp_lock_acquire>
 8005684:	6a23      	ldr	r3, [r4, #32]
 8005686:	b11b      	cbz	r3, 8005690 <__sinit+0x14>
 8005688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800568c:	f7ff bff0 	b.w	8005670 <__sfp_lock_release>
 8005690:	4b04      	ldr	r3, [pc, #16]	@ (80056a4 <__sinit+0x28>)
 8005692:	6223      	str	r3, [r4, #32]
 8005694:	4b04      	ldr	r3, [pc, #16]	@ (80056a8 <__sinit+0x2c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f5      	bne.n	8005688 <__sinit+0xc>
 800569c:	f7ff ffc4 	bl	8005628 <global_stdio_init.part.0>
 80056a0:	e7f2      	b.n	8005688 <__sinit+0xc>
 80056a2:	bf00      	nop
 80056a4:	080055e9 	.word	0x080055e9
 80056a8:	24000380 	.word	0x24000380

080056ac <fiprintf>:
 80056ac:	b40e      	push	{r1, r2, r3}
 80056ae:	b503      	push	{r0, r1, lr}
 80056b0:	4601      	mov	r1, r0
 80056b2:	ab03      	add	r3, sp, #12
 80056b4:	4805      	ldr	r0, [pc, #20]	@ (80056cc <fiprintf+0x20>)
 80056b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ba:	6800      	ldr	r0, [r0, #0]
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	f000 f9a1 	bl	8005a04 <_vfiprintf_r>
 80056c2:	b002      	add	sp, #8
 80056c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056c8:	b003      	add	sp, #12
 80056ca:	4770      	bx	lr
 80056cc:	240000c4 	.word	0x240000c4

080056d0 <_fwalk_sglue>:
 80056d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d4:	4607      	mov	r7, r0
 80056d6:	4688      	mov	r8, r1
 80056d8:	4614      	mov	r4, r2
 80056da:	2600      	movs	r6, #0
 80056dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056e0:	f1b9 0901 	subs.w	r9, r9, #1
 80056e4:	d505      	bpl.n	80056f2 <_fwalk_sglue+0x22>
 80056e6:	6824      	ldr	r4, [r4, #0]
 80056e8:	2c00      	cmp	r4, #0
 80056ea:	d1f7      	bne.n	80056dc <_fwalk_sglue+0xc>
 80056ec:	4630      	mov	r0, r6
 80056ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056f2:	89ab      	ldrh	r3, [r5, #12]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d907      	bls.n	8005708 <_fwalk_sglue+0x38>
 80056f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056fc:	3301      	adds	r3, #1
 80056fe:	d003      	beq.n	8005708 <_fwalk_sglue+0x38>
 8005700:	4629      	mov	r1, r5
 8005702:	4638      	mov	r0, r7
 8005704:	47c0      	blx	r8
 8005706:	4306      	orrs	r6, r0
 8005708:	3568      	adds	r5, #104	@ 0x68
 800570a:	e7e9      	b.n	80056e0 <_fwalk_sglue+0x10>

0800570c <__sread>:
 800570c:	b510      	push	{r4, lr}
 800570e:	460c      	mov	r4, r1
 8005710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005714:	f000 f88c 	bl	8005830 <_read_r>
 8005718:	2800      	cmp	r0, #0
 800571a:	bfab      	itete	ge
 800571c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800571e:	89a3      	ldrhlt	r3, [r4, #12]
 8005720:	181b      	addge	r3, r3, r0
 8005722:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005726:	bfac      	ite	ge
 8005728:	6563      	strge	r3, [r4, #84]	@ 0x54
 800572a:	81a3      	strhlt	r3, [r4, #12]
 800572c:	bd10      	pop	{r4, pc}

0800572e <__swrite>:
 800572e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005732:	461f      	mov	r7, r3
 8005734:	898b      	ldrh	r3, [r1, #12]
 8005736:	05db      	lsls	r3, r3, #23
 8005738:	4605      	mov	r5, r0
 800573a:	460c      	mov	r4, r1
 800573c:	4616      	mov	r6, r2
 800573e:	d505      	bpl.n	800574c <__swrite+0x1e>
 8005740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005744:	2302      	movs	r3, #2
 8005746:	2200      	movs	r2, #0
 8005748:	f000 f860 	bl	800580c <_lseek_r>
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005752:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005756:	81a3      	strh	r3, [r4, #12]
 8005758:	4632      	mov	r2, r6
 800575a:	463b      	mov	r3, r7
 800575c:	4628      	mov	r0, r5
 800575e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005762:	f000 b887 	b.w	8005874 <_write_r>

08005766 <__sseek>:
 8005766:	b510      	push	{r4, lr}
 8005768:	460c      	mov	r4, r1
 800576a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800576e:	f000 f84d 	bl	800580c <_lseek_r>
 8005772:	1c43      	adds	r3, r0, #1
 8005774:	89a3      	ldrh	r3, [r4, #12]
 8005776:	bf15      	itete	ne
 8005778:	6560      	strne	r0, [r4, #84]	@ 0x54
 800577a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800577e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005782:	81a3      	strheq	r3, [r4, #12]
 8005784:	bf18      	it	ne
 8005786:	81a3      	strhne	r3, [r4, #12]
 8005788:	bd10      	pop	{r4, pc}

0800578a <__sclose>:
 800578a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800578e:	f000 b82d 	b.w	80057ec <_close_r>

08005792 <memset>:
 8005792:	4402      	add	r2, r0
 8005794:	4603      	mov	r3, r0
 8005796:	4293      	cmp	r3, r2
 8005798:	d100      	bne.n	800579c <memset+0xa>
 800579a:	4770      	bx	lr
 800579c:	f803 1b01 	strb.w	r1, [r3], #1
 80057a0:	e7f9      	b.n	8005796 <memset+0x4>

080057a2 <strncmp>:
 80057a2:	b510      	push	{r4, lr}
 80057a4:	b16a      	cbz	r2, 80057c2 <strncmp+0x20>
 80057a6:	3901      	subs	r1, #1
 80057a8:	1884      	adds	r4, r0, r2
 80057aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d103      	bne.n	80057be <strncmp+0x1c>
 80057b6:	42a0      	cmp	r0, r4
 80057b8:	d001      	beq.n	80057be <strncmp+0x1c>
 80057ba:	2a00      	cmp	r2, #0
 80057bc:	d1f5      	bne.n	80057aa <strncmp+0x8>
 80057be:	1ad0      	subs	r0, r2, r3
 80057c0:	bd10      	pop	{r4, pc}
 80057c2:	4610      	mov	r0, r2
 80057c4:	e7fc      	b.n	80057c0 <strncmp+0x1e>

080057c6 <strncpy>:
 80057c6:	b510      	push	{r4, lr}
 80057c8:	3901      	subs	r1, #1
 80057ca:	4603      	mov	r3, r0
 80057cc:	b132      	cbz	r2, 80057dc <strncpy+0x16>
 80057ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80057d2:	f803 4b01 	strb.w	r4, [r3], #1
 80057d6:	3a01      	subs	r2, #1
 80057d8:	2c00      	cmp	r4, #0
 80057da:	d1f7      	bne.n	80057cc <strncpy+0x6>
 80057dc:	441a      	add	r2, r3
 80057de:	2100      	movs	r1, #0
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d100      	bne.n	80057e6 <strncpy+0x20>
 80057e4:	bd10      	pop	{r4, pc}
 80057e6:	f803 1b01 	strb.w	r1, [r3], #1
 80057ea:	e7f9      	b.n	80057e0 <strncpy+0x1a>

080057ec <_close_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	4d06      	ldr	r5, [pc, #24]	@ (8005808 <_close_r+0x1c>)
 80057f0:	2300      	movs	r3, #0
 80057f2:	4604      	mov	r4, r0
 80057f4:	4608      	mov	r0, r1
 80057f6:	602b      	str	r3, [r5, #0]
 80057f8:	f7fb fa1b 	bl	8000c32 <_close>
 80057fc:	1c43      	adds	r3, r0, #1
 80057fe:	d102      	bne.n	8005806 <_close_r+0x1a>
 8005800:	682b      	ldr	r3, [r5, #0]
 8005802:	b103      	cbz	r3, 8005806 <_close_r+0x1a>
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	bd38      	pop	{r3, r4, r5, pc}
 8005808:	24000384 	.word	0x24000384

0800580c <_lseek_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	4d07      	ldr	r5, [pc, #28]	@ (800582c <_lseek_r+0x20>)
 8005810:	4604      	mov	r4, r0
 8005812:	4608      	mov	r0, r1
 8005814:	4611      	mov	r1, r2
 8005816:	2200      	movs	r2, #0
 8005818:	602a      	str	r2, [r5, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	f7fb fa30 	bl	8000c80 <_lseek>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d102      	bne.n	800582a <_lseek_r+0x1e>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	b103      	cbz	r3, 800582a <_lseek_r+0x1e>
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	24000384 	.word	0x24000384

08005830 <_read_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4d07      	ldr	r5, [pc, #28]	@ (8005850 <_read_r+0x20>)
 8005834:	4604      	mov	r4, r0
 8005836:	4608      	mov	r0, r1
 8005838:	4611      	mov	r1, r2
 800583a:	2200      	movs	r2, #0
 800583c:	602a      	str	r2, [r5, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	f7fb f9be 	bl	8000bc0 <_read>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d102      	bne.n	800584e <_read_r+0x1e>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	b103      	cbz	r3, 800584e <_read_r+0x1e>
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	bd38      	pop	{r3, r4, r5, pc}
 8005850:	24000384 	.word	0x24000384

08005854 <_sbrk_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	4d06      	ldr	r5, [pc, #24]	@ (8005870 <_sbrk_r+0x1c>)
 8005858:	2300      	movs	r3, #0
 800585a:	4604      	mov	r4, r0
 800585c:	4608      	mov	r0, r1
 800585e:	602b      	str	r3, [r5, #0]
 8005860:	f7fb fa1c 	bl	8000c9c <_sbrk>
 8005864:	1c43      	adds	r3, r0, #1
 8005866:	d102      	bne.n	800586e <_sbrk_r+0x1a>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	b103      	cbz	r3, 800586e <_sbrk_r+0x1a>
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	24000384 	.word	0x24000384

08005874 <_write_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	4d07      	ldr	r5, [pc, #28]	@ (8005894 <_write_r+0x20>)
 8005878:	4604      	mov	r4, r0
 800587a:	4608      	mov	r0, r1
 800587c:	4611      	mov	r1, r2
 800587e:	2200      	movs	r2, #0
 8005880:	602a      	str	r2, [r5, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	f7fb f9b9 	bl	8000bfa <_write>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d102      	bne.n	8005892 <_write_r+0x1e>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	b103      	cbz	r3, 8005892 <_write_r+0x1e>
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	bd38      	pop	{r3, r4, r5, pc}
 8005894:	24000384 	.word	0x24000384

08005898 <__errno>:
 8005898:	4b01      	ldr	r3, [pc, #4]	@ (80058a0 <__errno+0x8>)
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	240000c4 	.word	0x240000c4

080058a4 <__libc_init_array>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	4d0d      	ldr	r5, [pc, #52]	@ (80058dc <__libc_init_array+0x38>)
 80058a8:	4c0d      	ldr	r4, [pc, #52]	@ (80058e0 <__libc_init_array+0x3c>)
 80058aa:	1b64      	subs	r4, r4, r5
 80058ac:	10a4      	asrs	r4, r4, #2
 80058ae:	2600      	movs	r6, #0
 80058b0:	42a6      	cmp	r6, r4
 80058b2:	d109      	bne.n	80058c8 <__libc_init_array+0x24>
 80058b4:	4d0b      	ldr	r5, [pc, #44]	@ (80058e4 <__libc_init_array+0x40>)
 80058b6:	4c0c      	ldr	r4, [pc, #48]	@ (80058e8 <__libc_init_array+0x44>)
 80058b8:	f000 fd52 	bl	8006360 <_init>
 80058bc:	1b64      	subs	r4, r4, r5
 80058be:	10a4      	asrs	r4, r4, #2
 80058c0:	2600      	movs	r6, #0
 80058c2:	42a6      	cmp	r6, r4
 80058c4:	d105      	bne.n	80058d2 <__libc_init_array+0x2e>
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058cc:	4798      	blx	r3
 80058ce:	3601      	adds	r6, #1
 80058d0:	e7ee      	b.n	80058b0 <__libc_init_array+0xc>
 80058d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d6:	4798      	blx	r3
 80058d8:	3601      	adds	r6, #1
 80058da:	e7f2      	b.n	80058c2 <__libc_init_array+0x1e>
 80058dc:	08006674 	.word	0x08006674
 80058e0:	08006674 	.word	0x08006674
 80058e4:	08006674 	.word	0x08006674
 80058e8:	08006678 	.word	0x08006678

080058ec <__retarget_lock_init_recursive>:
 80058ec:	4770      	bx	lr

080058ee <__retarget_lock_acquire_recursive>:
 80058ee:	4770      	bx	lr

080058f0 <__retarget_lock_release_recursive>:
 80058f0:	4770      	bx	lr

080058f2 <memcpy>:
 80058f2:	440a      	add	r2, r1
 80058f4:	4291      	cmp	r1, r2
 80058f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80058fa:	d100      	bne.n	80058fe <memcpy+0xc>
 80058fc:	4770      	bx	lr
 80058fe:	b510      	push	{r4, lr}
 8005900:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005908:	4291      	cmp	r1, r2
 800590a:	d1f9      	bne.n	8005900 <memcpy+0xe>
 800590c:	bd10      	pop	{r4, pc}

0800590e <abort>:
 800590e:	b508      	push	{r3, lr}
 8005910:	2006      	movs	r0, #6
 8005912:	f000 fc85 	bl	8006220 <raise>
 8005916:	2001      	movs	r0, #1
 8005918:	f7fb f947 	bl	8000baa <_exit>

0800591c <_free_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4605      	mov	r5, r0
 8005920:	2900      	cmp	r1, #0
 8005922:	d041      	beq.n	80059a8 <_free_r+0x8c>
 8005924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005928:	1f0c      	subs	r4, r1, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	bfb8      	it	lt
 800592e:	18e4      	addlt	r4, r4, r3
 8005930:	f7ff fe0c 	bl	800554c <__malloc_lock>
 8005934:	4a1d      	ldr	r2, [pc, #116]	@ (80059ac <_free_r+0x90>)
 8005936:	6813      	ldr	r3, [r2, #0]
 8005938:	b933      	cbnz	r3, 8005948 <_free_r+0x2c>
 800593a:	6063      	str	r3, [r4, #4]
 800593c:	6014      	str	r4, [r2, #0]
 800593e:	4628      	mov	r0, r5
 8005940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005944:	f7ff be08 	b.w	8005558 <__malloc_unlock>
 8005948:	42a3      	cmp	r3, r4
 800594a:	d908      	bls.n	800595e <_free_r+0x42>
 800594c:	6820      	ldr	r0, [r4, #0]
 800594e:	1821      	adds	r1, r4, r0
 8005950:	428b      	cmp	r3, r1
 8005952:	bf01      	itttt	eq
 8005954:	6819      	ldreq	r1, [r3, #0]
 8005956:	685b      	ldreq	r3, [r3, #4]
 8005958:	1809      	addeq	r1, r1, r0
 800595a:	6021      	streq	r1, [r4, #0]
 800595c:	e7ed      	b.n	800593a <_free_r+0x1e>
 800595e:	461a      	mov	r2, r3
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	b10b      	cbz	r3, 8005968 <_free_r+0x4c>
 8005964:	42a3      	cmp	r3, r4
 8005966:	d9fa      	bls.n	800595e <_free_r+0x42>
 8005968:	6811      	ldr	r1, [r2, #0]
 800596a:	1850      	adds	r0, r2, r1
 800596c:	42a0      	cmp	r0, r4
 800596e:	d10b      	bne.n	8005988 <_free_r+0x6c>
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	4401      	add	r1, r0
 8005974:	1850      	adds	r0, r2, r1
 8005976:	4283      	cmp	r3, r0
 8005978:	6011      	str	r1, [r2, #0]
 800597a:	d1e0      	bne.n	800593e <_free_r+0x22>
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	6053      	str	r3, [r2, #4]
 8005982:	4408      	add	r0, r1
 8005984:	6010      	str	r0, [r2, #0]
 8005986:	e7da      	b.n	800593e <_free_r+0x22>
 8005988:	d902      	bls.n	8005990 <_free_r+0x74>
 800598a:	230c      	movs	r3, #12
 800598c:	602b      	str	r3, [r5, #0]
 800598e:	e7d6      	b.n	800593e <_free_r+0x22>
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	1821      	adds	r1, r4, r0
 8005994:	428b      	cmp	r3, r1
 8005996:	bf04      	itt	eq
 8005998:	6819      	ldreq	r1, [r3, #0]
 800599a:	685b      	ldreq	r3, [r3, #4]
 800599c:	6063      	str	r3, [r4, #4]
 800599e:	bf04      	itt	eq
 80059a0:	1809      	addeq	r1, r1, r0
 80059a2:	6021      	streq	r1, [r4, #0]
 80059a4:	6054      	str	r4, [r2, #4]
 80059a6:	e7ca      	b.n	800593e <_free_r+0x22>
 80059a8:	bd38      	pop	{r3, r4, r5, pc}
 80059aa:	bf00      	nop
 80059ac:	24000244 	.word	0x24000244

080059b0 <__sfputc_r>:
 80059b0:	6893      	ldr	r3, [r2, #8]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	b410      	push	{r4}
 80059b8:	6093      	str	r3, [r2, #8]
 80059ba:	da08      	bge.n	80059ce <__sfputc_r+0x1e>
 80059bc:	6994      	ldr	r4, [r2, #24]
 80059be:	42a3      	cmp	r3, r4
 80059c0:	db01      	blt.n	80059c6 <__sfputc_r+0x16>
 80059c2:	290a      	cmp	r1, #10
 80059c4:	d103      	bne.n	80059ce <__sfputc_r+0x1e>
 80059c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059ca:	f000 bb6d 	b.w	80060a8 <__swbuf_r>
 80059ce:	6813      	ldr	r3, [r2, #0]
 80059d0:	1c58      	adds	r0, r3, #1
 80059d2:	6010      	str	r0, [r2, #0]
 80059d4:	7019      	strb	r1, [r3, #0]
 80059d6:	4608      	mov	r0, r1
 80059d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059dc:	4770      	bx	lr

080059de <__sfputs_r>:
 80059de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e0:	4606      	mov	r6, r0
 80059e2:	460f      	mov	r7, r1
 80059e4:	4614      	mov	r4, r2
 80059e6:	18d5      	adds	r5, r2, r3
 80059e8:	42ac      	cmp	r4, r5
 80059ea:	d101      	bne.n	80059f0 <__sfputs_r+0x12>
 80059ec:	2000      	movs	r0, #0
 80059ee:	e007      	b.n	8005a00 <__sfputs_r+0x22>
 80059f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f4:	463a      	mov	r2, r7
 80059f6:	4630      	mov	r0, r6
 80059f8:	f7ff ffda 	bl	80059b0 <__sfputc_r>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d1f3      	bne.n	80059e8 <__sfputs_r+0xa>
 8005a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a04 <_vfiprintf_r>:
 8005a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a08:	460d      	mov	r5, r1
 8005a0a:	b09d      	sub	sp, #116	@ 0x74
 8005a0c:	4614      	mov	r4, r2
 8005a0e:	4698      	mov	r8, r3
 8005a10:	4606      	mov	r6, r0
 8005a12:	b118      	cbz	r0, 8005a1c <_vfiprintf_r+0x18>
 8005a14:	6a03      	ldr	r3, [r0, #32]
 8005a16:	b90b      	cbnz	r3, 8005a1c <_vfiprintf_r+0x18>
 8005a18:	f7ff fe30 	bl	800567c <__sinit>
 8005a1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a1e:	07d9      	lsls	r1, r3, #31
 8005a20:	d405      	bmi.n	8005a2e <_vfiprintf_r+0x2a>
 8005a22:	89ab      	ldrh	r3, [r5, #12]
 8005a24:	059a      	lsls	r2, r3, #22
 8005a26:	d402      	bmi.n	8005a2e <_vfiprintf_r+0x2a>
 8005a28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a2a:	f7ff ff60 	bl	80058ee <__retarget_lock_acquire_recursive>
 8005a2e:	89ab      	ldrh	r3, [r5, #12]
 8005a30:	071b      	lsls	r3, r3, #28
 8005a32:	d501      	bpl.n	8005a38 <_vfiprintf_r+0x34>
 8005a34:	692b      	ldr	r3, [r5, #16]
 8005a36:	b99b      	cbnz	r3, 8005a60 <_vfiprintf_r+0x5c>
 8005a38:	4629      	mov	r1, r5
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	f000 fb72 	bl	8006124 <__swsetup_r>
 8005a40:	b170      	cbz	r0, 8005a60 <_vfiprintf_r+0x5c>
 8005a42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a44:	07dc      	lsls	r4, r3, #31
 8005a46:	d504      	bpl.n	8005a52 <_vfiprintf_r+0x4e>
 8005a48:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4c:	b01d      	add	sp, #116	@ 0x74
 8005a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a52:	89ab      	ldrh	r3, [r5, #12]
 8005a54:	0598      	lsls	r0, r3, #22
 8005a56:	d4f7      	bmi.n	8005a48 <_vfiprintf_r+0x44>
 8005a58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a5a:	f7ff ff49 	bl	80058f0 <__retarget_lock_release_recursive>
 8005a5e:	e7f3      	b.n	8005a48 <_vfiprintf_r+0x44>
 8005a60:	2300      	movs	r3, #0
 8005a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a64:	2320      	movs	r3, #32
 8005a66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a6e:	2330      	movs	r3, #48	@ 0x30
 8005a70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c20 <_vfiprintf_r+0x21c>
 8005a74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a78:	f04f 0901 	mov.w	r9, #1
 8005a7c:	4623      	mov	r3, r4
 8005a7e:	469a      	mov	sl, r3
 8005a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a84:	b10a      	cbz	r2, 8005a8a <_vfiprintf_r+0x86>
 8005a86:	2a25      	cmp	r2, #37	@ 0x25
 8005a88:	d1f9      	bne.n	8005a7e <_vfiprintf_r+0x7a>
 8005a8a:	ebba 0b04 	subs.w	fp, sl, r4
 8005a8e:	d00b      	beq.n	8005aa8 <_vfiprintf_r+0xa4>
 8005a90:	465b      	mov	r3, fp
 8005a92:	4622      	mov	r2, r4
 8005a94:	4629      	mov	r1, r5
 8005a96:	4630      	mov	r0, r6
 8005a98:	f7ff ffa1 	bl	80059de <__sfputs_r>
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	f000 80a7 	beq.w	8005bf0 <_vfiprintf_r+0x1ec>
 8005aa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005aa4:	445a      	add	r2, fp
 8005aa6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 809f 	beq.w	8005bf0 <_vfiprintf_r+0x1ec>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005abc:	f10a 0a01 	add.w	sl, sl, #1
 8005ac0:	9304      	str	r3, [sp, #16]
 8005ac2:	9307      	str	r3, [sp, #28]
 8005ac4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ac8:	931a      	str	r3, [sp, #104]	@ 0x68
 8005aca:	4654      	mov	r4, sl
 8005acc:	2205      	movs	r2, #5
 8005ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad2:	4853      	ldr	r0, [pc, #332]	@ (8005c20 <_vfiprintf_r+0x21c>)
 8005ad4:	f7fa fc14 	bl	8000300 <memchr>
 8005ad8:	9a04      	ldr	r2, [sp, #16]
 8005ada:	b9d8      	cbnz	r0, 8005b14 <_vfiprintf_r+0x110>
 8005adc:	06d1      	lsls	r1, r2, #27
 8005ade:	bf44      	itt	mi
 8005ae0:	2320      	movmi	r3, #32
 8005ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ae6:	0713      	lsls	r3, r2, #28
 8005ae8:	bf44      	itt	mi
 8005aea:	232b      	movmi	r3, #43	@ 0x2b
 8005aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005af0:	f89a 3000 	ldrb.w	r3, [sl]
 8005af4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005af6:	d015      	beq.n	8005b24 <_vfiprintf_r+0x120>
 8005af8:	9a07      	ldr	r2, [sp, #28]
 8005afa:	4654      	mov	r4, sl
 8005afc:	2000      	movs	r0, #0
 8005afe:	f04f 0c0a 	mov.w	ip, #10
 8005b02:	4621      	mov	r1, r4
 8005b04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b08:	3b30      	subs	r3, #48	@ 0x30
 8005b0a:	2b09      	cmp	r3, #9
 8005b0c:	d94b      	bls.n	8005ba6 <_vfiprintf_r+0x1a2>
 8005b0e:	b1b0      	cbz	r0, 8005b3e <_vfiprintf_r+0x13a>
 8005b10:	9207      	str	r2, [sp, #28]
 8005b12:	e014      	b.n	8005b3e <_vfiprintf_r+0x13a>
 8005b14:	eba0 0308 	sub.w	r3, r0, r8
 8005b18:	fa09 f303 	lsl.w	r3, r9, r3
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	9304      	str	r3, [sp, #16]
 8005b20:	46a2      	mov	sl, r4
 8005b22:	e7d2      	b.n	8005aca <_vfiprintf_r+0xc6>
 8005b24:	9b03      	ldr	r3, [sp, #12]
 8005b26:	1d19      	adds	r1, r3, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	9103      	str	r1, [sp, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bfbb      	ittet	lt
 8005b30:	425b      	neglt	r3, r3
 8005b32:	f042 0202 	orrlt.w	r2, r2, #2
 8005b36:	9307      	strge	r3, [sp, #28]
 8005b38:	9307      	strlt	r3, [sp, #28]
 8005b3a:	bfb8      	it	lt
 8005b3c:	9204      	strlt	r2, [sp, #16]
 8005b3e:	7823      	ldrb	r3, [r4, #0]
 8005b40:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b42:	d10a      	bne.n	8005b5a <_vfiprintf_r+0x156>
 8005b44:	7863      	ldrb	r3, [r4, #1]
 8005b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b48:	d132      	bne.n	8005bb0 <_vfiprintf_r+0x1ac>
 8005b4a:	9b03      	ldr	r3, [sp, #12]
 8005b4c:	1d1a      	adds	r2, r3, #4
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	9203      	str	r2, [sp, #12]
 8005b52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b56:	3402      	adds	r4, #2
 8005b58:	9305      	str	r3, [sp, #20]
 8005b5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c30 <_vfiprintf_r+0x22c>
 8005b5e:	7821      	ldrb	r1, [r4, #0]
 8005b60:	2203      	movs	r2, #3
 8005b62:	4650      	mov	r0, sl
 8005b64:	f7fa fbcc 	bl	8000300 <memchr>
 8005b68:	b138      	cbz	r0, 8005b7a <_vfiprintf_r+0x176>
 8005b6a:	9b04      	ldr	r3, [sp, #16]
 8005b6c:	eba0 000a 	sub.w	r0, r0, sl
 8005b70:	2240      	movs	r2, #64	@ 0x40
 8005b72:	4082      	lsls	r2, r0
 8005b74:	4313      	orrs	r3, r2
 8005b76:	3401      	adds	r4, #1
 8005b78:	9304      	str	r3, [sp, #16]
 8005b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b7e:	4829      	ldr	r0, [pc, #164]	@ (8005c24 <_vfiprintf_r+0x220>)
 8005b80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b84:	2206      	movs	r2, #6
 8005b86:	f7fa fbbb 	bl	8000300 <memchr>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d03f      	beq.n	8005c0e <_vfiprintf_r+0x20a>
 8005b8e:	4b26      	ldr	r3, [pc, #152]	@ (8005c28 <_vfiprintf_r+0x224>)
 8005b90:	bb1b      	cbnz	r3, 8005bda <_vfiprintf_r+0x1d6>
 8005b92:	9b03      	ldr	r3, [sp, #12]
 8005b94:	3307      	adds	r3, #7
 8005b96:	f023 0307 	bic.w	r3, r3, #7
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	9303      	str	r3, [sp, #12]
 8005b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ba0:	443b      	add	r3, r7
 8005ba2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ba4:	e76a      	b.n	8005a7c <_vfiprintf_r+0x78>
 8005ba6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005baa:	460c      	mov	r4, r1
 8005bac:	2001      	movs	r0, #1
 8005bae:	e7a8      	b.n	8005b02 <_vfiprintf_r+0xfe>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	3401      	adds	r4, #1
 8005bb4:	9305      	str	r3, [sp, #20]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	f04f 0c0a 	mov.w	ip, #10
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bc2:	3a30      	subs	r2, #48	@ 0x30
 8005bc4:	2a09      	cmp	r2, #9
 8005bc6:	d903      	bls.n	8005bd0 <_vfiprintf_r+0x1cc>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0c6      	beq.n	8005b5a <_vfiprintf_r+0x156>
 8005bcc:	9105      	str	r1, [sp, #20]
 8005bce:	e7c4      	b.n	8005b5a <_vfiprintf_r+0x156>
 8005bd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e7f0      	b.n	8005bbc <_vfiprintf_r+0x1b8>
 8005bda:	ab03      	add	r3, sp, #12
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	462a      	mov	r2, r5
 8005be0:	4b12      	ldr	r3, [pc, #72]	@ (8005c2c <_vfiprintf_r+0x228>)
 8005be2:	a904      	add	r1, sp, #16
 8005be4:	4630      	mov	r0, r6
 8005be6:	f3af 8000 	nop.w
 8005bea:	4607      	mov	r7, r0
 8005bec:	1c78      	adds	r0, r7, #1
 8005bee:	d1d6      	bne.n	8005b9e <_vfiprintf_r+0x19a>
 8005bf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bf2:	07d9      	lsls	r1, r3, #31
 8005bf4:	d405      	bmi.n	8005c02 <_vfiprintf_r+0x1fe>
 8005bf6:	89ab      	ldrh	r3, [r5, #12]
 8005bf8:	059a      	lsls	r2, r3, #22
 8005bfa:	d402      	bmi.n	8005c02 <_vfiprintf_r+0x1fe>
 8005bfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bfe:	f7ff fe77 	bl	80058f0 <__retarget_lock_release_recursive>
 8005c02:	89ab      	ldrh	r3, [r5, #12]
 8005c04:	065b      	lsls	r3, r3, #25
 8005c06:	f53f af1f 	bmi.w	8005a48 <_vfiprintf_r+0x44>
 8005c0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c0c:	e71e      	b.n	8005a4c <_vfiprintf_r+0x48>
 8005c0e:	ab03      	add	r3, sp, #12
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	462a      	mov	r2, r5
 8005c14:	4b05      	ldr	r3, [pc, #20]	@ (8005c2c <_vfiprintf_r+0x228>)
 8005c16:	a904      	add	r1, sp, #16
 8005c18:	4630      	mov	r0, r6
 8005c1a:	f000 f879 	bl	8005d10 <_printf_i>
 8005c1e:	e7e4      	b.n	8005bea <_vfiprintf_r+0x1e6>
 8005c20:	08006637 	.word	0x08006637
 8005c24:	08006641 	.word	0x08006641
 8005c28:	00000000 	.word	0x00000000
 8005c2c:	080059df 	.word	0x080059df
 8005c30:	0800663d 	.word	0x0800663d

08005c34 <_printf_common>:
 8005c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c38:	4616      	mov	r6, r2
 8005c3a:	4698      	mov	r8, r3
 8005c3c:	688a      	ldr	r2, [r1, #8]
 8005c3e:	690b      	ldr	r3, [r1, #16]
 8005c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c44:	4293      	cmp	r3, r2
 8005c46:	bfb8      	it	lt
 8005c48:	4613      	movlt	r3, r2
 8005c4a:	6033      	str	r3, [r6, #0]
 8005c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c50:	4607      	mov	r7, r0
 8005c52:	460c      	mov	r4, r1
 8005c54:	b10a      	cbz	r2, 8005c5a <_printf_common+0x26>
 8005c56:	3301      	adds	r3, #1
 8005c58:	6033      	str	r3, [r6, #0]
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	0699      	lsls	r1, r3, #26
 8005c5e:	bf42      	ittt	mi
 8005c60:	6833      	ldrmi	r3, [r6, #0]
 8005c62:	3302      	addmi	r3, #2
 8005c64:	6033      	strmi	r3, [r6, #0]
 8005c66:	6825      	ldr	r5, [r4, #0]
 8005c68:	f015 0506 	ands.w	r5, r5, #6
 8005c6c:	d106      	bne.n	8005c7c <_printf_common+0x48>
 8005c6e:	f104 0a19 	add.w	sl, r4, #25
 8005c72:	68e3      	ldr	r3, [r4, #12]
 8005c74:	6832      	ldr	r2, [r6, #0]
 8005c76:	1a9b      	subs	r3, r3, r2
 8005c78:	42ab      	cmp	r3, r5
 8005c7a:	dc26      	bgt.n	8005cca <_printf_common+0x96>
 8005c7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c80:	6822      	ldr	r2, [r4, #0]
 8005c82:	3b00      	subs	r3, #0
 8005c84:	bf18      	it	ne
 8005c86:	2301      	movne	r3, #1
 8005c88:	0692      	lsls	r2, r2, #26
 8005c8a:	d42b      	bmi.n	8005ce4 <_printf_common+0xb0>
 8005c8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c90:	4641      	mov	r1, r8
 8005c92:	4638      	mov	r0, r7
 8005c94:	47c8      	blx	r9
 8005c96:	3001      	adds	r0, #1
 8005c98:	d01e      	beq.n	8005cd8 <_printf_common+0xa4>
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	6922      	ldr	r2, [r4, #16]
 8005c9e:	f003 0306 	and.w	r3, r3, #6
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	bf02      	ittt	eq
 8005ca6:	68e5      	ldreq	r5, [r4, #12]
 8005ca8:	6833      	ldreq	r3, [r6, #0]
 8005caa:	1aed      	subeq	r5, r5, r3
 8005cac:	68a3      	ldr	r3, [r4, #8]
 8005cae:	bf0c      	ite	eq
 8005cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cb4:	2500      	movne	r5, #0
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	bfc4      	itt	gt
 8005cba:	1a9b      	subgt	r3, r3, r2
 8005cbc:	18ed      	addgt	r5, r5, r3
 8005cbe:	2600      	movs	r6, #0
 8005cc0:	341a      	adds	r4, #26
 8005cc2:	42b5      	cmp	r5, r6
 8005cc4:	d11a      	bne.n	8005cfc <_printf_common+0xc8>
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	e008      	b.n	8005cdc <_printf_common+0xa8>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	4652      	mov	r2, sl
 8005cce:	4641      	mov	r1, r8
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	47c8      	blx	r9
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d103      	bne.n	8005ce0 <_printf_common+0xac>
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce0:	3501      	adds	r5, #1
 8005ce2:	e7c6      	b.n	8005c72 <_printf_common+0x3e>
 8005ce4:	18e1      	adds	r1, r4, r3
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	2030      	movs	r0, #48	@ 0x30
 8005cea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005cee:	4422      	add	r2, r4
 8005cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005cf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cf8:	3302      	adds	r3, #2
 8005cfa:	e7c7      	b.n	8005c8c <_printf_common+0x58>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	4622      	mov	r2, r4
 8005d00:	4641      	mov	r1, r8
 8005d02:	4638      	mov	r0, r7
 8005d04:	47c8      	blx	r9
 8005d06:	3001      	adds	r0, #1
 8005d08:	d0e6      	beq.n	8005cd8 <_printf_common+0xa4>
 8005d0a:	3601      	adds	r6, #1
 8005d0c:	e7d9      	b.n	8005cc2 <_printf_common+0x8e>
	...

08005d10 <_printf_i>:
 8005d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d14:	7e0f      	ldrb	r7, [r1, #24]
 8005d16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d18:	2f78      	cmp	r7, #120	@ 0x78
 8005d1a:	4691      	mov	r9, r2
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	469a      	mov	sl, r3
 8005d22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d26:	d807      	bhi.n	8005d38 <_printf_i+0x28>
 8005d28:	2f62      	cmp	r7, #98	@ 0x62
 8005d2a:	d80a      	bhi.n	8005d42 <_printf_i+0x32>
 8005d2c:	2f00      	cmp	r7, #0
 8005d2e:	f000 80d2 	beq.w	8005ed6 <_printf_i+0x1c6>
 8005d32:	2f58      	cmp	r7, #88	@ 0x58
 8005d34:	f000 80b9 	beq.w	8005eaa <_printf_i+0x19a>
 8005d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d40:	e03a      	b.n	8005db8 <_printf_i+0xa8>
 8005d42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d46:	2b15      	cmp	r3, #21
 8005d48:	d8f6      	bhi.n	8005d38 <_printf_i+0x28>
 8005d4a:	a101      	add	r1, pc, #4	@ (adr r1, 8005d50 <_printf_i+0x40>)
 8005d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d50:	08005da9 	.word	0x08005da9
 8005d54:	08005dbd 	.word	0x08005dbd
 8005d58:	08005d39 	.word	0x08005d39
 8005d5c:	08005d39 	.word	0x08005d39
 8005d60:	08005d39 	.word	0x08005d39
 8005d64:	08005d39 	.word	0x08005d39
 8005d68:	08005dbd 	.word	0x08005dbd
 8005d6c:	08005d39 	.word	0x08005d39
 8005d70:	08005d39 	.word	0x08005d39
 8005d74:	08005d39 	.word	0x08005d39
 8005d78:	08005d39 	.word	0x08005d39
 8005d7c:	08005ebd 	.word	0x08005ebd
 8005d80:	08005de7 	.word	0x08005de7
 8005d84:	08005e77 	.word	0x08005e77
 8005d88:	08005d39 	.word	0x08005d39
 8005d8c:	08005d39 	.word	0x08005d39
 8005d90:	08005edf 	.word	0x08005edf
 8005d94:	08005d39 	.word	0x08005d39
 8005d98:	08005de7 	.word	0x08005de7
 8005d9c:	08005d39 	.word	0x08005d39
 8005da0:	08005d39 	.word	0x08005d39
 8005da4:	08005e7f 	.word	0x08005e7f
 8005da8:	6833      	ldr	r3, [r6, #0]
 8005daa:	1d1a      	adds	r2, r3, #4
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6032      	str	r2, [r6, #0]
 8005db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005db4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005db8:	2301      	movs	r3, #1
 8005dba:	e09d      	b.n	8005ef8 <_printf_i+0x1e8>
 8005dbc:	6833      	ldr	r3, [r6, #0]
 8005dbe:	6820      	ldr	r0, [r4, #0]
 8005dc0:	1d19      	adds	r1, r3, #4
 8005dc2:	6031      	str	r1, [r6, #0]
 8005dc4:	0606      	lsls	r6, r0, #24
 8005dc6:	d501      	bpl.n	8005dcc <_printf_i+0xbc>
 8005dc8:	681d      	ldr	r5, [r3, #0]
 8005dca:	e003      	b.n	8005dd4 <_printf_i+0xc4>
 8005dcc:	0645      	lsls	r5, r0, #25
 8005dce:	d5fb      	bpl.n	8005dc8 <_printf_i+0xb8>
 8005dd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005dd4:	2d00      	cmp	r5, #0
 8005dd6:	da03      	bge.n	8005de0 <_printf_i+0xd0>
 8005dd8:	232d      	movs	r3, #45	@ 0x2d
 8005dda:	426d      	negs	r5, r5
 8005ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005de0:	4859      	ldr	r0, [pc, #356]	@ (8005f48 <_printf_i+0x238>)
 8005de2:	230a      	movs	r3, #10
 8005de4:	e011      	b.n	8005e0a <_printf_i+0xfa>
 8005de6:	6821      	ldr	r1, [r4, #0]
 8005de8:	6833      	ldr	r3, [r6, #0]
 8005dea:	0608      	lsls	r0, r1, #24
 8005dec:	f853 5b04 	ldr.w	r5, [r3], #4
 8005df0:	d402      	bmi.n	8005df8 <_printf_i+0xe8>
 8005df2:	0649      	lsls	r1, r1, #25
 8005df4:	bf48      	it	mi
 8005df6:	b2ad      	uxthmi	r5, r5
 8005df8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dfa:	4853      	ldr	r0, [pc, #332]	@ (8005f48 <_printf_i+0x238>)
 8005dfc:	6033      	str	r3, [r6, #0]
 8005dfe:	bf14      	ite	ne
 8005e00:	230a      	movne	r3, #10
 8005e02:	2308      	moveq	r3, #8
 8005e04:	2100      	movs	r1, #0
 8005e06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e0a:	6866      	ldr	r6, [r4, #4]
 8005e0c:	60a6      	str	r6, [r4, #8]
 8005e0e:	2e00      	cmp	r6, #0
 8005e10:	bfa2      	ittt	ge
 8005e12:	6821      	ldrge	r1, [r4, #0]
 8005e14:	f021 0104 	bicge.w	r1, r1, #4
 8005e18:	6021      	strge	r1, [r4, #0]
 8005e1a:	b90d      	cbnz	r5, 8005e20 <_printf_i+0x110>
 8005e1c:	2e00      	cmp	r6, #0
 8005e1e:	d04b      	beq.n	8005eb8 <_printf_i+0x1a8>
 8005e20:	4616      	mov	r6, r2
 8005e22:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e26:	fb03 5711 	mls	r7, r3, r1, r5
 8005e2a:	5dc7      	ldrb	r7, [r0, r7]
 8005e2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e30:	462f      	mov	r7, r5
 8005e32:	42bb      	cmp	r3, r7
 8005e34:	460d      	mov	r5, r1
 8005e36:	d9f4      	bls.n	8005e22 <_printf_i+0x112>
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d10b      	bne.n	8005e54 <_printf_i+0x144>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	07df      	lsls	r7, r3, #31
 8005e40:	d508      	bpl.n	8005e54 <_printf_i+0x144>
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	6861      	ldr	r1, [r4, #4]
 8005e46:	4299      	cmp	r1, r3
 8005e48:	bfde      	ittt	le
 8005e4a:	2330      	movle	r3, #48	@ 0x30
 8005e4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e54:	1b92      	subs	r2, r2, r6
 8005e56:	6122      	str	r2, [r4, #16]
 8005e58:	f8cd a000 	str.w	sl, [sp]
 8005e5c:	464b      	mov	r3, r9
 8005e5e:	aa03      	add	r2, sp, #12
 8005e60:	4621      	mov	r1, r4
 8005e62:	4640      	mov	r0, r8
 8005e64:	f7ff fee6 	bl	8005c34 <_printf_common>
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d14a      	bne.n	8005f02 <_printf_i+0x1f2>
 8005e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e70:	b004      	add	sp, #16
 8005e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	f043 0320 	orr.w	r3, r3, #32
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	4833      	ldr	r0, [pc, #204]	@ (8005f4c <_printf_i+0x23c>)
 8005e80:	2778      	movs	r7, #120	@ 0x78
 8005e82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	6831      	ldr	r1, [r6, #0]
 8005e8a:	061f      	lsls	r7, r3, #24
 8005e8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e90:	d402      	bmi.n	8005e98 <_printf_i+0x188>
 8005e92:	065f      	lsls	r7, r3, #25
 8005e94:	bf48      	it	mi
 8005e96:	b2ad      	uxthmi	r5, r5
 8005e98:	6031      	str	r1, [r6, #0]
 8005e9a:	07d9      	lsls	r1, r3, #31
 8005e9c:	bf44      	itt	mi
 8005e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8005ea2:	6023      	strmi	r3, [r4, #0]
 8005ea4:	b11d      	cbz	r5, 8005eae <_printf_i+0x19e>
 8005ea6:	2310      	movs	r3, #16
 8005ea8:	e7ac      	b.n	8005e04 <_printf_i+0xf4>
 8005eaa:	4827      	ldr	r0, [pc, #156]	@ (8005f48 <_printf_i+0x238>)
 8005eac:	e7e9      	b.n	8005e82 <_printf_i+0x172>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	f023 0320 	bic.w	r3, r3, #32
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	e7f6      	b.n	8005ea6 <_printf_i+0x196>
 8005eb8:	4616      	mov	r6, r2
 8005eba:	e7bd      	b.n	8005e38 <_printf_i+0x128>
 8005ebc:	6833      	ldr	r3, [r6, #0]
 8005ebe:	6825      	ldr	r5, [r4, #0]
 8005ec0:	6961      	ldr	r1, [r4, #20]
 8005ec2:	1d18      	adds	r0, r3, #4
 8005ec4:	6030      	str	r0, [r6, #0]
 8005ec6:	062e      	lsls	r6, r5, #24
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	d501      	bpl.n	8005ed0 <_printf_i+0x1c0>
 8005ecc:	6019      	str	r1, [r3, #0]
 8005ece:	e002      	b.n	8005ed6 <_printf_i+0x1c6>
 8005ed0:	0668      	lsls	r0, r5, #25
 8005ed2:	d5fb      	bpl.n	8005ecc <_printf_i+0x1bc>
 8005ed4:	8019      	strh	r1, [r3, #0]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	6123      	str	r3, [r4, #16]
 8005eda:	4616      	mov	r6, r2
 8005edc:	e7bc      	b.n	8005e58 <_printf_i+0x148>
 8005ede:	6833      	ldr	r3, [r6, #0]
 8005ee0:	1d1a      	adds	r2, r3, #4
 8005ee2:	6032      	str	r2, [r6, #0]
 8005ee4:	681e      	ldr	r6, [r3, #0]
 8005ee6:	6862      	ldr	r2, [r4, #4]
 8005ee8:	2100      	movs	r1, #0
 8005eea:	4630      	mov	r0, r6
 8005eec:	f7fa fa08 	bl	8000300 <memchr>
 8005ef0:	b108      	cbz	r0, 8005ef6 <_printf_i+0x1e6>
 8005ef2:	1b80      	subs	r0, r0, r6
 8005ef4:	6060      	str	r0, [r4, #4]
 8005ef6:	6863      	ldr	r3, [r4, #4]
 8005ef8:	6123      	str	r3, [r4, #16]
 8005efa:	2300      	movs	r3, #0
 8005efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f00:	e7aa      	b.n	8005e58 <_printf_i+0x148>
 8005f02:	6923      	ldr	r3, [r4, #16]
 8005f04:	4632      	mov	r2, r6
 8005f06:	4649      	mov	r1, r9
 8005f08:	4640      	mov	r0, r8
 8005f0a:	47d0      	blx	sl
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d0ad      	beq.n	8005e6c <_printf_i+0x15c>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	079b      	lsls	r3, r3, #30
 8005f14:	d413      	bmi.n	8005f3e <_printf_i+0x22e>
 8005f16:	68e0      	ldr	r0, [r4, #12]
 8005f18:	9b03      	ldr	r3, [sp, #12]
 8005f1a:	4298      	cmp	r0, r3
 8005f1c:	bfb8      	it	lt
 8005f1e:	4618      	movlt	r0, r3
 8005f20:	e7a6      	b.n	8005e70 <_printf_i+0x160>
 8005f22:	2301      	movs	r3, #1
 8005f24:	4632      	mov	r2, r6
 8005f26:	4649      	mov	r1, r9
 8005f28:	4640      	mov	r0, r8
 8005f2a:	47d0      	blx	sl
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d09d      	beq.n	8005e6c <_printf_i+0x15c>
 8005f30:	3501      	adds	r5, #1
 8005f32:	68e3      	ldr	r3, [r4, #12]
 8005f34:	9903      	ldr	r1, [sp, #12]
 8005f36:	1a5b      	subs	r3, r3, r1
 8005f38:	42ab      	cmp	r3, r5
 8005f3a:	dcf2      	bgt.n	8005f22 <_printf_i+0x212>
 8005f3c:	e7eb      	b.n	8005f16 <_printf_i+0x206>
 8005f3e:	2500      	movs	r5, #0
 8005f40:	f104 0619 	add.w	r6, r4, #25
 8005f44:	e7f5      	b.n	8005f32 <_printf_i+0x222>
 8005f46:	bf00      	nop
 8005f48:	08006648 	.word	0x08006648
 8005f4c:	08006659 	.word	0x08006659

08005f50 <__sflush_r>:
 8005f50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f58:	0716      	lsls	r6, r2, #28
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	d454      	bmi.n	800600a <__sflush_r+0xba>
 8005f60:	684b      	ldr	r3, [r1, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	dc02      	bgt.n	8005f6c <__sflush_r+0x1c>
 8005f66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	dd48      	ble.n	8005ffe <__sflush_r+0xae>
 8005f6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f6e:	2e00      	cmp	r6, #0
 8005f70:	d045      	beq.n	8005ffe <__sflush_r+0xae>
 8005f72:	2300      	movs	r3, #0
 8005f74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f78:	682f      	ldr	r7, [r5, #0]
 8005f7a:	6a21      	ldr	r1, [r4, #32]
 8005f7c:	602b      	str	r3, [r5, #0]
 8005f7e:	d030      	beq.n	8005fe2 <__sflush_r+0x92>
 8005f80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f82:	89a3      	ldrh	r3, [r4, #12]
 8005f84:	0759      	lsls	r1, r3, #29
 8005f86:	d505      	bpl.n	8005f94 <__sflush_r+0x44>
 8005f88:	6863      	ldr	r3, [r4, #4]
 8005f8a:	1ad2      	subs	r2, r2, r3
 8005f8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f8e:	b10b      	cbz	r3, 8005f94 <__sflush_r+0x44>
 8005f90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f92:	1ad2      	subs	r2, r2, r3
 8005f94:	2300      	movs	r3, #0
 8005f96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f98:	6a21      	ldr	r1, [r4, #32]
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b0      	blx	r6
 8005f9e:	1c43      	adds	r3, r0, #1
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	d106      	bne.n	8005fb2 <__sflush_r+0x62>
 8005fa4:	6829      	ldr	r1, [r5, #0]
 8005fa6:	291d      	cmp	r1, #29
 8005fa8:	d82b      	bhi.n	8006002 <__sflush_r+0xb2>
 8005faa:	4a2a      	ldr	r2, [pc, #168]	@ (8006054 <__sflush_r+0x104>)
 8005fac:	410a      	asrs	r2, r1
 8005fae:	07d6      	lsls	r6, r2, #31
 8005fb0:	d427      	bmi.n	8006002 <__sflush_r+0xb2>
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	6062      	str	r2, [r4, #4]
 8005fb6:	04d9      	lsls	r1, r3, #19
 8005fb8:	6922      	ldr	r2, [r4, #16]
 8005fba:	6022      	str	r2, [r4, #0]
 8005fbc:	d504      	bpl.n	8005fc8 <__sflush_r+0x78>
 8005fbe:	1c42      	adds	r2, r0, #1
 8005fc0:	d101      	bne.n	8005fc6 <__sflush_r+0x76>
 8005fc2:	682b      	ldr	r3, [r5, #0]
 8005fc4:	b903      	cbnz	r3, 8005fc8 <__sflush_r+0x78>
 8005fc6:	6560      	str	r0, [r4, #84]	@ 0x54
 8005fc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fca:	602f      	str	r7, [r5, #0]
 8005fcc:	b1b9      	cbz	r1, 8005ffe <__sflush_r+0xae>
 8005fce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fd2:	4299      	cmp	r1, r3
 8005fd4:	d002      	beq.n	8005fdc <__sflush_r+0x8c>
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f7ff fca0 	bl	800591c <_free_r>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fe0:	e00d      	b.n	8005ffe <__sflush_r+0xae>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	47b0      	blx	r6
 8005fe8:	4602      	mov	r2, r0
 8005fea:	1c50      	adds	r0, r2, #1
 8005fec:	d1c9      	bne.n	8005f82 <__sflush_r+0x32>
 8005fee:	682b      	ldr	r3, [r5, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0c6      	beq.n	8005f82 <__sflush_r+0x32>
 8005ff4:	2b1d      	cmp	r3, #29
 8005ff6:	d001      	beq.n	8005ffc <__sflush_r+0xac>
 8005ff8:	2b16      	cmp	r3, #22
 8005ffa:	d11e      	bne.n	800603a <__sflush_r+0xea>
 8005ffc:	602f      	str	r7, [r5, #0]
 8005ffe:	2000      	movs	r0, #0
 8006000:	e022      	b.n	8006048 <__sflush_r+0xf8>
 8006002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006006:	b21b      	sxth	r3, r3
 8006008:	e01b      	b.n	8006042 <__sflush_r+0xf2>
 800600a:	690f      	ldr	r7, [r1, #16]
 800600c:	2f00      	cmp	r7, #0
 800600e:	d0f6      	beq.n	8005ffe <__sflush_r+0xae>
 8006010:	0793      	lsls	r3, r2, #30
 8006012:	680e      	ldr	r6, [r1, #0]
 8006014:	bf08      	it	eq
 8006016:	694b      	ldreq	r3, [r1, #20]
 8006018:	600f      	str	r7, [r1, #0]
 800601a:	bf18      	it	ne
 800601c:	2300      	movne	r3, #0
 800601e:	eba6 0807 	sub.w	r8, r6, r7
 8006022:	608b      	str	r3, [r1, #8]
 8006024:	f1b8 0f00 	cmp.w	r8, #0
 8006028:	dde9      	ble.n	8005ffe <__sflush_r+0xae>
 800602a:	6a21      	ldr	r1, [r4, #32]
 800602c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800602e:	4643      	mov	r3, r8
 8006030:	463a      	mov	r2, r7
 8006032:	4628      	mov	r0, r5
 8006034:	47b0      	blx	r6
 8006036:	2800      	cmp	r0, #0
 8006038:	dc08      	bgt.n	800604c <__sflush_r+0xfc>
 800603a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800603e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006042:	81a3      	strh	r3, [r4, #12]
 8006044:	f04f 30ff 	mov.w	r0, #4294967295
 8006048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800604c:	4407      	add	r7, r0
 800604e:	eba8 0800 	sub.w	r8, r8, r0
 8006052:	e7e7      	b.n	8006024 <__sflush_r+0xd4>
 8006054:	dfbffffe 	.word	0xdfbffffe

08006058 <_fflush_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	690b      	ldr	r3, [r1, #16]
 800605c:	4605      	mov	r5, r0
 800605e:	460c      	mov	r4, r1
 8006060:	b913      	cbnz	r3, 8006068 <_fflush_r+0x10>
 8006062:	2500      	movs	r5, #0
 8006064:	4628      	mov	r0, r5
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	b118      	cbz	r0, 8006072 <_fflush_r+0x1a>
 800606a:	6a03      	ldr	r3, [r0, #32]
 800606c:	b90b      	cbnz	r3, 8006072 <_fflush_r+0x1a>
 800606e:	f7ff fb05 	bl	800567c <__sinit>
 8006072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f3      	beq.n	8006062 <_fflush_r+0xa>
 800607a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800607c:	07d0      	lsls	r0, r2, #31
 800607e:	d404      	bmi.n	800608a <_fflush_r+0x32>
 8006080:	0599      	lsls	r1, r3, #22
 8006082:	d402      	bmi.n	800608a <_fflush_r+0x32>
 8006084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006086:	f7ff fc32 	bl	80058ee <__retarget_lock_acquire_recursive>
 800608a:	4628      	mov	r0, r5
 800608c:	4621      	mov	r1, r4
 800608e:	f7ff ff5f 	bl	8005f50 <__sflush_r>
 8006092:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006094:	07da      	lsls	r2, r3, #31
 8006096:	4605      	mov	r5, r0
 8006098:	d4e4      	bmi.n	8006064 <_fflush_r+0xc>
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	059b      	lsls	r3, r3, #22
 800609e:	d4e1      	bmi.n	8006064 <_fflush_r+0xc>
 80060a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060a2:	f7ff fc25 	bl	80058f0 <__retarget_lock_release_recursive>
 80060a6:	e7dd      	b.n	8006064 <_fflush_r+0xc>

080060a8 <__swbuf_r>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	460e      	mov	r6, r1
 80060ac:	4614      	mov	r4, r2
 80060ae:	4605      	mov	r5, r0
 80060b0:	b118      	cbz	r0, 80060ba <__swbuf_r+0x12>
 80060b2:	6a03      	ldr	r3, [r0, #32]
 80060b4:	b90b      	cbnz	r3, 80060ba <__swbuf_r+0x12>
 80060b6:	f7ff fae1 	bl	800567c <__sinit>
 80060ba:	69a3      	ldr	r3, [r4, #24]
 80060bc:	60a3      	str	r3, [r4, #8]
 80060be:	89a3      	ldrh	r3, [r4, #12]
 80060c0:	071a      	lsls	r2, r3, #28
 80060c2:	d501      	bpl.n	80060c8 <__swbuf_r+0x20>
 80060c4:	6923      	ldr	r3, [r4, #16]
 80060c6:	b943      	cbnz	r3, 80060da <__swbuf_r+0x32>
 80060c8:	4621      	mov	r1, r4
 80060ca:	4628      	mov	r0, r5
 80060cc:	f000 f82a 	bl	8006124 <__swsetup_r>
 80060d0:	b118      	cbz	r0, 80060da <__swbuf_r+0x32>
 80060d2:	f04f 37ff 	mov.w	r7, #4294967295
 80060d6:	4638      	mov	r0, r7
 80060d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	6922      	ldr	r2, [r4, #16]
 80060de:	1a98      	subs	r0, r3, r2
 80060e0:	6963      	ldr	r3, [r4, #20]
 80060e2:	b2f6      	uxtb	r6, r6
 80060e4:	4283      	cmp	r3, r0
 80060e6:	4637      	mov	r7, r6
 80060e8:	dc05      	bgt.n	80060f6 <__swbuf_r+0x4e>
 80060ea:	4621      	mov	r1, r4
 80060ec:	4628      	mov	r0, r5
 80060ee:	f7ff ffb3 	bl	8006058 <_fflush_r>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d1ed      	bne.n	80060d2 <__swbuf_r+0x2a>
 80060f6:	68a3      	ldr	r3, [r4, #8]
 80060f8:	3b01      	subs	r3, #1
 80060fa:	60a3      	str	r3, [r4, #8]
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	6022      	str	r2, [r4, #0]
 8006102:	701e      	strb	r6, [r3, #0]
 8006104:	6962      	ldr	r2, [r4, #20]
 8006106:	1c43      	adds	r3, r0, #1
 8006108:	429a      	cmp	r2, r3
 800610a:	d004      	beq.n	8006116 <__swbuf_r+0x6e>
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	07db      	lsls	r3, r3, #31
 8006110:	d5e1      	bpl.n	80060d6 <__swbuf_r+0x2e>
 8006112:	2e0a      	cmp	r6, #10
 8006114:	d1df      	bne.n	80060d6 <__swbuf_r+0x2e>
 8006116:	4621      	mov	r1, r4
 8006118:	4628      	mov	r0, r5
 800611a:	f7ff ff9d 	bl	8006058 <_fflush_r>
 800611e:	2800      	cmp	r0, #0
 8006120:	d0d9      	beq.n	80060d6 <__swbuf_r+0x2e>
 8006122:	e7d6      	b.n	80060d2 <__swbuf_r+0x2a>

08006124 <__swsetup_r>:
 8006124:	b538      	push	{r3, r4, r5, lr}
 8006126:	4b29      	ldr	r3, [pc, #164]	@ (80061cc <__swsetup_r+0xa8>)
 8006128:	4605      	mov	r5, r0
 800612a:	6818      	ldr	r0, [r3, #0]
 800612c:	460c      	mov	r4, r1
 800612e:	b118      	cbz	r0, 8006138 <__swsetup_r+0x14>
 8006130:	6a03      	ldr	r3, [r0, #32]
 8006132:	b90b      	cbnz	r3, 8006138 <__swsetup_r+0x14>
 8006134:	f7ff faa2 	bl	800567c <__sinit>
 8006138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800613c:	0719      	lsls	r1, r3, #28
 800613e:	d422      	bmi.n	8006186 <__swsetup_r+0x62>
 8006140:	06da      	lsls	r2, r3, #27
 8006142:	d407      	bmi.n	8006154 <__swsetup_r+0x30>
 8006144:	2209      	movs	r2, #9
 8006146:	602a      	str	r2, [r5, #0]
 8006148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800614c:	81a3      	strh	r3, [r4, #12]
 800614e:	f04f 30ff 	mov.w	r0, #4294967295
 8006152:	e033      	b.n	80061bc <__swsetup_r+0x98>
 8006154:	0758      	lsls	r0, r3, #29
 8006156:	d512      	bpl.n	800617e <__swsetup_r+0x5a>
 8006158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800615a:	b141      	cbz	r1, 800616e <__swsetup_r+0x4a>
 800615c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006160:	4299      	cmp	r1, r3
 8006162:	d002      	beq.n	800616a <__swsetup_r+0x46>
 8006164:	4628      	mov	r0, r5
 8006166:	f7ff fbd9 	bl	800591c <_free_r>
 800616a:	2300      	movs	r3, #0
 800616c:	6363      	str	r3, [r4, #52]	@ 0x34
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006174:	81a3      	strh	r3, [r4, #12]
 8006176:	2300      	movs	r3, #0
 8006178:	6063      	str	r3, [r4, #4]
 800617a:	6923      	ldr	r3, [r4, #16]
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	89a3      	ldrh	r3, [r4, #12]
 8006180:	f043 0308 	orr.w	r3, r3, #8
 8006184:	81a3      	strh	r3, [r4, #12]
 8006186:	6923      	ldr	r3, [r4, #16]
 8006188:	b94b      	cbnz	r3, 800619e <__swsetup_r+0x7a>
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006194:	d003      	beq.n	800619e <__swsetup_r+0x7a>
 8006196:	4621      	mov	r1, r4
 8006198:	4628      	mov	r0, r5
 800619a:	f000 f883 	bl	80062a4 <__smakebuf_r>
 800619e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061a2:	f013 0201 	ands.w	r2, r3, #1
 80061a6:	d00a      	beq.n	80061be <__swsetup_r+0x9a>
 80061a8:	2200      	movs	r2, #0
 80061aa:	60a2      	str	r2, [r4, #8]
 80061ac:	6962      	ldr	r2, [r4, #20]
 80061ae:	4252      	negs	r2, r2
 80061b0:	61a2      	str	r2, [r4, #24]
 80061b2:	6922      	ldr	r2, [r4, #16]
 80061b4:	b942      	cbnz	r2, 80061c8 <__swsetup_r+0xa4>
 80061b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061ba:	d1c5      	bne.n	8006148 <__swsetup_r+0x24>
 80061bc:	bd38      	pop	{r3, r4, r5, pc}
 80061be:	0799      	lsls	r1, r3, #30
 80061c0:	bf58      	it	pl
 80061c2:	6962      	ldrpl	r2, [r4, #20]
 80061c4:	60a2      	str	r2, [r4, #8]
 80061c6:	e7f4      	b.n	80061b2 <__swsetup_r+0x8e>
 80061c8:	2000      	movs	r0, #0
 80061ca:	e7f7      	b.n	80061bc <__swsetup_r+0x98>
 80061cc:	240000c4 	.word	0x240000c4

080061d0 <_raise_r>:
 80061d0:	291f      	cmp	r1, #31
 80061d2:	b538      	push	{r3, r4, r5, lr}
 80061d4:	4605      	mov	r5, r0
 80061d6:	460c      	mov	r4, r1
 80061d8:	d904      	bls.n	80061e4 <_raise_r+0x14>
 80061da:	2316      	movs	r3, #22
 80061dc:	6003      	str	r3, [r0, #0]
 80061de:	f04f 30ff 	mov.w	r0, #4294967295
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80061e6:	b112      	cbz	r2, 80061ee <_raise_r+0x1e>
 80061e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061ec:	b94b      	cbnz	r3, 8006202 <_raise_r+0x32>
 80061ee:	4628      	mov	r0, r5
 80061f0:	f000 f830 	bl	8006254 <_getpid_r>
 80061f4:	4622      	mov	r2, r4
 80061f6:	4601      	mov	r1, r0
 80061f8:	4628      	mov	r0, r5
 80061fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061fe:	f000 b817 	b.w	8006230 <_kill_r>
 8006202:	2b01      	cmp	r3, #1
 8006204:	d00a      	beq.n	800621c <_raise_r+0x4c>
 8006206:	1c59      	adds	r1, r3, #1
 8006208:	d103      	bne.n	8006212 <_raise_r+0x42>
 800620a:	2316      	movs	r3, #22
 800620c:	6003      	str	r3, [r0, #0]
 800620e:	2001      	movs	r0, #1
 8006210:	e7e7      	b.n	80061e2 <_raise_r+0x12>
 8006212:	2100      	movs	r1, #0
 8006214:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006218:	4620      	mov	r0, r4
 800621a:	4798      	blx	r3
 800621c:	2000      	movs	r0, #0
 800621e:	e7e0      	b.n	80061e2 <_raise_r+0x12>

08006220 <raise>:
 8006220:	4b02      	ldr	r3, [pc, #8]	@ (800622c <raise+0xc>)
 8006222:	4601      	mov	r1, r0
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	f7ff bfd3 	b.w	80061d0 <_raise_r>
 800622a:	bf00      	nop
 800622c:	240000c4 	.word	0x240000c4

08006230 <_kill_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4d07      	ldr	r5, [pc, #28]	@ (8006250 <_kill_r+0x20>)
 8006234:	2300      	movs	r3, #0
 8006236:	4604      	mov	r4, r0
 8006238:	4608      	mov	r0, r1
 800623a:	4611      	mov	r1, r2
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	f7fa fca4 	bl	8000b8a <_kill>
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	d102      	bne.n	800624c <_kill_r+0x1c>
 8006246:	682b      	ldr	r3, [r5, #0]
 8006248:	b103      	cbz	r3, 800624c <_kill_r+0x1c>
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	bd38      	pop	{r3, r4, r5, pc}
 800624e:	bf00      	nop
 8006250:	24000384 	.word	0x24000384

08006254 <_getpid_r>:
 8006254:	f7fa bc91 	b.w	8000b7a <_getpid>

08006258 <__swhatbuf_r>:
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	460c      	mov	r4, r1
 800625c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006260:	2900      	cmp	r1, #0
 8006262:	b096      	sub	sp, #88	@ 0x58
 8006264:	4615      	mov	r5, r2
 8006266:	461e      	mov	r6, r3
 8006268:	da0d      	bge.n	8006286 <__swhatbuf_r+0x2e>
 800626a:	89a3      	ldrh	r3, [r4, #12]
 800626c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006270:	f04f 0100 	mov.w	r1, #0
 8006274:	bf14      	ite	ne
 8006276:	2340      	movne	r3, #64	@ 0x40
 8006278:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800627c:	2000      	movs	r0, #0
 800627e:	6031      	str	r1, [r6, #0]
 8006280:	602b      	str	r3, [r5, #0]
 8006282:	b016      	add	sp, #88	@ 0x58
 8006284:	bd70      	pop	{r4, r5, r6, pc}
 8006286:	466a      	mov	r2, sp
 8006288:	f000 f848 	bl	800631c <_fstat_r>
 800628c:	2800      	cmp	r0, #0
 800628e:	dbec      	blt.n	800626a <__swhatbuf_r+0x12>
 8006290:	9901      	ldr	r1, [sp, #4]
 8006292:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006296:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800629a:	4259      	negs	r1, r3
 800629c:	4159      	adcs	r1, r3
 800629e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062a2:	e7eb      	b.n	800627c <__swhatbuf_r+0x24>

080062a4 <__smakebuf_r>:
 80062a4:	898b      	ldrh	r3, [r1, #12]
 80062a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062a8:	079d      	lsls	r5, r3, #30
 80062aa:	4606      	mov	r6, r0
 80062ac:	460c      	mov	r4, r1
 80062ae:	d507      	bpl.n	80062c0 <__smakebuf_r+0x1c>
 80062b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	6123      	str	r3, [r4, #16]
 80062b8:	2301      	movs	r3, #1
 80062ba:	6163      	str	r3, [r4, #20]
 80062bc:	b003      	add	sp, #12
 80062be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c0:	ab01      	add	r3, sp, #4
 80062c2:	466a      	mov	r2, sp
 80062c4:	f7ff ffc8 	bl	8006258 <__swhatbuf_r>
 80062c8:	9f00      	ldr	r7, [sp, #0]
 80062ca:	4605      	mov	r5, r0
 80062cc:	4639      	mov	r1, r7
 80062ce:	4630      	mov	r0, r6
 80062d0:	f7ff f8bc 	bl	800544c <_malloc_r>
 80062d4:	b948      	cbnz	r0, 80062ea <__smakebuf_r+0x46>
 80062d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062da:	059a      	lsls	r2, r3, #22
 80062dc:	d4ee      	bmi.n	80062bc <__smakebuf_r+0x18>
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	f043 0302 	orr.w	r3, r3, #2
 80062e6:	81a3      	strh	r3, [r4, #12]
 80062e8:	e7e2      	b.n	80062b0 <__smakebuf_r+0xc>
 80062ea:	89a3      	ldrh	r3, [r4, #12]
 80062ec:	6020      	str	r0, [r4, #0]
 80062ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062f2:	81a3      	strh	r3, [r4, #12]
 80062f4:	9b01      	ldr	r3, [sp, #4]
 80062f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80062fa:	b15b      	cbz	r3, 8006314 <__smakebuf_r+0x70>
 80062fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006300:	4630      	mov	r0, r6
 8006302:	f000 f81d 	bl	8006340 <_isatty_r>
 8006306:	b128      	cbz	r0, 8006314 <__smakebuf_r+0x70>
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	f023 0303 	bic.w	r3, r3, #3
 800630e:	f043 0301 	orr.w	r3, r3, #1
 8006312:	81a3      	strh	r3, [r4, #12]
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	431d      	orrs	r5, r3
 8006318:	81a5      	strh	r5, [r4, #12]
 800631a:	e7cf      	b.n	80062bc <__smakebuf_r+0x18>

0800631c <_fstat_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4d07      	ldr	r5, [pc, #28]	@ (800633c <_fstat_r+0x20>)
 8006320:	2300      	movs	r3, #0
 8006322:	4604      	mov	r4, r0
 8006324:	4608      	mov	r0, r1
 8006326:	4611      	mov	r1, r2
 8006328:	602b      	str	r3, [r5, #0]
 800632a:	f7fa fc8e 	bl	8000c4a <_fstat>
 800632e:	1c43      	adds	r3, r0, #1
 8006330:	d102      	bne.n	8006338 <_fstat_r+0x1c>
 8006332:	682b      	ldr	r3, [r5, #0]
 8006334:	b103      	cbz	r3, 8006338 <_fstat_r+0x1c>
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	bd38      	pop	{r3, r4, r5, pc}
 800633a:	bf00      	nop
 800633c:	24000384 	.word	0x24000384

08006340 <_isatty_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d06      	ldr	r5, [pc, #24]	@ (800635c <_isatty_r+0x1c>)
 8006344:	2300      	movs	r3, #0
 8006346:	4604      	mov	r4, r0
 8006348:	4608      	mov	r0, r1
 800634a:	602b      	str	r3, [r5, #0]
 800634c:	f7fa fc8d 	bl	8000c6a <_isatty>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d102      	bne.n	800635a <_isatty_r+0x1a>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b103      	cbz	r3, 800635a <_isatty_r+0x1a>
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	24000384 	.word	0x24000384

08006360 <_init>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	bf00      	nop
 8006364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006366:	bc08      	pop	{r3}
 8006368:	469e      	mov	lr, r3
 800636a:	4770      	bx	lr

0800636c <_fini>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	bf00      	nop
 8006370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006372:	bc08      	pop	{r3}
 8006374:	469e      	mov	lr, r3
 8006376:	4770      	bx	lr
