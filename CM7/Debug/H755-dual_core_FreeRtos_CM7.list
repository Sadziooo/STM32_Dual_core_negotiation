
H755-dual_core_FreeRtos_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  08009974  08009974  0000a974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cd8  08009cd8  0000b12c  2**0
                  CONTENTS
  4 .ARM          00000008  08009cd8  08009cd8  0000acd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ce0  08009ce0  0000b12c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ce0  08009ce0  0000ace0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ce4  08009ce4  0000ace4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000012c  24000000  08009ce8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cb0  2400012c  08009e14  0000b12c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004ddc  08009e14  0000bddc  2**0
                  ALLOC
 11 .openamp_section 0000008c  38000000  08009e14  0000c000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000b12c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024f6e  00000000  00000000  0000b15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c21  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cd8  00000000  00000000  00035cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015cc  00000000  00000000  000379c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004110e  00000000  00000000  00038f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028529  00000000  00000000  0007a0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019105f  00000000  00000000  000a25cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0023362a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007eec  00000000  00000000  00233670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0023b55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800995c 	.word	0x0800995c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	0800995c 	.word	0x0800995c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003b4:	4b3d      	ldr	r3, [pc, #244]	@ (80004ac <SystemInit+0xfc>)
 80003b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ba:	4a3c      	ldr	r2, [pc, #240]	@ (80004ac <SystemInit+0xfc>)
 80003bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003c4:	4b39      	ldr	r3, [pc, #228]	@ (80004ac <SystemInit+0xfc>)
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	4a38      	ldr	r2, [pc, #224]	@ (80004ac <SystemInit+0xfc>)
 80003ca:	f043 0310 	orr.w	r3, r3, #16
 80003ce:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003d0:	4b37      	ldr	r3, [pc, #220]	@ (80004b0 <SystemInit+0x100>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f003 030f 	and.w	r3, r3, #15
 80003d8:	2b06      	cmp	r3, #6
 80003da:	d807      	bhi.n	80003ec <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003dc:	4b34      	ldr	r3, [pc, #208]	@ (80004b0 <SystemInit+0x100>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f023 030f 	bic.w	r3, r3, #15
 80003e4:	4a32      	ldr	r2, [pc, #200]	@ (80004b0 <SystemInit+0x100>)
 80003e6:	f043 0307 	orr.w	r3, r3, #7
 80003ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003ec:	4b31      	ldr	r3, [pc, #196]	@ (80004b4 <SystemInit+0x104>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a30      	ldr	r2, [pc, #192]	@ (80004b4 <SystemInit+0x104>)
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003f8:	4b2e      	ldr	r3, [pc, #184]	@ (80004b4 <SystemInit+0x104>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003fe:	4b2d      	ldr	r3, [pc, #180]	@ (80004b4 <SystemInit+0x104>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	492c      	ldr	r1, [pc, #176]	@ (80004b4 <SystemInit+0x104>)
 8000404:	4b2c      	ldr	r3, [pc, #176]	@ (80004b8 <SystemInit+0x108>)
 8000406:	4013      	ands	r3, r2
 8000408:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800040a:	4b29      	ldr	r3, [pc, #164]	@ (80004b0 <SystemInit+0x100>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0308 	and.w	r3, r3, #8
 8000412:	2b00      	cmp	r3, #0
 8000414:	d007      	beq.n	8000426 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000416:	4b26      	ldr	r3, [pc, #152]	@ (80004b0 <SystemInit+0x100>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f023 030f 	bic.w	r3, r3, #15
 800041e:	4a24      	ldr	r2, [pc, #144]	@ (80004b0 <SystemInit+0x100>)
 8000420:	f043 0307 	orr.w	r3, r3, #7
 8000424:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000426:	4b23      	ldr	r3, [pc, #140]	@ (80004b4 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800042c:	4b21      	ldr	r3, [pc, #132]	@ (80004b4 <SystemInit+0x104>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000432:	4b20      	ldr	r3, [pc, #128]	@ (80004b4 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000438:	4b1e      	ldr	r3, [pc, #120]	@ (80004b4 <SystemInit+0x104>)
 800043a:	4a20      	ldr	r2, [pc, #128]	@ (80004bc <SystemInit+0x10c>)
 800043c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800043e:	4b1d      	ldr	r3, [pc, #116]	@ (80004b4 <SystemInit+0x104>)
 8000440:	4a1f      	ldr	r2, [pc, #124]	@ (80004c0 <SystemInit+0x110>)
 8000442:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <SystemInit+0x104>)
 8000446:	4a1f      	ldr	r2, [pc, #124]	@ (80004c4 <SystemInit+0x114>)
 8000448:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <SystemInit+0x104>)
 800044c:	2200      	movs	r2, #0
 800044e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000450:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <SystemInit+0x104>)
 8000452:	4a1c      	ldr	r2, [pc, #112]	@ (80004c4 <SystemInit+0x114>)
 8000454:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000456:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <SystemInit+0x104>)
 8000458:	2200      	movs	r2, #0
 800045a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800045c:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <SystemInit+0x104>)
 800045e:	4a19      	ldr	r2, [pc, #100]	@ (80004c4 <SystemInit+0x114>)
 8000460:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000462:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <SystemInit+0x104>)
 8000464:	2200      	movs	r2, #0
 8000466:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000468:	4b12      	ldr	r3, [pc, #72]	@ (80004b4 <SystemInit+0x104>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a11      	ldr	r2, [pc, #68]	@ (80004b4 <SystemInit+0x104>)
 800046e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000472:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <SystemInit+0x104>)
 8000476:	2200      	movs	r2, #0
 8000478:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800047a:	4b13      	ldr	r3, [pc, #76]	@ (80004c8 <SystemInit+0x118>)
 800047c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800047e:	4a12      	ldr	r2, [pc, #72]	@ (80004c8 <SystemInit+0x118>)
 8000480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000484:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000486:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <SystemInit+0x11c>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <SystemInit+0x120>)
 800048c:	4013      	ands	r3, r2
 800048e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000492:	d202      	bcs.n	800049a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000494:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <SystemInit+0x124>)
 8000496:	2201      	movs	r2, #1
 8000498:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800049a:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <SystemInit+0x128>)
 800049c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80004a0:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	52002000 	.word	0x52002000
 80004b4:	58024400 	.word	0x58024400
 80004b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004bc:	02020200 	.word	0x02020200
 80004c0:	01ff0000 	.word	0x01ff0000
 80004c4:	01010280 	.word	0x01010280
 80004c8:	580000c0 	.word	0x580000c0
 80004cc:	5c001000 	.word	0x5c001000
 80004d0:	ffff0000 	.word	0xffff0000
 80004d4:	51008108 	.word	0x51008108
 80004d8:	52004000 	.word	0x52004000

080004dc <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004f0:	d101      	bne.n	80004f6 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 80004f2:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <rpmsg_send+0x3c>)
 80004f4:	e00c      	b.n	8000510 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80004fe:	2301      	movs	r3, #1
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	68f8      	ldr	r0, [r7, #12]
 800050a:	f006 fd25 	bl	8006f58 <rpmsg_send_offchannel_raw>
 800050e:	4603      	mov	r3, r0
					 len, true);
}
 8000510:	4618      	mov	r0, r3
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	fffff829 	.word	0xfffff829

0800051c <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	2220      	movs	r2, #32
 800052e:	68b9      	ldr	r1, [r7, #8]
 8000530:	4618      	mov	r0, r3
 8000532:	f008 fbf0 	bl	8008d16 <strncpy>
	ept->addr = src;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	69ba      	ldr	r2, [r7, #24]
 8000546:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	69fa      	ldr	r2, [r7, #28]
 800054c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RX_Task */
  RX_TaskHandle = osThreadNew(Start_RX_Task, NULL, &RX_Task_attributes);
 800055c:	4a08      	ldr	r2, [pc, #32]	@ (8000580 <MX_FREERTOS_Init+0x28>)
 800055e:	2100      	movs	r1, #0
 8000560:	4808      	ldr	r0, [pc, #32]	@ (8000584 <MX_FREERTOS_Init+0x2c>)
 8000562:	f002 fc89 	bl	8002e78 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a07      	ldr	r2, [pc, #28]	@ (8000588 <MX_FREERTOS_Init+0x30>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of TX_Task */
  TX_TaskHandle = osThreadNew(Start_TX_Task, NULL, &TX_Task_attributes);
 800056c:	4a07      	ldr	r2, [pc, #28]	@ (800058c <MX_FREERTOS_Init+0x34>)
 800056e:	2100      	movs	r1, #0
 8000570:	4807      	ldr	r0, [pc, #28]	@ (8000590 <MX_FREERTOS_Init+0x38>)
 8000572:	f002 fc81 	bl	8002e78 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <MX_FREERTOS_Init+0x3c>)
 800057a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	08009bbc 	.word	0x08009bbc
 8000584:	08000599 	.word	0x08000599
 8000588:	24000194 	.word	0x24000194
 800058c:	08009be0 	.word	0x08009be0
 8000590:	08000641 	.word	0x08000641
 8000594:	24000198 	.word	0x24000198

08000598 <Start_RX_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_RX_Task */
void Start_RX_Task(void *argument)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RX_Task */

	  MAILBOX_Init();
 80005a0:	f007 ff64 	bl	800846c <MAILBOX_Init>

	  rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY, NULL, NULL);
 80005a4:	2300      	movs	r3, #0
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	2300      	movs	r3, #0
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	f04f 32ff 	mov.w	r2, #4294967295
 80005b4:	491b      	ldr	r1, [pc, #108]	@ (8000624 <Start_RX_Task+0x8c>)
 80005b6:	481c      	ldr	r0, [pc, #112]	@ (8000628 <Start_RX_Task+0x90>)
 80005b8:	f7ff ffb0 	bl	800051c <rpmsg_init_ept>

	  if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb) != HAL_OK) {
 80005bc:	491b      	ldr	r1, [pc, #108]	@ (800062c <Start_RX_Task+0x94>)
 80005be:	2000      	movs	r0, #0
 80005c0:	f008 f86e 	bl	80086a0 <MX_OPENAMP_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <Start_RX_Task+0x36>
		  Error_Handler();
 80005ca:	f000 fadb 	bl	8000b84 <Error_Handler>
	  }

	  OPENAMP_Wait_EndPointready(&rp_endpoint);
 80005ce:	4816      	ldr	r0, [pc, #88]	@ (8000628 <Start_RX_Task+0x90>)
 80005d0:	f008 f932 	bl	8008838 <OPENAMP_Wait_EndPointready>

  /* Infinite loop */
  for(;;)
  {
	  if (service_created) {
 80005d4:	4b16      	ldr	r3, [pc, #88]	@ (8000630 <Start_RX_Task+0x98>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d002      	beq.n	80005e2 <Start_RX_Task+0x4a>
		  OPENAMP_check_for_message();
 80005dc:	f008 f920 	bl	8008820 <OPENAMP_check_for_message>
 80005e0:	e01b      	b.n	800061a <Start_RX_Task+0x82>
	  } else {
		  OPENAMP_DeInit();
 80005e2:	f008 f8f3 	bl	80087cc <OPENAMP_DeInit>


		  osThreadTerminate(TX_TaskHandle);
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <Start_RX_Task+0x9c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fcd6 	bl	8002f9c <osThreadTerminate>

		  for (uint8_t i = 0; i < 10; i++) {
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	e009      	b.n	800060a <Start_RX_Task+0x72>
			  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80005f6:	2101      	movs	r1, #1
 80005f8:	480f      	ldr	r0, [pc, #60]	@ (8000638 <Start_RX_Task+0xa0>)
 80005fa:	f001 f800 	bl	80015fe <HAL_GPIO_TogglePin>
			  osDelay(100);
 80005fe:	2064      	movs	r0, #100	@ 0x64
 8000600:	f002 fcf9 	bl	8002ff6 <osDelay>
		  for (uint8_t i = 0; i < 10; i++) {
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	3301      	adds	r3, #1
 8000608:	73fb      	strb	r3, [r7, #15]
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b09      	cmp	r3, #9
 800060e:	d9f2      	bls.n	80005f6 <Start_RX_Task+0x5e>
		  }

		  osThreadTerminate(RX_TaskHandle);
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <Start_RX_Task+0xa4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f002 fcc1 	bl	8002f9c <osThreadTerminate>

	  }

	  osDelay(1);
 800061a:	2001      	movs	r0, #1
 800061c:	f002 fceb 	bl	8002ff6 <osDelay>
	  if (service_created) {
 8000620:	e7d8      	b.n	80005d4 <Start_RX_Task+0x3c>
 8000622:	bf00      	nop
 8000624:	08009984 	.word	0x08009984
 8000628:	24000154 	.word	0x24000154
 800062c:	080006cd 	.word	0x080006cd
 8000630:	2400014c 	.word	0x2400014c
 8000634:	24000198 	.word	0x24000198
 8000638:	58020400 	.word	0x58020400
 800063c:	24000194 	.word	0x24000194

08000640 <Start_TX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_TX_Task */
void Start_TX_Task(void *argument)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_TX_Task */
  /* Infinite loop */
  for(;;)
  {

		if(OPENAMP_send (&rp_endpoint, msg, strlen(msg) + 1) < 0) {
 8000648:	4809      	ldr	r0, [pc, #36]	@ (8000670 <Start_TX_Task+0x30>)
 800064a:	f7ff fe53 	bl	80002f4 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	3301      	adds	r3, #1
 8000652:	461a      	mov	r2, r3
 8000654:	4906      	ldr	r1, [pc, #24]	@ (8000670 <Start_TX_Task+0x30>)
 8000656:	4807      	ldr	r0, [pc, #28]	@ (8000674 <Start_TX_Task+0x34>)
 8000658:	f7ff ff40 	bl	80004dc <rpmsg_send>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	da01      	bge.n	8000666 <Start_TX_Task+0x26>
			Error_Handler();
 8000662:	f000 fa8f 	bl	8000b84 <Error_Handler>
//			Error_Handler();
//		}
//
//		message++;

		osDelay(500);
 8000666:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800066a:	f002 fcc4 	bl	8002ff6 <osDelay>
		if(OPENAMP_send (&rp_endpoint, msg, strlen(msg) + 1) < 0) {
 800066e:	e7eb      	b.n	8000648 <Start_TX_Task+0x8>
 8000670:	24000008 	.word	0x24000008
 8000674:	24000154 	.word	0x24000154

08000678 <rpmsg_recv_callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

static int rpmsg_recv_callback (struct rpmsg_endpoint *ept, void *data, size_t len, uint32_t src, void *priv) {
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a06      	ldr	r2, [pc, #24]	@ (80006a4 <rpmsg_recv_callback+0x2c>)
 800068c:	6013      	str	r3, [r2, #0]
	message_received = 1;
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <rpmsg_recv_callback+0x30>)
 8000690:	2201      	movs	r2, #1
 8000692:	601a      	str	r2, [r3, #0]

	return 0;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	24000150 	.word	0x24000150
 80006a8:	24000148 	.word	0x24000148

080006ac <service_destroy_cb>:

void service_destroy_cb (struct rpmsg_endpoint *ept) {
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	service_created = 0;
 80006b4:	4b04      	ldr	r3, [pc, #16]	@ (80006c8 <service_destroy_cb+0x1c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	2400014c 	.word	0x2400014c

080006cc <new_service_cb>:

void new_service_cb (struct rpmsg_device *rdev, const char *name, uint32_t dest) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af02      	add	r7, sp, #8
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback, service_destroy_cb);
 80006d8:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <new_service_cb+0x2c>)
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <new_service_cb+0x30>)
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	68b9      	ldr	r1, [r7, #8]
 80006e2:	4807      	ldr	r0, [pc, #28]	@ (8000700 <new_service_cb+0x34>)
 80006e4:	f008 f87e 	bl	80087e4 <OPENAMP_create_endpoint>

	service_created = 1;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <new_service_cb+0x38>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	080006ad 	.word	0x080006ad
 80006fc:	08000679 	.word	0x08000679
 8000700:	24000154 	.word	0x24000154
 8000704:	2400014c 	.word	0x2400014c

08000708 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b5a      	ldr	r3, [pc, #360]	@ (8000888 <MX_GPIO_Init+0x180>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000724:	4a58      	ldr	r2, [pc, #352]	@ (8000888 <MX_GPIO_Init+0x180>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072e:	4b56      	ldr	r3, [pc, #344]	@ (8000888 <MX_GPIO_Init+0x180>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b52      	ldr	r3, [pc, #328]	@ (8000888 <MX_GPIO_Init+0x180>)
 800073e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000742:	4a51      	ldr	r2, [pc, #324]	@ (8000888 <MX_GPIO_Init+0x180>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074c:	4b4e      	ldr	r3, [pc, #312]	@ (8000888 <MX_GPIO_Init+0x180>)
 800074e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b4b      	ldr	r3, [pc, #300]	@ (8000888 <MX_GPIO_Init+0x180>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000760:	4a49      	ldr	r2, [pc, #292]	@ (8000888 <MX_GPIO_Init+0x180>)
 8000762:	f043 0302 	orr.w	r3, r3, #2
 8000766:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800076a:	4b47      	ldr	r3, [pc, #284]	@ (8000888 <MX_GPIO_Init+0x180>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000778:	4b43      	ldr	r3, [pc, #268]	@ (8000888 <MX_GPIO_Init+0x180>)
 800077a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077e:	4a42      	ldr	r2, [pc, #264]	@ (8000888 <MX_GPIO_Init+0x180>)
 8000780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000784:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000788:	4b3f      	ldr	r3, [pc, #252]	@ (8000888 <MX_GPIO_Init+0x180>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f244 0101 	movw	r1, #16385	@ 0x4001
 800079c:	483b      	ldr	r0, [pc, #236]	@ (800088c <MX_GPIO_Init+0x184>)
 800079e:	f000 ff15 	bl	80015cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80007a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	4836      	ldr	r0, [pc, #216]	@ (8000890 <MX_GPIO_Init+0x188>)
 80007b8:	f000 fd58 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80007bc:	2332      	movs	r3, #50	@ 0x32
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007cc:	230b      	movs	r3, #11
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	482e      	ldr	r0, [pc, #184]	@ (8000890 <MX_GPIO_Init+0x188>)
 80007d8:	f000 fd48 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80007dc:	2386      	movs	r3, #134	@ 0x86
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ec:	230b      	movs	r3, #11
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4827      	ldr	r0, [pc, #156]	@ (8000894 <MX_GPIO_Init+0x18c>)
 80007f8:	f000 fd38 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80007fc:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	481d      	ldr	r0, [pc, #116]	@ (800088c <MX_GPIO_Init+0x184>)
 8000816:	f000 fd29 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800081a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082c:	230b      	movs	r3, #11
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4815      	ldr	r0, [pc, #84]	@ (800088c <MX_GPIO_Init+0x184>)
 8000838:	f000 fd18 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800083c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800084e:	230a      	movs	r3, #10
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	480e      	ldr	r0, [pc, #56]	@ (8000894 <MX_GPIO_Init+0x18c>)
 800085a:	f000 fd07 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800085e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000870:	230b      	movs	r3, #11
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4807      	ldr	r0, [pc, #28]	@ (8000898 <MX_GPIO_Init+0x190>)
 800087c:	f000 fcf6 	bl	800126c <HAL_GPIO_Init>

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	@ 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	58024400 	.word	0x58024400
 800088c:	58020400 	.word	0x58020400
 8000890:	58020800 	.word	0x58020800
 8000894:	58020000 	.word	0x58020000
 8000898:	58021800 	.word	0x58021800

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008a2:	f000 f92f 	bl	8000b04 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008a6:	4b57      	ldr	r3, [pc, #348]	@ (8000a04 <main+0x168>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d11b      	bne.n	80008ea <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
}
 80008b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008b8:	f3bf 8f6f 	isb	sy
}
 80008bc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008be:	4b51      	ldr	r3, [pc, #324]	@ (8000a04 <main+0x168>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008c6:	f3bf 8f4f 	dsb	sy
}
 80008ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008cc:	f3bf 8f6f 	isb	sy
}
 80008d0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000a04 <main+0x168>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a4b      	ldr	r2, [pc, #300]	@ (8000a04 <main+0x168>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008de:	f3bf 8f4f 	dsb	sy
}
 80008e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008e4:	f3bf 8f6f 	isb	sy
}
 80008e8:	e000      	b.n	80008ec <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008ea:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008ec:	4b45      	ldr	r3, [pc, #276]	@ (8000a04 <main+0x168>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d138      	bne.n	800096a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008f8:	4b42      	ldr	r3, [pc, #264]	@ (8000a04 <main+0x168>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000900:	f3bf 8f4f 	dsb	sy
}
 8000904:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000906:	4b3f      	ldr	r3, [pc, #252]	@ (8000a04 <main+0x168>)
 8000908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800090c:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	0b5b      	lsrs	r3, r3, #13
 8000912:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000916:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	08db      	lsrs	r3, r3, #3
 800091c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000920:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	015a      	lsls	r2, r3, #5
 8000926:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800092a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800092c:	68ba      	ldr	r2, [r7, #8]
 800092e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000930:	4934      	ldr	r1, [pc, #208]	@ (8000a04 <main+0x168>)
 8000932:	4313      	orrs	r3, r2
 8000934:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	1e5a      	subs	r2, r3, #1
 800093c:	60ba      	str	r2, [r7, #8]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1ef      	bne.n	8000922 <main+0x86>
    } while(sets-- != 0U);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	1e5a      	subs	r2, r3, #1
 8000946:	60fa      	str	r2, [r7, #12]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1e5      	bne.n	8000918 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800094c:	f3bf 8f4f 	dsb	sy
}
 8000950:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000952:	4b2c      	ldr	r3, [pc, #176]	@ (8000a04 <main+0x168>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a2b      	ldr	r2, [pc, #172]	@ (8000a04 <main+0x168>)
 8000958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800095c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800095e:	f3bf 8f4f 	dsb	sy
}
 8000962:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000964:	f3bf 8f6f 	isb	sy
}
 8000968:	e000      	b.n	800096c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800096a:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800096c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000970:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000972:	bf00      	nop
 8000974:	4b24      	ldr	r3, [pc, #144]	@ (8000a08 <main+0x16c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800097c:	2b00      	cmp	r3, #0
 800097e:	d004      	beq.n	800098a <main+0xee>
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	1e5a      	subs	r2, r3, #1
 8000984:	617a      	str	r2, [r7, #20]
 8000986:	2b00      	cmp	r3, #0
 8000988:	dcf4      	bgt.n	8000974 <main+0xd8>
  if ( timeout < 0 )
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	2b00      	cmp	r3, #0
 800098e:	da01      	bge.n	8000994 <main+0xf8>
  {
  Error_Handler();
 8000990:	f000 f8f8 	bl	8000b84 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000994:	f000 faaa 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f838 	bl	8000a0c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <main+0x16c>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a2:	4a19      	ldr	r2, [pc, #100]	@ (8000a08 <main+0x16c>)
 80009a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <main+0x16c>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 fe3a 	bl	8001634 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80009c0:	2100      	movs	r1, #0
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 fe50 	bl	8001668 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009cc:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009ce:	bf00      	nop
 80009d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <main+0x16c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d104      	bne.n	80009e6 <main+0x14a>
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	1e5a      	subs	r2, r3, #1
 80009e0:	617a      	str	r2, [r7, #20]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	dcf4      	bgt.n	80009d0 <main+0x134>
if ( timeout < 0 )
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	da01      	bge.n	80009f0 <main+0x154>
{
Error_Handler();
 80009ec:	f000 f8ca 	bl	8000b84 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f0:	f7ff fe8a 	bl	8000708 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009f4:	f002 f9f6 	bl	8002de4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80009f8:	f7ff fdae 	bl	8000558 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009fc:	f002 fa16 	bl	8002e2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <main+0x164>
 8000a04:	e000ed00 	.word	0xe000ed00
 8000a08:	58024400 	.word	0x58024400

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09c      	sub	sp, #112	@ 0x70
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a16:	224c      	movs	r2, #76	@ 0x4c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f008 f961 	bl	8008ce2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f008 f95b 	bl	8008ce2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a2c:	2004      	movs	r0, #4
 8000a2e:	f000 fe5b 	bl	80016e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <SystemClock_Config+0xf0>)
 8000a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a3a:	4a30      	ldr	r2, [pc, #192]	@ (8000afc <SystemClock_Config+0xf0>)
 8000a3c:	f023 0301 	bic.w	r3, r3, #1
 8000a40:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a42:	4b2e      	ldr	r3, [pc, #184]	@ (8000afc <SystemClock_Config+0xf0>)
 8000a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b00 <SystemClock_Config+0xf4>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a2b      	ldr	r2, [pc, #172]	@ (8000b00 <SystemClock_Config+0xf4>)
 8000a52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b29      	ldr	r3, [pc, #164]	@ (8000b00 <SystemClock_Config+0xf4>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a64:	bf00      	nop
 8000a66:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <SystemClock_Config+0xf4>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a72:	d1f8      	bne.n	8000a66 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a74:	2302      	movs	r3, #2
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7c:	2340      	movs	r3, #64	@ 0x40
 8000a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a80:	2302      	movs	r3, #2
 8000a82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a84:	2300      	movs	r3, #0
 8000a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a8c:	2332      	movs	r3, #50	@ 0x32
 8000a8e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000a94:	2305      	movs	r3, #5
 8000a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 fe75 	bl	800179c <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000ab8:	f000 f864 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	233f      	movs	r3, #63	@ 0x3f
 8000abe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000acc:	2340      	movs	r3, #64	@ 0x40
 8000ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ad0:	2340      	movs	r3, #64	@ 0x40
 8000ad2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ada:	2340      	movs	r3, #64	@ 0x40
 8000adc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fab4 	bl	8002050 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000aee:	f000 f849 	bl	8000b84 <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3770      	adds	r7, #112	@ 0x70
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	58000400 	.word	0x58000400
 8000b00:	58024800 	.word	0x58024800

08000b04 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b16:	f000 fb31 	bl	800117c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000b22:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000b26:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000b28:	230f      	movs	r3, #15
 8000b2a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b34:	2303      	movs	r3, #3
 8000b36:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fb4e 	bl	80011ec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b50:	2004      	movs	r0, #4
 8000b52:	f000 fb2b 	bl	80011ac <HAL_MPU_Enable>

}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b72:	f000 f9f7 	bl	8000f64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40001000 	.word	0x40001000

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <Error_Handler+0x8>

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <HAL_MspInit+0x48>)
 8000b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd8 <HAL_MspInit+0x48>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <HAL_MspInit+0x48>)
 8000ba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	f06f 0001 	mvn.w	r0, #1
 8000bbc:	f000 fab6 	bl	800112c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2105      	movs	r1, #5
 8000bc4:	207d      	movs	r0, #125	@ 0x7d
 8000bc6:	f000 fab1 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000bca:	207d      	movs	r0, #125	@ 0x7d
 8000bcc:	f000 fac8 	bl	8001160 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	58024400 	.word	0x58024400

08000bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b090      	sub	sp, #64	@ 0x40
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b0f      	cmp	r3, #15
 8000be8:	d827      	bhi.n	8000c3a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	2036      	movs	r0, #54	@ 0x36
 8000bf0:	f000 fa9c 	bl	800112c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf4:	2036      	movs	r0, #54	@ 0x36
 8000bf6:	f000 fab3 	bl	8001160 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000bfa:	4a29      	ldr	r2, [pc, #164]	@ (8000ca0 <HAL_InitTick+0xc4>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c00:	4b28      	ldr	r3, [pc, #160]	@ (8000ca4 <HAL_InitTick+0xc8>)
 8000c02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c06:	4a27      	ldr	r2, [pc, #156]	@ (8000ca4 <HAL_InitTick+0xc8>)
 8000c08:	f043 0310 	orr.w	r3, r3, #16
 8000c0c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c10:	4b24      	ldr	r3, [pc, #144]	@ (8000ca4 <HAL_InitTick+0xc8>)
 8000c12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c1e:	f107 0210 	add.w	r2, r7, #16
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fd87 	bl	800273c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d106      	bne.n	8000c46 <HAL_InitTick+0x6a>
 8000c38:	e001      	b.n	8000c3e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e02b      	b.n	8000c96 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c3e:	f001 fd67 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 8000c42:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000c44:	e004      	b.n	8000c50 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c46:	f001 fd63 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c52:	4a15      	ldr	r2, [pc, #84]	@ (8000ca8 <HAL_InitTick+0xcc>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	0c9b      	lsrs	r3, r3, #18
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <HAL_InitTick+0xd0>)
 8000c60:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <HAL_InitTick+0xd4>)
 8000c62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c64:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <HAL_InitTick+0xd0>)
 8000c66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c6a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000cac <HAL_InitTick+0xd0>)
 8000c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c70:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_InitTick+0xd0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <HAL_InitTick+0xd0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c7e:	480b      	ldr	r0, [pc, #44]	@ (8000cac <HAL_InitTick+0xd0>)
 8000c80:	f001 fd9e 	bl	80027c0 <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d104      	bne.n	8000c94 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c8a:	4808      	ldr	r0, [pc, #32]	@ (8000cac <HAL_InitTick+0xd0>)
 8000c8c:	f001 fdfa 	bl	8002884 <HAL_TIM_Base_Start_IT>
 8000c90:	4603      	mov	r3, r0
 8000c92:	e000      	b.n	8000c96 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3740      	adds	r7, #64	@ 0x40
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2400001c 	.word	0x2400001c
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	431bde83 	.word	0x431bde83
 8000cac:	2400019c 	.word	0x2400019c
 8000cb0:	40001000 	.word	0x40001000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <NMI_Handler+0x4>

08000cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <MemManage_Handler+0x4>

08000ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <TIM6_DAC_IRQHandler+0x10>)
 8000cf2:	f001 fe3f 	bl	8002974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2400019c 	.word	0x2400019c

08000d00 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000d04:	f000 fcd6 	bl	80016b4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return 1;
 8000d10:	2301      	movs	r3, #1
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <_kill>:

int _kill(int pid, int sig)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d26:	f008 f8b5 	bl	8008e94 <__errno>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2216      	movs	r2, #22
 8000d2e:	601a      	str	r2, [r3, #0]
  return -1;
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_exit>:

void _exit (int status)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ffe7 	bl	8000d1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d4e:	bf00      	nop
 8000d50:	e7fd      	b.n	8000d4e <_exit+0x12>

08000d52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e00a      	b.n	8000d7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d64:	f3af 8000 	nop.w
 8000d68:	4601      	mov	r1, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	60ba      	str	r2, [r7, #8]
 8000d70:	b2ca      	uxtb	r2, r1
 8000d72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3301      	adds	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	dbf0      	blt.n	8000d64 <_read+0x12>
  }

  return len;
 8000d82:	687b      	ldr	r3, [r7, #4]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	e009      	b.n	8000db2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1c5a      	adds	r2, r3, #1
 8000da2:	60ba      	str	r2, [r7, #8]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	dbf1      	blt.n	8000d9e <_write+0x12>
  }
  return len;
 8000dba:	687b      	ldr	r3, [r7, #4]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_close>:

int _close(int file)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dec:	605a      	str	r2, [r3, #4]
  return 0;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_isatty>:

int _isatty(int file)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e04:	2301      	movs	r3, #1
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f008 f81a 	bl	8008e94 <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	24080000 	.word	0x24080000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	240001e8 	.word	0x240001e8
 8000e94:	24004de0 	.word	0x24004de0

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ed0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e9c:	f7ff fa88 	bl	80003b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea0:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ea2:	490d      	ldr	r1, [pc, #52]	@ (8000ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f007 ffeb 	bl	8008ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fce7 	bl	800089c <main>
  bx  lr
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ed4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ed8:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 8000edc:	08009ce8 	.word	0x08009ce8
  ldr r2, =_sbss
 8000ee0:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 8000ee4:	24004ddc 	.word	0x24004ddc

08000ee8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC3_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f000 f90f 	bl	8001116 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ef8:	f001 fa60 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8000efc:	4602      	mov	r2, r0
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <HAL_Init+0x68>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	0a1b      	lsrs	r3, r3, #8
 8000f04:	f003 030f 	and.w	r3, r3, #15
 8000f08:	4913      	ldr	r1, [pc, #76]	@ (8000f58 <HAL_Init+0x6c>)
 8000f0a:	5ccb      	ldrb	r3, [r1, r3]
 8000f0c:	f003 031f 	and.w	r3, r3, #31
 8000f10:	fa22 f303 	lsr.w	r3, r2, r3
 8000f14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <HAL_Init+0x68>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f58 <HAL_Init+0x6c>)
 8000f20:	5cd3      	ldrb	r3, [r2, r3]
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f5c <HAL_Init+0x70>)
 8000f2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f30:	4a0b      	ldr	r2, [pc, #44]	@ (8000f60 <HAL_Init+0x74>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f36:	200f      	movs	r0, #15
 8000f38:	f7ff fe50 	bl	8000bdc <HAL_InitTick>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e002      	b.n	8000f4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f46:	f7ff fe23 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	58024400 	.word	0x58024400
 8000f58:	08009bac 	.word	0x08009bac
 8000f5c:	24000004 	.word	0x24000004
 8000f60:	24000000 	.word	0x24000000

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	24000020 	.word	0x24000020
 8000f88:	240001ec 	.word	0x240001ec

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	@ (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	240001ec 	.word	0x240001ec

08000fa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <HAL_GetREVID+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	0c1b      	lsrs	r3, r3, #16
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	5c001000 	.word	0x5c001000

08000fbc <__NVIC_SetPriorityGrouping>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <__NVIC_SetPriorityGrouping+0x40>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	@ (8000ffc <__NVIC_SetPriorityGrouping+0x40>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00
 8001000:	05fa0000 	.word	0x05fa0000

08001004 <__NVIC_GetPriorityGrouping>:
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	@ (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	@ (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	@ (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	@ (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	@ 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	@ 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff4c 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800113a:	f7ff ff63 	bl	8001004 <__NVIC_GetPriorityGrouping>
 800113e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	68b9      	ldr	r1, [r7, #8]
 8001144:	6978      	ldr	r0, [r7, #20]
 8001146:	f7ff ffb3 	bl	80010b0 <NVIC_EncodePriority>
 800114a:	4602      	mov	r2, r0
 800114c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff82 	bl	800105c <__NVIC_SetPriority>
}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff56 	bl	8001020 <__NVIC_EnableIRQ>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001180:	f3bf 8f5f 	dmb	sy
}
 8001184:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <HAL_MPU_Disable+0x28>)
 8001188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118a:	4a06      	ldr	r2, [pc, #24]	@ (80011a4 <HAL_MPU_Disable+0x28>)
 800118c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001190:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001192:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <HAL_MPU_Disable+0x2c>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00
 80011a8:	e000ed90 	.word	0xe000ed90

080011ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80011b4:	4a0b      	ldr	r2, [pc, #44]	@ (80011e4 <HAL_MPU_Enable+0x38>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <HAL_MPU_Enable+0x3c>)
 80011c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c2:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <HAL_MPU_Enable+0x3c>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80011ca:	f3bf 8f4f 	dsb	sy
}
 80011ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011d0:	f3bf 8f6f 	isb	sy
}
 80011d4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed90 	.word	0xe000ed90
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	785a      	ldrb	r2, [r3, #1]
 80011f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <HAL_MPU_ConfigRegion+0x7c>)
 80011fa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80011fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <HAL_MPU_ConfigRegion+0x7c>)
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	4a19      	ldr	r2, [pc, #100]	@ (8001268 <HAL_MPU_ConfigRegion+0x7c>)
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001208:	4a17      	ldr	r2, [pc, #92]	@ (8001268 <HAL_MPU_ConfigRegion+0x7c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7b1b      	ldrb	r3, [r3, #12]
 8001214:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7adb      	ldrb	r3, [r3, #11]
 800121a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800121c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7a9b      	ldrb	r3, [r3, #10]
 8001222:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001224:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7b5b      	ldrb	r3, [r3, #13]
 800122a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800122c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7b9b      	ldrb	r3, [r3, #14]
 8001232:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001234:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7bdb      	ldrb	r3, [r3, #15]
 800123a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800123c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7a5b      	ldrb	r3, [r3, #9]
 8001242:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001244:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7a1b      	ldrb	r3, [r3, #8]
 800124a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800124c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	7812      	ldrb	r2, [r2, #0]
 8001252:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001254:	4a04      	ldr	r2, [pc, #16]	@ (8001268 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001256:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001258:	6113      	str	r3, [r2, #16]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed90 	.word	0xe000ed90

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	@ 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800127a:	4b89      	ldr	r3, [pc, #548]	@ (80014a0 <HAL_GPIO_Init+0x234>)
 800127c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800127e:	e194      	b.n	80015aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	2101      	movs	r1, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 8186 	beq.w	80015a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d005      	beq.n	80012b0 <HAL_GPIO_Init+0x44>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d130      	bne.n	8001312 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012e6:	2201      	movs	r2, #1
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f003 0201 	and.w	r2, r3, #1
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b03      	cmp	r3, #3
 800131c:	d017      	beq.n	800134e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d123      	bne.n	80013a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	08da      	lsrs	r2, r3, #3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3208      	adds	r2, #8
 8001362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	691a      	ldr	r2, [r3, #16]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	69b9      	ldr	r1, [r7, #24]
 800139e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0203 	and.w	r2, r3, #3
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 80e0 	beq.w	80015a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e4:	4b2f      	ldr	r3, [pc, #188]	@ (80014a4 <HAL_GPIO_Init+0x238>)
 80013e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013ea:	4a2e      	ldr	r2, [pc, #184]	@ (80014a4 <HAL_GPIO_Init+0x238>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013f4:	4b2b      	ldr	r3, [pc, #172]	@ (80014a4 <HAL_GPIO_Init+0x238>)
 80013f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001402:	4a29      	ldr	r2, [pc, #164]	@ (80014a8 <HAL_GPIO_Init+0x23c>)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a20      	ldr	r2, [pc, #128]	@ (80014ac <HAL_GPIO_Init+0x240>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d052      	beq.n	80014d4 <HAL_GPIO_Init+0x268>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a1f      	ldr	r2, [pc, #124]	@ (80014b0 <HAL_GPIO_Init+0x244>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d031      	beq.n	800149a <HAL_GPIO_Init+0x22e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a1e      	ldr	r2, [pc, #120]	@ (80014b4 <HAL_GPIO_Init+0x248>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d02b      	beq.n	8001496 <HAL_GPIO_Init+0x22a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a1d      	ldr	r2, [pc, #116]	@ (80014b8 <HAL_GPIO_Init+0x24c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d025      	beq.n	8001492 <HAL_GPIO_Init+0x226>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a1c      	ldr	r2, [pc, #112]	@ (80014bc <HAL_GPIO_Init+0x250>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d01f      	beq.n	800148e <HAL_GPIO_Init+0x222>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a1b      	ldr	r2, [pc, #108]	@ (80014c0 <HAL_GPIO_Init+0x254>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d019      	beq.n	800148a <HAL_GPIO_Init+0x21e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a1a      	ldr	r2, [pc, #104]	@ (80014c4 <HAL_GPIO_Init+0x258>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d013      	beq.n	8001486 <HAL_GPIO_Init+0x21a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a19      	ldr	r2, [pc, #100]	@ (80014c8 <HAL_GPIO_Init+0x25c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d00d      	beq.n	8001482 <HAL_GPIO_Init+0x216>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a18      	ldr	r2, [pc, #96]	@ (80014cc <HAL_GPIO_Init+0x260>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d007      	beq.n	800147e <HAL_GPIO_Init+0x212>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a17      	ldr	r2, [pc, #92]	@ (80014d0 <HAL_GPIO_Init+0x264>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d101      	bne.n	800147a <HAL_GPIO_Init+0x20e>
 8001476:	2309      	movs	r3, #9
 8001478:	e02d      	b.n	80014d6 <HAL_GPIO_Init+0x26a>
 800147a:	230a      	movs	r3, #10
 800147c:	e02b      	b.n	80014d6 <HAL_GPIO_Init+0x26a>
 800147e:	2308      	movs	r3, #8
 8001480:	e029      	b.n	80014d6 <HAL_GPIO_Init+0x26a>
 8001482:	2307      	movs	r3, #7
 8001484:	e027      	b.n	80014d6 <HAL_GPIO_Init+0x26a>
 8001486:	2306      	movs	r3, #6
 8001488:	e025      	b.n	80014d6 <HAL_GPIO_Init+0x26a>
 800148a:	2305      	movs	r3, #5
 800148c:	e023      	b.n	80014d6 <HAL_GPIO_Init+0x26a>
 800148e:	2304      	movs	r3, #4
 8001490:	e021      	b.n	80014d6 <HAL_GPIO_Init+0x26a>
 8001492:	2303      	movs	r3, #3
 8001494:	e01f      	b.n	80014d6 <HAL_GPIO_Init+0x26a>
 8001496:	2302      	movs	r3, #2
 8001498:	e01d      	b.n	80014d6 <HAL_GPIO_Init+0x26a>
 800149a:	2301      	movs	r3, #1
 800149c:	e01b      	b.n	80014d6 <HAL_GPIO_Init+0x26a>
 800149e:	bf00      	nop
 80014a0:	58000080 	.word	0x58000080
 80014a4:	58024400 	.word	0x58024400
 80014a8:	58000400 	.word	0x58000400
 80014ac:	58020000 	.word	0x58020000
 80014b0:	58020400 	.word	0x58020400
 80014b4:	58020800 	.word	0x58020800
 80014b8:	58020c00 	.word	0x58020c00
 80014bc:	58021000 	.word	0x58021000
 80014c0:	58021400 	.word	0x58021400
 80014c4:	58021800 	.word	0x58021800
 80014c8:	58021c00 	.word	0x58021c00
 80014cc:	58022000 	.word	0x58022000
 80014d0:	58022400 	.word	0x58022400
 80014d4:	2300      	movs	r3, #0
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	f002 0203 	and.w	r2, r2, #3
 80014dc:	0092      	lsls	r2, r2, #2
 80014de:	4093      	lsls	r3, r2
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e6:	4938      	ldr	r1, [pc, #224]	@ (80015c8 <HAL_GPIO_Init+0x35c>)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800151a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001548:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	3301      	adds	r3, #1
 80015a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f47f ae63 	bne.w	8001280 <HAL_GPIO_Init+0x14>
  }
}
 80015ba:	bf00      	nop
 80015bc:	bf00      	nop
 80015be:	3724      	adds	r7, #36	@ 0x24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	58000400 	.word	0x58000400

080015cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]
 80015d8:	4613      	mov	r3, r2
 80015da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015dc:	787b      	ldrb	r3, [r7, #1]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e2:	887a      	ldrh	r2, [r7, #2]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80015e8:	e003      	b.n	80015f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015ea:	887b      	ldrh	r3, [r7, #2]
 80015ec:	041a      	lsls	r2, r3, #16
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	619a      	str	r2, [r3, #24]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001610:	887a      	ldrh	r2, [r7, #2]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4013      	ands	r3, r2
 8001616:	041a      	lsls	r2, r3, #16
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43d9      	mvns	r1, r3
 800161c:	887b      	ldrh	r3, [r7, #2]
 800161e:	400b      	ands	r3, r1
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	619a      	str	r2, [r3, #24]
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800163c:	4a08      	ldr	r2, [pc, #32]	@ (8001660 <HAL_HSEM_FastTake+0x2c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3320      	adds	r3, #32
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	4a07      	ldr	r2, [pc, #28]	@ (8001664 <HAL_HSEM_FastTake+0x30>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d101      	bne.n	8001650 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	e000      	b.n	8001652 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	58026400 	.word	0x58026400
 8001664:	80000300 	.word	0x80000300

08001668 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001672:	4906      	ldr	r1, [pc, #24]	@ (800168c <HAL_HSEM_Release+0x24>)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	58026400 	.word	0x58026400

08001690 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <HAL_HSEM_ActivateNotification+0x20>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4904      	ldr	r1, [pc, #16]	@ (80016b0 <HAL_HSEM_ActivateNotification+0x20>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]
#endif
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	58026500 	.word	0x58026500

080016b4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80016ba:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <HAL_HSEM_IRQHandler+0x30>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80016c0:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <HAL_HSEM_IRQHandler+0x30>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	4906      	ldr	r1, [pc, #24]	@ (80016e4 <HAL_HSEM_IRQHandler+0x30>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80016ce:	4a05      	ldr	r2, [pc, #20]	@ (80016e4 <HAL_HSEM_IRQHandler+0x30>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f006 feb9 	bl	800844c <HAL_HSEM_FreeCallback>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	58026500 	.word	0x58026500

080016e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016f0:	4b29      	ldr	r3, [pc, #164]	@ (8001798 <HAL_PWREx_ConfigSupply+0xb0>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d00a      	beq.n	8001712 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016fc:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <HAL_PWREx_ConfigSupply+0xb0>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	d001      	beq.n	800170e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e040      	b.n	8001790 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e03e      	b.n	8001790 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001712:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <HAL_PWREx_ConfigSupply+0xb0>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800171a:	491f      	ldr	r1, [pc, #124]	@ (8001798 <HAL_PWREx_ConfigSupply+0xb0>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4313      	orrs	r3, r2
 8001720:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001722:	f7ff fc33 	bl	8000f8c <HAL_GetTick>
 8001726:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001728:	e009      	b.n	800173e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800172a:	f7ff fc2f 	bl	8000f8c <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001738:	d901      	bls.n	800173e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e028      	b.n	8001790 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <HAL_PWREx_ConfigSupply+0xb0>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800174a:	d1ee      	bne.n	800172a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b1e      	cmp	r3, #30
 8001750:	d008      	beq.n	8001764 <HAL_PWREx_ConfigSupply+0x7c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b2e      	cmp	r3, #46	@ 0x2e
 8001756:	d005      	beq.n	8001764 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b1d      	cmp	r3, #29
 800175c:	d002      	beq.n	8001764 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b2d      	cmp	r3, #45	@ 0x2d
 8001762:	d114      	bne.n	800178e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001764:	f7ff fc12 	bl	8000f8c <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800176a:	e009      	b.n	8001780 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800176c:	f7ff fc0e 	bl	8000f8c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800177a:	d901      	bls.n	8001780 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e007      	b.n	8001790 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001780:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <HAL_PWREx_ConfigSupply+0xb0>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800178c:	d1ee      	bne.n	800176c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	58024800 	.word	0x58024800

0800179c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	@ 0x30
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f000 bc48 	b.w	8002040 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 8088 	beq.w	80018ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017be:	4b99      	ldr	r3, [pc, #612]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017c8:	4b96      	ldr	r3, [pc, #600]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d0:	2b10      	cmp	r3, #16
 80017d2:	d007      	beq.n	80017e4 <HAL_RCC_OscConfig+0x48>
 80017d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d6:	2b18      	cmp	r3, #24
 80017d8:	d111      	bne.n	80017fe <HAL_RCC_OscConfig+0x62>
 80017da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d10c      	bne.n	80017fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	4b8f      	ldr	r3, [pc, #572]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d06d      	beq.n	80018cc <HAL_RCC_OscConfig+0x130>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d169      	bne.n	80018cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f000 bc21 	b.w	8002040 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x7a>
 8001808:	4b86      	ldr	r3, [pc, #536]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a85      	ldr	r2, [pc, #532]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800180e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e02e      	b.n	8001874 <HAL_RCC_OscConfig+0xd8>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x9c>
 800181e:	4b81      	ldr	r3, [pc, #516]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a80      	ldr	r2, [pc, #512]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7d      	ldr	r2, [pc, #500]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001830:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e01d      	b.n	8001874 <HAL_RCC_OscConfig+0xd8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0xc0>
 8001842:	4b78      	ldr	r3, [pc, #480]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a77      	ldr	r2, [pc, #476]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b75      	ldr	r3, [pc, #468]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a74      	ldr	r2, [pc, #464]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0xd8>
 800185c:	4b71      	ldr	r3, [pc, #452]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a70      	ldr	r2, [pc, #448]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b6e      	ldr	r3, [pc, #440]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a6d      	ldr	r2, [pc, #436]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fb86 	bl	8000f8c <HAL_GetTick>
 8001880:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fb82 	bl	8000f8c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	@ 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e3d4      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001896:	4b63      	ldr	r3, [pc, #396]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0xe8>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fb72 	bl	8000f8c <HAL_GetTick>
 80018a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fb6e 	bl	8000f8c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	@ 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e3c0      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018be:	4b59      	ldr	r3, [pc, #356]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x110>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80ca 	beq.w	8001a70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018dc:	4b51      	ldr	r3, [pc, #324]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <HAL_RCC_OscConfig+0x166>
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	2b18      	cmp	r3, #24
 80018f6:	d156      	bne.n	80019a6 <HAL_RCC_OscConfig+0x20a>
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d151      	bne.n	80019a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001902:	4b48      	ldr	r3, [pc, #288]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x17e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e392      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800191a:	4b42      	ldr	r3, [pc, #264]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 0219 	bic.w	r2, r3, #25
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	493f      	ldr	r1, [pc, #252]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff fb2e 	bl	8000f8c <HAL_GetTick>
 8001930:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001934:	f7ff fb2a 	bl	8000f8c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e37c      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001946:	4b37      	ldr	r3, [pc, #220]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	f7ff fb27 	bl	8000fa4 <HAL_GetREVID>
 8001956:	4603      	mov	r3, r0
 8001958:	f241 0203 	movw	r2, #4099	@ 0x1003
 800195c:	4293      	cmp	r3, r2
 800195e:	d817      	bhi.n	8001990 <HAL_RCC_OscConfig+0x1f4>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	2b40      	cmp	r3, #64	@ 0x40
 8001966:	d108      	bne.n	800197a <HAL_RCC_OscConfig+0x1de>
 8001968:	4b2e      	ldr	r3, [pc, #184]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001970:	4a2c      	ldr	r2, [pc, #176]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001976:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001978:	e07a      	b.n	8001a70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	031b      	lsls	r3, r3, #12
 8001988:	4926      	ldr	r1, [pc, #152]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800198a:	4313      	orrs	r3, r2
 800198c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800198e:	e06f      	b.n	8001a70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001990:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	061b      	lsls	r3, r3, #24
 800199e:	4921      	ldr	r1, [pc, #132]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a4:	e064      	b.n	8001a70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d047      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 0219 	bic.w	r2, r3, #25
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	491a      	ldr	r1, [pc, #104]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fae4 	bl	8000f8c <HAL_GetTick>
 80019c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c8:	f7ff fae0 	bl	8000f8c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e332      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019da:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e6:	f7ff fadd 	bl	8000fa4 <HAL_GetREVID>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d819      	bhi.n	8001a28 <HAL_RCC_OscConfig+0x28c>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	2b40      	cmp	r3, #64	@ 0x40
 80019fa:	d108      	bne.n	8001a0e <HAL_RCC_OscConfig+0x272>
 80019fc:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a04:	4a07      	ldr	r2, [pc, #28]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a0a:	6053      	str	r3, [r2, #4]
 8001a0c:	e030      	b.n	8001a70 <HAL_RCC_OscConfig+0x2d4>
 8001a0e:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	031b      	lsls	r3, r3, #12
 8001a1c:	4901      	ldr	r1, [pc, #4]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
 8001a22:	e025      	b.n	8001a70 <HAL_RCC_OscConfig+0x2d4>
 8001a24:	58024400 	.word	0x58024400
 8001a28:	4b9a      	ldr	r3, [pc, #616]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	4997      	ldr	r1, [pc, #604]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
 8001a3c:	e018      	b.n	8001a70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3e:	4b95      	ldr	r3, [pc, #596]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a94      	ldr	r2, [pc, #592]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fa9f 	bl	8000f8c <HAL_GetTick>
 8001a4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a52:	f7ff fa9b 	bl	8000f8c <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e2ed      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a64:	4b8b      	ldr	r3, [pc, #556]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80a9 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a7e:	4b85      	ldr	r3, [pc, #532]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a88:	4b82      	ldr	r3, [pc, #520]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d007      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x308>
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b18      	cmp	r3, #24
 8001a98:	d13a      	bne.n	8001b10 <HAL_RCC_OscConfig+0x374>
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d135      	bne.n	8001b10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_OscConfig+0x320>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	2b80      	cmp	r3, #128	@ 0x80
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e2c1      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001abc:	f7ff fa72 	bl	8000fa4 <HAL_GetREVID>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d817      	bhi.n	8001afa <HAL_RCC_OscConfig+0x35e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d108      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x348>
 8001ad2:	4b70      	ldr	r3, [pc, #448]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ada:	4a6e      	ldr	r2, [pc, #440]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001adc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ae0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ae2:	e075      	b.n	8001bd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ae4:	4b6b      	ldr	r3, [pc, #428]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	069b      	lsls	r3, r3, #26
 8001af2:	4968      	ldr	r1, [pc, #416]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001af8:	e06a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001afa:	4b66      	ldr	r3, [pc, #408]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	061b      	lsls	r3, r3, #24
 8001b08:	4962      	ldr	r1, [pc, #392]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b0e:	e05f      	b.n	8001bd0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d042      	beq.n	8001b9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b18:	4b5e      	ldr	r3, [pc, #376]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a5d      	ldr	r2, [pc, #372]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa32 	bl	8000f8c <HAL_GetTick>
 8001b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa2e 	bl	8000f8c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e280      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b3e:	4b55      	ldr	r3, [pc, #340]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b4a:	f7ff fa2b 	bl	8000fa4 <HAL_GetREVID>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d817      	bhi.n	8001b88 <HAL_RCC_OscConfig+0x3ec>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d108      	bne.n	8001b72 <HAL_RCC_OscConfig+0x3d6>
 8001b60:	4b4c      	ldr	r3, [pc, #304]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b68:	4a4a      	ldr	r2, [pc, #296]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b6e:	6053      	str	r3, [r2, #4]
 8001b70:	e02e      	b.n	8001bd0 <HAL_RCC_OscConfig+0x434>
 8001b72:	4b48      	ldr	r3, [pc, #288]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	069b      	lsls	r3, r3, #26
 8001b80:	4944      	ldr	r1, [pc, #272]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
 8001b86:	e023      	b.n	8001bd0 <HAL_RCC_OscConfig+0x434>
 8001b88:	4b42      	ldr	r3, [pc, #264]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	493f      	ldr	r1, [pc, #252]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
 8001b9c:	e018      	b.n	8001bd0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a3c      	ldr	r2, [pc, #240]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff f9ef 	bl	8000f8c <HAL_GetTick>
 8001bae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bb2:	f7ff f9eb 	bl	8000f8c <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e23d      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bc4:	4b33      	ldr	r3, [pc, #204]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d036      	beq.n	8001c4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d019      	beq.n	8001c18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f9cc 	bl	8000f8c <HAL_GetTick>
 8001bf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff f9c8 	bl	8000f8c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e21a      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c0a:	4b22      	ldr	r3, [pc, #136]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x45c>
 8001c16:	e018      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c18:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7ff f9b2 	bl	8000f8c <HAL_GetTick>
 8001c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2c:	f7ff f9ae 	bl	8000f8c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e200      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d039      	beq.n	8001cca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d01c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a0c      	ldr	r2, [pc, #48]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c6a:	f7ff f98f 	bl	8000f8c <HAL_GetTick>
 8001c6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c72:	f7ff f98b 	bl	8000f8c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e1dd      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x4d6>
 8001c90:	e01b      	b.n	8001cca <HAL_RCC_OscConfig+0x52e>
 8001c92:	bf00      	nop
 8001c94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c98:	4b9b      	ldr	r3, [pc, #620]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a9a      	ldr	r2, [pc, #616]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001c9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ca2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f972 	bl	8000f8c <HAL_GetTick>
 8001ca8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cac:	f7ff f96e 	bl	8000f8c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1c0      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cbe:	4b92      	ldr	r3, [pc, #584]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8081 	beq.w	8001dda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cd8:	4b8c      	ldr	r3, [pc, #560]	@ (8001f0c <HAL_RCC_OscConfig+0x770>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a8b      	ldr	r2, [pc, #556]	@ (8001f0c <HAL_RCC_OscConfig+0x770>)
 8001cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f952 	bl	8000f8c <HAL_GetTick>
 8001ce8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cec:	f7ff f94e 	bl	8000f8c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	@ 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1a0      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cfe:	4b83      	ldr	r3, [pc, #524]	@ (8001f0c <HAL_RCC_OscConfig+0x770>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d106      	bne.n	8001d20 <HAL_RCC_OscConfig+0x584>
 8001d12:	4b7d      	ldr	r3, [pc, #500]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d16:	4a7c      	ldr	r2, [pc, #496]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d1e:	e02d      	b.n	8001d7c <HAL_RCC_OscConfig+0x5e0>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10c      	bne.n	8001d42 <HAL_RCC_OscConfig+0x5a6>
 8001d28:	4b77      	ldr	r3, [pc, #476]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2c:	4a76      	ldr	r2, [pc, #472]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d34:	4b74      	ldr	r3, [pc, #464]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d38:	4a73      	ldr	r2, [pc, #460]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d3a:	f023 0304 	bic.w	r3, r3, #4
 8001d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d40:	e01c      	b.n	8001d7c <HAL_RCC_OscConfig+0x5e0>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b05      	cmp	r3, #5
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5c8>
 8001d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d56:	4b6c      	ldr	r3, [pc, #432]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5a:	4a6b      	ldr	r2, [pc, #428]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d62:	e00b      	b.n	8001d7c <HAL_RCC_OscConfig+0x5e0>
 8001d64:	4b68      	ldr	r3, [pc, #416]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d68:	4a67      	ldr	r2, [pc, #412]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d70:	4b65      	ldr	r3, [pc, #404]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d74:	4a64      	ldr	r2, [pc, #400]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d76:	f023 0304 	bic.w	r3, r3, #4
 8001d7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d015      	beq.n	8001db0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff f902 	bl	8000f8c <HAL_GetTick>
 8001d88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7ff f8fe 	bl	8000f8c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e14e      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001da2:	4b59      	ldr	r3, [pc, #356]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0ee      	beq.n	8001d8c <HAL_RCC_OscConfig+0x5f0>
 8001dae:	e014      	b.n	8001dda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7ff f8ec 	bl	8000f8c <HAL_GetTick>
 8001db4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db8:	f7ff f8e8 	bl	8000f8c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e138      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dce:	4b4e      	ldr	r3, [pc, #312]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1ee      	bne.n	8001db8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 812d 	beq.w	800203e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001de4:	4b48      	ldr	r3, [pc, #288]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dec:	2b18      	cmp	r3, #24
 8001dee:	f000 80bd 	beq.w	8001f6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	f040 809e 	bne.w	8001f38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfc:	4b42      	ldr	r3, [pc, #264]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a41      	ldr	r2, [pc, #260]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff f8c0 	bl	8000f8c <HAL_GetTick>
 8001e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff f8bc 	bl	8000f8c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e10e      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e22:	4b39      	ldr	r3, [pc, #228]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2e:	4b36      	ldr	r3, [pc, #216]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e32:	4b37      	ldr	r3, [pc, #220]	@ (8001f10 <HAL_RCC_OscConfig+0x774>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	430a      	orrs	r2, r1
 8001e42:	4931      	ldr	r1, [pc, #196]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e56:	3b01      	subs	r3, #1
 8001e58:	025b      	lsls	r3, r3, #9
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e62:	3b01      	subs	r3, #1
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e70:	3b01      	subs	r3, #1
 8001e72:	061b      	lsls	r3, r3, #24
 8001e74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e78:	4923      	ldr	r1, [pc, #140]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e7e:	4b22      	ldr	r3, [pc, #136]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e82:	4a21      	ldr	r2, [pc, #132]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e8e:	4b21      	ldr	r3, [pc, #132]	@ (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e96:	00d2      	lsls	r2, r2, #3
 8001e98:	491b      	ldr	r1, [pc, #108]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea2:	f023 020c 	bic.w	r2, r3, #12
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	4917      	ldr	r1, [pc, #92]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001eb0:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb4:	f023 0202 	bic.w	r2, r3, #2
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebc:	4912      	ldr	r1, [pc, #72]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec6:	4a10      	ldr	r2, [pc, #64]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ede:	4a0a      	ldr	r2, [pc, #40]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eea:	4a07      	ldr	r2, [pc, #28]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef2:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7ff f845 	bl	8000f8c <HAL_GetTick>
 8001f02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f04:	e011      	b.n	8001f2a <HAL_RCC_OscConfig+0x78e>
 8001f06:	bf00      	nop
 8001f08:	58024400 	.word	0x58024400
 8001f0c:	58024800 	.word	0x58024800
 8001f10:	fffffc0c 	.word	0xfffffc0c
 8001f14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff f838 	bl	8000f8c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e08a      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f2a:	4b47      	ldr	r3, [pc, #284]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x77c>
 8001f36:	e082      	b.n	800203e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	4b43      	ldr	r3, [pc, #268]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a42      	ldr	r2, [pc, #264]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8001f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff f822 	bl	8000f8c <HAL_GetTick>
 8001f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7ff f81e 	bl	8000f8c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e070      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x7b0>
 8001f6a:	e068      	b.n	800203e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f6c:	4b36      	ldr	r3, [pc, #216]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f72:	4b35      	ldr	r3, [pc, #212]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d031      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f003 0203 	and.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d12a      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d122      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d11a      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	0a5b      	lsrs	r3, r3, #9
 8001fb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d111      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	0c1b      	lsrs	r3, r3, #16
 8001fc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d108      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	0e1b      	lsrs	r3, r3, #24
 8001fd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e02b      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001fe8:	4b17      	ldr	r3, [pc, #92]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8001fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ff2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d01f      	beq.n	800203e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001ffe:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8002000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002002:	4a11      	ldr	r2, [pc, #68]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800200a:	f7fe ffbf 	bl	8000f8c <HAL_GetTick>
 800200e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002010:	bf00      	nop
 8002012:	f7fe ffbb 	bl	8000f8c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	4293      	cmp	r3, r2
 800201c:	d0f9      	beq.n	8002012 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8002020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <HAL_RCC_OscConfig+0x8b0>)
 8002024:	4013      	ands	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800202a:	00d2      	lsls	r2, r2, #3
 800202c:	4906      	ldr	r1, [pc, #24]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 800202e:	4313      	orrs	r3, r2
 8002030:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002032:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3730      	adds	r7, #48	@ 0x30
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	58024400 	.word	0x58024400
 800204c:	ffff0007 	.word	0xffff0007

08002050 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e19c      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002064:	4b8a      	ldr	r3, [pc, #552]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 030f 	and.w	r3, r3, #15
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d910      	bls.n	8002094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b87      	ldr	r3, [pc, #540]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 020f 	bic.w	r2, r3, #15
 800207a:	4985      	ldr	r1, [pc, #532]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b83      	ldr	r3, [pc, #524]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e184      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d010      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	4b7b      	ldr	r3, [pc, #492]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d908      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020b0:	4b78      	ldr	r3, [pc, #480]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	4975      	ldr	r1, [pc, #468]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d010      	beq.n	80020f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	4b70      	ldr	r3, [pc, #448]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020da:	429a      	cmp	r2, r3
 80020dc:	d908      	bls.n	80020f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020de:	4b6d      	ldr	r3, [pc, #436]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	496a      	ldr	r1, [pc, #424]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d010      	beq.n	800211e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	4b64      	ldr	r3, [pc, #400]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002108:	429a      	cmp	r2, r3
 800210a:	d908      	bls.n	800211e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800210c:	4b61      	ldr	r3, [pc, #388]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	495e      	ldr	r1, [pc, #376]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 800211a:	4313      	orrs	r3, r2
 800211c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b00      	cmp	r3, #0
 8002128:	d010      	beq.n	800214c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	4b59      	ldr	r3, [pc, #356]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002136:	429a      	cmp	r2, r3
 8002138:	d908      	bls.n	800214c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800213a:	4b56      	ldr	r3, [pc, #344]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4953      	ldr	r1, [pc, #332]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002148:	4313      	orrs	r3, r2
 800214a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d010      	beq.n	800217a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	4b4d      	ldr	r3, [pc, #308]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	429a      	cmp	r2, r3
 8002166:	d908      	bls.n	800217a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b4a      	ldr	r3, [pc, #296]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f023 020f 	bic.w	r2, r3, #15
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4947      	ldr	r1, [pc, #284]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002176:	4313      	orrs	r3, r2
 8002178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d055      	beq.n	8002232 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002186:	4b43      	ldr	r3, [pc, #268]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	4940      	ldr	r1, [pc, #256]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002194:	4313      	orrs	r3, r2
 8002196:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d121      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0f6      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021b8:	4b36      	ldr	r3, [pc, #216]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d115      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0ea      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021d0:	4b30      	ldr	r3, [pc, #192]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0de      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0d6      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021f0:	4b28      	ldr	r3, [pc, #160]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f023 0207 	bic.w	r2, r3, #7
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4925      	ldr	r1, [pc, #148]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002202:	f7fe fec3 	bl	8000f8c <HAL_GetTick>
 8002206:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002208:	e00a      	b.n	8002220 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220a:	f7fe febf 	bl	8000f8c <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0be      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002220:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	429a      	cmp	r2, r3
 8002230:	d1eb      	bne.n	800220a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d010      	beq.n	8002260 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	429a      	cmp	r2, r3
 800224c:	d208      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224e:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f023 020f 	bic.w	r2, r3, #15
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	490e      	ldr	r1, [pc, #56]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 800225c:	4313      	orrs	r3, r2
 800225e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d214      	bcs.n	8002298 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 020f 	bic.w	r2, r3, #15
 8002276:	4906      	ldr	r1, [pc, #24]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b04      	ldr	r3, [pc, #16]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d005      	beq.n	8002298 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e086      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>
 8002290:	52002000 	.word	0x52002000
 8002294:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d010      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	4b3f      	ldr	r3, [pc, #252]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d208      	bcs.n	80022c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022b4:	4b3c      	ldr	r3, [pc, #240]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	4939      	ldr	r1, [pc, #228]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d010      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	4b34      	ldr	r3, [pc, #208]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022de:	429a      	cmp	r2, r3
 80022e0:	d208      	bcs.n	80022f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022e2:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	492e      	ldr	r1, [pc, #184]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d010      	beq.n	8002322 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699a      	ldr	r2, [r3, #24]
 8002304:	4b28      	ldr	r3, [pc, #160]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800230c:	429a      	cmp	r2, r3
 800230e:	d208      	bcs.n	8002322 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002310:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4922      	ldr	r1, [pc, #136]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 800231e:	4313      	orrs	r3, r2
 8002320:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b00      	cmp	r3, #0
 800232c:	d010      	beq.n	8002350 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800233a:	429a      	cmp	r2, r3
 800233c:	d208      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800233e:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4917      	ldr	r1, [pc, #92]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 800234c:	4313      	orrs	r3, r2
 800234e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002350:	f000 f834 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	4912      	ldr	r1, [pc, #72]	@ (80023ac <HAL_RCC_ClockConfig+0x35c>)
 8002362:	5ccb      	ldrb	r3, [r1, r3]
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
 800236c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	4a0d      	ldr	r2, [pc, #52]	@ (80023ac <HAL_RCC_ClockConfig+0x35c>)
 8002378:	5cd3      	ldrb	r3, [r2, r3]
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <HAL_RCC_ClockConfig+0x360>)
 8002386:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002388:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <HAL_RCC_ClockConfig+0x364>)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800238e:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <HAL_RCC_ClockConfig+0x368>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fc22 	bl	8000bdc <HAL_InitTick>
 8002398:	4603      	mov	r3, r0
 800239a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	58024400 	.word	0x58024400
 80023ac:	08009bac 	.word	0x08009bac
 80023b0:	24000004 	.word	0x24000004
 80023b4:	24000000 	.word	0x24000000
 80023b8:	2400001c 	.word	0x2400001c

080023bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	@ 0x24
 80023c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c2:	4bb3      	ldr	r3, [pc, #716]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023ca:	2b18      	cmp	r3, #24
 80023cc:	f200 8155 	bhi.w	800267a <HAL_RCC_GetSysClockFreq+0x2be>
 80023d0:	a201      	add	r2, pc, #4	@ (adr r2, 80023d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d6:	bf00      	nop
 80023d8:	0800243d 	.word	0x0800243d
 80023dc:	0800267b 	.word	0x0800267b
 80023e0:	0800267b 	.word	0x0800267b
 80023e4:	0800267b 	.word	0x0800267b
 80023e8:	0800267b 	.word	0x0800267b
 80023ec:	0800267b 	.word	0x0800267b
 80023f0:	0800267b 	.word	0x0800267b
 80023f4:	0800267b 	.word	0x0800267b
 80023f8:	08002463 	.word	0x08002463
 80023fc:	0800267b 	.word	0x0800267b
 8002400:	0800267b 	.word	0x0800267b
 8002404:	0800267b 	.word	0x0800267b
 8002408:	0800267b 	.word	0x0800267b
 800240c:	0800267b 	.word	0x0800267b
 8002410:	0800267b 	.word	0x0800267b
 8002414:	0800267b 	.word	0x0800267b
 8002418:	08002469 	.word	0x08002469
 800241c:	0800267b 	.word	0x0800267b
 8002420:	0800267b 	.word	0x0800267b
 8002424:	0800267b 	.word	0x0800267b
 8002428:	0800267b 	.word	0x0800267b
 800242c:	0800267b 	.word	0x0800267b
 8002430:	0800267b 	.word	0x0800267b
 8002434:	0800267b 	.word	0x0800267b
 8002438:	0800246f 	.word	0x0800246f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800243c:	4b94      	ldr	r3, [pc, #592]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b00      	cmp	r3, #0
 8002446:	d009      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002448:	4b91      	ldr	r3, [pc, #580]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	08db      	lsrs	r3, r3, #3
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	4a90      	ldr	r2, [pc, #576]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
 8002458:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800245a:	e111      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800245c:	4b8d      	ldr	r3, [pc, #564]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800245e:	61bb      	str	r3, [r7, #24]
      break;
 8002460:	e10e      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002462:	4b8d      	ldr	r3, [pc, #564]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002464:	61bb      	str	r3, [r7, #24]
      break;
 8002466:	e10b      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002468:	4b8c      	ldr	r3, [pc, #560]	@ (800269c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800246a:	61bb      	str	r3, [r7, #24]
      break;
 800246c:	e108      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800246e:	4b88      	ldr	r3, [pc, #544]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002478:	4b85      	ldr	r3, [pc, #532]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002482:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002484:	4b82      	ldr	r3, [pc, #520]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800248e:	4b80      	ldr	r3, [pc, #512]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002492:	08db      	lsrs	r3, r3, #3
 8002494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80e1 	beq.w	8002674 <HAL_RCC_GetSysClockFreq+0x2b8>
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	f000 8083 	beq.w	80025c0 <HAL_RCC_GetSysClockFreq+0x204>
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	f200 80a1 	bhi.w	8002604 <HAL_RCC_GetSysClockFreq+0x248>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x114>
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d056      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x1c0>
 80024ce:	e099      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d02d      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	08db      	lsrs	r3, r3, #3
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	4a6b      	ldr	r2, [pc, #428]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002506:	4b62      	ldr	r3, [pc, #392]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250e:	ee07 3a90 	vmov	s15, r3
 8002512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002516:	ed97 6a02 	vldr	s12, [r7, #8]
 800251a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80026a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800251e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800252a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800252e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002532:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002536:	e087      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002542:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80026a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800254a:	4b51      	ldr	r3, [pc, #324]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800255a:	ed97 6a02 	vldr	s12, [r7, #8]
 800255e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80026a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800256a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800256e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002576:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800257a:	e065      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002586:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80026a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800258a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800258e:	4b40      	ldr	r3, [pc, #256]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800259e:	ed97 6a02 	vldr	s12, [r7, #8]
 80025a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80026a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025be:	e043      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	ee07 3a90 	vmov	s15, r3
 80025c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80026ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80025ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80025e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80026a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002602:	e021      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	ee07 3a90 	vmov	s15, r3
 800260a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800260e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80026a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002616:	4b1e      	ldr	r3, [pc, #120]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002626:	ed97 6a02 	vldr	s12, [r7, #8]
 800262a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80026a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800262e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800263a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800263e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002646:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002648:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264c:	0a5b      	lsrs	r3, r3, #9
 800264e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002652:	3301      	adds	r3, #1
 8002654:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	ee07 3a90 	vmov	s15, r3
 800265c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002660:	edd7 6a07 	vldr	s13, [r7, #28]
 8002664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800266c:	ee17 3a90 	vmov	r3, s15
 8002670:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002672:	e005      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
      break;
 8002678:	e002      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800267a:	4b07      	ldr	r3, [pc, #28]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800267c:	61bb      	str	r3, [r7, #24]
      break;
 800267e:	bf00      	nop
  }

  return sysclockfreq;
 8002680:	69bb      	ldr	r3, [r7, #24]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3724      	adds	r7, #36	@ 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	58024400 	.word	0x58024400
 8002694:	03d09000 	.word	0x03d09000
 8002698:	003d0900 	.word	0x003d0900
 800269c:	017d7840 	.word	0x017d7840
 80026a0:	46000000 	.word	0x46000000
 80026a4:	4c742400 	.word	0x4c742400
 80026a8:	4a742400 	.word	0x4a742400
 80026ac:	4bbebc20 	.word	0x4bbebc20

080026b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026b6:	f7ff fe81 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 80026ba:	4602      	mov	r2, r0
 80026bc:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <HAL_RCC_GetHCLKFreq+0x50>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	0a1b      	lsrs	r3, r3, #8
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	490f      	ldr	r1, [pc, #60]	@ (8002704 <HAL_RCC_GetHCLKFreq+0x54>)
 80026c8:	5ccb      	ldrb	r3, [r1, r3]
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	fa22 f303 	lsr.w	r3, r2, r3
 80026d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <HAL_RCC_GetHCLKFreq+0x50>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	4a09      	ldr	r2, [pc, #36]	@ (8002704 <HAL_RCC_GetHCLKFreq+0x54>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	4a07      	ldr	r2, [pc, #28]	@ (8002708 <HAL_RCC_GetHCLKFreq+0x58>)
 80026ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026ee:	4a07      	ldr	r2, [pc, #28]	@ (800270c <HAL_RCC_GetHCLKFreq+0x5c>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026f4:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <HAL_RCC_GetHCLKFreq+0x58>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	58024400 	.word	0x58024400
 8002704:	08009bac 	.word	0x08009bac
 8002708:	24000004 	.word	0x24000004
 800270c:	24000000 	.word	0x24000000

08002710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002714:	f7ff ffcc 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_RCC_GetPCLK1Freq+0x24>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4904      	ldr	r1, [pc, #16]	@ (8002738 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	58024400 	.word	0x58024400
 8002738:	08009bac 	.word	0x08009bac

0800273c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	223f      	movs	r2, #63	@ 0x3f
 800274a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800274c:	4b1a      	ldr	r3, [pc, #104]	@ (80027b8 <HAL_RCC_GetClockConfig+0x7c>)
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f003 0207 	and.w	r2, r3, #7
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002758:	4b17      	ldr	r3, [pc, #92]	@ (80027b8 <HAL_RCC_GetClockConfig+0x7c>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002764:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <HAL_RCC_GetClockConfig+0x7c>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 020f 	and.w	r2, r3, #15
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002770:	4b11      	ldr	r3, [pc, #68]	@ (80027b8 <HAL_RCC_GetClockConfig+0x7c>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800277c:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <HAL_RCC_GetClockConfig+0x7c>)
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002788:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <HAL_RCC_GetClockConfig+0x7c>)
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002794:	4b08      	ldr	r3, [pc, #32]	@ (80027b8 <HAL_RCC_GetClockConfig+0x7c>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027a0:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <HAL_RCC_GetClockConfig+0x80>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 020f 	and.w	r2, r3, #15
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	601a      	str	r2, [r3, #0]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	58024400 	.word	0x58024400
 80027bc:	52002000 	.word	0x52002000

080027c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e049      	b.n	8002866 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f841 	bl	800286e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3304      	adds	r3, #4
 80027fc:	4619      	mov	r1, r3
 80027fe:	4610      	mov	r0, r2
 8002800:	f000 f9e8 	bl	8002bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d001      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e054      	b.n	8002946 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a26      	ldr	r2, [pc, #152]	@ (8002954 <HAL_TIM_Base_Start_IT+0xd0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d022      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x80>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c6:	d01d      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x80>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a22      	ldr	r2, [pc, #136]	@ (8002958 <HAL_TIM_Base_Start_IT+0xd4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d018      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x80>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a21      	ldr	r2, [pc, #132]	@ (800295c <HAL_TIM_Base_Start_IT+0xd8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d013      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x80>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002960 <HAL_TIM_Base_Start_IT+0xdc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00e      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x80>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002964 <HAL_TIM_Base_Start_IT+0xe0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d009      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x80>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002968 <HAL_TIM_Base_Start_IT+0xe4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x80>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1b      	ldr	r2, [pc, #108]	@ (800296c <HAL_TIM_Base_Start_IT+0xe8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d115      	bne.n	8002930 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	4b19      	ldr	r3, [pc, #100]	@ (8002970 <HAL_TIM_Base_Start_IT+0xec>)
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b06      	cmp	r3, #6
 8002914:	d015      	beq.n	8002942 <HAL_TIM_Base_Start_IT+0xbe>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800291c:	d011      	beq.n	8002942 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292e:	e008      	b.n	8002942 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	e000      	b.n	8002944 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002942:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40010000 	.word	0x40010000
 8002958:	40000400 	.word	0x40000400
 800295c:	40000800 	.word	0x40000800
 8002960:	40000c00 	.word	0x40000c00
 8002964:	40010400 	.word	0x40010400
 8002968:	40001800 	.word	0x40001800
 800296c:	40014000 	.word	0x40014000
 8002970:	00010007 	.word	0x00010007

08002974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d020      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0202 	mvn.w	r2, #2
 80029a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f8e9 	bl	8002b96 <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f8db 	bl	8002b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f8ec 	bl	8002baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d020      	beq.n	8002a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0204 	mvn.w	r2, #4
 80029f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2202      	movs	r2, #2
 80029fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f8c3 	bl	8002b96 <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f8b5 	bl	8002b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f8c6 	bl	8002baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d020      	beq.n	8002a70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01b      	beq.n	8002a70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0208 	mvn.w	r2, #8
 8002a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2204      	movs	r2, #4
 8002a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f89d 	bl	8002b96 <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f88f 	bl	8002b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f8a0 	bl	8002baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d020      	beq.n	8002abc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01b      	beq.n	8002abc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0210 	mvn.w	r2, #16
 8002a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2208      	movs	r2, #8
 8002a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f877 	bl	8002b96 <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e005      	b.n	8002ab6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f869 	bl	8002b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f87a 	bl	8002baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00c      	beq.n	8002ae0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d007      	beq.n	8002ae0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0201 	mvn.w	r2, #1
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe f840 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d104      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00c      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f913 	bl	8002d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00c      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f90b 	bl	8002d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00c      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f834 	bl	8002bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00c      	beq.n	8002b7a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d007      	beq.n	8002b7a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f06f 0220 	mvn.w	r2, #32
 8002b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f8d3 	bl	8002d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a46      	ldr	r2, [pc, #280]	@ (8002d00 <TIM_Base_SetConfig+0x12c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <TIM_Base_SetConfig+0x40>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf2:	d00f      	beq.n	8002c14 <TIM_Base_SetConfig+0x40>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a43      	ldr	r2, [pc, #268]	@ (8002d04 <TIM_Base_SetConfig+0x130>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00b      	beq.n	8002c14 <TIM_Base_SetConfig+0x40>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a42      	ldr	r2, [pc, #264]	@ (8002d08 <TIM_Base_SetConfig+0x134>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d007      	beq.n	8002c14 <TIM_Base_SetConfig+0x40>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a41      	ldr	r2, [pc, #260]	@ (8002d0c <TIM_Base_SetConfig+0x138>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d003      	beq.n	8002c14 <TIM_Base_SetConfig+0x40>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a40      	ldr	r2, [pc, #256]	@ (8002d10 <TIM_Base_SetConfig+0x13c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d108      	bne.n	8002c26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a35      	ldr	r2, [pc, #212]	@ (8002d00 <TIM_Base_SetConfig+0x12c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01f      	beq.n	8002c6e <TIM_Base_SetConfig+0x9a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c34:	d01b      	beq.n	8002c6e <TIM_Base_SetConfig+0x9a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a32      	ldr	r2, [pc, #200]	@ (8002d04 <TIM_Base_SetConfig+0x130>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d017      	beq.n	8002c6e <TIM_Base_SetConfig+0x9a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a31      	ldr	r2, [pc, #196]	@ (8002d08 <TIM_Base_SetConfig+0x134>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <TIM_Base_SetConfig+0x9a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a30      	ldr	r2, [pc, #192]	@ (8002d0c <TIM_Base_SetConfig+0x138>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00f      	beq.n	8002c6e <TIM_Base_SetConfig+0x9a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a2f      	ldr	r2, [pc, #188]	@ (8002d10 <TIM_Base_SetConfig+0x13c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00b      	beq.n	8002c6e <TIM_Base_SetConfig+0x9a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a2e      	ldr	r2, [pc, #184]	@ (8002d14 <TIM_Base_SetConfig+0x140>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <TIM_Base_SetConfig+0x9a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a2d      	ldr	r2, [pc, #180]	@ (8002d18 <TIM_Base_SetConfig+0x144>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d003      	beq.n	8002c6e <TIM_Base_SetConfig+0x9a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a2c      	ldr	r2, [pc, #176]	@ (8002d1c <TIM_Base_SetConfig+0x148>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d108      	bne.n	8002c80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a16      	ldr	r2, [pc, #88]	@ (8002d00 <TIM_Base_SetConfig+0x12c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00f      	beq.n	8002ccc <TIM_Base_SetConfig+0xf8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a18      	ldr	r2, [pc, #96]	@ (8002d10 <TIM_Base_SetConfig+0x13c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00b      	beq.n	8002ccc <TIM_Base_SetConfig+0xf8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a17      	ldr	r2, [pc, #92]	@ (8002d14 <TIM_Base_SetConfig+0x140>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d007      	beq.n	8002ccc <TIM_Base_SetConfig+0xf8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a16      	ldr	r2, [pc, #88]	@ (8002d18 <TIM_Base_SetConfig+0x144>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <TIM_Base_SetConfig+0xf8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a15      	ldr	r2, [pc, #84]	@ (8002d1c <TIM_Base_SetConfig+0x148>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d103      	bne.n	8002cd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d105      	bne.n	8002cf2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f023 0201 	bic.w	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	611a      	str	r2, [r3, #16]
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40010000 	.word	0x40010000
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40000800 	.word	0x40000800
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	40010400 	.word	0x40010400
 8002d14:	40014000 	.word	0x40014000
 8002d18:	40014400 	.word	0x40014400
 8002d1c:	40014800 	.word	0x40014800

08002d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <__NVIC_SetPriority>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	@ (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	@ (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002db4:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <SysTick_Handler+0x1c>)
 8002db6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002db8:	f002 fa8e 	bl	80052d8 <xTaskGetSchedulerState>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d001      	beq.n	8002dc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002dc2:	f000 fdc9 	bl	8003958 <xPortSysTickHandler>
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	e000e010 	.word	0xe000e010

08002dd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	f06f 0004 	mvn.w	r0, #4
 8002dda:	f7ff ffbf 	bl	8002d5c <__NVIC_SetPriority>
#endif
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dea:	f3ef 8305 	mrs	r3, IPSR
 8002dee:	603b      	str	r3, [r7, #0]
  return(result);
 8002df0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002df6:	f06f 0305 	mvn.w	r3, #5
 8002dfa:	607b      	str	r3, [r7, #4]
 8002dfc:	e00c      	b.n	8002e18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <osKernelInitialize+0x44>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d105      	bne.n	8002e12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002e06:	4b08      	ldr	r3, [pc, #32]	@ (8002e28 <osKernelInitialize+0x44>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	607b      	str	r3, [r7, #4]
 8002e10:	e002      	b.n	8002e18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e18:	687b      	ldr	r3, [r7, #4]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	240001f0 	.word	0x240001f0

08002e2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e32:	f3ef 8305 	mrs	r3, IPSR
 8002e36:	603b      	str	r3, [r7, #0]
  return(result);
 8002e38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002e3e:	f06f 0305 	mvn.w	r3, #5
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	e010      	b.n	8002e68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e46:	4b0b      	ldr	r3, [pc, #44]	@ (8002e74 <osKernelStart+0x48>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d109      	bne.n	8002e62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002e4e:	f7ff ffbf 	bl	8002dd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002e52:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <osKernelStart+0x48>)
 8002e54:	2202      	movs	r2, #2
 8002e56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002e58:	f001 fdda 	bl	8004a10 <vTaskStartScheduler>
      stat = osOK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	e002      	b.n	8002e68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
 8002e66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e68:	687b      	ldr	r3, [r7, #4]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	240001f0 	.word	0x240001f0

08002e78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08e      	sub	sp, #56	@ 0x38
 8002e7c:	af04      	add	r7, sp, #16
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e88:	f3ef 8305 	mrs	r3, IPSR
 8002e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8002e8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d17e      	bne.n	8002f92 <osThreadNew+0x11a>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d07b      	beq.n	8002f92 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002e9a:	2380      	movs	r3, #128	@ 0x80
 8002e9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002e9e:	2318      	movs	r3, #24
 8002ea0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d045      	beq.n	8002f3e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <osThreadNew+0x48>
        name = attr->name;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <osThreadNew+0x6e>
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b38      	cmp	r3, #56	@ 0x38
 8002ed8:	d805      	bhi.n	8002ee6 <osThreadNew+0x6e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <osThreadNew+0x72>
        return (NULL);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e054      	b.n	8002f94 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00e      	beq.n	8002f20 <osThreadNew+0xa8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2ba7      	cmp	r3, #167	@ 0xa7
 8002f08:	d90a      	bls.n	8002f20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d006      	beq.n	8002f20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <osThreadNew+0xa8>
        mem = 1;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	e010      	b.n	8002f42 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10c      	bne.n	8002f42 <osThreadNew+0xca>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d108      	bne.n	8002f42 <osThreadNew+0xca>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d104      	bne.n	8002f42 <osThreadNew+0xca>
          mem = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	e001      	b.n	8002f42 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d110      	bne.n	8002f6a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f50:	9202      	str	r2, [sp, #8]
 8002f52:	9301      	str	r3, [sp, #4]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6a3a      	ldr	r2, [r7, #32]
 8002f5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f001 fa86 	bl	8004470 <xTaskCreateStatic>
 8002f64:	4603      	mov	r3, r0
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	e013      	b.n	8002f92 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d110      	bne.n	8002f92 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	f107 0310 	add.w	r3, r7, #16
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f001 fad4 	bl	8004530 <xTaskCreate>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d001      	beq.n	8002f92 <osThreadNew+0x11a>
            hTask = NULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f92:	693b      	ldr	r3, [r7, #16]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3728      	adds	r7, #40	@ 0x28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fa8:	f3ef 8305 	mrs	r3, IPSR
 8002fac:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <osThreadTerminate+0x20>
    stat = osErrorISR;
 8002fb4:	f06f 0305 	mvn.w	r3, #5
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e017      	b.n	8002fec <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8002fc2:	f06f 0303 	mvn.w	r3, #3
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e010      	b.n	8002fec <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8002fca:	6938      	ldr	r0, [r7, #16]
 8002fcc:	f001 fcb8 	bl	8004940 <eTaskGetState>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d005      	beq.n	8002fe6 <osThreadTerminate+0x4a>
      stat = osOK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8002fde:	6938      	ldr	r0, [r7, #16]
 8002fe0:	f001 fc04 	bl	80047ec <vTaskDelete>
 8002fe4:	e002      	b.n	8002fec <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8002fe6:	f06f 0302 	mvn.w	r3, #2
 8002fea:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8002fec:	697b      	ldr	r3, [r7, #20]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ffe:	f3ef 8305 	mrs	r3, IPSR
 8003002:	60bb      	str	r3, [r7, #8]
  return(result);
 8003004:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <osDelay+0x1c>
    stat = osErrorISR;
 800300a:	f06f 0305 	mvn.w	r3, #5
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	e007      	b.n	8003022 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <osDelay+0x2c>
      vTaskDelay(ticks);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f001 fc59 	bl	80048d4 <vTaskDelay>
    }
  }

  return (stat);
 8003022:	68fb      	ldr	r3, [r7, #12]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a07      	ldr	r2, [pc, #28]	@ (8003058 <vApplicationGetIdleTaskMemory+0x2c>)
 800303c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4a06      	ldr	r2, [pc, #24]	@ (800305c <vApplicationGetIdleTaskMemory+0x30>)
 8003042:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2280      	movs	r2, #128	@ 0x80
 8003048:	601a      	str	r2, [r3, #0]
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	240001f4 	.word	0x240001f4
 800305c:	2400029c 	.word	0x2400029c

08003060 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4a07      	ldr	r2, [pc, #28]	@ (800308c <vApplicationGetTimerTaskMemory+0x2c>)
 8003070:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4a06      	ldr	r2, [pc, #24]	@ (8003090 <vApplicationGetTimerTaskMemory+0x30>)
 8003076:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800307e:	601a      	str	r2, [r3, #0]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	2400049c 	.word	0x2400049c
 8003090:	24000544 	.word	0x24000544

08003094 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	@ 0x28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800309c:	2300      	movs	r3, #0
 800309e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80030a0:	f001 fd26 	bl	8004af0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80030a4:	4b5c      	ldr	r3, [pc, #368]	@ (8003218 <pvPortMalloc+0x184>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80030ac:	f000 f924 	bl	80032f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80030b0:	4b5a      	ldr	r3, [pc, #360]	@ (800321c <pvPortMalloc+0x188>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f040 8095 	bne.w	80031e8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01e      	beq.n	8003102 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80030c4:	2208      	movs	r2, #8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d015      	beq.n	8003102 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f023 0307 	bic.w	r3, r3, #7
 80030dc:	3308      	adds	r3, #8
 80030de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	e7fd      	b.n	80030fe <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d06f      	beq.n	80031e8 <pvPortMalloc+0x154>
 8003108:	4b45      	ldr	r3, [pc, #276]	@ (8003220 <pvPortMalloc+0x18c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	429a      	cmp	r2, r3
 8003110:	d86a      	bhi.n	80031e8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003112:	4b44      	ldr	r3, [pc, #272]	@ (8003224 <pvPortMalloc+0x190>)
 8003114:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003116:	4b43      	ldr	r3, [pc, #268]	@ (8003224 <pvPortMalloc+0x190>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800311c:	e004      	b.n	8003128 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	429a      	cmp	r2, r3
 8003130:	d903      	bls.n	800313a <pvPortMalloc+0xa6>
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f1      	bne.n	800311e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800313a:	4b37      	ldr	r3, [pc, #220]	@ (8003218 <pvPortMalloc+0x184>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003140:	429a      	cmp	r2, r3
 8003142:	d051      	beq.n	80031e8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2208      	movs	r2, #8
 800314a:	4413      	add	r3, r2
 800314c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	1ad2      	subs	r2, r2, r3
 800315e:	2308      	movs	r3, #8
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	429a      	cmp	r2, r3
 8003164:	d920      	bls.n	80031a8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00b      	beq.n	8003190 <pvPortMalloc+0xfc>
	__asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	613b      	str	r3, [r7, #16]
}
 800318a:	bf00      	nop
 800318c:	bf00      	nop
 800318e:	e7fd      	b.n	800318c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	1ad2      	subs	r2, r2, r3
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80031a2:	69b8      	ldr	r0, [r7, #24]
 80031a4:	f000 f90a 	bl	80033bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80031a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003220 <pvPortMalloc+0x18c>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003220 <pvPortMalloc+0x18c>)
 80031b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80031b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003220 <pvPortMalloc+0x18c>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003228 <pvPortMalloc+0x194>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d203      	bcs.n	80031ca <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031c2:	4b17      	ldr	r3, [pc, #92]	@ (8003220 <pvPortMalloc+0x18c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a18      	ldr	r2, [pc, #96]	@ (8003228 <pvPortMalloc+0x194>)
 80031c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	4b13      	ldr	r3, [pc, #76]	@ (800321c <pvPortMalloc+0x188>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80031de:	4b13      	ldr	r3, [pc, #76]	@ (800322c <pvPortMalloc+0x198>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3301      	adds	r3, #1
 80031e4:	4a11      	ldr	r2, [pc, #68]	@ (800322c <pvPortMalloc+0x198>)
 80031e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80031e8:	f001 fc90 	bl	8004b0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <pvPortMalloc+0x17a>
	__asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	60fb      	str	r3, [r7, #12]
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	e7fd      	b.n	800320a <pvPortMalloc+0x176>
	return pvReturn;
 800320e:	69fb      	ldr	r3, [r7, #28]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3728      	adds	r7, #40	@ 0x28
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	2400454c 	.word	0x2400454c
 800321c:	24004560 	.word	0x24004560
 8003220:	24004550 	.word	0x24004550
 8003224:	24004544 	.word	0x24004544
 8003228:	24004554 	.word	0x24004554
 800322c:	24004558 	.word	0x24004558

08003230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d04f      	beq.n	80032e2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003242:	2308      	movs	r3, #8
 8003244:	425b      	negs	r3, r3
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4413      	add	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	4b25      	ldr	r3, [pc, #148]	@ (80032ec <vPortFree+0xbc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10b      	bne.n	8003276 <vPortFree+0x46>
	__asm volatile
 800325e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	60fb      	str	r3, [r7, #12]
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	e7fd      	b.n	8003272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <vPortFree+0x66>
	__asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	60bb      	str	r3, [r7, #8]
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	e7fd      	b.n	8003292 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	4b14      	ldr	r3, [pc, #80]	@ (80032ec <vPortFree+0xbc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01e      	beq.n	80032e2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d11a      	bne.n	80032e2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4b0e      	ldr	r3, [pc, #56]	@ (80032ec <vPortFree+0xbc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	401a      	ands	r2, r3
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80032bc:	f001 fc18 	bl	8004af0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <vPortFree+0xc0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4413      	add	r3, r2
 80032ca:	4a09      	ldr	r2, [pc, #36]	@ (80032f0 <vPortFree+0xc0>)
 80032cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032ce:	6938      	ldr	r0, [r7, #16]
 80032d0:	f000 f874 	bl	80033bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80032d4:	4b07      	ldr	r3, [pc, #28]	@ (80032f4 <vPortFree+0xc4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	4a06      	ldr	r2, [pc, #24]	@ (80032f4 <vPortFree+0xc4>)
 80032dc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80032de:	f001 fc15 	bl	8004b0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	24004560 	.word	0x24004560
 80032f0:	24004550 	.word	0x24004550
 80032f4:	2400455c 	.word	0x2400455c

080032f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032fe:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003302:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003304:	4b27      	ldr	r3, [pc, #156]	@ (80033a4 <prvHeapInit+0xac>)
 8003306:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00c      	beq.n	800332c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3307      	adds	r3, #7
 8003316:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0307 	bic.w	r3, r3, #7
 800331e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	4a1f      	ldr	r2, [pc, #124]	@ (80033a4 <prvHeapInit+0xac>)
 8003328:	4413      	add	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003330:	4a1d      	ldr	r2, [pc, #116]	@ (80033a8 <prvHeapInit+0xb0>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003336:	4b1c      	ldr	r3, [pc, #112]	@ (80033a8 <prvHeapInit+0xb0>)
 8003338:	2200      	movs	r2, #0
 800333a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	4413      	add	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003344:	2208      	movs	r2, #8
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0307 	bic.w	r3, r3, #7
 8003352:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4a15      	ldr	r2, [pc, #84]	@ (80033ac <prvHeapInit+0xb4>)
 8003358:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800335a:	4b14      	ldr	r3, [pc, #80]	@ (80033ac <prvHeapInit+0xb4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2200      	movs	r2, #0
 8003360:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003362:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <prvHeapInit+0xb4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	1ad2      	subs	r2, r2, r3
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003378:	4b0c      	ldr	r3, [pc, #48]	@ (80033ac <prvHeapInit+0xb4>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a0a      	ldr	r2, [pc, #40]	@ (80033b0 <prvHeapInit+0xb8>)
 8003386:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	4a09      	ldr	r2, [pc, #36]	@ (80033b4 <prvHeapInit+0xbc>)
 800338e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003390:	4b09      	ldr	r3, [pc, #36]	@ (80033b8 <prvHeapInit+0xc0>)
 8003392:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003396:	601a      	str	r2, [r3, #0]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	24000944 	.word	0x24000944
 80033a8:	24004544 	.word	0x24004544
 80033ac:	2400454c 	.word	0x2400454c
 80033b0:	24004554 	.word	0x24004554
 80033b4:	24004550 	.word	0x24004550
 80033b8:	24004560 	.word	0x24004560

080033bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033c4:	4b28      	ldr	r3, [pc, #160]	@ (8003468 <prvInsertBlockIntoFreeList+0xac>)
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	e002      	b.n	80033d0 <prvInsertBlockIntoFreeList+0x14>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d8f7      	bhi.n	80033ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	4413      	add	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d108      	bne.n	80033fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	441a      	add	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	441a      	add	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d118      	bne.n	8003444 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4b15      	ldr	r3, [pc, #84]	@ (800346c <prvInsertBlockIntoFreeList+0xb0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d00d      	beq.n	800343a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	441a      	add	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e008      	b.n	800344c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800343a:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <prvInsertBlockIntoFreeList+0xb0>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e003      	b.n	800344c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	429a      	cmp	r2, r3
 8003452:	d002      	beq.n	800345a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	24004544 	.word	0x24004544
 800346c:	2400454c 	.word	0x2400454c

08003470 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f103 0208 	add.w	r2, r3, #8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f04f 32ff 	mov.w	r2, #4294967295
 8003488:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f103 0208 	add.w	r2, r3, #8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f103 0208 	add.w	r2, r3, #8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034ca:	b480      	push	{r7}
 80034cc:	b085      	sub	sp, #20
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	601a      	str	r2, [r3, #0]
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d103      	bne.n	8003532 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e00c      	b.n	800354c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3308      	adds	r3, #8
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	e002      	b.n	8003540 <vListInsert+0x2e>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	429a      	cmp	r2, r3
 800354a:	d2f6      	bcs.n	800353a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	601a      	str	r2, [r3, #0]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6892      	ldr	r2, [r2, #8]
 800359a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6852      	ldr	r2, [r2, #4]
 80035a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d103      	bne.n	80035b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	1e5a      	subs	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	3b04      	subs	r3, #4
 80035e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3b04      	subs	r3, #4
 80035f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f023 0201 	bic.w	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3b04      	subs	r3, #4
 8003606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003608:	4a0c      	ldr	r2, [pc, #48]	@ (800363c <pxPortInitialiseStack+0x64>)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3b14      	subs	r3, #20
 8003612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3b04      	subs	r3, #4
 800361e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f06f 0202 	mvn.w	r2, #2
 8003626:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3b20      	subs	r3, #32
 800362c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800362e:	68fb      	ldr	r3, [r7, #12]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	08003641 	.word	0x08003641

08003640 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800364a:	4b13      	ldr	r3, [pc, #76]	@ (8003698 <prvTaskExitError+0x58>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003652:	d00b      	beq.n	800366c <prvTaskExitError+0x2c>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	60fb      	str	r3, [r7, #12]
}
 8003666:	bf00      	nop
 8003668:	bf00      	nop
 800366a:	e7fd      	b.n	8003668 <prvTaskExitError+0x28>
	__asm volatile
 800366c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003670:	f383 8811 	msr	BASEPRI, r3
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	60bb      	str	r3, [r7, #8]
}
 800367e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003680:	bf00      	nop
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0fc      	beq.n	8003682 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	24000024 	.word	0x24000024
 800369c:	00000000 	.word	0x00000000

080036a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80036a0:	4b07      	ldr	r3, [pc, #28]	@ (80036c0 <pxCurrentTCBConst2>)
 80036a2:	6819      	ldr	r1, [r3, #0]
 80036a4:	6808      	ldr	r0, [r1, #0]
 80036a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036aa:	f380 8809 	msr	PSP, r0
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f04f 0000 	mov.w	r0, #0
 80036b6:	f380 8811 	msr	BASEPRI, r0
 80036ba:	4770      	bx	lr
 80036bc:	f3af 8000 	nop.w

080036c0 <pxCurrentTCBConst2>:
 80036c0:	240045ac 	.word	0x240045ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop

080036c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80036c8:	4808      	ldr	r0, [pc, #32]	@ (80036ec <prvPortStartFirstTask+0x24>)
 80036ca:	6800      	ldr	r0, [r0, #0]
 80036cc:	6800      	ldr	r0, [r0, #0]
 80036ce:	f380 8808 	msr	MSP, r0
 80036d2:	f04f 0000 	mov.w	r0, #0
 80036d6:	f380 8814 	msr	CONTROL, r0
 80036da:	b662      	cpsie	i
 80036dc:	b661      	cpsie	f
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	df00      	svc	0
 80036e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80036ea:	bf00      	nop
 80036ec:	e000ed08 	.word	0xe000ed08

080036f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80036f6:	4b47      	ldr	r3, [pc, #284]	@ (8003814 <xPortStartScheduler+0x124>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a47      	ldr	r2, [pc, #284]	@ (8003818 <xPortStartScheduler+0x128>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d10b      	bne.n	8003718 <xPortStartScheduler+0x28>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	613b      	str	r3, [r7, #16]
}
 8003712:	bf00      	nop
 8003714:	bf00      	nop
 8003716:	e7fd      	b.n	8003714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003718:	4b3e      	ldr	r3, [pc, #248]	@ (8003814 <xPortStartScheduler+0x124>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a3f      	ldr	r2, [pc, #252]	@ (800381c <xPortStartScheduler+0x12c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d10b      	bne.n	800373a <xPortStartScheduler+0x4a>
	__asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	60fb      	str	r3, [r7, #12]
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	e7fd      	b.n	8003736 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800373a:	4b39      	ldr	r3, [pc, #228]	@ (8003820 <xPortStartScheduler+0x130>)
 800373c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	22ff      	movs	r2, #255	@ 0xff
 800374a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4b31      	ldr	r3, [pc, #196]	@ (8003824 <xPortStartScheduler+0x134>)
 8003760:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003762:	4b31      	ldr	r3, [pc, #196]	@ (8003828 <xPortStartScheduler+0x138>)
 8003764:	2207      	movs	r2, #7
 8003766:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003768:	e009      	b.n	800377e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800376a:	4b2f      	ldr	r3, [pc, #188]	@ (8003828 <xPortStartScheduler+0x138>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3b01      	subs	r3, #1
 8003770:	4a2d      	ldr	r2, [pc, #180]	@ (8003828 <xPortStartScheduler+0x138>)
 8003772:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	b2db      	uxtb	r3, r3
 800377c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003786:	2b80      	cmp	r3, #128	@ 0x80
 8003788:	d0ef      	beq.n	800376a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800378a:	4b27      	ldr	r3, [pc, #156]	@ (8003828 <xPortStartScheduler+0x138>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f1c3 0307 	rsb	r3, r3, #7
 8003792:	2b04      	cmp	r3, #4
 8003794:	d00b      	beq.n	80037ae <xPortStartScheduler+0xbe>
	__asm volatile
 8003796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	60bb      	str	r3, [r7, #8]
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	e7fd      	b.n	80037aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003828 <xPortStartScheduler+0x138>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003828 <xPortStartScheduler+0x138>)
 80037b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003828 <xPortStartScheduler+0x138>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037c0:	4a19      	ldr	r2, [pc, #100]	@ (8003828 <xPortStartScheduler+0x138>)
 80037c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80037cc:	4b17      	ldr	r3, [pc, #92]	@ (800382c <xPortStartScheduler+0x13c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a16      	ldr	r2, [pc, #88]	@ (800382c <xPortStartScheduler+0x13c>)
 80037d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80037d8:	4b14      	ldr	r3, [pc, #80]	@ (800382c <xPortStartScheduler+0x13c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a13      	ldr	r2, [pc, #76]	@ (800382c <xPortStartScheduler+0x13c>)
 80037de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80037e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80037e4:	f000 f8da 	bl	800399c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80037e8:	4b11      	ldr	r3, [pc, #68]	@ (8003830 <xPortStartScheduler+0x140>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80037ee:	f000 f8f9 	bl	80039e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80037f2:	4b10      	ldr	r3, [pc, #64]	@ (8003834 <xPortStartScheduler+0x144>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003834 <xPortStartScheduler+0x144>)
 80037f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80037fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80037fe:	f7ff ff63 	bl	80036c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003802:	f001 faeb 	bl	8004ddc <vTaskSwitchContext>
	prvTaskExitError();
 8003806:	f7ff ff1b 	bl	8003640 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	e000ed00 	.word	0xe000ed00
 8003818:	410fc271 	.word	0x410fc271
 800381c:	410fc270 	.word	0x410fc270
 8003820:	e000e400 	.word	0xe000e400
 8003824:	24004564 	.word	0x24004564
 8003828:	24004568 	.word	0x24004568
 800382c:	e000ed20 	.word	0xe000ed20
 8003830:	24000024 	.word	0x24000024
 8003834:	e000ef34 	.word	0xe000ef34

08003838 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	607b      	str	r3, [r7, #4]
}
 8003850:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003852:	4b10      	ldr	r3, [pc, #64]	@ (8003894 <vPortEnterCritical+0x5c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3301      	adds	r3, #1
 8003858:	4a0e      	ldr	r2, [pc, #56]	@ (8003894 <vPortEnterCritical+0x5c>)
 800385a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800385c:	4b0d      	ldr	r3, [pc, #52]	@ (8003894 <vPortEnterCritical+0x5c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d110      	bne.n	8003886 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003864:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <vPortEnterCritical+0x60>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <vPortEnterCritical+0x4e>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	603b      	str	r3, [r7, #0]
}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	e7fd      	b.n	8003882 <vPortEnterCritical+0x4a>
	}
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	24000024 	.word	0x24000024
 8003898:	e000ed04 	.word	0xe000ed04

0800389c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80038a2:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <vPortExitCritical+0x50>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10b      	bne.n	80038c2 <vPortExitCritical+0x26>
	__asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	607b      	str	r3, [r7, #4]
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	e7fd      	b.n	80038be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80038c2:	4b0a      	ldr	r3, [pc, #40]	@ (80038ec <vPortExitCritical+0x50>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	4a08      	ldr	r2, [pc, #32]	@ (80038ec <vPortExitCritical+0x50>)
 80038ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80038cc:	4b07      	ldr	r3, [pc, #28]	@ (80038ec <vPortExitCritical+0x50>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <vPortExitCritical+0x44>
 80038d4:	2300      	movs	r3, #0
 80038d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	24000024 	.word	0x24000024

080038f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80038f0:	f3ef 8009 	mrs	r0, PSP
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	4b15      	ldr	r3, [pc, #84]	@ (8003950 <pxCurrentTCBConst>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	f01e 0f10 	tst.w	lr, #16
 8003900:	bf08      	it	eq
 8003902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800390a:	6010      	str	r0, [r2, #0]
 800390c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003910:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003914:	f380 8811 	msr	BASEPRI, r0
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f001 fa5c 	bl	8004ddc <vTaskSwitchContext>
 8003924:	f04f 0000 	mov.w	r0, #0
 8003928:	f380 8811 	msr	BASEPRI, r0
 800392c:	bc09      	pop	{r0, r3}
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	6808      	ldr	r0, [r1, #0]
 8003932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003936:	f01e 0f10 	tst.w	lr, #16
 800393a:	bf08      	it	eq
 800393c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003940:	f380 8809 	msr	PSP, r0
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	f3af 8000 	nop.w

08003950 <pxCurrentTCBConst>:
 8003950:	240045ac 	.word	0x240045ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop

08003958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	607b      	str	r3, [r7, #4]
}
 8003970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003972:	f001 f979 	bl	8004c68 <xTaskIncrementTick>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800397c:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <xPortSysTickHandler+0x40>)
 800397e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	2300      	movs	r3, #0
 8003986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	f383 8811 	msr	BASEPRI, r3
}
 800398e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	e000ed04 	.word	0xe000ed04

0800399c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039a0:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <vPortSetupTimerInterrupt+0x34>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80039a6:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <vPortSetupTimerInterrupt+0x38>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039ac:	4b0a      	ldr	r3, [pc, #40]	@ (80039d8 <vPortSetupTimerInterrupt+0x3c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	@ (80039dc <vPortSetupTimerInterrupt+0x40>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	4a09      	ldr	r2, [pc, #36]	@ (80039e0 <vPortSetupTimerInterrupt+0x44>)
 80039ba:	3b01      	subs	r3, #1
 80039bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80039be:	4b04      	ldr	r3, [pc, #16]	@ (80039d0 <vPortSetupTimerInterrupt+0x34>)
 80039c0:	2207      	movs	r2, #7
 80039c2:	601a      	str	r2, [r3, #0]
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	e000e010 	.word	0xe000e010
 80039d4:	e000e018 	.word	0xe000e018
 80039d8:	24000000 	.word	0x24000000
 80039dc:	10624dd3 	.word	0x10624dd3
 80039e0:	e000e014 	.word	0xe000e014

080039e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80039e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80039f4 <vPortEnableVFP+0x10>
 80039e8:	6801      	ldr	r1, [r0, #0]
 80039ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80039ee:	6001      	str	r1, [r0, #0]
 80039f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80039f2:	bf00      	nop
 80039f4:	e000ed88 	.word	0xe000ed88

080039f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80039fe:	f3ef 8305 	mrs	r3, IPSR
 8003a02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b0f      	cmp	r3, #15
 8003a08:	d915      	bls.n	8003a36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003a0a:	4a18      	ldr	r2, [pc, #96]	@ (8003a6c <vPortValidateInterruptPriority+0x74>)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003a14:	4b16      	ldr	r3, [pc, #88]	@ (8003a70 <vPortValidateInterruptPriority+0x78>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	7afa      	ldrb	r2, [r7, #11]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d20b      	bcs.n	8003a36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	607b      	str	r3, [r7, #4]
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	e7fd      	b.n	8003a32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003a36:	4b0f      	ldr	r3, [pc, #60]	@ (8003a74 <vPortValidateInterruptPriority+0x7c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a78 <vPortValidateInterruptPriority+0x80>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d90b      	bls.n	8003a5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	603b      	str	r3, [r7, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	e7fd      	b.n	8003a5a <vPortValidateInterruptPriority+0x62>
	}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000e3f0 	.word	0xe000e3f0
 8003a70:	24004564 	.word	0x24004564
 8003a74:	e000ed0c 	.word	0xe000ed0c
 8003a78:	24004568 	.word	0x24004568

08003a7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10b      	bne.n	8003aa8 <xQueueGenericReset+0x2c>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	60bb      	str	r3, [r7, #8]
}
 8003aa2:	bf00      	nop
 8003aa4:	bf00      	nop
 8003aa6:	e7fd      	b.n	8003aa4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003aa8:	f7ff fec6 	bl	8003838 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab4:	68f9      	ldr	r1, [r7, #12]
 8003ab6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	441a      	add	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	68f9      	ldr	r1, [r7, #12]
 8003adc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	441a      	add	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	22ff      	movs	r2, #255	@ 0xff
 8003aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	22ff      	movs	r2, #255	@ 0xff
 8003af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d114      	bne.n	8003b28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01a      	beq.n	8003b3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3310      	adds	r3, #16
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 fa1e 	bl	8004f4c <xTaskRemoveFromEventList>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d012      	beq.n	8003b3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b16:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <xQueueGenericReset+0xd0>)
 8003b18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	e009      	b.n	8003b3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3310      	adds	r3, #16
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff fc9f 	bl	8003470 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3324      	adds	r3, #36	@ 0x24
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fc9a 	bl	8003470 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b3c:	f7ff feae 	bl	800389c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b40:	2301      	movs	r3, #1
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	e000ed04 	.word	0xe000ed04

08003b50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08e      	sub	sp, #56	@ 0x38
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10b      	bne.n	8003b9a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	e7fd      	b.n	8003b96 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <xQueueGenericCreateStatic+0x56>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <xQueueGenericCreateStatic+0x5a>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <xQueueGenericCreateStatic+0x5c>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10b      	bne.n	8003bc8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	623b      	str	r3, [r7, #32]
}
 8003bc2:	bf00      	nop
 8003bc4:	bf00      	nop
 8003bc6:	e7fd      	b.n	8003bc4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <xQueueGenericCreateStatic+0x84>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <xQueueGenericCreateStatic+0x88>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <xQueueGenericCreateStatic+0x8a>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10b      	bne.n	8003bf6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	61fb      	str	r3, [r7, #28]
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	e7fd      	b.n	8003bf2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003bf6:	2350      	movs	r3, #80	@ 0x50
 8003bf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b50      	cmp	r3, #80	@ 0x50
 8003bfe:	d00b      	beq.n	8003c18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	61bb      	str	r3, [r7, #24]
}
 8003c12:	bf00      	nop
 8003c14:	bf00      	nop
 8003c16:	e7fd      	b.n	8003c14 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003c18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00d      	beq.n	8003c40 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c2c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f805 	bl	8003c4a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3730      	adds	r7, #48	@ 0x30
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
 8003c56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e002      	b.n	8003c6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c78:	2101      	movs	r1, #1
 8003c7a:	69b8      	ldr	r0, [r7, #24]
 8003c7c:	f7ff fefe 	bl	8003a7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	78fa      	ldrb	r2, [r7, #3]
 8003c84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c88:	bf00      	nop
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08e      	sub	sp, #56	@ 0x38
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <xQueueGenericSend+0x34>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	e7fd      	b.n	8003cc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d103      	bne.n	8003cd2 <xQueueGenericSend+0x42>
 8003cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <xQueueGenericSend+0x46>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <xQueueGenericSend+0x48>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <xQueueGenericSend+0x64>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	e7fd      	b.n	8003cf0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d103      	bne.n	8003d02 <xQueueGenericSend+0x72>
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <xQueueGenericSend+0x76>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <xQueueGenericSend+0x78>
 8003d06:	2300      	movs	r3, #0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <xQueueGenericSend+0x94>
	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	623b      	str	r3, [r7, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d24:	f001 fad8 	bl	80052d8 <xTaskGetSchedulerState>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <xQueueGenericSend+0xa4>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <xQueueGenericSend+0xa8>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <xQueueGenericSend+0xaa>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <xQueueGenericSend+0xc6>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	61fb      	str	r3, [r7, #28]
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	e7fd      	b.n	8003d52 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d56:	f7ff fd6f 	bl	8003838 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d302      	bcc.n	8003d6c <xQueueGenericSend+0xdc>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d129      	bne.n	8003dc0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d72:	f000 fa0f 	bl	8004194 <prvCopyDataToQueue>
 8003d76:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d010      	beq.n	8003da2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	3324      	adds	r3, #36	@ 0x24
 8003d84:	4618      	mov	r0, r3
 8003d86:	f001 f8e1 	bl	8004f4c <xTaskRemoveFromEventList>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d90:	4b3f      	ldr	r3, [pc, #252]	@ (8003e90 <xQueueGenericSend+0x200>)
 8003d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	e00a      	b.n	8003db8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003da8:	4b39      	ldr	r3, [pc, #228]	@ (8003e90 <xQueueGenericSend+0x200>)
 8003daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003db8:	f7ff fd70 	bl	800389c <vPortExitCritical>
				return pdPASS;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e063      	b.n	8003e88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dc6:	f7ff fd69 	bl	800389c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e05c      	b.n	8003e88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dd4:	f107 0314 	add.w	r3, r7, #20
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 f91b 	bl	8005014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003dde:	2301      	movs	r3, #1
 8003de0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003de2:	f7ff fd5b 	bl	800389c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003de6:	f000 fe83 	bl	8004af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dea:	f7ff fd25 	bl	8003838 <vPortEnterCritical>
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003df4:	b25b      	sxtb	r3, r3
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfa:	d103      	bne.n	8003e04 <xQueueGenericSend+0x174>
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e0a:	b25b      	sxtb	r3, r3
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d103      	bne.n	8003e1a <xQueueGenericSend+0x18a>
 8003e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e1a:	f7ff fd3f 	bl	800389c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e1e:	1d3a      	adds	r2, r7, #4
 8003e20:	f107 0314 	add.w	r3, r7, #20
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 f90a 	bl	8005040 <xTaskCheckForTimeOut>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d124      	bne.n	8003e7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e34:	f000 faa6 	bl	8004384 <prvIsQueueFull>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d018      	beq.n	8003e70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e40:	3310      	adds	r3, #16
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4611      	mov	r1, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 f82e 	bl	8004ea8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e4e:	f000 fa31 	bl	80042b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e52:	f000 fe5b 	bl	8004b0c <xTaskResumeAll>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f47f af7c 	bne.w	8003d56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e90 <xQueueGenericSend+0x200>)
 8003e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	e772      	b.n	8003d56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e72:	f000 fa1f 	bl	80042b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e76:	f000 fe49 	bl	8004b0c <xTaskResumeAll>
 8003e7a:	e76c      	b.n	8003d56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e7e:	f000 fa19 	bl	80042b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e82:	f000 fe43 	bl	8004b0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3738      	adds	r7, #56	@ 0x38
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	e000ed04 	.word	0xe000ed04

08003e94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b090      	sub	sp, #64	@ 0x40
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10b      	bne.n	8003ec4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003ebe:	bf00      	nop
 8003ec0:	bf00      	nop
 8003ec2:	e7fd      	b.n	8003ec0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <xQueueGenericSendFromISR+0x3e>
 8003eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <xQueueGenericSendFromISR+0x42>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <xQueueGenericSendFromISR+0x44>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10b      	bne.n	8003ef4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003eee:	bf00      	nop
 8003ef0:	bf00      	nop
 8003ef2:	e7fd      	b.n	8003ef0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d103      	bne.n	8003f02 <xQueueGenericSendFromISR+0x6e>
 8003efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <xQueueGenericSendFromISR+0x72>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <xQueueGenericSendFromISR+0x74>
 8003f06:	2300      	movs	r3, #0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10b      	bne.n	8003f24 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	623b      	str	r3, [r7, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	bf00      	nop
 8003f22:	e7fd      	b.n	8003f20 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f24:	f7ff fd68 	bl	80039f8 <vPortValidateInterruptPriority>
	__asm volatile
 8003f28:	f3ef 8211 	mrs	r2, BASEPRI
 8003f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	61fa      	str	r2, [r7, #28]
 8003f3e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003f40:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f42:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d302      	bcc.n	8003f56 <xQueueGenericSendFromISR+0xc2>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d12f      	bne.n	8003fb6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f6c:	f000 f912 	bl	8004194 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f70:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f78:	d112      	bne.n	8003fa0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d016      	beq.n	8003fb0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f84:	3324      	adds	r3, #36	@ 0x24
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 ffe0 	bl	8004f4c <xTaskRemoveFromEventList>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00e      	beq.n	8003fb0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00b      	beq.n	8003fb0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e007      	b.n	8003fb0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	b25a      	sxtb	r2, r3
 8003faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003fb4:	e001      	b.n	8003fba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fbc:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f383 8811 	msr	BASEPRI, r3
}
 8003fc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3740      	adds	r7, #64	@ 0x40
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08c      	sub	sp, #48	@ 0x30
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10b      	bne.n	8004002 <xQueueReceive+0x32>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	623b      	str	r3, [r7, #32]
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	e7fd      	b.n	8003ffe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d103      	bne.n	8004010 <xQueueReceive+0x40>
 8004008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <xQueueReceive+0x44>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <xQueueReceive+0x46>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <xQueueReceive+0x62>
	__asm volatile
 800401a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	61fb      	str	r3, [r7, #28]
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	e7fd      	b.n	800402e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004032:	f001 f951 	bl	80052d8 <xTaskGetSchedulerState>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <xQueueReceive+0x72>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <xQueueReceive+0x76>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <xQueueReceive+0x78>
 8004046:	2300      	movs	r3, #0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <xQueueReceive+0x94>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	61bb      	str	r3, [r7, #24]
}
 800405e:	bf00      	nop
 8004060:	bf00      	nop
 8004062:	e7fd      	b.n	8004060 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004064:	f7ff fbe8 	bl	8003838 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01f      	beq.n	80040b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004078:	f000 f8f6 	bl	8004268 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	1e5a      	subs	r2, r3, #1
 8004080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004082:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00f      	beq.n	80040ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800408c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408e:	3310      	adds	r3, #16
 8004090:	4618      	mov	r0, r3
 8004092:	f000 ff5b 	bl	8004f4c <xTaskRemoveFromEventList>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800409c:	4b3c      	ldr	r3, [pc, #240]	@ (8004190 <xQueueReceive+0x1c0>)
 800409e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040ac:	f7ff fbf6 	bl	800389c <vPortExitCritical>
				return pdPASS;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e069      	b.n	8004188 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d103      	bne.n	80040c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040ba:	f7ff fbef 	bl	800389c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040be:	2300      	movs	r3, #0
 80040c0:	e062      	b.n	8004188 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040c8:	f107 0310 	add.w	r3, r7, #16
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 ffa1 	bl	8005014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040d2:	2301      	movs	r3, #1
 80040d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040d6:	f7ff fbe1 	bl	800389c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040da:	f000 fd09 	bl	8004af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040de:	f7ff fbab 	bl	8003838 <vPortEnterCritical>
 80040e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040e8:	b25b      	sxtb	r3, r3
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ee:	d103      	bne.n	80040f8 <xQueueReceive+0x128>
 80040f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040fe:	b25b      	sxtb	r3, r3
 8004100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004104:	d103      	bne.n	800410e <xQueueReceive+0x13e>
 8004106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800410e:	f7ff fbc5 	bl	800389c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004112:	1d3a      	adds	r2, r7, #4
 8004114:	f107 0310 	add.w	r3, r7, #16
 8004118:	4611      	mov	r1, r2
 800411a:	4618      	mov	r0, r3
 800411c:	f000 ff90 	bl	8005040 <xTaskCheckForTimeOut>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d123      	bne.n	800416e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004128:	f000 f916 	bl	8004358 <prvIsQueueEmpty>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d017      	beq.n	8004162 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004134:	3324      	adds	r3, #36	@ 0x24
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4611      	mov	r1, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f000 feb4 	bl	8004ea8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004140:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004142:	f000 f8b7 	bl	80042b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004146:	f000 fce1 	bl	8004b0c <xTaskResumeAll>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d189      	bne.n	8004064 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004150:	4b0f      	ldr	r3, [pc, #60]	@ (8004190 <xQueueReceive+0x1c0>)
 8004152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	e780      	b.n	8004064 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004164:	f000 f8a6 	bl	80042b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004168:	f000 fcd0 	bl	8004b0c <xTaskResumeAll>
 800416c:	e77a      	b.n	8004064 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800416e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004170:	f000 f8a0 	bl	80042b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004174:	f000 fcca 	bl	8004b0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004178:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800417a:	f000 f8ed 	bl	8004358 <prvIsQueueEmpty>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	f43f af6f 	beq.w	8004064 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004186:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004188:	4618      	mov	r0, r3
 800418a:	3730      	adds	r7, #48	@ 0x30
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	e000ed04 	.word	0xe000ed04

08004194 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10d      	bne.n	80041ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d14d      	bne.n	8004256 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 f8a8 	bl	8005314 <xTaskPriorityDisinherit>
 80041c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	e043      	b.n	8004256 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d119      	bne.n	8004208 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6858      	ldr	r0, [r3, #4]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	461a      	mov	r2, r3
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	f004 fe85 	bl	8008eee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ec:	441a      	add	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d32b      	bcc.n	8004256 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	e026      	b.n	8004256 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68d8      	ldr	r0, [r3, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004210:	461a      	mov	r2, r3
 8004212:	68b9      	ldr	r1, [r7, #8]
 8004214:	f004 fe6b 	bl	8008eee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004220:	425b      	negs	r3, r3
 8004222:	441a      	add	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d207      	bcs.n	8004244 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423c:	425b      	negs	r3, r3
 800423e:	441a      	add	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d105      	bne.n	8004256 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	3b01      	subs	r3, #1
 8004254:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800425e:	697b      	ldr	r3, [r7, #20]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d018      	beq.n	80042ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	441a      	add	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	429a      	cmp	r2, r3
 8004292:	d303      	bcc.n	800429c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68d9      	ldr	r1, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a4:	461a      	mov	r2, r3
 80042a6:	6838      	ldr	r0, [r7, #0]
 80042a8:	f004 fe21 	bl	8008eee <memcpy>
	}
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042bc:	f7ff fabc 	bl	8003838 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042c8:	e011      	b.n	80042ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d012      	beq.n	80042f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3324      	adds	r3, #36	@ 0x24
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fe38 	bl	8004f4c <xTaskRemoveFromEventList>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042e2:	f000 ff11 	bl	8005108 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	dce9      	bgt.n	80042ca <prvUnlockQueue+0x16>
 80042f6:	e000      	b.n	80042fa <prvUnlockQueue+0x46>
					break;
 80042f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	22ff      	movs	r2, #255	@ 0xff
 80042fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004302:	f7ff facb 	bl	800389c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004306:	f7ff fa97 	bl	8003838 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004310:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004312:	e011      	b.n	8004338 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d012      	beq.n	8004342 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3310      	adds	r3, #16
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fe13 	bl	8004f4c <xTaskRemoveFromEventList>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800432c:	f000 feec 	bl	8005108 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004330:	7bbb      	ldrb	r3, [r7, #14]
 8004332:	3b01      	subs	r3, #1
 8004334:	b2db      	uxtb	r3, r3
 8004336:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800433c:	2b00      	cmp	r3, #0
 800433e:	dce9      	bgt.n	8004314 <prvUnlockQueue+0x60>
 8004340:	e000      	b.n	8004344 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004342:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	22ff      	movs	r2, #255	@ 0xff
 8004348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800434c:	f7ff faa6 	bl	800389c <vPortExitCritical>
}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004360:	f7ff fa6a 	bl	8003838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800436c:	2301      	movs	r3, #1
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	e001      	b.n	8004376 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004376:	f7ff fa91 	bl	800389c <vPortExitCritical>

	return xReturn;
 800437a:	68fb      	ldr	r3, [r7, #12]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800438c:	f7ff fa54 	bl	8003838 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004398:	429a      	cmp	r2, r3
 800439a:	d102      	bne.n	80043a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800439c:	2301      	movs	r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	e001      	b.n	80043a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043a6:	f7ff fa79 	bl	800389c <vPortExitCritical>

	return xReturn;
 80043aa:	68fb      	ldr	r3, [r7, #12]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	e014      	b.n	80043ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80043c4:	4a0f      	ldr	r2, [pc, #60]	@ (8004404 <vQueueAddToRegistry+0x50>)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10b      	bne.n	80043e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80043d0:	490c      	ldr	r1, [pc, #48]	@ (8004404 <vQueueAddToRegistry+0x50>)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80043da:	4a0a      	ldr	r2, [pc, #40]	@ (8004404 <vQueueAddToRegistry+0x50>)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80043e6:	e006      	b.n	80043f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3301      	adds	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b07      	cmp	r3, #7
 80043f2:	d9e7      	bls.n	80043c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	2400456c 	.word	0x2400456c

08004408 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004418:	f7ff fa0e 	bl	8003838 <vPortEnterCritical>
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004422:	b25b      	sxtb	r3, r3
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d103      	bne.n	8004432 <vQueueWaitForMessageRestricted+0x2a>
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004438:	b25b      	sxtb	r3, r3
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d103      	bne.n	8004448 <vQueueWaitForMessageRestricted+0x40>
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004448:	f7ff fa28 	bl	800389c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	3324      	adds	r3, #36	@ 0x24
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fd49 	bl	8004ef4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004462:	6978      	ldr	r0, [r7, #20]
 8004464:	f7ff ff26 	bl	80042b4 <prvUnlockQueue>
	}
 8004468:	bf00      	nop
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08e      	sub	sp, #56	@ 0x38
 8004474:	af04      	add	r7, sp, #16
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800447e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10b      	bne.n	800449c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	623b      	str	r3, [r7, #32]
}
 8004496:	bf00      	nop
 8004498:	bf00      	nop
 800449a:	e7fd      	b.n	8004498 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800449c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	61fb      	str	r3, [r7, #28]
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
 80044b8:	e7fd      	b.n	80044b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044ba:	23a8      	movs	r3, #168	@ 0xa8
 80044bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2ba8      	cmp	r3, #168	@ 0xa8
 80044c2:	d00b      	beq.n	80044dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	61bb      	str	r3, [r7, #24]
}
 80044d6:	bf00      	nop
 80044d8:	bf00      	nop
 80044da:	e7fd      	b.n	80044d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80044dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01e      	beq.n	8004522 <xTaskCreateStatic+0xb2>
 80044e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01b      	beq.n	8004522 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044fc:	2300      	movs	r3, #0
 80044fe:	9303      	str	r3, [sp, #12]
 8004500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004502:	9302      	str	r3, [sp, #8]
 8004504:	f107 0314 	add.w	r3, r7, #20
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f851 	bl	80045bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800451a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800451c:	f000 f8f6 	bl	800470c <prvAddNewTaskToReadyList>
 8004520:	e001      	b.n	8004526 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004526:	697b      	ldr	r3, [r7, #20]
	}
 8004528:	4618      	mov	r0, r3
 800452a:	3728      	adds	r7, #40	@ 0x28
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08c      	sub	sp, #48	@ 0x30
 8004534:	af04      	add	r7, sp, #16
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	4613      	mov	r3, r2
 800453e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004540:	88fb      	ldrh	r3, [r7, #6]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4618      	mov	r0, r3
 8004546:	f7fe fda5 	bl	8003094 <pvPortMalloc>
 800454a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00e      	beq.n	8004570 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004552:	20a8      	movs	r0, #168	@ 0xa8
 8004554:	f7fe fd9e 	bl	8003094 <pvPortMalloc>
 8004558:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	631a      	str	r2, [r3, #48]	@ 0x30
 8004566:	e005      	b.n	8004574 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004568:	6978      	ldr	r0, [r7, #20]
 800456a:	f7fe fe61 	bl	8003230 <vPortFree>
 800456e:	e001      	b.n	8004574 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d017      	beq.n	80045aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	2300      	movs	r3, #0
 8004586:	9303      	str	r3, [sp, #12]
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	9302      	str	r3, [sp, #8]
 800458c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f80f 	bl	80045bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800459e:	69f8      	ldr	r0, [r7, #28]
 80045a0:	f000 f8b4 	bl	800470c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045a4:	2301      	movs	r3, #1
 80045a6:	61bb      	str	r3, [r7, #24]
 80045a8:	e002      	b.n	80045b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295
 80045ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045b0:	69bb      	ldr	r3, [r7, #24]
	}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045cc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	461a      	mov	r2, r3
 80045d4:	21a5      	movs	r1, #165	@ 0xa5
 80045d6:	f004 fb84 	bl	8008ce2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80045e4:	440b      	add	r3, r1
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	f023 0307 	bic.w	r3, r3, #7
 80045f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	617b      	str	r3, [r7, #20]
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop
 8004614:	e7fd      	b.n	8004612 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01f      	beq.n	800465c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800461c:	2300      	movs	r3, #0
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	e012      	b.n	8004648 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	4413      	add	r3, r2
 8004628:	7819      	ldrb	r1, [r3, #0]
 800462a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	4413      	add	r3, r2
 8004630:	3334      	adds	r3, #52	@ 0x34
 8004632:	460a      	mov	r2, r1
 8004634:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	4413      	add	r3, r2
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d006      	beq.n	8004650 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	3301      	adds	r3, #1
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	2b0f      	cmp	r3, #15
 800464c:	d9e9      	bls.n	8004622 <prvInitialiseNewTask+0x66>
 800464e:	e000      	b.n	8004652 <prvInitialiseNewTask+0x96>
			{
				break;
 8004650:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800465a:	e003      	b.n	8004664 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800465c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004666:	2b37      	cmp	r3, #55	@ 0x37
 8004668:	d901      	bls.n	800466e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800466a:	2337      	movs	r3, #55	@ 0x37
 800466c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004672:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004678:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800467a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467c:	2200      	movs	r2, #0
 800467e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004682:	3304      	adds	r3, #4
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe ff13 	bl	80034b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800468a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468c:	3318      	adds	r3, #24
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe ff0e 	bl	80034b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004698:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800469a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80046a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ac:	2200      	movs	r2, #0
 80046ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	3354      	adds	r3, #84	@ 0x54
 80046be:	224c      	movs	r2, #76	@ 0x4c
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f004 fb0d 	bl	8008ce2 <memset>
 80046c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004700 <prvInitialiseNewTask+0x144>)
 80046cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80046ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d0:	4a0c      	ldr	r2, [pc, #48]	@ (8004704 <prvInitialiseNewTask+0x148>)
 80046d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004708 <prvInitialiseNewTask+0x14c>)
 80046d8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	68f9      	ldr	r1, [r7, #12]
 80046de:	69b8      	ldr	r0, [r7, #24]
 80046e0:	f7fe ff7a 	bl	80035d8 <pxPortInitialiseStack>
 80046e4:	4602      	mov	r2, r0
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80046ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046f6:	bf00      	nop
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	24004c98 	.word	0x24004c98
 8004704:	24004d00 	.word	0x24004d00
 8004708:	24004d68 	.word	0x24004d68

0800470c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004714:	f7ff f890 	bl	8003838 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004718:	4b2d      	ldr	r3, [pc, #180]	@ (80047d0 <prvAddNewTaskToReadyList+0xc4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3301      	adds	r3, #1
 800471e:	4a2c      	ldr	r2, [pc, #176]	@ (80047d0 <prvAddNewTaskToReadyList+0xc4>)
 8004720:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004722:	4b2c      	ldr	r3, [pc, #176]	@ (80047d4 <prvAddNewTaskToReadyList+0xc8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800472a:	4a2a      	ldr	r2, [pc, #168]	@ (80047d4 <prvAddNewTaskToReadyList+0xc8>)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004730:	4b27      	ldr	r3, [pc, #156]	@ (80047d0 <prvAddNewTaskToReadyList+0xc4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d110      	bne.n	800475a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004738:	f000 fd0a 	bl	8005150 <prvInitialiseTaskLists>
 800473c:	e00d      	b.n	800475a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800473e:	4b26      	ldr	r3, [pc, #152]	@ (80047d8 <prvAddNewTaskToReadyList+0xcc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004746:	4b23      	ldr	r3, [pc, #140]	@ (80047d4 <prvAddNewTaskToReadyList+0xc8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004750:	429a      	cmp	r2, r3
 8004752:	d802      	bhi.n	800475a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004754:	4a1f      	ldr	r2, [pc, #124]	@ (80047d4 <prvAddNewTaskToReadyList+0xc8>)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800475a:	4b20      	ldr	r3, [pc, #128]	@ (80047dc <prvAddNewTaskToReadyList+0xd0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3301      	adds	r3, #1
 8004760:	4a1e      	ldr	r2, [pc, #120]	@ (80047dc <prvAddNewTaskToReadyList+0xd0>)
 8004762:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004764:	4b1d      	ldr	r3, [pc, #116]	@ (80047dc <prvAddNewTaskToReadyList+0xd0>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004770:	4b1b      	ldr	r3, [pc, #108]	@ (80047e0 <prvAddNewTaskToReadyList+0xd4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d903      	bls.n	8004780 <prvAddNewTaskToReadyList+0x74>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477c:	4a18      	ldr	r2, [pc, #96]	@ (80047e0 <prvAddNewTaskToReadyList+0xd4>)
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4a15      	ldr	r2, [pc, #84]	@ (80047e4 <prvAddNewTaskToReadyList+0xd8>)
 800478e:	441a      	add	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	4619      	mov	r1, r3
 8004796:	4610      	mov	r0, r2
 8004798:	f7fe fe97 	bl	80034ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800479c:	f7ff f87e 	bl	800389c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047a0:	4b0d      	ldr	r3, [pc, #52]	@ (80047d8 <prvAddNewTaskToReadyList+0xcc>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00e      	beq.n	80047c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047a8:	4b0a      	ldr	r3, [pc, #40]	@ (80047d4 <prvAddNewTaskToReadyList+0xc8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d207      	bcs.n	80047c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047b6:	4b0c      	ldr	r3, [pc, #48]	@ (80047e8 <prvAddNewTaskToReadyList+0xdc>)
 80047b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	24004a80 	.word	0x24004a80
 80047d4:	240045ac 	.word	0x240045ac
 80047d8:	24004a8c 	.word	0x24004a8c
 80047dc:	24004a9c 	.word	0x24004a9c
 80047e0:	24004a88 	.word	0x24004a88
 80047e4:	240045b0 	.word	0x240045b0
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80047f4:	f7ff f820 	bl	8003838 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <vTaskDelete+0x18>
 80047fe:	4b2d      	ldr	r3, [pc, #180]	@ (80048b4 <vTaskDelete+0xc8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	e000      	b.n	8004806 <vTaskDelete+0x1a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3304      	adds	r3, #4
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe feb9 	bl	8003584 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004816:	2b00      	cmp	r3, #0
 8004818:	d004      	beq.n	8004824 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3318      	adds	r3, #24
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe feb0 	bl	8003584 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004824:	4b24      	ldr	r3, [pc, #144]	@ (80048b8 <vTaskDelete+0xcc>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3301      	adds	r3, #1
 800482a:	4a23      	ldr	r2, [pc, #140]	@ (80048b8 <vTaskDelete+0xcc>)
 800482c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800482e:	4b21      	ldr	r3, [pc, #132]	@ (80048b4 <vTaskDelete+0xc8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	429a      	cmp	r2, r3
 8004836:	d10b      	bne.n	8004850 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3304      	adds	r3, #4
 800483c:	4619      	mov	r1, r3
 800483e:	481f      	ldr	r0, [pc, #124]	@ (80048bc <vTaskDelete+0xd0>)
 8004840:	f7fe fe43 	bl	80034ca <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004844:	4b1e      	ldr	r3, [pc, #120]	@ (80048c0 <vTaskDelete+0xd4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3301      	adds	r3, #1
 800484a:	4a1d      	ldr	r2, [pc, #116]	@ (80048c0 <vTaskDelete+0xd4>)
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e009      	b.n	8004864 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004850:	4b1c      	ldr	r3, [pc, #112]	@ (80048c4 <vTaskDelete+0xd8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3b01      	subs	r3, #1
 8004856:	4a1b      	ldr	r2, [pc, #108]	@ (80048c4 <vTaskDelete+0xd8>)
 8004858:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fce6 	bl	800522c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004860:	f000 fd1a 	bl	8005298 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8004864:	f7ff f81a 	bl	800389c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004868:	4b17      	ldr	r3, [pc, #92]	@ (80048c8 <vTaskDelete+0xdc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01c      	beq.n	80048aa <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8004870:	4b10      	ldr	r3, [pc, #64]	@ (80048b4 <vTaskDelete+0xc8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	429a      	cmp	r2, r3
 8004878:	d117      	bne.n	80048aa <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800487a:	4b14      	ldr	r3, [pc, #80]	@ (80048cc <vTaskDelete+0xe0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <vTaskDelete+0xae>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	60bb      	str	r3, [r7, #8]
}
 8004894:	bf00      	nop
 8004896:	bf00      	nop
 8004898:	e7fd      	b.n	8004896 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800489a:	4b0d      	ldr	r3, [pc, #52]	@ (80048d0 <vTaskDelete+0xe4>)
 800489c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80048aa:	bf00      	nop
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	240045ac 	.word	0x240045ac
 80048b8:	24004a9c 	.word	0x24004a9c
 80048bc:	24004a54 	.word	0x24004a54
 80048c0:	24004a68 	.word	0x24004a68
 80048c4:	24004a80 	.word	0x24004a80
 80048c8:	24004a8c 	.word	0x24004a8c
 80048cc:	24004aa8 	.word	0x24004aa8
 80048d0:	e000ed04 	.word	0xe000ed04

080048d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d018      	beq.n	8004918 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048e6:	4b14      	ldr	r3, [pc, #80]	@ (8004938 <vTaskDelay+0x64>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00b      	beq.n	8004906 <vTaskDelay+0x32>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	60bb      	str	r3, [r7, #8]
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	e7fd      	b.n	8004902 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004906:	f000 f8f3 	bl	8004af0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800490a:	2100      	movs	r1, #0
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fd71 	bl	80053f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004912:	f000 f8fb 	bl	8004b0c <xTaskResumeAll>
 8004916:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d107      	bne.n	800492e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800491e:	4b07      	ldr	r3, [pc, #28]	@ (800493c <vTaskDelay+0x68>)
 8004920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	24004aa8 	.word	0x24004aa8
 800493c:	e000ed04 	.word	0xe000ed04

08004940 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <eTaskGetState+0x2a>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	60bb      	str	r3, [r7, #8]
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	e7fd      	b.n	8004966 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800496a:	4b24      	ldr	r3, [pc, #144]	@ (80049fc <eTaskGetState+0xbc>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	429a      	cmp	r2, r3
 8004972:	d102      	bne.n	800497a <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8004974:	2300      	movs	r3, #0
 8004976:	77fb      	strb	r3, [r7, #31]
 8004978:	e03a      	b.n	80049f0 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800497a:	f7fe ff5d 	bl	8003838 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004984:	4b1e      	ldr	r3, [pc, #120]	@ (8004a00 <eTaskGetState+0xc0>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800498a:	4b1e      	ldr	r3, [pc, #120]	@ (8004a04 <eTaskGetState+0xc4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004990:	f7fe ff84 	bl	800389c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	429a      	cmp	r2, r3
 800499a:	d003      	beq.n	80049a4 <eTaskGetState+0x64>
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d102      	bne.n	80049aa <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80049a4:	2302      	movs	r3, #2
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e022      	b.n	80049f0 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	4a16      	ldr	r2, [pc, #88]	@ (8004a08 <eTaskGetState+0xc8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d112      	bne.n	80049d8 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10b      	bne.n	80049d2 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d102      	bne.n	80049cc <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 80049c6:	2302      	movs	r3, #2
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e011      	b.n	80049f0 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 80049cc:	2303      	movs	r3, #3
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e00e      	b.n	80049f0 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80049d2:	2302      	movs	r3, #2
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e00b      	b.n	80049f0 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	4a0c      	ldr	r2, [pc, #48]	@ (8004a0c <eTaskGetState+0xcc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d002      	beq.n	80049e6 <eTaskGetState+0xa6>
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80049e6:	2304      	movs	r3, #4
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e001      	b.n	80049f0 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80049ec:	2301      	movs	r3, #1
 80049ee:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80049f0:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80049f2:	4618      	mov	r0, r3
 80049f4:	3720      	adds	r7, #32
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	240045ac 	.word	0x240045ac
 8004a00:	24004a38 	.word	0x24004a38
 8004a04:	24004a3c 	.word	0x24004a3c
 8004a08:	24004a6c 	.word	0x24004a6c
 8004a0c:	24004a54 	.word	0x24004a54

08004a10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	@ 0x28
 8004a14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a1e:	463a      	mov	r2, r7
 8004a20:	1d39      	adds	r1, r7, #4
 8004a22:	f107 0308 	add.w	r3, r7, #8
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fe fb00 	bl	800302c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	9202      	str	r2, [sp, #8]
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	2300      	movs	r3, #0
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	460a      	mov	r2, r1
 8004a3e:	4924      	ldr	r1, [pc, #144]	@ (8004ad0 <vTaskStartScheduler+0xc0>)
 8004a40:	4824      	ldr	r0, [pc, #144]	@ (8004ad4 <vTaskStartScheduler+0xc4>)
 8004a42:	f7ff fd15 	bl	8004470 <xTaskCreateStatic>
 8004a46:	4603      	mov	r3, r0
 8004a48:	4a23      	ldr	r2, [pc, #140]	@ (8004ad8 <vTaskStartScheduler+0xc8>)
 8004a4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a4c:	4b22      	ldr	r3, [pc, #136]	@ (8004ad8 <vTaskStartScheduler+0xc8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a54:	2301      	movs	r3, #1
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	e001      	b.n	8004a5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d102      	bne.n	8004a6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a64:	f000 fd1a 	bl	800549c <xTimerCreateTimerTask>
 8004a68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d11b      	bne.n	8004aa8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	613b      	str	r3, [r7, #16]
}
 8004a82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a84:	4b15      	ldr	r3, [pc, #84]	@ (8004adc <vTaskStartScheduler+0xcc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3354      	adds	r3, #84	@ 0x54
 8004a8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ae0 <vTaskStartScheduler+0xd0>)
 8004a8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ae4 <vTaskStartScheduler+0xd4>)
 8004a90:	f04f 32ff 	mov.w	r2, #4294967295
 8004a94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a96:	4b14      	ldr	r3, [pc, #80]	@ (8004ae8 <vTaskStartScheduler+0xd8>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a9c:	4b13      	ldr	r3, [pc, #76]	@ (8004aec <vTaskStartScheduler+0xdc>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004aa2:	f7fe fe25 	bl	80036f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004aa6:	e00f      	b.n	8004ac8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d10b      	bne.n	8004ac8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	60fb      	str	r3, [r7, #12]
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	e7fd      	b.n	8004ac4 <vTaskStartScheduler+0xb4>
}
 8004ac8:	bf00      	nop
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	08009994 	.word	0x08009994
 8004ad4:	08005121 	.word	0x08005121
 8004ad8:	24004aa4 	.word	0x24004aa4
 8004adc:	240045ac 	.word	0x240045ac
 8004ae0:	240000dc 	.word	0x240000dc
 8004ae4:	24004aa0 	.word	0x24004aa0
 8004ae8:	24004a8c 	.word	0x24004a8c
 8004aec:	24004a84 	.word	0x24004a84

08004af0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004af4:	4b04      	ldr	r3, [pc, #16]	@ (8004b08 <vTaskSuspendAll+0x18>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3301      	adds	r3, #1
 8004afa:	4a03      	ldr	r2, [pc, #12]	@ (8004b08 <vTaskSuspendAll+0x18>)
 8004afc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004afe:	bf00      	nop
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	24004aa8 	.word	0x24004aa8

08004b0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b1a:	4b42      	ldr	r3, [pc, #264]	@ (8004c24 <xTaskResumeAll+0x118>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10b      	bne.n	8004b3a <xTaskResumeAll+0x2e>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	603b      	str	r3, [r7, #0]
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	e7fd      	b.n	8004b36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b3a:	f7fe fe7d 	bl	8003838 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b3e:	4b39      	ldr	r3, [pc, #228]	@ (8004c24 <xTaskResumeAll+0x118>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	4a37      	ldr	r2, [pc, #220]	@ (8004c24 <xTaskResumeAll+0x118>)
 8004b46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b48:	4b36      	ldr	r3, [pc, #216]	@ (8004c24 <xTaskResumeAll+0x118>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d162      	bne.n	8004c16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b50:	4b35      	ldr	r3, [pc, #212]	@ (8004c28 <xTaskResumeAll+0x11c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d05e      	beq.n	8004c16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b58:	e02f      	b.n	8004bba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b5a:	4b34      	ldr	r3, [pc, #208]	@ (8004c2c <xTaskResumeAll+0x120>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3318      	adds	r3, #24
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe fd0c 	bl	8003584 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe fd07 	bl	8003584 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8004c30 <xTaskResumeAll+0x124>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d903      	bls.n	8004b8a <xTaskResumeAll+0x7e>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	4a2a      	ldr	r2, [pc, #168]	@ (8004c30 <xTaskResumeAll+0x124>)
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4a27      	ldr	r2, [pc, #156]	@ (8004c34 <xTaskResumeAll+0x128>)
 8004b98:	441a      	add	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f7fe fc92 	bl	80034ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004baa:	4b23      	ldr	r3, [pc, #140]	@ (8004c38 <xTaskResumeAll+0x12c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d302      	bcc.n	8004bba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004bb4:	4b21      	ldr	r3, [pc, #132]	@ (8004c3c <xTaskResumeAll+0x130>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bba:	4b1c      	ldr	r3, [pc, #112]	@ (8004c2c <xTaskResumeAll+0x120>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1cb      	bne.n	8004b5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bc8:	f000 fb66 	bl	8005298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8004c40 <xTaskResumeAll+0x134>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d010      	beq.n	8004bfa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004bd8:	f000 f846 	bl	8004c68 <xTaskIncrementTick>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004be2:	4b16      	ldr	r3, [pc, #88]	@ (8004c3c <xTaskResumeAll+0x130>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f1      	bne.n	8004bd8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004bf4:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <xTaskResumeAll+0x134>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bfa:	4b10      	ldr	r3, [pc, #64]	@ (8004c3c <xTaskResumeAll+0x130>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c02:	2301      	movs	r3, #1
 8004c04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c06:	4b0f      	ldr	r3, [pc, #60]	@ (8004c44 <xTaskResumeAll+0x138>)
 8004c08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c16:	f7fe fe41 	bl	800389c <vPortExitCritical>

	return xAlreadyYielded;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	24004aa8 	.word	0x24004aa8
 8004c28:	24004a80 	.word	0x24004a80
 8004c2c:	24004a40 	.word	0x24004a40
 8004c30:	24004a88 	.word	0x24004a88
 8004c34:	240045b0 	.word	0x240045b0
 8004c38:	240045ac 	.word	0x240045ac
 8004c3c:	24004a94 	.word	0x24004a94
 8004c40:	24004a90 	.word	0x24004a90
 8004c44:	e000ed04 	.word	0xe000ed04

08004c48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c4e:	4b05      	ldr	r3, [pc, #20]	@ (8004c64 <xTaskGetTickCount+0x1c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c54:	687b      	ldr	r3, [r7, #4]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	24004a84 	.word	0x24004a84

08004c68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c72:	4b4f      	ldr	r3, [pc, #316]	@ (8004db0 <xTaskIncrementTick+0x148>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f040 8090 	bne.w	8004d9c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8004db4 <xTaskIncrementTick+0x14c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3301      	adds	r3, #1
 8004c82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c84:	4a4b      	ldr	r2, [pc, #300]	@ (8004db4 <xTaskIncrementTick+0x14c>)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d121      	bne.n	8004cd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c90:	4b49      	ldr	r3, [pc, #292]	@ (8004db8 <xTaskIncrementTick+0x150>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	603b      	str	r3, [r7, #0]
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	e7fd      	b.n	8004cae <xTaskIncrementTick+0x46>
 8004cb2:	4b41      	ldr	r3, [pc, #260]	@ (8004db8 <xTaskIncrementTick+0x150>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	4b40      	ldr	r3, [pc, #256]	@ (8004dbc <xTaskIncrementTick+0x154>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a3e      	ldr	r2, [pc, #248]	@ (8004db8 <xTaskIncrementTick+0x150>)
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	4a3e      	ldr	r2, [pc, #248]	@ (8004dbc <xTaskIncrementTick+0x154>)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8004dc0 <xTaskIncrementTick+0x158>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8004dc0 <xTaskIncrementTick+0x158>)
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	f000 fae2 	bl	8005298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc4 <xTaskIncrementTick+0x15c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d349      	bcc.n	8004d72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cde:	4b36      	ldr	r3, [pc, #216]	@ (8004db8 <xTaskIncrementTick+0x150>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d104      	bne.n	8004cf2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ce8:	4b36      	ldr	r3, [pc, #216]	@ (8004dc4 <xTaskIncrementTick+0x15c>)
 8004cea:	f04f 32ff 	mov.w	r2, #4294967295
 8004cee:	601a      	str	r2, [r3, #0]
					break;
 8004cf0:	e03f      	b.n	8004d72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf2:	4b31      	ldr	r3, [pc, #196]	@ (8004db8 <xTaskIncrementTick+0x150>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d203      	bcs.n	8004d12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004dc4 <xTaskIncrementTick+0x15c>)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d10:	e02f      	b.n	8004d72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	3304      	adds	r3, #4
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fe fc34 	bl	8003584 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	3318      	adds	r3, #24
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fe fc2b 	bl	8003584 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d32:	4b25      	ldr	r3, [pc, #148]	@ (8004dc8 <xTaskIncrementTick+0x160>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d903      	bls.n	8004d42 <xTaskIncrementTick+0xda>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3e:	4a22      	ldr	r2, [pc, #136]	@ (8004dc8 <xTaskIncrementTick+0x160>)
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004dcc <xTaskIncrementTick+0x164>)
 8004d50:	441a      	add	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f7fe fbb6 	bl	80034ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d62:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd0 <xTaskIncrementTick+0x168>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d3b8      	bcc.n	8004cde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d70:	e7b5      	b.n	8004cde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d72:	4b17      	ldr	r3, [pc, #92]	@ (8004dd0 <xTaskIncrementTick+0x168>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d78:	4914      	ldr	r1, [pc, #80]	@ (8004dcc <xTaskIncrementTick+0x164>)
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d901      	bls.n	8004d8e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d8e:	4b11      	ldr	r3, [pc, #68]	@ (8004dd4 <xTaskIncrementTick+0x16c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004d96:	2301      	movs	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e004      	b.n	8004da6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd8 <xTaskIncrementTick+0x170>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3301      	adds	r3, #1
 8004da2:	4a0d      	ldr	r2, [pc, #52]	@ (8004dd8 <xTaskIncrementTick+0x170>)
 8004da4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004da6:	697b      	ldr	r3, [r7, #20]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	24004aa8 	.word	0x24004aa8
 8004db4:	24004a84 	.word	0x24004a84
 8004db8:	24004a38 	.word	0x24004a38
 8004dbc:	24004a3c 	.word	0x24004a3c
 8004dc0:	24004a98 	.word	0x24004a98
 8004dc4:	24004aa0 	.word	0x24004aa0
 8004dc8:	24004a88 	.word	0x24004a88
 8004dcc:	240045b0 	.word	0x240045b0
 8004dd0:	240045ac 	.word	0x240045ac
 8004dd4:	24004a94 	.word	0x24004a94
 8004dd8:	24004a90 	.word	0x24004a90

08004ddc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004de2:	4b2b      	ldr	r3, [pc, #172]	@ (8004e90 <vTaskSwitchContext+0xb4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004dea:	4b2a      	ldr	r3, [pc, #168]	@ (8004e94 <vTaskSwitchContext+0xb8>)
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004df0:	e047      	b.n	8004e82 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004df2:	4b28      	ldr	r3, [pc, #160]	@ (8004e94 <vTaskSwitchContext+0xb8>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004df8:	4b27      	ldr	r3, [pc, #156]	@ (8004e98 <vTaskSwitchContext+0xbc>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e011      	b.n	8004e24 <vTaskSwitchContext+0x48>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <vTaskSwitchContext+0x42>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	607b      	str	r3, [r7, #4]
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	e7fd      	b.n	8004e1a <vTaskSwitchContext+0x3e>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	491d      	ldr	r1, [pc, #116]	@ (8004e9c <vTaskSwitchContext+0xc0>)
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0e3      	beq.n	8004e00 <vTaskSwitchContext+0x24>
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4a16      	ldr	r2, [pc, #88]	@ (8004e9c <vTaskSwitchContext+0xc0>)
 8004e44:	4413      	add	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	3308      	adds	r3, #8
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d104      	bne.n	8004e68 <vTaskSwitchContext+0x8c>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	605a      	str	r2, [r3, #4]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ea0 <vTaskSwitchContext+0xc4>)
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	4a09      	ldr	r2, [pc, #36]	@ (8004e98 <vTaskSwitchContext+0xbc>)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e78:	4b09      	ldr	r3, [pc, #36]	@ (8004ea0 <vTaskSwitchContext+0xc4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3354      	adds	r3, #84	@ 0x54
 8004e7e:	4a09      	ldr	r2, [pc, #36]	@ (8004ea4 <vTaskSwitchContext+0xc8>)
 8004e80:	6013      	str	r3, [r2, #0]
}
 8004e82:	bf00      	nop
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	24004aa8 	.word	0x24004aa8
 8004e94:	24004a94 	.word	0x24004a94
 8004e98:	24004a88 	.word	0x24004a88
 8004e9c:	240045b0 	.word	0x240045b0
 8004ea0:	240045ac 	.word	0x240045ac
 8004ea4:	240000dc 	.word	0x240000dc

08004ea8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10b      	bne.n	8004ed0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	60fb      	str	r3, [r7, #12]
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	e7fd      	b.n	8004ecc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ed0:	4b07      	ldr	r3, [pc, #28]	@ (8004ef0 <vTaskPlaceOnEventList+0x48>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3318      	adds	r3, #24
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fe fb1a 	bl	8003512 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ede:	2101      	movs	r1, #1
 8004ee0:	6838      	ldr	r0, [r7, #0]
 8004ee2:	f000 fa87 	bl	80053f4 <prvAddCurrentTaskToDelayedList>
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	240045ac 	.word	0x240045ac

08004ef4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10b      	bne.n	8004f1e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	617b      	str	r3, [r7, #20]
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	e7fd      	b.n	8004f1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f48 <vTaskPlaceOnEventListRestricted+0x54>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3318      	adds	r3, #24
 8004f24:	4619      	mov	r1, r3
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7fe facf 	bl	80034ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004f32:	f04f 33ff 	mov.w	r3, #4294967295
 8004f36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	68b8      	ldr	r0, [r7, #8]
 8004f3c:	f000 fa5a 	bl	80053f4 <prvAddCurrentTaskToDelayedList>
	}
 8004f40:	bf00      	nop
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	240045ac 	.word	0x240045ac

08004f4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10b      	bne.n	8004f7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	60fb      	str	r3, [r7, #12]
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	3318      	adds	r3, #24
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe fb00 	bl	8003584 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f84:	4b1d      	ldr	r3, [pc, #116]	@ (8004ffc <xTaskRemoveFromEventList+0xb0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d11d      	bne.n	8004fc8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fe faf7 	bl	8003584 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9a:	4b19      	ldr	r3, [pc, #100]	@ (8005000 <xTaskRemoveFromEventList+0xb4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d903      	bls.n	8004faa <xTaskRemoveFromEventList+0x5e>
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	4a16      	ldr	r2, [pc, #88]	@ (8005000 <xTaskRemoveFromEventList+0xb4>)
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4a13      	ldr	r2, [pc, #76]	@ (8005004 <xTaskRemoveFromEventList+0xb8>)
 8004fb8:	441a      	add	r2, r3
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	f7fe fa82 	bl	80034ca <vListInsertEnd>
 8004fc6:	e005      	b.n	8004fd4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	3318      	adds	r3, #24
 8004fcc:	4619      	mov	r1, r3
 8004fce:	480e      	ldr	r0, [pc, #56]	@ (8005008 <xTaskRemoveFromEventList+0xbc>)
 8004fd0:	f7fe fa7b 	bl	80034ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800500c <xTaskRemoveFromEventList+0xc0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d905      	bls.n	8004fee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8005010 <xTaskRemoveFromEventList+0xc4>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e001      	b.n	8004ff2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ff2:	697b      	ldr	r3, [r7, #20]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	24004aa8 	.word	0x24004aa8
 8005000:	24004a88 	.word	0x24004a88
 8005004:	240045b0 	.word	0x240045b0
 8005008:	24004a40 	.word	0x24004a40
 800500c:	240045ac 	.word	0x240045ac
 8005010:	24004a94 	.word	0x24004a94

08005014 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800501c:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <vTaskInternalSetTimeOutState+0x24>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005024:	4b05      	ldr	r3, [pc, #20]	@ (800503c <vTaskInternalSetTimeOutState+0x28>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	605a      	str	r2, [r3, #4]
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	24004a98 	.word	0x24004a98
 800503c:	24004a84 	.word	0x24004a84

08005040 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	613b      	str	r3, [r7, #16]
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10b      	bne.n	8005086 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	60fb      	str	r3, [r7, #12]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005086:	f7fe fbd7 	bl	8003838 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800508a:	4b1d      	ldr	r3, [pc, #116]	@ (8005100 <xTaskCheckForTimeOut+0xc0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	d102      	bne.n	80050aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	e023      	b.n	80050f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b15      	ldr	r3, [pc, #84]	@ (8005104 <xTaskCheckForTimeOut+0xc4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d007      	beq.n	80050c6 <xTaskCheckForTimeOut+0x86>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	e015      	b.n	80050f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d20b      	bcs.n	80050e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	1ad2      	subs	r2, r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff ff99 	bl	8005014 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	e004      	b.n	80050f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050ee:	2301      	movs	r3, #1
 80050f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050f2:	f7fe fbd3 	bl	800389c <vPortExitCritical>

	return xReturn;
 80050f6:	69fb      	ldr	r3, [r7, #28]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	24004a84 	.word	0x24004a84
 8005104:	24004a98 	.word	0x24004a98

08005108 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800510c:	4b03      	ldr	r3, [pc, #12]	@ (800511c <vTaskMissedYield+0x14>)
 800510e:	2201      	movs	r2, #1
 8005110:	601a      	str	r2, [r3, #0]
}
 8005112:	bf00      	nop
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	24004a94 	.word	0x24004a94

08005120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005128:	f000 f852 	bl	80051d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800512c:	4b06      	ldr	r3, [pc, #24]	@ (8005148 <prvIdleTask+0x28>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d9f9      	bls.n	8005128 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005134:	4b05      	ldr	r3, [pc, #20]	@ (800514c <prvIdleTask+0x2c>)
 8005136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005144:	e7f0      	b.n	8005128 <prvIdleTask+0x8>
 8005146:	bf00      	nop
 8005148:	240045b0 	.word	0x240045b0
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	e00c      	b.n	8005176 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4a12      	ldr	r2, [pc, #72]	@ (80051b0 <prvInitialiseTaskLists+0x60>)
 8005168:	4413      	add	r3, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f7fe f980 	bl	8003470 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3301      	adds	r3, #1
 8005174:	607b      	str	r3, [r7, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b37      	cmp	r3, #55	@ 0x37
 800517a:	d9ef      	bls.n	800515c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800517c:	480d      	ldr	r0, [pc, #52]	@ (80051b4 <prvInitialiseTaskLists+0x64>)
 800517e:	f7fe f977 	bl	8003470 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005182:	480d      	ldr	r0, [pc, #52]	@ (80051b8 <prvInitialiseTaskLists+0x68>)
 8005184:	f7fe f974 	bl	8003470 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005188:	480c      	ldr	r0, [pc, #48]	@ (80051bc <prvInitialiseTaskLists+0x6c>)
 800518a:	f7fe f971 	bl	8003470 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800518e:	480c      	ldr	r0, [pc, #48]	@ (80051c0 <prvInitialiseTaskLists+0x70>)
 8005190:	f7fe f96e 	bl	8003470 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005194:	480b      	ldr	r0, [pc, #44]	@ (80051c4 <prvInitialiseTaskLists+0x74>)
 8005196:	f7fe f96b 	bl	8003470 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800519a:	4b0b      	ldr	r3, [pc, #44]	@ (80051c8 <prvInitialiseTaskLists+0x78>)
 800519c:	4a05      	ldr	r2, [pc, #20]	@ (80051b4 <prvInitialiseTaskLists+0x64>)
 800519e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051a0:	4b0a      	ldr	r3, [pc, #40]	@ (80051cc <prvInitialiseTaskLists+0x7c>)
 80051a2:	4a05      	ldr	r2, [pc, #20]	@ (80051b8 <prvInitialiseTaskLists+0x68>)
 80051a4:	601a      	str	r2, [r3, #0]
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	240045b0 	.word	0x240045b0
 80051b4:	24004a10 	.word	0x24004a10
 80051b8:	24004a24 	.word	0x24004a24
 80051bc:	24004a40 	.word	0x24004a40
 80051c0:	24004a54 	.word	0x24004a54
 80051c4:	24004a6c 	.word	0x24004a6c
 80051c8:	24004a38 	.word	0x24004a38
 80051cc:	24004a3c 	.word	0x24004a3c

080051d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051d6:	e019      	b.n	800520c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051d8:	f7fe fb2e 	bl	8003838 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051dc:	4b10      	ldr	r3, [pc, #64]	@ (8005220 <prvCheckTasksWaitingTermination+0x50>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fe f9cb 	bl	8003584 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <prvCheckTasksWaitingTermination+0x54>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	4a0b      	ldr	r2, [pc, #44]	@ (8005224 <prvCheckTasksWaitingTermination+0x54>)
 80051f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <prvCheckTasksWaitingTermination+0x58>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005228 <prvCheckTasksWaitingTermination+0x58>)
 8005200:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005202:	f7fe fb4b 	bl	800389c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f810 	bl	800522c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800520c:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <prvCheckTasksWaitingTermination+0x58>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e1      	bne.n	80051d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	24004a54 	.word	0x24004a54
 8005224:	24004a80 	.word	0x24004a80
 8005228:	24004a68 	.word	0x24004a68

0800522c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3354      	adds	r3, #84	@ 0x54
 8005238:	4618      	mov	r0, r3
 800523a:	f003 fd8f 	bl	8008d5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005244:	2b00      	cmp	r3, #0
 8005246:	d108      	bne.n	800525a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524c:	4618      	mov	r0, r3
 800524e:	f7fd ffef 	bl	8003230 <vPortFree>
				vPortFree( pxTCB );
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fd ffec 	bl	8003230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005258:	e019      	b.n	800528e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005260:	2b01      	cmp	r3, #1
 8005262:	d103      	bne.n	800526c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7fd ffe3 	bl	8003230 <vPortFree>
	}
 800526a:	e010      	b.n	800528e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005272:	2b02      	cmp	r3, #2
 8005274:	d00b      	beq.n	800528e <prvDeleteTCB+0x62>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	60fb      	str	r3, [r7, #12]
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <prvDeleteTCB+0x5e>
	}
 800528e:	bf00      	nop
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800529e:	4b0c      	ldr	r3, [pc, #48]	@ (80052d0 <prvResetNextTaskUnblockTime+0x38>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052a8:	4b0a      	ldr	r3, [pc, #40]	@ (80052d4 <prvResetNextTaskUnblockTime+0x3c>)
 80052aa:	f04f 32ff 	mov.w	r2, #4294967295
 80052ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052b0:	e008      	b.n	80052c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b2:	4b07      	ldr	r3, [pc, #28]	@ (80052d0 <prvResetNextTaskUnblockTime+0x38>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	4a04      	ldr	r2, [pc, #16]	@ (80052d4 <prvResetNextTaskUnblockTime+0x3c>)
 80052c2:	6013      	str	r3, [r2, #0]
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	24004a38 	.word	0x24004a38
 80052d4:	24004aa0 	.word	0x24004aa0

080052d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052de:	4b0b      	ldr	r3, [pc, #44]	@ (800530c <xTaskGetSchedulerState+0x34>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052e6:	2301      	movs	r3, #1
 80052e8:	607b      	str	r3, [r7, #4]
 80052ea:	e008      	b.n	80052fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ec:	4b08      	ldr	r3, [pc, #32]	@ (8005310 <xTaskGetSchedulerState+0x38>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052f4:	2302      	movs	r3, #2
 80052f6:	607b      	str	r3, [r7, #4]
 80052f8:	e001      	b.n	80052fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052fa:	2300      	movs	r3, #0
 80052fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052fe:	687b      	ldr	r3, [r7, #4]
	}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	24004a8c 	.word	0x24004a8c
 8005310:	24004aa8 	.word	0x24004aa8

08005314 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d058      	beq.n	80053dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800532a:	4b2f      	ldr	r3, [pc, #188]	@ (80053e8 <xTaskPriorityDisinherit+0xd4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	429a      	cmp	r2, r3
 8005332:	d00b      	beq.n	800534c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	60fb      	str	r3, [r7, #12]
}
 8005346:	bf00      	nop
 8005348:	bf00      	nop
 800534a:	e7fd      	b.n	8005348 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10b      	bne.n	800536c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	60bb      	str	r3, [r7, #8]
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	e7fd      	b.n	8005368 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005370:	1e5a      	subs	r2, r3, #1
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800537e:	429a      	cmp	r2, r3
 8005380:	d02c      	beq.n	80053dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005386:	2b00      	cmp	r3, #0
 8005388:	d128      	bne.n	80053dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	3304      	adds	r3, #4
 800538e:	4618      	mov	r0, r3
 8005390:	f7fe f8f8 	bl	8003584 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ac:	4b0f      	ldr	r3, [pc, #60]	@ (80053ec <xTaskPriorityDisinherit+0xd8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d903      	bls.n	80053bc <xTaskPriorityDisinherit+0xa8>
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	4a0c      	ldr	r2, [pc, #48]	@ (80053ec <xTaskPriorityDisinherit+0xd8>)
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a09      	ldr	r2, [pc, #36]	@ (80053f0 <xTaskPriorityDisinherit+0xdc>)
 80053ca:	441a      	add	r2, r3
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f7fe f879 	bl	80034ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053d8:	2301      	movs	r3, #1
 80053da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053dc:	697b      	ldr	r3, [r7, #20]
	}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	240045ac 	.word	0x240045ac
 80053ec:	24004a88 	.word	0x24004a88
 80053f0:	240045b0 	.word	0x240045b0

080053f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053fe:	4b21      	ldr	r3, [pc, #132]	@ (8005484 <prvAddCurrentTaskToDelayedList+0x90>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005404:	4b20      	ldr	r3, [pc, #128]	@ (8005488 <prvAddCurrentTaskToDelayedList+0x94>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3304      	adds	r3, #4
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe f8ba 	bl	8003584 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	d10a      	bne.n	800542e <prvAddCurrentTaskToDelayedList+0x3a>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d007      	beq.n	800542e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800541e:	4b1a      	ldr	r3, [pc, #104]	@ (8005488 <prvAddCurrentTaskToDelayedList+0x94>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3304      	adds	r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	4819      	ldr	r0, [pc, #100]	@ (800548c <prvAddCurrentTaskToDelayedList+0x98>)
 8005428:	f7fe f84f 	bl	80034ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800542c:	e026      	b.n	800547c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4413      	add	r3, r2
 8005434:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005436:	4b14      	ldr	r3, [pc, #80]	@ (8005488 <prvAddCurrentTaskToDelayedList+0x94>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	429a      	cmp	r2, r3
 8005444:	d209      	bcs.n	800545a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005446:	4b12      	ldr	r3, [pc, #72]	@ (8005490 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	4b0f      	ldr	r3, [pc, #60]	@ (8005488 <prvAddCurrentTaskToDelayedList+0x94>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3304      	adds	r3, #4
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f7fe f85d 	bl	8003512 <vListInsert>
}
 8005458:	e010      	b.n	800547c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800545a:	4b0e      	ldr	r3, [pc, #56]	@ (8005494 <prvAddCurrentTaskToDelayedList+0xa0>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4b0a      	ldr	r3, [pc, #40]	@ (8005488 <prvAddCurrentTaskToDelayedList+0x94>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3304      	adds	r3, #4
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f7fe f853 	bl	8003512 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800546c:	4b0a      	ldr	r3, [pc, #40]	@ (8005498 <prvAddCurrentTaskToDelayedList+0xa4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	429a      	cmp	r2, r3
 8005474:	d202      	bcs.n	800547c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005476:	4a08      	ldr	r2, [pc, #32]	@ (8005498 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6013      	str	r3, [r2, #0]
}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	24004a84 	.word	0x24004a84
 8005488:	240045ac 	.word	0x240045ac
 800548c:	24004a6c 	.word	0x24004a6c
 8005490:	24004a3c 	.word	0x24004a3c
 8005494:	24004a38 	.word	0x24004a38
 8005498:	24004aa0 	.word	0x24004aa0

0800549c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08a      	sub	sp, #40	@ 0x28
 80054a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054a6:	f000 fb13 	bl	8005ad0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005520 <xTimerCreateTimerTask+0x84>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d021      	beq.n	80054f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054ba:	1d3a      	adds	r2, r7, #4
 80054bc:	f107 0108 	add.w	r1, r7, #8
 80054c0:	f107 030c 	add.w	r3, r7, #12
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fd fdcb 	bl	8003060 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	9202      	str	r2, [sp, #8]
 80054d2:	9301      	str	r3, [sp, #4]
 80054d4:	2302      	movs	r3, #2
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	2300      	movs	r3, #0
 80054da:	460a      	mov	r2, r1
 80054dc:	4911      	ldr	r1, [pc, #68]	@ (8005524 <xTimerCreateTimerTask+0x88>)
 80054de:	4812      	ldr	r0, [pc, #72]	@ (8005528 <xTimerCreateTimerTask+0x8c>)
 80054e0:	f7fe ffc6 	bl	8004470 <xTaskCreateStatic>
 80054e4:	4603      	mov	r3, r0
 80054e6:	4a11      	ldr	r2, [pc, #68]	@ (800552c <xTimerCreateTimerTask+0x90>)
 80054e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80054ea:	4b10      	ldr	r3, [pc, #64]	@ (800552c <xTimerCreateTimerTask+0x90>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80054f2:	2301      	movs	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	613b      	str	r3, [r7, #16]
}
 800550e:	bf00      	nop
 8005510:	bf00      	nop
 8005512:	e7fd      	b.n	8005510 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005514:	697b      	ldr	r3, [r7, #20]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	24004adc 	.word	0x24004adc
 8005524:	0800999c 	.word	0x0800999c
 8005528:	08005669 	.word	0x08005669
 800552c:	24004ae0 	.word	0x24004ae0

08005530 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08a      	sub	sp, #40	@ 0x28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800553e:	2300      	movs	r3, #0
 8005540:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10b      	bne.n	8005560 <xTimerGenericCommand+0x30>
	__asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	623b      	str	r3, [r7, #32]
}
 800555a:	bf00      	nop
 800555c:	bf00      	nop
 800555e:	e7fd      	b.n	800555c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005560:	4b19      	ldr	r3, [pc, #100]	@ (80055c8 <xTimerGenericCommand+0x98>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d02a      	beq.n	80055be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b05      	cmp	r3, #5
 8005578:	dc18      	bgt.n	80055ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800557a:	f7ff fead 	bl	80052d8 <xTaskGetSchedulerState>
 800557e:	4603      	mov	r3, r0
 8005580:	2b02      	cmp	r3, #2
 8005582:	d109      	bne.n	8005598 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005584:	4b10      	ldr	r3, [pc, #64]	@ (80055c8 <xTimerGenericCommand+0x98>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	f107 0110 	add.w	r1, r7, #16
 800558c:	2300      	movs	r3, #0
 800558e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005590:	f7fe fb7e 	bl	8003c90 <xQueueGenericSend>
 8005594:	6278      	str	r0, [r7, #36]	@ 0x24
 8005596:	e012      	b.n	80055be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005598:	4b0b      	ldr	r3, [pc, #44]	@ (80055c8 <xTimerGenericCommand+0x98>)
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	f107 0110 	add.w	r1, r7, #16
 80055a0:	2300      	movs	r3, #0
 80055a2:	2200      	movs	r2, #0
 80055a4:	f7fe fb74 	bl	8003c90 <xQueueGenericSend>
 80055a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80055aa:	e008      	b.n	80055be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055ac:	4b06      	ldr	r3, [pc, #24]	@ (80055c8 <xTimerGenericCommand+0x98>)
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	f107 0110 	add.w	r1, r7, #16
 80055b4:	2300      	movs	r3, #0
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	f7fe fc6c 	bl	8003e94 <xQueueGenericSendFromISR>
 80055bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3728      	adds	r7, #40	@ 0x28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	24004adc 	.word	0x24004adc

080055cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d6:	4b23      	ldr	r3, [pc, #140]	@ (8005664 <prvProcessExpiredTimer+0x98>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	3304      	adds	r3, #4
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fd ffcd 	bl	8003584 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d023      	beq.n	8005640 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	18d1      	adds	r1, r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	6978      	ldr	r0, [r7, #20]
 8005606:	f000 f8d5 	bl	80057b4 <prvInsertTimerInActiveList>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d020      	beq.n	8005652 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005610:	2300      	movs	r3, #0
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	2300      	movs	r3, #0
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	2100      	movs	r1, #0
 800561a:	6978      	ldr	r0, [r7, #20]
 800561c:	f7ff ff88 	bl	8005530 <xTimerGenericCommand>
 8005620:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d114      	bne.n	8005652 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	60fb      	str	r3, [r7, #12]
}
 800563a:	bf00      	nop
 800563c:	bf00      	nop
 800563e:	e7fd      	b.n	800563c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005646:	f023 0301 	bic.w	r3, r3, #1
 800564a:	b2da      	uxtb	r2, r3
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	6978      	ldr	r0, [r7, #20]
 8005658:	4798      	blx	r3
}
 800565a:	bf00      	nop
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	24004ad4 	.word	0x24004ad4

08005668 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005670:	f107 0308 	add.w	r3, r7, #8
 8005674:	4618      	mov	r0, r3
 8005676:	f000 f859 	bl	800572c <prvGetNextExpireTime>
 800567a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4619      	mov	r1, r3
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f805 	bl	8005690 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005686:	f000 f8d7 	bl	8005838 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800568a:	bf00      	nop
 800568c:	e7f0      	b.n	8005670 <prvTimerTask+0x8>
	...

08005690 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800569a:	f7ff fa29 	bl	8004af0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800569e:	f107 0308 	add.w	r3, r7, #8
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f866 	bl	8005774 <prvSampleTimeNow>
 80056a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d130      	bne.n	8005712 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <prvProcessTimerOrBlockTask+0x3c>
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d806      	bhi.n	80056cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056be:	f7ff fa25 	bl	8004b0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056c2:	68f9      	ldr	r1, [r7, #12]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff ff81 	bl	80055cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056ca:	e024      	b.n	8005716 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d008      	beq.n	80056e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056d2:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <prvProcessTimerOrBlockTask+0x90>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <prvProcessTimerOrBlockTask+0x50>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <prvProcessTimerOrBlockTask+0x52>
 80056e0:	2300      	movs	r3, #0
 80056e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005724 <prvProcessTimerOrBlockTask+0x94>)
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	4619      	mov	r1, r3
 80056f2:	f7fe fe89 	bl	8004408 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056f6:	f7ff fa09 	bl	8004b0c <xTaskResumeAll>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005700:	4b09      	ldr	r3, [pc, #36]	@ (8005728 <prvProcessTimerOrBlockTask+0x98>)
 8005702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	f3bf 8f6f 	isb	sy
}
 8005710:	e001      	b.n	8005716 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005712:	f7ff f9fb 	bl	8004b0c <xTaskResumeAll>
}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	24004ad8 	.word	0x24004ad8
 8005724:	24004adc 	.word	0x24004adc
 8005728:	e000ed04 	.word	0xe000ed04

0800572c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005734:	4b0e      	ldr	r3, [pc, #56]	@ (8005770 <prvGetNextExpireTime+0x44>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <prvGetNextExpireTime+0x16>
 800573e:	2201      	movs	r2, #1
 8005740:	e000      	b.n	8005744 <prvGetNextExpireTime+0x18>
 8005742:	2200      	movs	r2, #0
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d105      	bne.n	800575c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005750:	4b07      	ldr	r3, [pc, #28]	@ (8005770 <prvGetNextExpireTime+0x44>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	e001      	b.n	8005760 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005760:	68fb      	ldr	r3, [r7, #12]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	24004ad4 	.word	0x24004ad4

08005774 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800577c:	f7ff fa64 	bl	8004c48 <xTaskGetTickCount>
 8005780:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005782:	4b0b      	ldr	r3, [pc, #44]	@ (80057b0 <prvSampleTimeNow+0x3c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	429a      	cmp	r2, r3
 800578a:	d205      	bcs.n	8005798 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800578c:	f000 f93a 	bl	8005a04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	e002      	b.n	800579e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800579e:	4a04      	ldr	r2, [pc, #16]	@ (80057b0 <prvSampleTimeNow+0x3c>)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057a4:	68fb      	ldr	r3, [r7, #12]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	24004ae4 	.word	0x24004ae4

080057b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d812      	bhi.n	8005800 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d302      	bcc.n	80057ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	e01b      	b.n	8005826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057ee:	4b10      	ldr	r3, [pc, #64]	@ (8005830 <prvInsertTimerInActiveList+0x7c>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f7fd fe8a 	bl	8003512 <vListInsert>
 80057fe:	e012      	b.n	8005826 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d206      	bcs.n	8005816 <prvInsertTimerInActiveList+0x62>
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d302      	bcc.n	8005816 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005810:	2301      	movs	r3, #1
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e007      	b.n	8005826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005816:	4b07      	ldr	r3, [pc, #28]	@ (8005834 <prvInsertTimerInActiveList+0x80>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3304      	adds	r3, #4
 800581e:	4619      	mov	r1, r3
 8005820:	4610      	mov	r0, r2
 8005822:	f7fd fe76 	bl	8003512 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005826:	697b      	ldr	r3, [r7, #20]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	24004ad8 	.word	0x24004ad8
 8005834:	24004ad4 	.word	0x24004ad4

08005838 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08e      	sub	sp, #56	@ 0x38
 800583c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800583e:	e0ce      	b.n	80059de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	da19      	bge.n	800587a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005846:	1d3b      	adds	r3, r7, #4
 8005848:	3304      	adds	r3, #4
 800584a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800584c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10b      	bne.n	800586a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	61fb      	str	r3, [r7, #28]
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop
 8005868:	e7fd      	b.n	8005866 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800586a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005870:	6850      	ldr	r0, [r2, #4]
 8005872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005874:	6892      	ldr	r2, [r2, #8]
 8005876:	4611      	mov	r1, r2
 8005878:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f2c0 80ae 	blt.w	80059de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d004      	beq.n	8005898 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800588e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005890:	3304      	adds	r3, #4
 8005892:	4618      	mov	r0, r3
 8005894:	f7fd fe76 	bl	8003584 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005898:	463b      	mov	r3, r7
 800589a:	4618      	mov	r0, r3
 800589c:	f7ff ff6a 	bl	8005774 <prvSampleTimeNow>
 80058a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b09      	cmp	r3, #9
 80058a6:	f200 8097 	bhi.w	80059d8 <prvProcessReceivedCommands+0x1a0>
 80058aa:	a201      	add	r2, pc, #4	@ (adr r2, 80058b0 <prvProcessReceivedCommands+0x78>)
 80058ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b0:	080058d9 	.word	0x080058d9
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058d9 	.word	0x080058d9
 80058bc:	0800594f 	.word	0x0800594f
 80058c0:	08005963 	.word	0x08005963
 80058c4:	080059af 	.word	0x080059af
 80058c8:	080058d9 	.word	0x080058d9
 80058cc:	080058d9 	.word	0x080058d9
 80058d0:	0800594f 	.word	0x0800594f
 80058d4:	08005963 	.word	0x08005963
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	18d1      	adds	r1, r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058f8:	f7ff ff5c 	bl	80057b4 <prvInsertTimerInActiveList>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d06c      	beq.n	80059dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005908:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800590a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d061      	beq.n	80059dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	441a      	add	r2, r3
 8005920:	2300      	movs	r3, #0
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	2300      	movs	r3, #0
 8005926:	2100      	movs	r1, #0
 8005928:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800592a:	f7ff fe01 	bl	8005530 <xTimerGenericCommand>
 800592e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d152      	bne.n	80059dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	61bb      	str	r3, [r7, #24]
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	e7fd      	b.n	800594a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800594e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	b2da      	uxtb	r2, r3
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005960:	e03d      	b.n	80059de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005964:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	b2da      	uxtb	r2, r3
 800596e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005970:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005978:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800597a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10b      	bne.n	800599a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	617b      	str	r3, [r7, #20]
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop
 8005998:	e7fd      	b.n	8005996 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800599a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	18d1      	adds	r1, r2, r3
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059a8:	f7ff ff04 	bl	80057b4 <prvInsertTimerInActiveList>
					break;
 80059ac:	e017      	b.n	80059de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80059ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d103      	bne.n	80059c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80059bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059be:	f7fd fc37 	bl	8003230 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059c2:	e00c      	b.n	80059de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80059d6:	e002      	b.n	80059de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <prvProcessReceivedCommands+0x1a6>
					break;
 80059dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059de:	4b08      	ldr	r3, [pc, #32]	@ (8005a00 <prvProcessReceivedCommands+0x1c8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	1d39      	adds	r1, r7, #4
 80059e4:	2200      	movs	r2, #0
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe faf2 	bl	8003fd0 <xQueueReceive>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f47f af26 	bne.w	8005840 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	3730      	adds	r7, #48	@ 0x30
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	24004adc 	.word	0x24004adc

08005a04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a0a:	e049      	b.n	8005aa0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8005ac8 <prvSwitchTimerLists+0xc4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a16:	4b2c      	ldr	r3, [pc, #176]	@ (8005ac8 <prvSwitchTimerLists+0xc4>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fd fdad 	bl	8003584 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d02f      	beq.n	8005aa0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d90e      	bls.n	8005a70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac8 <prvSwitchTimerLists+0xc4>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3304      	adds	r3, #4
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f7fd fd52 	bl	8003512 <vListInsert>
 8005a6e:	e017      	b.n	8005aa0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a70:	2300      	movs	r3, #0
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	2300      	movs	r3, #0
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	2100      	movs	r1, #0
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f7ff fd58 	bl	8005530 <xTimerGenericCommand>
 8005a80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10b      	bne.n	8005aa0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	603b      	str	r3, [r7, #0]
}
 8005a9a:	bf00      	nop
 8005a9c:	bf00      	nop
 8005a9e:	e7fd      	b.n	8005a9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005aa0:	4b09      	ldr	r3, [pc, #36]	@ (8005ac8 <prvSwitchTimerLists+0xc4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1b0      	bne.n	8005a0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005aaa:	4b07      	ldr	r3, [pc, #28]	@ (8005ac8 <prvSwitchTimerLists+0xc4>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ab0:	4b06      	ldr	r3, [pc, #24]	@ (8005acc <prvSwitchTimerLists+0xc8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a04      	ldr	r2, [pc, #16]	@ (8005ac8 <prvSwitchTimerLists+0xc4>)
 8005ab6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ab8:	4a04      	ldr	r2, [pc, #16]	@ (8005acc <prvSwitchTimerLists+0xc8>)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	6013      	str	r3, [r2, #0]
}
 8005abe:	bf00      	nop
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	24004ad4 	.word	0x24004ad4
 8005acc:	24004ad8 	.word	0x24004ad8

08005ad0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ad6:	f7fd feaf 	bl	8003838 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ada:	4b15      	ldr	r3, [pc, #84]	@ (8005b30 <prvCheckForValidListAndQueue+0x60>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d120      	bne.n	8005b24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ae2:	4814      	ldr	r0, [pc, #80]	@ (8005b34 <prvCheckForValidListAndQueue+0x64>)
 8005ae4:	f7fd fcc4 	bl	8003470 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ae8:	4813      	ldr	r0, [pc, #76]	@ (8005b38 <prvCheckForValidListAndQueue+0x68>)
 8005aea:	f7fd fcc1 	bl	8003470 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005aee:	4b13      	ldr	r3, [pc, #76]	@ (8005b3c <prvCheckForValidListAndQueue+0x6c>)
 8005af0:	4a10      	ldr	r2, [pc, #64]	@ (8005b34 <prvCheckForValidListAndQueue+0x64>)
 8005af2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005af4:	4b12      	ldr	r3, [pc, #72]	@ (8005b40 <prvCheckForValidListAndQueue+0x70>)
 8005af6:	4a10      	ldr	r2, [pc, #64]	@ (8005b38 <prvCheckForValidListAndQueue+0x68>)
 8005af8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005afa:	2300      	movs	r3, #0
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	4b11      	ldr	r3, [pc, #68]	@ (8005b44 <prvCheckForValidListAndQueue+0x74>)
 8005b00:	4a11      	ldr	r2, [pc, #68]	@ (8005b48 <prvCheckForValidListAndQueue+0x78>)
 8005b02:	2110      	movs	r1, #16
 8005b04:	200a      	movs	r0, #10
 8005b06:	f7fe f823 	bl	8003b50 <xQueueGenericCreateStatic>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4a08      	ldr	r2, [pc, #32]	@ (8005b30 <prvCheckForValidListAndQueue+0x60>)
 8005b0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b10:	4b07      	ldr	r3, [pc, #28]	@ (8005b30 <prvCheckForValidListAndQueue+0x60>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b18:	4b05      	ldr	r3, [pc, #20]	@ (8005b30 <prvCheckForValidListAndQueue+0x60>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	490b      	ldr	r1, [pc, #44]	@ (8005b4c <prvCheckForValidListAndQueue+0x7c>)
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe fc48 	bl	80043b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b24:	f7fd feba 	bl	800389c <vPortExitCritical>
}
 8005b28:	bf00      	nop
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	24004adc 	.word	0x24004adc
 8005b34:	24004aac 	.word	0x24004aac
 8005b38:	24004ac0 	.word	0x24004ac0
 8005b3c:	24004ad4 	.word	0x24004ad4
 8005b40:	24004ad8 	.word	0x24004ad8
 8005b44:	24004b88 	.word	0x24004b88
 8005b48:	24004ae8 	.word	0x24004ae8
 8005b4c:	080099a4 	.word	0x080099a4

08005b50 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	605a      	str	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	601a      	str	r2, [r3, #0]
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	601a      	str	r2, [r3, #0]
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff ffdd 	bl	8005b72 <metal_list_add_before>
}
 8005bb8:	bf00      	nop
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6852      	ldr	r2, [r2, #4]
 8005bd0:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	605a      	str	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	601a      	str	r2, [r3, #0]
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f002 f848 	bl	8007c98 <metal_machine_cache_flush>
}
 8005c08:	bf00      	nop
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f002 f846 	bl	8007cae <metal_machine_cache_invalidate>
}
 8005c22:	bf00      	nop
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff ffdd 	bl	8005bf6 <__metal_cache_flush>
}
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7ff ffdd 	bl	8005c10 <__metal_cache_invalidate>
}
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d008      	beq.n	8005c80 <metal_bus_register+0x20>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <metal_bus_register+0x20>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d102      	bne.n	8005c86 <metal_bus_register+0x26>
		return -EINVAL;
 8005c80:	f06f 0315 	mvn.w	r3, #21
 8005c84:	e026      	b.n	8005cd4 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 f855 	bl	8005d3c <metal_bus_find>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <metal_bus_register+0x3e>
		return -EEXIST;
 8005c98:	f06f 0310 	mvn.w	r3, #16
 8005c9c:	e01a      	b.n	8005cd4 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	331c      	adds	r3, #28
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff ff54 	bl	8005b50 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3324      	adds	r3, #36	@ 0x24
 8005cac:	4619      	mov	r1, r3
 8005cae:	480b      	ldr	r0, [pc, #44]	@ (8005cdc <metal_bus_register+0x7c>)
 8005cb0:	f7ff ff79 	bl	8005ba6 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8005cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce0 <metal_bus_register+0x80>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b06      	cmp	r3, #6
 8005cba:	d90a      	bls.n	8005cd2 <metal_bus_register+0x72>
 8005cbc:	4b08      	ldr	r3, [pc, #32]	@ (8005ce0 <metal_bus_register+0x80>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d006      	beq.n	8005cd2 <metal_bus_register+0x72>
 8005cc4:	4b06      	ldr	r3, [pc, #24]	@ (8005ce0 <metal_bus_register+0x80>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	4905      	ldr	r1, [pc, #20]	@ (8005ce4 <metal_bus_register+0x84>)
 8005cce:	2007      	movs	r0, #7
 8005cd0:	4798      	blx	r3
	return 0;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	24004be0 	.word	0x24004be0
 8005ce0:	24004bd8 	.word	0x24004bd8
 8005ce4:	080099ac 	.word	0x080099ac

08005ce8 <metal_bus_unregister>:

int metal_bus_unregister(struct metal_bus *bus)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	metal_list_del(&bus->node);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3324      	adds	r3, #36	@ 0x24
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff ff63 	bl	8005bc0 <metal_list_del>
	if (bus->ops.bus_close)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <metal_bus_unregister+0x22>
		bus->ops.bus_close(bus);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d34 <metal_bus_unregister+0x4c>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b06      	cmp	r3, #6
 8005d10:	d90a      	bls.n	8005d28 <metal_bus_unregister+0x40>
 8005d12:	4b08      	ldr	r3, [pc, #32]	@ (8005d34 <metal_bus_unregister+0x4c>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d006      	beq.n	8005d28 <metal_bus_unregister+0x40>
 8005d1a:	4b06      	ldr	r3, [pc, #24]	@ (8005d34 <metal_bus_unregister+0x4c>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	4905      	ldr	r1, [pc, #20]	@ (8005d38 <metal_bus_unregister+0x50>)
 8005d24:	2007      	movs	r0, #7
 8005d26:	4798      	blx	r3
	return 0;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	24004bd8 	.word	0x24004bd8
 8005d38:	080099c0 	.word	0x080099c0

08005d3c <metal_bus_find>:

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8005d46:	4b13      	ldr	r3, [pc, #76]	@ (8005d94 <metal_bus_find+0x58>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	e017      	b.n	8005d7e <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3b24      	subs	r3, #36	@ 0x24
 8005d52:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fa fac0 	bl	80002e0 <strcmp>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d107      	bne.n	8005d76 <metal_bus_find+0x3a>
			continue;
		if (result)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <metal_bus_find+0x36>
			*result = bus;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	601a      	str	r2, [r3, #0]
		return 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e009      	b.n	8005d8a <metal_bus_find+0x4e>
			continue;
 8005d76:	bf00      	nop
	metal_list_for_each(&_metal.common.bus_list, node) {
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4a05      	ldr	r2, [pc, #20]	@ (8005d98 <metal_bus_find+0x5c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d1e3      	bne.n	8005d4e <metal_bus_find+0x12>
	}
	return -ENOENT;
 8005d86:	f06f 0301 	mvn.w	r3, #1
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	24004bd8 	.word	0x24004bd8
 8005d98:	24004be0 	.word	0x24004be0

08005d9c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <metal_device_open+0x2e>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <metal_device_open+0x2e>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d006      	beq.n	8005dca <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <metal_device_open+0x2e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d102      	bne.n	8005dd0 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8005dca:	f06f 0315 	mvn.w	r3, #21
 8005dce:	e01f      	b.n	8005e10 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8005dd0:	f107 0310 	add.w	r3, r7, #16
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f7ff ffb0 	bl	8005d3c <metal_bus_find>
 8005ddc:	6178      	str	r0, [r7, #20]
	if (error)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <metal_device_open+0x4c>
		return error;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	e013      	b.n	8005e10 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <metal_device_open+0x5a>
		return -ENODEV;
 8005df0:	f06f 0312 	mvn.w	r3, #18
 8005df4:	e00c      	b.n	8005e10 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	6938      	ldr	r0, [r7, #16]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	4798      	blx	r3
 8005e02:	6178      	str	r0, [r7, #20]
	if (error)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <metal_device_open+0x72>
		return error;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	e000      	b.n	8005e10 <metal_device_open+0x74>

	return 0;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d008      	beq.n	8005e3a <metal_register_generic_device+0x22>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d902      	bls.n	8005e40 <metal_register_generic_device+0x28>
		return -EINVAL;
 8005e3a:	f06f 0315 	mvn.w	r3, #21
 8005e3e:	e009      	b.n	8005e54 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a06      	ldr	r2, [pc, #24]	@ (8005e5c <metal_register_generic_device+0x44>)
 8005e44:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	336c      	adds	r3, #108	@ 0x6c
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4804      	ldr	r0, [pc, #16]	@ (8005e60 <metal_register_generic_device+0x48>)
 8005e4e:	f7ff feaa 	bl	8005ba6 <metal_list_add_tail>
			    &device->node);
	return 0;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	24000028 	.word	0x24000028
 8005e60:	24004bf0 	.word	0x24004bf0

08005e64 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8005e70:	4b12      	ldr	r3, [pc, #72]	@ (8005ebc <metal_generic_dev_open+0x58>)
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	e017      	b.n	8005ea8 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	3b6c      	subs	r3, #108	@ 0x6c
 8005e7c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fa fa2b 	bl	80002e0 <strcmp>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d107      	bne.n	8005ea0 <metal_generic_dev_open+0x3c>
			continue;
		*device = dev;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8005e96:	6938      	ldr	r0, [r7, #16]
 8005e98:	f000 f890 	bl	8005fbc <metal_generic_dev_sys_open>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	e009      	b.n	8005eb4 <metal_generic_dev_open+0x50>
			continue;
 8005ea0:	bf00      	nop
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	4a05      	ldr	r2, [pc, #20]	@ (8005ec0 <metal_generic_dev_open+0x5c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d1e3      	bne.n	8005e78 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8005eb0:	f06f 0312 	mvn.w	r3, #18
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	24004bd8 	.word	0x24004bd8
 8005ec0:	24004bf0 	.word	0x24004bf0

08005ec4 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d009      	beq.n	8005eee <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8005eda:	6a3a      	ldr	r2, [r7, #32]
 8005edc:	4613      	mov	r3, r2
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005eea:	f003 f800 	bl	8008eee <memcpy>
	for (i = 0; i < nents_in; i++) {
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	e02f      	b.n	8005f54 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d114      	bne.n	8005f24 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4613      	mov	r3, r2
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	4413      	add	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	461a      	mov	r2, r3
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	4413      	add	r3, r2
 8005f0a:	6818      	ldr	r0, [r3, #0]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	461a      	mov	r2, r3
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	4413      	add	r3, r2
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	f7ff fe83 	bl	8005c2a <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4613      	mov	r3, r2
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	4413      	add	r3, r2
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	461a      	mov	r2, r3
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	4413      	add	r3, r2
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	f7ff fe7b 	bl	8005c44 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	3301      	adds	r3, #1
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	dbcb      	blt.n	8005ef4 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b086      	sub	sp, #24
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]
 8005f72:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8005f74:	2300      	movs	r3, #0
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e017      	b.n	8005faa <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	461a      	mov	r2, r3
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	4413      	add	r3, r2
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	461a      	mov	r2, r3
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	f7ff fe50 	bl	8005c44 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	dbe3      	blt.n	8005f7a <metal_generic_dev_dma_unmap+0x14>
	}
}
 8005fb2:	bf00      	nop
 8005fb4:	bf00      	nop
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e013      	b.n	8005ff2 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	4413      	add	r3, r2
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	4413      	add	r3, r2
 8005fda:	3304      	adds	r3, #4
 8005fdc:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8005fe6:	68b8      	ldr	r0, [r7, #8]
 8005fe8:	f000 f828 	bl	800603c <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d3e6      	bcc.n	8005fca <metal_generic_dev_sys_open+0xe>
 8005ffc:	e000      	b.n	8006000 <metal_generic_dev_sys_open+0x44>
			break;
 8005ffe:	bf00      	nop
	}

	return 0;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8006014:	4803      	ldr	r0, [pc, #12]	@ (8006024 <metal_sys_init+0x18>)
 8006016:	f7ff fe23 	bl	8005c60 <metal_bus_register>
	return 0;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	24000028 	.word	0x24000028

08006028 <metal_sys_finish>:

void metal_sys_finish(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
	metal_bus_unregister(&metal_generic_bus);
 800602c:	4802      	ldr	r0, [pc, #8]	@ (8006038 <metal_sys_finish+0x10>)
 800602e:	f7ff fe5b 	bl	8005ce8 <metal_bus_unregister>
}
 8006032:	bf00      	nop
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	24000028 	.word	0x24000028

0800603c <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	613b      	str	r3, [r7, #16]
	if (psize) {
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d02c      	beq.n	80060b0 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
 800606e:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e013      	b.n	800609e <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	6819      	ldr	r1, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f001 fe1b 	bl	8007cc4 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4413      	add	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3301      	adds	r3, #1
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	fa22 f303 	lsr.w	r3, r2, r3
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d9e2      	bls.n	8006076 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 80060b0:	bf00      	nop
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <metal_list_init>:
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	605a      	str	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	601a      	str	r2, [r3, #0]
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
	...

080060dc <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
	int error = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 80060e8:	2220      	movs	r2, #32
 80060ea:	2100      	movs	r1, #0
 80060ec:	4810      	ldr	r0, [pc, #64]	@ (8006130 <metal_init+0x54>)
 80060ee:	f002 fdf8 	bl	8008ce2 <memset>

	_metal.common.log_handler   = params->log_handler;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006130 <metal_init+0x54>)
 80060f8:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	791a      	ldrb	r2, [r3, #4]
 80060fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006130 <metal_init+0x54>)
 8006100:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8006102:	480c      	ldr	r0, [pc, #48]	@ (8006134 <metal_init+0x58>)
 8006104:	f7ff ffd8 	bl	80060b8 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8006108:	480b      	ldr	r0, [pc, #44]	@ (8006138 <metal_init+0x5c>)
 800610a:	f7ff ffd5 	bl	80060b8 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 800610e:	480b      	ldr	r0, [pc, #44]	@ (800613c <metal_init+0x60>)
 8006110:	f7ff ffd2 	bl	80060b8 <metal_list_init>

	error = metal_sys_init(params);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ff79 	bl	800600c <metal_sys_init>
 800611a:	60f8      	str	r0, [r7, #12]
	if (error)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <metal_init+0x4a>
		return error;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	e000      	b.n	8006128 <metal_init+0x4c>

	return error;
 8006126:	68fb      	ldr	r3, [r7, #12]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	24004bd8 	.word	0x24004bd8
 8006134:	24004be0 	.word	0x24004be0
 8006138:	24004be8 	.word	0x24004be8
 800613c:	24004bf0 	.word	0x24004bf0

08006140 <metal_finish>:

void metal_finish(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
	metal_sys_finish();
 8006144:	f7ff ff70 	bl	8006028 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
 8006148:	2220      	movs	r2, #32
 800614a:	2100      	movs	r1, #0
 800614c:	4802      	ldr	r0, [pc, #8]	@ (8006158 <metal_finish+0x18>)
 800614e:	f002 fdc8 	bl	8008ce2 <memset>
}
 8006152:	bf00      	nop
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	24004bd8 	.word	0x24004bd8

0800615c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616e:	d009      	beq.n	8006184 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d804      	bhi.n	8006184 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681a      	ldr	r2, [r3, #0]
		: NULL);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	4413      	add	r3, r2
 8006182:	e000      	b.n	8006186 <metal_io_virt+0x2a>
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8006192:	b5b0      	push	{r4, r5, r7, lr}
 8006194:	b08a      	sub	sp, #40	@ 0x28
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
 800619e:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 80061a0:	f107 0310 	add.w	r3, r7, #16
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	605a      	str	r2, [r3, #4]
 80061aa:	609a      	str	r2, [r3, #8]
 80061ac:	60da      	str	r2, [r3, #12]
 80061ae:	611a      	str	r2, [r3, #16]
 80061b0:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	605a      	str	r2, [r3, #4]
	io->size = size;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061c8:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 80061ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061cc:	2b1f      	cmp	r3, #31
 80061ce:	d904      	bls.n	80061da <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f04f 32ff 	mov.w	r2, #4294967295
 80061d6:	611a      	str	r2, [r3, #16]
 80061d8:	e006      	b.n	80061e8 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 80061da:	2201      	movs	r2, #1
 80061dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061de:	fa02 f303 	lsl.w	r3, r2, r3
 80061e2:	1e5a      	subs	r2, r3, #1
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80061ec:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 80061ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00b      	beq.n	800620c <metal_io_init+0x7a>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061f8:	f103 0418 	add.w	r4, r3, #24
 80061fc:	4615      	mov	r5, r2
 80061fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006202:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006206:	e884 0003 	stmia.w	r4, {r0, r1}
 800620a:	e00a      	b.n	8006222 <metal_io_init+0x90>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f103 0418 	add.w	r4, r3, #24
 8006212:	f107 0510 	add.w	r5, r7, #16
 8006216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800621a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800621e:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff ff0a 	bl	800603c <metal_sys_io_mem_map>
}
 8006228:	bf00      	nop
 800622a:	3728      	adds	r7, #40	@ 0x28
 800622c:	46bd      	mov	sp, r7
 800622e:	bdb0      	pop	{r4, r5, r7, pc}

08006230 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8006230:	b590      	push	{r4, r7, lr}
 8006232:	b08b      	sub	sp, #44	@ 0x2c
 8006234:	af02      	add	r7, sp, #8
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7ff ff8b 	bl	800615c <metal_io_virt>
 8006246:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	429a      	cmp	r2, r3
 8006254:	d902      	bls.n	800625c <metal_io_block_read+0x2c>
		return -ERANGE;
 8006256:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 800625a:	e05c      	b.n	8006316 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	441a      	add	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	429a      	cmp	r2, r3
 8006268:	d904      	bls.n	8006274 <metal_io_block_read+0x44>
		len = io->size - offset;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	603b      	str	r3, [r7, #0]
	retlen = len;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a1c      	ldr	r4, [r3, #32]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	2305      	movs	r3, #5
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	47a0      	blx	r4
 8006292:	6178      	str	r0, [r7, #20]
 8006294:	e03e      	b.n	8006314 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8006296:	f3bf 8f5b 	dmb	ish
		while ( len && (
 800629a:	e00c      	b.n	80062b6 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	701a      	strb	r2, [r3, #0]
			dest++;
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	3301      	adds	r3, #1
 80062a8:	61bb      	str	r3, [r7, #24]
			ptr++;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	3301      	adds	r3, #1
 80062ae:	61fb      	str	r3, [r7, #28]
			len--;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	603b      	str	r3, [r7, #0]
		while ( len && (
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d017      	beq.n	80062ec <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1ea      	bne.n	800629c <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e5      	bne.n	800629c <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80062d0:	e00c      	b.n	80062ec <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	3304      	adds	r3, #4
 80062de:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	3304      	adds	r3, #4
 80062e4:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	3b04      	subs	r3, #4
 80062ea:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	dcef      	bgt.n	80062d2 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 80062f2:	e00c      	b.n	800630e <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	3301      	adds	r3, #1
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	3301      	adds	r3, #1
 8006306:	61fb      	str	r3, [r7, #28]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	3b01      	subs	r3, #1
 800630c:	603b      	str	r3, [r7, #0]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1ef      	bne.n	80062f4 <metal_io_block_read+0xc4>
	}
	return retlen;
 8006314:	697b      	ldr	r3, [r7, #20]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3724      	adds	r7, #36	@ 0x24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd90      	pop	{r4, r7, pc}

0800631e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 800631e:	b590      	push	{r4, r7, lr}
 8006320:	b08b      	sub	sp, #44	@ 0x2c
 8006322:	af02      	add	r7, sp, #8
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	607a      	str	r2, [r7, #4]
 800632a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 800632c:	68b9      	ldr	r1, [r7, #8]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f7ff ff14 	bl	800615c <metal_io_virt>
 8006334:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	429a      	cmp	r2, r3
 8006342:	d902      	bls.n	800634a <metal_io_block_write+0x2c>
		return -ERANGE;
 8006344:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8006348:	e05b      	b.n	8006402 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	441a      	add	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	429a      	cmp	r2, r3
 8006356:	d904      	bls.n	8006362 <metal_io_block_write+0x44>
		len = io->size - offset;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	603b      	str	r3, [r7, #0]
	retlen = len;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	2b00      	cmp	r3, #0
 800636c:	d017      	beq.n	800639e <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	2305      	movs	r3, #5
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	68b9      	ldr	r1, [r7, #8]
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	47a0      	blx	r4
 8006380:	6178      	str	r0, [r7, #20]
 8006382:	e03d      	b.n	8006400 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	701a      	strb	r2, [r3, #0]
			ptr++;
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	3301      	adds	r3, #1
 8006390:	61fb      	str	r3, [r7, #28]
			source++;
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	3301      	adds	r3, #1
 8006396:	61bb      	str	r3, [r7, #24]
			len--;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	3b01      	subs	r3, #1
 800639c:	603b      	str	r3, [r7, #0]
		while ( len && (
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d017      	beq.n	80063d4 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1ea      	bne.n	8006384 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e5      	bne.n	8006384 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80063b8:	e00c      	b.n	80063d4 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	3304      	adds	r3, #4
 80063c6:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	3304      	adds	r3, #4
 80063cc:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	3b04      	subs	r3, #4
 80063d2:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	dcef      	bgt.n	80063ba <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 80063da:	e00c      	b.n	80063f6 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	3301      	adds	r3, #1
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	3301      	adds	r3, #1
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	603b      	str	r3, [r7, #0]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1ef      	bne.n	80063dc <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 80063fc:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8006400:	697b      	ldr	r3, [r7, #20]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3724      	adds	r7, #36	@ 0x24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd90      	pop	{r4, r7, pc}

0800640a <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 800640a:	b590      	push	{r4, r7, lr}
 800640c:	b08b      	sub	sp, #44	@ 0x2c
 800640e:	af02      	add	r7, sp, #8
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	4613      	mov	r3, r2
 8006418:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f7ff fe9d 	bl	800615c <metal_io_virt>
 8006422:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	429a      	cmp	r2, r3
 8006430:	d902      	bls.n	8006438 <metal_io_block_set+0x2e>
		return -ERANGE;
 8006432:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8006436:	e05d      	b.n	80064f4 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	441a      	add	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	429a      	cmp	r2, r3
 8006444:	d904      	bls.n	8006450 <metal_io_block_set+0x46>
		len = io->size - offset;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	689a      	ldr	r2, [r3, #8]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	603b      	str	r3, [r7, #0]
	retlen = len;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006458:	2b00      	cmp	r3, #0
 800645a:	d009      	beq.n	8006470 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006460:	79fa      	ldrb	r2, [r7, #7]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	2305      	movs	r3, #5
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	47a0      	blx	r4
 800646e:	e040      	b.n	80064f2 <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8006474:	2301      	movs	r3, #1
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e00a      	b.n	8006490 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 800647a:	79fa      	ldrb	r2, [r7, #7]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	fa02 f303 	lsl.w	r3, r2, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	4313      	orrs	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	3301      	adds	r3, #1
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b03      	cmp	r3, #3
 8006494:	d9f1      	bls.n	800647a <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8006496:	e008      	b.n	80064aa <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	79fa      	ldrb	r2, [r7, #7]
 800649c:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	3301      	adds	r3, #1
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	603b      	str	r3, [r7, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00e      	beq.n	80064ce <metal_io_block_set+0xc4>
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1ee      	bne.n	8006498 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80064ba:	e008      	b.n	80064ce <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	3304      	adds	r3, #4
 80064c6:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	3b04      	subs	r3, #4
 80064cc:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	dcf3      	bgt.n	80064bc <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 80064d4:	e008      	b.n	80064e8 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	79fa      	ldrb	r2, [r7, #7]
 80064da:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	3301      	adds	r3, #1
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	3b01      	subs	r3, #1
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f3      	bne.n	80064d6 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 80064ee:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 80064f2:	693b      	ldr	r3, [r7, #16]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3724      	adds	r7, #36	@ 0x24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd90      	pop	{r4, r7, pc}

080064fc <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 80064fc:	b40e      	push	{r1, r2, r3}
 80064fe:	b480      	push	{r7}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	4603      	mov	r3, r0
 8006506:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	b003      	add	sp, #12
 8006514:	4770      	bx	lr

08006516 <metal_io_virt>:
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d009      	beq.n	800653e <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d804      	bhi.n	800653e <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	4413      	add	r3, r2
 800653c:	e000      	b.n	8006540 <metal_io_virt+0x2a>
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	429a      	cmp	r2, r3
 8006568:	d201      	bcs.n	800656e <metal_io_virt_to_offset+0x22>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	e001      	b.n	8006572 <metal_io_virt_to_offset+0x26>
 800656e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
	...

08006580 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8006580:	b5b0      	push	{r4, r5, r7, lr}
 8006582:	b08c      	sub	sp, #48	@ 0x30
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	4613      	mov	r3, r2
 800658e:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f7ff ffbf 	bl	8006516 <metal_io_virt>
 8006598:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	699c      	ldr	r4, [r3, #24]
 80065a6:	79fa      	ldrb	r2, [r7, #7]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68b9      	ldr	r1, [r7, #8]
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	47a0      	blx	r4
 80065b0:	4604      	mov	r4, r0
 80065b2:	460d      	mov	r5, r1
 80065b4:	e059      	b.n	800666a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 80065b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d012      	beq.n	80065e2 <metal_io_read+0x62>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d10f      	bne.n	80065e2 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 80065c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c8:	f3bf 8f5b 	dmb	ish
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f3bf 8f5b 	dmb	ish
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	76fb      	strb	r3, [r7, #27]
 80065d6:	7efb      	ldrb	r3, [r7, #27]
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2200      	movs	r2, #0
 80065dc:	461c      	mov	r4, r3
 80065de:	4615      	mov	r5, r2
 80065e0:	e043      	b.n	800666a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 80065e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d012      	beq.n	800660e <metal_io_read+0x8e>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d10f      	bne.n	800660e <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 80065ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	f3bf 8f5b 	dmb	ish
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	f3bf 8f5b 	dmb	ish
 80065fe:	b29b      	uxth	r3, r3
 8006600:	833b      	strh	r3, [r7, #24]
 8006602:	8b3b      	ldrh	r3, [r7, #24]
 8006604:	b29b      	uxth	r3, r3
 8006606:	2200      	movs	r2, #0
 8006608:	461c      	mov	r4, r3
 800660a:	4615      	mov	r5, r2
 800660c:	e02d      	b.n	800666a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 800660e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006610:	2b00      	cmp	r3, #0
 8006612:	d010      	beq.n	8006636 <metal_io_read+0xb6>
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b04      	cmp	r3, #4
 8006618:	d10d      	bne.n	8006636 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 800661a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661c:	623b      	str	r3, [r7, #32]
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	f3bf 8f5b 	dmb	ish
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f3bf 8f5b 	dmb	ish
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	2200      	movs	r2, #0
 8006630:	461c      	mov	r4, r3
 8006632:	4615      	mov	r5, r2
 8006634:	e019      	b.n	800666a <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 8006636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006638:	2b00      	cmp	r3, #0
 800663a:	d010      	beq.n	800665e <metal_io_read+0xde>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b04      	cmp	r3, #4
 8006640:	d10d      	bne.n	800665e <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8006642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	f3bf 8f5b 	dmb	ish
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f3bf 8f5b 	dmb	ish
 8006652:	613b      	str	r3, [r7, #16]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2200      	movs	r2, #0
 8006658:	461c      	mov	r4, r3
 800665a:	4615      	mov	r5, r2
 800665c:	e005      	b.n	800666a <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 800665e:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <metal_io_read+0xf8>)
 8006660:	4a06      	ldr	r2, [pc, #24]	@ (800667c <metal_io_read+0xfc>)
 8006662:	21f0      	movs	r1, #240	@ 0xf0
 8006664:	4806      	ldr	r0, [pc, #24]	@ (8006680 <metal_io_read+0x100>)
 8006666:	f002 f949 	bl	80088fc <__assert_func>
	return 0; /* quiet compiler */
}
 800666a:	4622      	mov	r2, r4
 800666c:	462b      	mov	r3, r5
 800666e:	4610      	mov	r0, r2
 8006670:	4619      	mov	r1, r3
 8006672:	3730      	adds	r7, #48	@ 0x30
 8006674:	46bd      	mov	sp, r7
 8006676:	bdb0      	pop	{r4, r5, r7, pc}
 8006678:	08009a78 	.word	0x08009a78
 800667c:	08009c48 	.word	0x08009c48
 8006680:	08009a7c 	.word	0x08009a7c

08006684 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 8006684:	b590      	push	{r4, r7, lr}
 8006686:	b08f      	sub	sp, #60	@ 0x3c
 8006688:	af02      	add	r7, sp, #8
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f7ff ff3e 	bl	8006516 <metal_io_virt>
 800669a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (io->ops.write)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00c      	beq.n	80066be <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	69dc      	ldr	r4, [r3, #28]
 80066a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 80066bc:	e04e      	b.n	800675c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 80066be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00e      	beq.n	80066e2 <metal_io_write+0x5e>
 80066c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d10b      	bne.n	80066e2 <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 80066ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ce:	783b      	ldrb	r3, [r7, #0]
 80066d0:	76fb      	strb	r3, [r7, #27]
 80066d2:	7efa      	ldrb	r2, [r7, #27]
 80066d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d6:	f3bf 8f5b 	dmb	ish
 80066da:	701a      	strb	r2, [r3, #0]
 80066dc:	f3bf 8f5b 	dmb	ish
 80066e0:	e03c      	b.n	800675c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 80066e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00e      	beq.n	8006706 <metal_io_write+0x82>
 80066e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d10b      	bne.n	8006706 <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 80066ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80066f2:	883b      	ldrh	r3, [r7, #0]
 80066f4:	833b      	strh	r3, [r7, #24]
 80066f6:	8b3a      	ldrh	r2, [r7, #24]
 80066f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fa:	f3bf 8f5b 	dmb	ish
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	f3bf 8f5b 	dmb	ish
 8006704:	e02a      	b.n	800675c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 8006706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00e      	beq.n	800672a <metal_io_write+0xa6>
 800670c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800670e:	2b04      	cmp	r3, #4
 8006710:	d10b      	bne.n	800672a <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 8006712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006714:	623b      	str	r3, [r7, #32]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	f3bf 8f5b 	dmb	ish
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	f3bf 8f5b 	dmb	ish
 8006728:	e018      	b.n	800675c <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 800672a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00e      	beq.n	800674e <metal_io_write+0xca>
 8006730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006732:	2b04      	cmp	r3, #4
 8006734:	d10b      	bne.n	800674e <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 8006736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006738:	61fb      	str	r3, [r7, #28]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	f3bf 8f5b 	dmb	ish
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	f3bf 8f5b 	dmb	ish
 800674c:	e006      	b.n	800675c <metal_io_write+0xd8>
		metal_assert (0);
 800674e:	4b05      	ldr	r3, [pc, #20]	@ (8006764 <metal_io_write+0xe0>)
 8006750:	4a05      	ldr	r2, [pc, #20]	@ (8006768 <metal_io_write+0xe4>)
 8006752:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8006756:	4805      	ldr	r0, [pc, #20]	@ (800676c <metal_io_write+0xe8>)
 8006758:	f002 f8d0 	bl	80088fc <__assert_func>
}
 800675c:	bf00      	nop
 800675e:	3734      	adds	r7, #52	@ 0x34
 8006760:	46bd      	mov	sp, r7
 8006762:	bd90      	pop	{r4, r7, pc}
 8006764:	08009a78 	.word	0x08009a78
 8006768:	08009c58 	.word	0x08009c58
 800676c:	08009a7c 	.word	0x08009a7c

08006770 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f002 f8dd 	bl	8008938 <malloc>
 800677e:	4603      	mov	r3, r0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	free(ptr);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f002 f8d9 	bl	8008948 <free>
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3307      	adds	r3, #7
 80067aa:	00db      	lsls	r3, r3, #3
 80067ac:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff ffde 	bl	8006770 <metal_allocate_memory>
 80067b4:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d004      	beq.n	80067c6 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	2100      	movs	r1, #0
 80067c0:	68b8      	ldr	r0, [r7, #8]
 80067c2:	f002 fa8e 	bl	8008ce2 <memset>
	}

	return vqs;
 80067c6:	68bb      	ldr	r3, [r7, #8]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	891b      	ldrh	r3, [r3, #8]
 80067dc:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	3b18      	subs	r3, #24
 80067e8:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d905      	bls.n	8006800 <rproc_virtio_virtqueue_notify+0x30>
 80067f4:	4b0d      	ldr	r3, [pc, #52]	@ (800682c <rproc_virtio_virtqueue_notify+0x5c>)
 80067f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006830 <rproc_virtio_virtqueue_notify+0x60>)
 80067f8:	2133      	movs	r1, #51	@ 0x33
 80067fa:	480e      	ldr	r0, [pc, #56]	@ (8006834 <rproc_virtio_virtqueue_notify+0x64>)
 80067fc:	f002 f87e 	bl	80088fc <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	4613      	mov	r3, r2
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	4413      	add	r3, r2
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	440b      	add	r3, r1
 8006810:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	6810      	ldr	r0, [r2, #0]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	6912      	ldr	r2, [r2, #16]
 800681e:	4611      	mov	r1, r2
 8006820:	4798      	blx	r3
}
 8006822:	bf00      	nop
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	08009ac4 	.word	0x08009ac4
 8006830:	08009c28 	.word	0x08009c28
 8006834:	08009ae0 	.word	0x08009ae0

08006838 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3b18      	subs	r3, #24
 8006844:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3318      	adds	r3, #24
 8006856:	4619      	mov	r1, r3
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f7ff fe77 	bl	800654c <metal_io_virt_to_offset>
 800685e:	4601      	mov	r1, r0
 8006860:	2301      	movs	r3, #1
 8006862:	2205      	movs	r2, #5
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7ff fe8b 	bl	8006580 <metal_io_read>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4613      	mov	r3, r2
 8006870:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8006872:	7afb      	ldrb	r3, [r7, #11]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 800687c:	b5b0      	push	{r4, r5, r7, lr}
 800687e:	b088      	sub	sp, #32
 8006880:	af02      	add	r7, sp, #8
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3b18      	subs	r3, #24
 800688c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	3318      	adds	r3, #24
 800689e:	4619      	mov	r1, r3
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff fe53 	bl	800654c <metal_io_virt_to_offset>
 80068a6:	4601      	mov	r1, r0
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	2200      	movs	r2, #0
 80068ac:	461c      	mov	r4, r3
 80068ae:	4615      	mov	r5, r2
 80068b0:	2301      	movs	r3, #1
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	2305      	movs	r3, #5
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	4622      	mov	r2, r4
 80068ba:	462b      	mov	r3, r5
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f7ff fee1 	bl	8006684 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	6810      	ldr	r0, [r2, #0]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6812      	ldr	r2, [r2, #0]
 80068ce:	4611      	mov	r1, r2
 80068d0:	4798      	blx	r3
}
 80068d2:	bf00      	nop
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bdb0      	pop	{r4, r5, r7, pc}

080068da <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b086      	sub	sp, #24
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	3b18      	subs	r3, #24
 80068e6:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	330c      	adds	r3, #12
 80068f8:	4619      	mov	r1, r3
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f7ff fe26 	bl	800654c <metal_io_virt_to_offset>
 8006900:	4601      	mov	r1, r0
 8006902:	2304      	movs	r3, #4
 8006904:	2205      	movs	r2, #5
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff fe3a 	bl	8006580 <metal_io_read>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4613      	mov	r3, r2
 8006912:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8006914:	68bb      	ldr	r3, [r7, #8]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 800691e:	b5b0      	push	{r4, r5, r7, lr}
 8006920:	b088      	sub	sp, #32
 8006922:	af02      	add	r7, sp, #8
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3b18      	subs	r3, #24
 800692c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	330c      	adds	r3, #12
 800693e:	4619      	mov	r1, r3
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f7ff fe03 	bl	800654c <metal_io_virt_to_offset>
 8006946:	4601      	mov	r1, r0
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	461c      	mov	r4, r3
 800694e:	4615      	mov	r5, r2
 8006950:	2304      	movs	r3, #4
 8006952:	9301      	str	r3, [sp, #4]
 8006954:	2305      	movs	r3, #5
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	4622      	mov	r2, r4
 800695a:	462b      	mov	r3, r5
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f7ff fe91 	bl	8006684 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	6810      	ldr	r0, [r2, #0]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6812      	ldr	r2, [r2, #0]
 800696e:	4611      	mov	r1, r2
 8006970:	4798      	blx	r3
}
 8006972:	bf00      	nop
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bdb0      	pop	{r4, r5, r7, pc}

0800697a <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8006992:	b480      	push	{r7}
 8006994:	b085      	sub	sp, #20
 8006996:	af00      	add	r7, sp, #0
 8006998:	60f8      	str	r0, [r7, #12]
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
 800699e:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 80069a0:	bf00      	nop
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 80069ba:	bf00      	nop
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b082      	sub	sp, #8
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d103      	bne.n	80069de <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 80069d6:	2140      	movs	r1, #64	@ 0x40
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff ff4f 	bl	800687c <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08e      	sub	sp, #56	@ 0x38
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 80069fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fc:	7e5b      	ldrb	r3, [r3, #25]
 80069fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8006a00:	2050      	movs	r0, #80	@ 0x50
 8006a02:	f7ff feb5 	bl	8006770 <metal_allocate_memory>
 8006a06:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	e092      	b.n	8006b38 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8006a12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a14:	4613      	mov	r3, r2
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	4413      	add	r3, r2
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff fea7 	bl	8006770 <metal_allocate_memory>
 8006a22:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 8081 	beq.w	8006b2e <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8006a2c:	2250      	movs	r2, #80	@ 0x50
 8006a2e:	2100      	movs	r1, #0
 8006a30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a32:	f002 f956 	bl	8008ce2 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8006a36:	2218      	movs	r2, #24
 8006a38:	2100      	movs	r1, #0
 8006a3a:	6a38      	ldr	r0, [r7, #32]
 8006a3c:	f002 f951 	bl	8008ce2 <memset>
	vdev = &rpvdev->vdev;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	3318      	adds	r3, #24
 8006a44:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8006a46:	2300      	movs	r3, #0
 8006a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a4a:	e025      	b.n	8006a98 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8006a50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	3318      	adds	r3, #24
 8006a5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a5e:	4413      	add	r3, r2
 8006a60:	3304      	adds	r3, #4
 8006a62:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8006a70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a72:	f7ff fe94 	bl	800679e <virtqueue_allocate>
 8006a76:	6178      	str	r0, [r7, #20]
		if (!vq)
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d031      	beq.n	8006ae2 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 8006a7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a80:	4613      	mov	r3, r2
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	4413      	add	r3, r2
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 8006a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a94:	3301      	adds	r3, #1
 8006a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d3d5      	bcc.n	8006a4c <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aa4:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006aaa:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	6a3a      	ldr	r2, [r7, #32]
 8006ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ab6:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ace:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ad4:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	4a19      	ldr	r2, [pc, #100]	@ (8006b40 <rproc_virtio_create_vdev+0x158>)
 8006ada:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	3318      	adds	r3, #24
 8006ae0:	e02a      	b.n	8006b38 <rproc_virtio_create_vdev+0x150>
			goto err1;
 8006ae2:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae8:	e019      	b.n	8006b1e <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8006aea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006aec:	4613      	mov	r3, r2
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	4413      	add	r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	461a      	mov	r2, r3
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	4413      	add	r3, r2
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00b      	beq.n	8006b18 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8006b00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b02:	4613      	mov	r3, r2
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	4413      	add	r3, r2
 8006b08:	00db      	lsls	r3, r3, #3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	4413      	add	r3, r2
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff fe38 	bl	8006788 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8006b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d3e1      	bcc.n	8006aea <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8006b26:	6a38      	ldr	r0, [r7, #32]
 8006b28:	f7ff fe2e 	bl	8006788 <metal_free_memory>
 8006b2c:	e000      	b.n	8006b30 <rproc_virtio_create_vdev+0x148>
		goto err0;
 8006b2e:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8006b30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b32:	f7ff fe29 	bl	8006788 <metal_free_memory>
	return NULL;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3738      	adds	r7, #56	@ 0x38
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	08009c04 	.word	0x08009c04

08006b44 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b56:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d302      	bcc.n	8006b66 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8006b60:	f06f 0301 	mvn.w	r3, #1
 8006b64:	e019      	b.n	8006b9a <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	4413      	add	r3, r2
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	440b      	add	r3, r1
 8006b76:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	6a3a      	ldr	r2, [r7, #32]
 8006b7c:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b96:	609a      	str	r2, [r3, #8]

	return 0;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b086      	sub	sp, #24
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d102      	bne.n	8006bbc <rproc_virtio_notified+0x16>
		return -EINVAL;
 8006bb6:	f06f 0315 	mvn.w	r3, #21
 8006bba:	e02c      	b.n	8006c16 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d101      	bne.n	8006bca <rproc_virtio_notified+0x24>
		return 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	e025      	b.n	8006c16 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bce:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	e01a      	b.n	8006c0c <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	4413      	add	r3, r2
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	440b      	add	r3, r1
 8006be6:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d003      	beq.n	8006bfa <rproc_virtio_notified+0x54>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf8:	d105      	bne.n	8006c06 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8006c00:	68b8      	ldr	r0, [r7, #8]
 8006c02:	f001 fbca 	bl	800839a <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d3e0      	bcc.n	8006bd6 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff fe02 	bl	8006838 <rproc_virtio_get_status>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	f003 0304 	and.w	r3, r3, #4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d102      	bne.n	8006c48 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 8006c42:	e7f4      	b.n	8006c2e <rproc_virtio_wait_remote_ready+0x10>
		return;
 8006c44:	bf00      	nop
 8006c46:	e000      	b.n	8006c4a <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8006c48:	bf00      	nop
	}
}
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8006c58:	bf00      	nop
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	4611      	mov	r1, r2
 8006c60:	f3bf 8f5b 	dmb	ish
 8006c64:	e8d3 2f4f 	ldrexb	r2, [r3]
 8006c68:	e8c3 1f40 	strexb	r0, r1, [r3]
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d1f9      	bne.n	8006c64 <__metal_mutex_acquire+0x14>
 8006c70:	f3bf 8f5b 	dmb	ish
 8006c74:	b2d3      	uxtb	r3, r2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1ef      	bne.n	8006c5a <__metal_mutex_acquire+0xa>
		;
	}
}
 8006c7a:	bf00      	nop
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f3bf 8f5b 	dmb	ish
 8006c96:	2200      	movs	r2, #0
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	f3bf 8f5b 	dmb	ish
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff ffcc 	bl	8006c50 <__metal_mutex_acquire>
}
 8006cb8:	bf00      	nop
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff ffdd 	bl	8006c88 <__metal_mutex_release>
}
 8006cce:	bf00      	nop
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <metal_list_add_before>:
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	601a      	str	r2, [r3, #0]
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <metal_list_add_tail>:
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff ffdd 	bl	8006cd6 <metal_list_add_before>
}
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <metal_list_del>:
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6852      	ldr	r2, [r2, #4]
 8006d34:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	605a      	str	r2, [r3, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	009a      	lsls	r2, r3, #2
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	f002 021f 	and.w	r2, r2, #31
 8006d76:	2001      	movs	r0, #1
 8006d78:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4403      	add	r3, r0
 8006d82:	430a      	orrs	r2, r1
 8006d84:	601a      	str	r2, [r3, #0]
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	4413      	add	r3, r2
 8006da6:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	f003 031f 	and.w	r3, r3, #31
 8006dae:	2101      	movs	r1, #1
 8006db0:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8006db4:	4013      	ands	r3, r2
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	095b      	lsrs	r3, r3, #5
 8006dd0:	009a      	lsls	r2, r3, #2
 8006dd2:	6879      	ldr	r1, [r7, #4]
 8006dd4:	440a      	add	r2, r1
 8006dd6:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	f002 021f 	and.w	r2, r2, #31
 8006dde:	2001      	movs	r0, #1
 8006de0:	fa00 f202 	lsl.w	r2, r0, r2
 8006de4:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4403      	add	r3, r0
 8006dec:	400a      	ands	r2, r1
 8006dee:	601a      	str	r2, [r3, #0]
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7ff ffc2 	bl	8006d92 <metal_bitmap_is_bit_set>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	bf0c      	ite	eq
 8006e14:	2301      	moveq	r3, #1
 8006e16:	2300      	movne	r3, #0
 8006e18:	b2db      	uxtb	r3, r3
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b086      	sub	sp, #24
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	e002      	b.n	8006e3a <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	3301      	adds	r3, #1
 8006e38:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d207      	bcs.n	8006e52 <metal_bitmap_next_clear_bit+0x30>
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	4619      	mov	r1, r3
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff ffd8 	bl	8006dfc <metal_bitmap_is_bit_clear>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0f0      	beq.n	8006e34 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8006e52:	697b      	ldr	r3, [r7, #20]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <rpmsg_init_ept>:
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	68b9      	ldr	r1, [r7, #8]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 ff50 	bl	8008d16 <strncpy>
	ept->addr = src;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006e8e:	bf00      	nop
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b084      	sub	sp, #16
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8006ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea4:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	2100      	movs	r1, #0
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff ffb8 	bl	8006e22 <metal_bitmap_next_clear_bit>
 8006eb2:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d206      	bcs.n	8006eca <rpmsg_get_address+0x34>
		addr = nextbit;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7ff ff48 	bl	8006d5a <metal_bitmap_set_bit>
	}

	return addr;
 8006eca:	68fb      	ldr	r3, [r7, #12]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	da03      	bge.n	8006ef0 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7ff ff69 	bl	8006dc2 <metal_bitmap_clear_bit>
}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	da05      	bge.n	8006f18 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f7ff ff3f 	bl	8006d92 <metal_bitmap_is_bit_set>
 8006f14:	4603      	mov	r3, r0
 8006f16:	e000      	b.n	8006f1a <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8006f18:	4b02      	ldr	r3, [pc, #8]	@ (8006f24 <rpmsg_is_address_set+0x2c>)
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	fffff82d 	.word	0xfffff82d

08006f28 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	da05      	bge.n	8006f48 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f7ff ff0b 	bl	8006d5a <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8006f44:	2300      	movs	r3, #0
 8006f46:	e000      	b.n	8006f4a <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8006f48:	4b02      	ldr	r3, [pc, #8]	@ (8006f54 <rpmsg_set_address+0x2c>)
	}
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	fffff82d 	.word	0xfffff82d

08006f58 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8006f58:	b590      	push	{r4, r7, lr}
 8006f5a:	b089      	sub	sp, #36	@ 0x24
 8006f5c:	af02      	add	r7, sp, #8
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00a      	beq.n	8006f82 <rpmsg_send_offchannel_raw+0x2a>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d006      	beq.n	8006f82 <rpmsg_send_offchannel_raw+0x2a>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <rpmsg_send_offchannel_raw+0x2a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f80:	d101      	bne.n	8006f86 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8006f82:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb8 <rpmsg_send_offchannel_raw+0x60>)
 8006f84:	e014      	b.n	8006fb0 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00c      	beq.n	8006fae <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8006f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9a:	9301      	str	r3, [sp, #4]
 8006f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	6978      	ldr	r0, [r7, #20]
 8006fa8:	47a0      	blx	r4
 8006faa:	4603      	mov	r3, r0
 8006fac:	e000      	b.n	8006fb0 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8006fae:	4b02      	ldr	r3, [pc, #8]	@ (8006fb8 <rpmsg_send_offchannel_raw+0x60>)
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd90      	pop	{r4, r7, pc}
 8006fb8:	fffff82d 	.word	0xfffff82d

08006fbc <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b090      	sub	sp, #64	@ 0x40
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8006fd0:	6879      	ldr	r1, [r7, #4]
 8006fd2:	f107 030c 	add.w	r3, r7, #12
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f001 fe9c 	bl	8008d16 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006fe2:	f107 030c 	add.w	r3, r7, #12
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	9201      	str	r2, [sp, #4]
 8006fea:	2228      	movs	r2, #40	@ 0x28
 8006fec:	9200      	str	r2, [sp, #0]
 8006fee:	2235      	movs	r2, #53	@ 0x35
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff ffb1 	bl	8006f58 <rpmsg_send_offchannel_raw>
 8006ff6:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8006ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	da01      	bge.n	8007002 <rpmsg_send_ns_message+0x46>
		return ret;
 8006ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007000:	e000      	b.n	8007004 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3738      	adds	r7, #56	@ 0x38
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	61fb      	str	r3, [r7, #28]
 8007020:	e04b      	b.n	80070ba <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	3b34      	subs	r3, #52	@ 0x34
 800702a:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007032:	d006      	beq.n	8007042 <rpmsg_get_endpoint+0x36>
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	429a      	cmp	r2, r3
 800703c:	d101      	bne.n	8007042 <rpmsg_get_endpoint+0x36>
			return ept;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	e040      	b.n	80070c4 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	429a      	cmp	r2, r3
 800704a:	d106      	bne.n	800705a <rpmsg_get_endpoint+0x4e>
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	429a      	cmp	r2, r3
 8007054:	d101      	bne.n	800705a <rpmsg_get_endpoint+0x4e>
			return ept;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	e034      	b.n	80070c4 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00c      	beq.n	800707a <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2220      	movs	r2, #32
 8007064:	68b9      	ldr	r1, [r7, #8]
 8007066:	4618      	mov	r0, r3
 8007068:	f001 fe43 	bl	8008cf2 <strncmp>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	bf0c      	ite	eq
 8007072:	2301      	moveq	r3, #1
 8007074:	2300      	movne	r3, #0
 8007076:	b2db      	uxtb	r3, r3
 8007078:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d018      	beq.n	80070b2 <rpmsg_get_endpoint+0xa6>
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d015      	beq.n	80070b2 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708c:	d006      	beq.n	800709c <rpmsg_get_endpoint+0x90>
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d101      	bne.n	800709c <rpmsg_get_endpoint+0x90>
			return ept;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	e013      	b.n	80070c4 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a2:	d107      	bne.n	80070b4 <rpmsg_get_endpoint+0xa8>
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ac:	d102      	bne.n	80070b4 <rpmsg_get_endpoint+0xa8>
			return ept;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	e008      	b.n	80070c4 <rpmsg_get_endpoint+0xb8>
			continue;
 80070b2:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	69fa      	ldr	r2, [r7, #28]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d1af      	bne.n	8007022 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3720      	adds	r7, #32
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d016      	beq.n	8007108 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e8:	d008      	beq.n	80070fc <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80070f4:	461a      	mov	r2, r3
 80070f6:	2180      	movs	r1, #128	@ 0x80
 80070f8:	f7ff feec 	bl	8006ed4 <rpmsg_release_address>
	metal_list_del(&ept->node);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3334      	adds	r3, #52	@ 0x34
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff fe0f 	bl	8006d24 <metal_list_del>
 8007106:	e000      	b.n	800710a <rpmsg_unregister_endpoint+0x3e>
		return;
 8007108:	bf00      	nop
}
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	3334      	adds	r3, #52	@ 0x34
 8007126:	4619      	mov	r1, r3
 8007128:	4610      	mov	r0, r2
 800712a:	f7ff fdee 	bl	8006d0a <metal_list_add_tail>
	return RPMSG_SUCCESS;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af02      	add	r7, sp, #8
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	613b      	str	r3, [r7, #16]

	if (!ept)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8007150:	4b37      	ldr	r3, [pc, #220]	@ (8007230 <rpmsg_create_ept+0xf8>)
 8007152:	e068      	b.n	8007226 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	3358      	adds	r3, #88	@ 0x58
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff fda6 	bl	8006caa <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007164:	d018      	beq.n	8007198 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	3348      	adds	r3, #72	@ 0x48
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	2180      	movs	r1, #128	@ 0x80
 800716e:	4618      	mov	r0, r3
 8007170:	f7ff fec2 	bl	8006ef8 <rpmsg_is_address_set>
 8007174:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d107      	bne.n	800718c <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	3348      	adds	r3, #72	@ 0x48
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	2180      	movs	r1, #128	@ 0x80
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff fecf 	bl	8006f28 <rpmsg_set_address>
 800718a:	e00c      	b.n	80071a6 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2b00      	cmp	r3, #0
 8007190:	dd40      	ble.n	8007214 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8007192:	2300      	movs	r3, #0
 8007194:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8007196:	e040      	b.n	800721a <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	3348      	adds	r3, #72	@ 0x48
 800719c:	2180      	movs	r1, #128	@ 0x80
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff fe79 	bl	8006e96 <rpmsg_get_address>
 80071a4:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 80071a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	6879      	ldr	r1, [r7, #4]
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f7ff fe51 	bl	8006e5c <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 80071ba:	68f9      	ldr	r1, [r7, #12]
 80071bc:	68b8      	ldr	r0, [r7, #8]
 80071be:	f7ff ffa7 	bl	8007110 <rpmsg_register_endpoint>
 80071c2:	6178      	str	r0, [r7, #20]
	if (status < 0)
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	da06      	bge.n	80071d8 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	3348      	adds	r3, #72	@ 0x48
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	2180      	movs	r1, #128	@ 0x80
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff fe7e 	bl	8006ed4 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d11c      	bne.n	8007218 <rpmsg_create_ept+0xe0>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e6:	d117      	bne.n	8007218 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	3358      	adds	r3, #88	@ 0x58
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff fd67 	bl	8006cc0 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 80071f2:	2100      	movs	r1, #0
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f7ff fee1 	bl	8006fbc <rpmsg_send_ns_message>
 80071fa:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	3358      	adds	r3, #88	@ 0x58
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff fd52 	bl	8006caa <metal_mutex_acquire>
		if (status)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f7ff ff5d 	bl	80070cc <rpmsg_unregister_endpoint>
 8007212:	e002      	b.n	800721a <rpmsg_create_ept+0xe2>
			goto ret_status;
 8007214:	bf00      	nop
 8007216:	e000      	b.n	800721a <rpmsg_create_ept+0xe2>
	}

ret_status:
 8007218:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	3358      	adds	r3, #88	@ 0x58
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff fd4e 	bl	8006cc0 <metal_mutex_release>
	return status;
 8007224:	697b      	ldr	r3, [r7, #20]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	fffff82d 	.word	0xfffff82d

08007234 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d018      	beq.n	8007274 <rpmsg_destroy_ept+0x40>
		return;

	rdev = ept->rdev;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	60fb      	str	r3, [r7, #12]
	if (ept->addr != RPMSG_NS_EPT_ADDR)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724c:	2b35      	cmp	r3, #53	@ 0x35
 800724e:	d003      	beq.n	8007258 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
 8007250:	2101      	movs	r1, #1
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff feb2 	bl	8006fbc <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3358      	adds	r3, #88	@ 0x58
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff fd24 	bl	8006caa <metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7ff ff32 	bl	80070cc <rpmsg_unregister_endpoint>
	metal_mutex_release(&rdev->lock);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3358      	adds	r3, #88	@ 0x58
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff fd27 	bl	8006cc0 <metal_mutex_release>
 8007272:	e000      	b.n	8007276 <rpmsg_destroy_ept+0x42>
		return;
 8007274:	bf00      	nop
}
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <__metal_cache_invalidate>:
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fd10 	bl	8007cae <metal_machine_cache_invalidate>
}
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <metal_cache_invalidate>:
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff ffea 	bl	800727c <__metal_cache_invalidate>
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b082      	sub	sp, #8
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff ffee 	bl	80072b0 <__metal_sleep_usec>
 80072d4:	4603      	mov	r3, r0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <metal_list_init>:
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	605a      	str	r2, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	601a      	str	r2, [r3, #0]
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <metal_list_is_empty>:
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
	return list->next == list;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	429a      	cmp	r2, r3
 8007310:	bf0c      	ite	eq
 8007312:	2301      	moveq	r3, #1
 8007314:	2300      	movne	r3, #0
 8007316:	b2db      	uxtb	r3, r3
}
 8007318:	4618      	mov	r0, r3
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <metal_io_virt_to_offset>:
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	429a      	cmp	r2, r3
 8007340:	d201      	bcs.n	8007346 <metal_io_virt_to_offset+0x22>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	e001      	b.n	800734a <metal_io_virt_to_offset+0x26>
 8007346:	f04f 33ff 	mov.w	r3, #4294967295
}
 800734a:	4618      	mov	r0, r3
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <__metal_mutex_init>:
{
 8007356:	b480      	push	{r7}
 8007358:	b085      	sub	sp, #20
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	2300      	movs	r3, #0
 8007364:	60bb      	str	r3, [r7, #8]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	461a      	mov	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f3bf 8f5b 	dmb	ish
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	f3bf 8f5b 	dmb	ish
}
 8007376:	bf00      	nop
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <__metal_mutex_deinit>:
{
 8007382:	b480      	push	{r7}
 8007384:	b083      	sub	sp, #12
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
}
 800738a:	bf00      	nop
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <__metal_mutex_acquire>:
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800739e:	bf00      	nop
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	4611      	mov	r1, r2
 80073a6:	f3bf 8f5b 	dmb	ish
 80073aa:	e8d3 2f4f 	ldrexb	r2, [r3]
 80073ae:	e8c3 1f40 	strexb	r0, r1, [r3]
 80073b2:	2800      	cmp	r0, #0
 80073b4:	d1f9      	bne.n	80073aa <__metal_mutex_acquire+0x14>
 80073b6:	f3bf 8f5b 	dmb	ish
 80073ba:	b2d3      	uxtb	r3, r2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1ef      	bne.n	80073a0 <__metal_mutex_acquire+0xa>
}
 80073c0:	bf00      	nop
 80073c2:	bf00      	nop
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <__metal_mutex_release>:
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f3bf 8f5b 	dmb	ish
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
 80073e0:	f3bf 8f5b 	dmb	ish
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <metal_mutex_init>:
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff ffac 	bl	8007356 <__metal_mutex_init>
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <metal_mutex_deinit>:
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b082      	sub	sp, #8
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
	__metal_mutex_deinit(mutex);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff ffb7 	bl	8007382 <__metal_mutex_deinit>
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <metal_mutex_acquire>:
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff ffb6 	bl	8007396 <__metal_mutex_acquire>
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <metal_mutex_release>:
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7ff ffc7 	bl	80073ce <__metal_mutex_release>
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <rpmsg_init_ept>:
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2220      	movs	r2, #32
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	4618      	mov	r0, r3
 800745e:	f001 fc5a 	bl	8008d16 <strncpy>
	ept->addr = src;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	69fa      	ldr	r2, [r7, #28]
 8007478:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800748e:	699b      	ldr	r3, [r3, #24]
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80074b4:	78f9      	ldrb	r1, [r7, #3]
 80074b6:	4610      	mov	r0, r2
 80074b8:	4798      	blx	r3
}
 80074ba:	bf00      	nop
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b082      	sub	sp, #8
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074ce:	6a1b      	ldr	r3, [r3, #32]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80074d6:	4610      	mov	r0, r2
 80074d8:	4798      	blx	r3
 80074da:	4603      	mov	r3, r0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80074f8:	4610      	mov	r0, r2
 80074fa:	4798      	blx	r3
 80074fc:	4603      	mov	r3, r0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b086      	sub	sp, #24
 800750a:	af02      	add	r7, sp, #8
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
 8007512:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8007518:	68b9      	ldr	r1, [r7, #8]
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	f000 fc19 	bl	8007d58 <virtio_create_virtqueues>
 8007526:	4603      	mov	r3, r0
					callbacks);
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 800753a:	f04f 33ff 	mov.w	r3, #4294967295
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	2100      	movs	r1, #0
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff fd62 	bl	800700c <rpmsg_get_endpoint>
 8007548:	4603      	mov	r3, r0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8007552:	b480      	push	{r7}
 8007554:	b085      	sub	sp, #20
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	429a      	cmp	r2, r3
 8007564:	d901      	bls.n	800756a <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8007566:	2300      	movs	r3, #0
 8007568:	e00f      	b.n	800758a <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6899      	ldr	r1, [r3, #8]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	1acb      	subs	r3, r1, r3
 8007578:	4413      	add	r3, r2
 800757a:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	1ad2      	subs	r2, r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	605a      	str	r2, [r3, #4]

	return buffer;
 8007588:	68fb      	ldr	r3, [r7, #12]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8007596:	b480      	push	{r7}
 8007598:	b085      	sub	sp, #20
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
	if (!shpool)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d01d      	beq.n	80075e4 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f003 0303 	and.w	r3, r3, #3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d004      	beq.n	80075c2 <rpmsg_virtio_init_shm_pool+0x2c>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f023 0303 	bic.w	r3, r3, #3
 80075be:	3304      	adds	r3, #4
 80075c0:	e000      	b.n	80075c4 <rpmsg_virtio_init_shm_pool+0x2e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f003 0303 	and.w	r3, r3, #3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d004      	beq.n	80075dc <rpmsg_virtio_init_shm_pool+0x46>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f023 0303 	bic.w	r3, r3, #3
 80075d8:	3304      	adds	r3, #4
 80075da:	e000      	b.n	80075de <rpmsg_virtio_init_shm_pool+0x48>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	6053      	str	r3, [r2, #4]
 80075e2:	e000      	b.n	80075e6 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 80075e4:	bf00      	nop
}
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	@ 0x28
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
 80075fc:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff ff3f 	bl	8007482 <rpmsg_virtio_get_role>
 8007604:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10d      	bne.n	8007628 <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8007618:	f107 0114 	add.w	r1, r7, #20
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	2301      	movs	r3, #1
 8007622:	2200      	movs	r2, #0
 8007624:	f000 fce7 	bl	8007ff6 <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8007628:	bf00      	nop
 800762a:	3720      	adds	r7, #32
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	@ 0x28
 8007634:	af02      	add	r7, sp, #8
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
 800763c:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f7ff ff1f 	bl	8007482 <rpmsg_virtio_get_role>
 8007644:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10f      	bne.n	800766c <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8007658:	f107 0114 	add.w	r1, r7, #20
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	2301      	movs	r3, #1
 8007662:	2200      	movs	r2, #0
 8007664:	f000 fcc7 	bl	8007ff6 <virtqueue_add_buffer>
 8007668:	4603      	mov	r3, r0
 800766a:	e000      	b.n	800766e <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3720      	adds	r7, #32
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b086      	sub	sp, #24
 800767a:	af00      	add	r7, sp, #0
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f7ff fefd 	bl	8007482 <rpmsg_virtio_get_role>
 8007688:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800768a:	2300      	movs	r3, #0
 800768c:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d116      	bne.n	80076c2 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	68b9      	ldr	r1, [r7, #8]
 800769c:	4618      	mov	r0, r3
 800769e:	f000 fcee 	bl	800807e <virtqueue_get_buffer>
 80076a2:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10b      	bne.n	80076c2 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff ff4d 	bl	8007552 <rpmsg_virtio_shm_pool_get_buffer>
 80076b8:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076c0:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 80076c2:	697b      	ldr	r3, [r7, #20]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f7ff fed2 	bl	8007482 <rpmsg_virtio_get_role>
 80076de:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d107      	bne.n	80076fa <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fcc3 	bl	800807e <virtqueue_get_buffer>
 80076f8:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4619      	mov	r1, r3
 8007706:	6978      	ldr	r0, [r7, #20]
 8007708:	f7ff fdc5 	bl	8007296 <metal_cache_invalidate>
	}

	return data;
 800770c:	697b      	ldr	r3, [r7, #20]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff feaf 	bl	8007482 <rpmsg_virtio_get_role>
 8007724:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8007730:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8007734:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8007736:	68fb      	ldr	r3, [r7, #12]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b090      	sub	sp, #64	@ 0x40
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 800774e:	2300      	movs	r3, #0
 8007750:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned short idx;
	int tick_count = 0;
 8007752:	2300      	movs	r3, #0
 8007754:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	637b      	str	r3, [r7, #52]	@ 0x34

	status = rpmsg_virtio_get_status(rvdev);
 800775a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800775c:	f7ff feb1 	bl	80074c2 <rpmsg_virtio_get_status>
 8007760:	4603      	mov	r3, r0
 8007762:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8007764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 800776e:	4b46      	ldr	r3, [pc, #280]	@ (8007888 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8007770:	e086      	b.n	8007880 <rpmsg_virtio_send_offchannel_raw+0x140>
	}

	if (wait)
 8007772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8007778:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800777c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800777e:	e001      	b.n	8007784 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3358      	adds	r3, #88	@ 0x58
 8007788:	4618      	mov	r0, r3
 800778a:	f7ff fe47 	bl	800741c <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 800778e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007790:	f7ff ffc1 	bl	8007716 <_rpmsg_virtio_get_buffer_size>
 8007794:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (size <= avail_size)
 8007796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779a:	429a      	cmp	r2, r3
 800779c:	dc08      	bgt.n	80077b0 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 800779e:	f107 0216 	add.w	r2, r7, #22
 80077a2:	f107 0310 	add.w	r3, r7, #16
 80077a6:	4619      	mov	r1, r3
 80077a8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80077aa:	f7ff ff64 	bl	8007676 <rpmsg_virtio_get_tx_buffer>
 80077ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3358      	adds	r3, #88	@ 0x58
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff fe3c 	bl	8007432 <metal_mutex_release>
		if (buffer || !tick_count)
 80077ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10e      	bne.n	80077de <rpmsg_virtio_send_offchannel_raw+0x9e>
 80077c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00b      	beq.n	80077de <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 80077c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 80077cc:	4b2f      	ldr	r3, [pc, #188]	@ (800788c <rpmsg_virtio_send_offchannel_raw+0x14c>)
 80077ce:	e057      	b.n	8007880 <rpmsg_virtio_send_offchannel_raw+0x140>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 80077d0:	200a      	movs	r0, #10
 80077d2:	f7ff fd78 	bl	80072c6 <metal_sleep_usec>
		tick_count--;
 80077d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d8:	3b01      	subs	r3, #1
 80077da:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
 80077dc:	e7d2      	b.n	8007784 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 80077de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 80077e4:	4b2a      	ldr	r3, [pc, #168]	@ (8007890 <rpmsg_virtio_send_offchannel_raw+0x150>)
 80077e6:	e04b      	b.n	8007880 <rpmsg_virtio_send_offchannel_raw+0x140>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 80077f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
	rp_hdr.reserved = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 80077fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8007800:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007802:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007804:	f7ff fd8e 	bl	8007324 <metal_io_virt_to_offset>
 8007808:	4601      	mov	r1, r0
 800780a:	f107 0218 	add.w	r2, r7, #24
 800780e:	2310      	movs	r3, #16
 8007810:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007812:	f7fe fd84 	bl	800631e <metal_io_block_write>
 8007816:	6338      	str	r0, [r7, #48]	@ 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	2b10      	cmp	r3, #16
 800781c:	d001      	beq.n	8007822 <rpmsg_virtio_send_offchannel_raw+0xe2>
 800781e:	bf00      	nop
 8007820:	e7fd      	b.n	800781e <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8007822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007824:	3310      	adds	r3, #16
 8007826:	4619      	mov	r1, r3
 8007828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800782a:	f7ff fd7b 	bl	8007324 <metal_io_virt_to_offset>
 800782e:	4601      	mov	r1, r0
 8007830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007836:	f7fe fd72 	bl	800631e <metal_io_block_write>
 800783a:	6338      	str	r0, [r7, #48]	@ 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 800783c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800783e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007840:	429a      	cmp	r2, r3
 8007842:	d001      	beq.n	8007848 <rpmsg_virtio_send_offchannel_raw+0x108>
 8007844:	bf00      	nop
 8007846:	e7fd      	b.n	8007844 <rpmsg_virtio_send_offchannel_raw+0x104>
	metal_mutex_acquire(&rdev->lock);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3358      	adds	r3, #88	@ 0x58
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff fde5 	bl	800741c <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	8afb      	ldrh	r3, [r7, #22]
 8007856:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007858:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800785a:	f7ff fee9 	bl	8007630 <rpmsg_virtio_enqueue_buffer>
 800785e:	6338      	str	r0, [r7, #48]	@ 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8007860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <rpmsg_virtio_send_offchannel_raw+0x12a>
 8007866:	bf00      	nop
 8007868:	e7fd      	b.n	8007866 <rpmsg_virtio_send_offchannel_raw+0x126>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 800786a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fc7f 	bl	8008172 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3358      	adds	r3, #88	@ 0x58
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff fdda 	bl	8007432 <metal_mutex_release>

	return size;
 800787e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007880:	4618      	mov	r0, r3
 8007882:	3740      	adds	r7, #64	@ 0x40
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	fffff82c 	.word	0xfffff82c
 800788c:	fffff82b 	.word	0xfffff82b
 8007890:	fffff82e 	.word	0xfffff82e

08007894 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 80078a8:	b590      	push	{r4, r7, lr}
 80078aa:	b08d      	sub	sp, #52	@ 0x34
 80078ac:	af02      	add	r7, sp, #8
 80078ae:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ba:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	3358      	adds	r3, #88	@ 0x58
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff fda9 	bl	800741c <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 80078ca:	f107 020a 	add.w	r2, r7, #10
 80078ce:	f107 030c 	add.w	r3, r7, #12
 80078d2:	4619      	mov	r1, r3
 80078d4:	69f8      	ldr	r0, [r7, #28]
 80078d6:	f7ff fef9 	bl	80076cc <rpmsg_virtio_get_rx_buffer>
 80078da:	6278      	str	r0, [r7, #36]	@ 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	3358      	adds	r3, #88	@ 0x58
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7ff fda6 	bl	8007432 <metal_mutex_release>

	while (rp_hdr) {
 80078e6:	e04d      	b.n	8007984 <rpmsg_virtio_rx_callback+0xdc>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	3358      	adds	r3, #88	@ 0x58
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff fd95 	bl	800741c <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 80078f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	4619      	mov	r1, r3
 80078f8:	69b8      	ldr	r0, [r7, #24]
 80078fa:	f7ff fe19 	bl	8007530 <rpmsg_get_ept_from_addr>
 80078fe:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	3358      	adds	r3, #88	@ 0x58
 8007904:	4618      	mov	r0, r3
 8007906:	f7ff fd94 	bl	8007432 <metal_mutex_release>

		if (!ept)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d03d      	beq.n	800798c <rpmsg_virtio_rx_callback+0xe4>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007918:	d103      	bne.n	8007922 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 800792c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792e:	899b      	ldrh	r3, [r3, #12]
 8007930:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8007932:	4618      	mov	r0, r3
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	4613      	mov	r3, r2
 8007940:	4602      	mov	r2, r0
 8007942:	6978      	ldr	r0, [r7, #20]
 8007944:	47a0      	blx	r4
 8007946:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <rpmsg_virtio_rx_callback+0xaa>
 800794e:	bf00      	nop
 8007950:	e7fd      	b.n	800794e <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	3358      	adds	r3, #88	@ 0x58
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff fd60 	bl	800741c <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	897b      	ldrh	r3, [r7, #10]
 8007960:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007962:	69f8      	ldr	r0, [r7, #28]
 8007964:	f7ff fe44 	bl	80075f0 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8007968:	f107 020a 	add.w	r2, r7, #10
 800796c:	f107 030c 	add.w	r3, r7, #12
 8007970:	4619      	mov	r1, r3
 8007972:	69f8      	ldr	r0, [r7, #28]
 8007974:	f7ff feaa 	bl	80076cc <rpmsg_virtio_get_rx_buffer>
 8007978:	6278      	str	r0, [r7, #36]	@ 0x24
		metal_mutex_release(&rdev->lock);
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	3358      	adds	r3, #88	@ 0x58
 800797e:	4618      	mov	r0, r3
 8007980:	f7ff fd57 	bl	8007432 <metal_mutex_release>
	while (rp_hdr) {
 8007984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1ae      	bne.n	80078e8 <rpmsg_virtio_rx_callback+0x40>
 800798a:	e000      	b.n	800798e <rpmsg_virtio_rx_callback+0xe6>
			return;
 800798c:	bf00      	nop
	}
}
 800798e:	372c      	adds	r7, #44	@ 0x2c
 8007990:	46bd      	mov	sp, r7
 8007992:	bd90      	pop	{r4, r7, pc}

08007994 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b092      	sub	sp, #72	@ 0x48
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 80079a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079aa:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 80079ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b28      	cmp	r3, #40	@ 0x28
 80079ba:	d001      	beq.n	80079c0 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 80079bc:	2300      	movs	r3, #0
 80079be:	e057      	b.n	8007a70 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 80079c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
 80079c2:	4619      	mov	r1, r3
 80079c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80079c6:	f7ff fcad 	bl	8007324 <metal_io_virt_to_offset>
 80079ca:	4601      	mov	r1, r0
 80079cc:	f107 0210 	add.w	r2, r7, #16
 80079d0:	2320      	movs	r3, #32
 80079d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80079d4:	f7fe fc2c 	bl	8006230 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 80079d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 80079de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079e0:	3358      	adds	r3, #88	@ 0x58
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff fd1a 	bl	800741c <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 80079e8:	f107 0110 	add.w	r1, r7, #16
 80079ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ee:	f04f 32ff 	mov.w	r2, #4294967295
 80079f2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80079f4:	f7ff fb0a 	bl	800700c <rpmsg_get_endpoint>
 80079f8:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 80079fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d017      	beq.n	8007a36 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d003      	beq.n	8007a14 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a12:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
 8007a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a16:	3358      	adds	r3, #88	@ 0x58
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7ff fd0a 	bl	8007432 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d024      	beq.n	8007a6e <rpmsg_virtio_ns_callback+0xda>
 8007a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d020      	beq.n	8007a6e <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	4798      	blx	r3
 8007a34:	e01b      	b.n	8007a6e <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8007a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d110      	bne.n	8007a5e <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8007a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a3e:	3358      	adds	r3, #88	@ 0x58
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff fcf6 	bl	8007432 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8007a46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00f      	beq.n	8007a6e <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8007a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a52:	f107 0110 	add.w	r1, r7, #16
 8007a56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a58:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8007a5a:	4798      	blx	r3
 8007a5c:	e007      	b.n	8007a6e <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a62:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
 8007a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a66:	3358      	adds	r3, #88	@ 0x58
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff fce2 	bl	8007432 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3748      	adds	r7, #72	@ 0x48
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b094      	sub	sp, #80	@ 0x50
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	63bb      	str	r3, [r7, #56]	@ 0x38
	memset(rdev, 0, sizeof(*rdev));
 8007a8a:	2264      	movs	r2, #100	@ 0x64
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a90:	f001 f927 	bl	8008ce2 <memset>
	metal_mutex_init(&rdev->lock);
 8007a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a96:	3358      	adds	r3, #88	@ 0x58
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff fca9 	bl	80073f0 <metal_mutex_init>
	rvdev->vdev = vdev;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab2:	4a5d      	ldr	r2, [pc, #372]	@ (8007c28 <rpmsg_init_vdev+0x1b0>)
 8007ab4:	661a      	str	r2, [r3, #96]	@ 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f7ff fce3 	bl	8007482 <rpmsg_virtio_get_role>
 8007abc:	6378      	str	r0, [r7, #52]	@ 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8007abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d120      	bne.n	8007b06 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 8007ac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 8007aca:	4b58      	ldr	r3, [pc, #352]	@ (8007c2c <rpmsg_init_vdev+0x1b4>)
 8007acc:	e0a7      	b.n	8007c1e <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 8007ace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 8007ad6:	4b56      	ldr	r3, [pc, #344]	@ (8007c30 <rpmsg_init_vdev+0x1b8>)
 8007ad8:	e0a1      	b.n	8007c1e <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ade:	675a      	str	r2, [r3, #116]	@ 0x74

		vq_names[0] = "rx_vq";
 8007ae0:	4b54      	ldr	r3, [pc, #336]	@ (8007c34 <rpmsg_init_vdev+0x1bc>)
 8007ae2:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 8007ae4:	4b54      	ldr	r3, [pc, #336]	@ (8007c38 <rpmsg_init_vdev+0x1c0>)
 8007ae6:	627b      	str	r3, [r7, #36]	@ 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 8007ae8:	4b54      	ldr	r3, [pc, #336]	@ (8007c3c <rpmsg_init_vdev+0x1c4>)
 8007aea:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 8007aec:	4b54      	ldr	r3, [pc, #336]	@ (8007c40 <rpmsg_init_vdev+0x1c8>)
 8007aee:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	669a      	str	r2, [r3, #104]	@ 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afe:	3318      	adds	r3, #24
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	66da      	str	r2, [r3, #108]	@ 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	671a      	str	r2, [r3, #112]	@ 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8007b0c:	f107 0220 	add.w	r2, r7, #32
 8007b10:	f107 0318 	add.w	r3, r7, #24
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	4613      	mov	r3, r2
 8007b18:	2202      	movs	r2, #2
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f7ff fcf2 	bl	8007506 <rpmsg_virtio_create_virtqueues>
 8007b22:	6478      	str	r0, [r7, #68]	@ 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8007b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <rpmsg_init_vdev+0xb6>
		return status;
 8007b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b2c:	e077      	b.n	8007c1e <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8007b2e:	2300      	movs	r3, #0
 8007b30:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b32:	e00f      	b.n	8007b54 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007b38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	4413      	add	r3, r2
 8007b40:	00db      	lsls	r3, r3, #3
 8007b42:	440b      	add	r3, r1
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	62bb      	str	r3, [r7, #40]	@ 0x28
		vq->shm_io = shm_io;
 8007b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8007b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b50:	3301      	adds	r3, #1
 8007b52:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d9ec      	bls.n	8007b34 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8007b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d137      	bne.n	8007bd0 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 8007b60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b64:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8007b66:	2300      	movs	r3, #0
 8007b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b6a:	e02a      	b.n	8007bc2 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 8007b6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b70:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007b72:	f7ff fcee 	bl	8007552 <rpmsg_virtio_shm_pool_get_buffer>
 8007b76:	6338      	str	r0, [r7, #48]	@ 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 8007b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 8007b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8007c30 <rpmsg_init_vdev+0x1b8>)
 8007b80:	e04d      	b.n	8007c1e <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 8007b86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b88:	6838      	ldr	r0, [r7, #0]
 8007b8a:	f7ff fbcb 	bl	8007324 <metal_io_virt_to_offset>
 8007b8e:	4601      	mov	r1, r0
 8007b90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b94:	2200      	movs	r2, #0
 8007b96:	6838      	ldr	r0, [r7, #0]
 8007b98:	f7fe fc37 	bl	800640a <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8007ba0:	f107 0110 	add.w	r1, r7, #16
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	2301      	movs	r3, #1
 8007baa:	2200      	movs	r2, #0
 8007bac:	f000 fa23 	bl	8007ff6 <virtqueue_add_buffer>
 8007bb0:	6478      	str	r0, [r7, #68]	@ 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 8007bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <rpmsg_init_vdev+0x144>
				return status;
 8007bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bba:	e030      	b.n	8007c1e <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8007bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bc6:	895b      	ldrh	r3, [r3, #10]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d3cd      	bcc.n	8007b6c <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7ff fb83 	bl	80072de <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f7ff fc83 	bl	80074e4 <rpmsg_virtio_get_features>
 8007bde:	62f8      	str	r0, [r7, #44]	@ 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8007be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d011      	beq.n	8007c0e <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 8007bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bec:	f103 0008 	add.w	r0, r3, #8
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	4b13      	ldr	r3, [pc, #76]	@ (8007c44 <rpmsg_init_vdev+0x1cc>)
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	2335      	movs	r3, #53	@ 0x35
 8007bfa:	2235      	movs	r2, #53	@ 0x35
 8007bfc:	4912      	ldr	r1, [pc, #72]	@ (8007c48 <rpmsg_init_vdev+0x1d0>)
 8007bfe:	f7ff fc23 	bl	8007448 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8007c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c04:	3308      	adds	r3, #8
 8007c06:	4619      	mov	r1, r3
 8007c08:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007c0a:	f7ff fa81 	bl	8007110 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 8007c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d103      	bne.n	8007c1c <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 8007c14:	2104      	movs	r1, #4
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff fc40 	bl	800749c <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8007c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3748      	adds	r7, #72	@ 0x48
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	08007741 	.word	0x08007741
 8007c2c:	fffff82d 	.word	0xfffff82d
 8007c30:	fffff82e 	.word	0xfffff82e
 8007c34:	08009b78 	.word	0x08009b78
 8007c38:	08009b80 	.word	0x08009b80
 8007c3c:	080078a9 	.word	0x080078a9
 8007c40:	08007895 	.word	0x08007895
 8007c44:	08007995 	.word	0x08007995
 8007c48:	08009b88 	.word	0x08009b88

08007c4c <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	617b      	str	r3, [r7, #20]
	while (!metal_list_is_empty(&rdev->endpoints)) {
 8007c58:	e008      	b.n	8007c6c <rpmsg_deinit_vdev+0x20>
		node = rdev->endpoints.next;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	613b      	str	r3, [r7, #16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	3b34      	subs	r3, #52	@ 0x34
 8007c64:	60fb      	str	r3, [r7, #12]
		rpmsg_destroy_ept(ept);
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff fae4 	bl	8007234 <rpmsg_destroy_ept>
	while (!metal_list_is_empty(&rdev->endpoints)) {
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7ff fb46 	bl	8007300 <metal_list_is_empty>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0ef      	beq.n	8007c5a <rpmsg_deinit_vdev+0xe>
	}

	rvdev->rvq = 0;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	669a      	str	r2, [r3, #104]	@ 0x68
	rvdev->svq = 0;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	66da      	str	r2, [r3, #108]	@ 0x6c

	metal_mutex_deinit(&rdev->lock);
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	3358      	adds	r3, #88	@ 0x58
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff fbbb 	bl	8007406 <metal_mutex_deinit>
}
 8007c90:	bf00      	nop
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b083      	sub	sp, #12
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	011b      	lsls	r3, r3, #4
 8007cee:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3303      	adds	r3, #3
 8007cf4:	005a      	lsls	r2, r3, #1
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	4413      	add	r3, r2
 8007d02:	1e5a      	subs	r2, r3, #1
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	425b      	negs	r3, r3
 8007d08:	4013      	ands	r3, r2
 8007d0a:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	3306      	adds	r3, #6
 8007d16:	60fb      	str	r3, [r7, #12]

	return size;
 8007d18:	68fb      	ldr	r3, [r7, #12]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <metal_io_virt_to_offset>:
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d201      	bcs.n	8007d48 <metal_io_virt_to_offset+0x22>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	e001      	b.n	8007d4c <metal_io_virt_to_offset+0x26>
 8007d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8007d58:	b590      	push	{r4, r7, lr}
 8007d5a:	b091      	sub	sp, #68	@ 0x44
 8007d5c:	af04      	add	r7, sp, #16
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (nvqs > num_vrings)
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d902      	bls.n	8007d7a <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8007d74:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8007d78:	e053      	b.n	8007e22 <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d7e:	e04b      	b.n	8007e18 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007d84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d86:	4613      	mov	r3, r2
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	4413      	add	r3, r2
 8007d8c:	00db      	lsls	r3, r3, #3
 8007d8e:	440b      	add	r3, r1
 8007d90:	627b      	str	r3, [r7, #36]	@ 0x24

		vring_alloc = &vring_info->info;
 8007d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d94:	3304      	adds	r3, #4
 8007d96:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d118      	bne.n	8007dd2 <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4619      	mov	r1, r3
 8007dac:	69f8      	ldr	r0, [r7, #28]
 8007dae:	f7ff ffba 	bl	8007d26 <metal_io_virt_to_offset>
 8007db2:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 8007db8:	461a      	mov	r2, r3
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	f7ff ff8d 	bl	8007ce0 <vring_size>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2200      	movs	r2, #0
 8007dca:	69b9      	ldr	r1, [r7, #24]
 8007dcc:	69f8      	ldr	r0, [r7, #28]
 8007dce:	f7fe fb1c 	bl	800640a <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8007dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd4:	b298      	uxth	r0, r3
 8007dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	4413      	add	r3, r2
 8007dde:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8007de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007de6:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8007de8:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	6a12      	ldr	r2, [r2, #32]
 8007dee:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8007df0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007df2:	6809      	ldr	r1, [r1, #0]
 8007df4:	9102      	str	r1, [sp, #8]
 8007df6:	9201      	str	r2, [sp, #4]
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	4622      	mov	r2, r4
 8007dfe:	4601      	mov	r1, r0
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 f8c4 	bl	8007f8e <virtqueue_create>
 8007e06:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <virtio_create_virtqueues+0xba>
			return ret;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	e007      	b.n	8007e22 <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 8007e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e14:	3301      	adds	r3, #1
 8007e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d3af      	bcc.n	8007d80 <virtio_create_virtqueues+0x28>
	}
	return 0;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3734      	adds	r7, #52	@ 0x34
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd90      	pop	{r4, r7, pc}

08007e2a <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b085      	sub	sp, #20
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
 8007e36:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	441a      	add	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	4413      	add	r3, r2
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	425b      	negs	r3, r3
 8007e68:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	60da      	str	r2, [r3, #12]
}
 8007e70:	bf00      	nop
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	80fb      	strh	r3, [r7, #6]
 8007e86:	460b      	mov	r3, r1
 8007e88:	80bb      	strh	r3, [r7, #4]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8007e8e:	88ba      	ldrh	r2, [r7, #4]
 8007e90:	88fb      	ldrh	r3, [r7, #6]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	3b01      	subs	r3, #1
 8007e98:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8007e9a:	88b9      	ldrh	r1, [r7, #4]
 8007e9c:	887b      	ldrh	r3, [r7, #2]
 8007e9e:	1acb      	subs	r3, r1, r3
 8007ea0:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	bf34      	ite	cc
 8007ea6:	2301      	movcc	r3, #1
 8007ea8:	2300      	movcs	r3, #0
 8007eaa:	b2db      	uxtb	r3, r3
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <metal_io_virt_to_offset>:
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d201      	bcs.n	8007eda <metal_io_virt_to_offset+0x22>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	e001      	b.n	8007ede <metal_io_virt_to_offset+0x26>
 8007eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <metal_io_phys>:
{
 8007eea:	b480      	push	{r7}
 8007eec:	b085      	sub	sp, #20
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8007ef8:	2b1f      	cmp	r3, #31
 8007efa:	d805      	bhi.n	8007f08 <metal_io_phys+0x1e>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	fa22 f303 	lsr.w	r3, r2, r3
 8007f06:	e000      	b.n	8007f0a <metal_io_phys+0x20>
 8007f08:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8007f0a:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d010      	beq.n	8007f36 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d80b      	bhi.n	8007f36 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6919      	ldr	r1, [r3, #16]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8007f32:	4413      	add	r3, r2
 8007f34:	e001      	b.n	8007f3a <metal_io_phys+0x50>
 8007f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <metal_io_virt_to_phys>:
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7ff ffb0 	bl	8007eb8 <metal_io_virt_to_offset>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff ffc4 	bl	8007eea <metal_io_phys>
 8007f62:	4603      	mov	r3, r0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7a:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f7ff ffe1 	bl	8007f46 <metal_io_virt_to_phys>
 8007f84:	4603      	mov	r3, r0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b086      	sub	sp, #24
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d121      	bne.n	8007fec <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8007fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8007fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8007fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb6:	897a      	ldrh	r2, [r7, #10]
 8007fb8:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	891a      	ldrh	r2, [r3, #8]
 8007fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc0:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8007fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc4:	895a      	ldrh	r2, [r3, #10]
 8007fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
		vq->callback = callback;
 8007fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fcc:	6a3a      	ldr	r2, [r7, #32]
 8007fce:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8007fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fd4:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	6819      	ldr	r1, [r3, #0]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fe2:	f000 f97a 	bl	80082da <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8007fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fe8:	f000 f899 	bl	800811e <virtqueue_disable_cb>
	}

	return (status);
 8007fec:	697b      	ldr	r3, [r7, #20]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b08a      	sub	sp, #40	@ 0x28
 8007ffa:	af02      	add	r7, sp, #8
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	607a      	str	r2, [r7, #4]
 8008002:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 8008004:	2300      	movs	r3, #0
 8008006:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 8008008:	2300      	movs	r3, #0
 800800a:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	4413      	add	r3, r2
 8008012:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d12c      	bne.n	8008074 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800801e:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 8008020:	8a7b      	ldrh	r3, [r7, #18]
 8008022:	3307      	adds	r3, #7
 8008024:	00db      	lsls	r3, r3, #3
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4413      	add	r3, r2
 800802a:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008030:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	b29a      	uxth	r2, r3
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	69d9      	ldr	r1, [r3, #28]
 800803e:	8a7a      	ldrh	r2, [r7, #18]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	9301      	str	r3, [sp, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 f8a7 	bl	800819e <vq_ring_add_buffer>
 8008050:	4603      	mov	r3, r0
 8008052:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	8a3a      	ldrh	r2, [r7, #16]
 8008058:	861a      	strh	r2, [r3, #48]	@ 0x30
		vq->vq_free_cnt -= needed;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	b29b      	uxth	r3, r3
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	b29a      	uxth	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	851a      	strh	r2, [r3, #40]	@ 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 800806a:	8a7b      	ldrh	r3, [r7, #18]
 800806c:	4619      	mov	r1, r3
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 f966 	bl	8008340 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 8008074:	69bb      	ldr	r3, [r7, #24]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3720      	adds	r7, #32
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b088      	sub	sp, #32
 8008082:	af00      	add	r7, sp, #0
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d006      	beq.n	800809e <virtqueue_get_buffer+0x20>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008098:	885b      	ldrh	r3, [r3, #2]
 800809a:	429a      	cmp	r2, r3
 800809c:	d101      	bne.n	80080a2 <virtqueue_get_buffer+0x24>
		return (NULL);
 800809e:	2300      	movs	r3, #0
 80080a0:	e039      	b.n	8008116 <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	b291      	uxth	r1, r2
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	8651      	strh	r1, [r2, #50]	@ 0x32
 80080ae:	b21a      	sxth	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	895b      	ldrh	r3, [r3, #10]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	b21b      	sxth	r3, r3
 80080ba:	4013      	ands	r3, r2
 80080bc:	b21b      	sxth	r3, r3
 80080be:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080c4:	8bfb      	ldrh	r3, [r7, #30]
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	4413      	add	r3, r2
 80080ca:	3304      	adds	r3, #4
 80080cc:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 80080ce:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	82fb      	strh	r3, [r7, #22]
	if (len)
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <virtqueue_get_buffer+0x68>
		*len = uep->len;
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 80080e6:	8afb      	ldrh	r3, [r7, #22]
 80080e8:	4619      	mov	r1, r3
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 f8ae 	bl	800824c <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 80080f0:	8afa      	ldrh	r2, [r7, #22]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3207      	adds	r2, #7
 80080f6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80080fa:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 80080fc:	8afa      	ldrh	r2, [r7, #22]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3207      	adds	r2, #7
 8008102:	2100      	movs	r1, #0
 8008104:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d002      	beq.n	8008114 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	8bfa      	ldrh	r2, [r7, #30]
 8008112:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 8008114:	693b      	ldr	r3, [r7, #16]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3720      	adds	r7, #32
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 800811e:	b480      	push	{r7}
 8008120:	b083      	sub	sp, #12
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d010      	beq.n	8008154 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	895b      	ldrh	r3, [r3, #10]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a1a      	ldr	r2, [r3, #32]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8008146:	3901      	subs	r1, #1
 8008148:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	4413      	add	r3, r2
 800814e:	460a      	mov	r2, r1
 8008150:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8008152:	e008      	b.n	8008166 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	881a      	ldrh	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	f042 0201 	orr.w	r2, r2, #1
 8008162:	b292      	uxth	r2, r2
 8008164:	801a      	strh	r2, [r3, #0]
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 800817a:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f91d 	bl	80083be <vq_ring_must_notify_host>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f94d 	bl	800842a <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	855a      	strh	r2, [r3, #42]	@ 0x2a

	VQUEUE_IDLE(vq);
}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 800819e:	b5b0      	push	{r4, r5, r7, lr}
 80081a0:	b088      	sub	sp, #32
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	603b      	str	r3, [r7, #0]
 80081aa:	4613      	mov	r3, r2
 80081ac:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 80081ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b2:	4413      	add	r3, r2
 80081b4:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 80081b6:	2300      	movs	r3, #0
 80081b8:	61fb      	str	r3, [r7, #28]
 80081ba:	88fb      	ldrh	r3, [r7, #6]
 80081bc:	837b      	strh	r3, [r7, #26]
 80081be:	e03c      	b.n	800823a <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 80081c0:	8b7b      	ldrh	r3, [r7, #26]
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	4413      	add	r3, r2
 80081c8:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	00db      	lsls	r3, r3, #3
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	4413      	add	r3, r2
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4619      	mov	r1, r3
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f7ff fec8 	bl	8007f6c <virtqueue_virt_to_phys>
 80081dc:	4603      	mov	r3, r0
 80081de:	2200      	movs	r2, #0
 80081e0:	461c      	mov	r4, r3
 80081e2:	4615      	mov	r5, r2
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	e9c3 4500 	strd	r4, r5, [r3]
		dp->len = buf_list[i].len;
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	4413      	add	r3, r2
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	461a      	mov	r2, r3
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2200      	movs	r2, #0
 80081fe:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	3b01      	subs	r3, #1
 8008204:	69fa      	ldr	r2, [r7, #28]
 8008206:	429a      	cmp	r2, r3
 8008208:	da06      	bge.n	8008218 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	899b      	ldrh	r3, [r3, #12]
 800820e:	f043 0301 	orr.w	r3, r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	429a      	cmp	r2, r3
 800821e:	db06      	blt.n	800822e <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	899b      	ldrh	r3, [r3, #12]
 8008224:	f043 0302 	orr.w	r3, r3, #2
 8008228:	b29a      	uxth	r2, r3
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	3301      	adds	r3, #1
 8008232:	61fb      	str	r3, [r7, #28]
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	89db      	ldrh	r3, [r3, #14]
 8008238:	837b      	strh	r3, [r7, #26]
 800823a:	69fa      	ldr	r2, [r7, #28]
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	429a      	cmp	r2, r3
 8008240:	dbbe      	blt.n	80081c0 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 8008242:	8b7b      	ldrh	r3, [r7, #26]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3720      	adds	r7, #32
 8008248:	46bd      	mov	sp, r7
 800824a:	bdb0      	pop	{r4, r5, r7, pc}

0800824c <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	69da      	ldr	r2, [r3, #28]
 800825c:	887b      	ldrh	r3, [r7, #2]
 800825e:	011b      	lsls	r3, r3, #4
 8008260:	4413      	add	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 8008264:	887b      	ldrh	r3, [r7, #2]
 8008266:	3307      	adds	r3, #7
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	4413      	add	r3, r2
 800826e:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	889b      	ldrh	r3, [r3, #4]
 8008278:	4413      	add	r3, r2
 800827a:	b29a      	uxth	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	851a      	strh	r2, [r3, #40]	@ 0x28
	dxp->ndescs--;
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	889b      	ldrh	r3, [r3, #4]
 8008284:	3b01      	subs	r3, #1
 8008286:	b29a      	uxth	r2, r3
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	899b      	ldrh	r3, [r3, #12]
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b00      	cmp	r3, #0
 8008296:	d113      	bne.n	80082c0 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 8008298:	e00c      	b.n	80082b4 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	69da      	ldr	r2, [r3, #28]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	89db      	ldrh	r3, [r3, #14]
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	4413      	add	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	889b      	ldrh	r3, [r3, #4]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	899b      	ldrh	r3, [r3, #12]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1ec      	bne.n	800829a <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	887a      	ldrh	r2, [r7, #2]
 80082cc:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b088      	sub	sp, #32
 80082de:	af00      	add	r7, sp, #0
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	895b      	ldrh	r3, [r3, #10]
 80082ea:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	3318      	adds	r3, #24
 80082f0:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 80082f2:	69b9      	ldr	r1, [r7, #24]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	6978      	ldr	r0, [r7, #20]
 80082fa:	f7ff fd96 	bl	8007e2a <vring_init>

	for (i = 0; i < size - 1; i++)
 80082fe:	2300      	movs	r3, #0
 8008300:	61fb      	str	r3, [r7, #28]
 8008302:	e00c      	b.n	800831e <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	b29a      	uxth	r2, r3
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	6859      	ldr	r1, [r3, #4]
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	011b      	lsls	r3, r3, #4
 8008310:	440b      	add	r3, r1
 8008312:	3201      	adds	r2, #1
 8008314:	b292      	uxth	r2, r2
 8008316:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	3301      	adds	r3, #1
 800831c:	61fb      	str	r3, [r7, #28]
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	3b01      	subs	r3, #1
 8008322:	69fa      	ldr	r2, [r7, #28]
 8008324:	429a      	cmp	r2, r3
 8008326:	dbed      	blt.n	8008304 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	011b      	lsls	r3, r3, #4
 8008330:	4413      	add	r3, r2
 8008332:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008336:	81da      	strh	r2, [r3, #14]
}
 8008338:	bf00      	nop
 800833a:	3720      	adds	r7, #32
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	885b      	ldrh	r3, [r3, #2]
 8008352:	b21a      	sxth	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	895b      	ldrh	r3, [r3, #10]
 8008358:	3b01      	subs	r3, #1
 800835a:	b29b      	uxth	r3, r3
 800835c:	b21b      	sxth	r3, r3
 800835e:	4013      	ands	r3, r2
 8008360:	b21b      	sxth	r3, r3
 8008362:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a1a      	ldr	r2, [r3, #32]
 8008368:	89fb      	ldrh	r3, [r7, #14]
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	4413      	add	r3, r2
 800836e:	887a      	ldrh	r2, [r7, #2]
 8008370:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8008372:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	885a      	ldrh	r2, [r3, #2]
 800837c:	3201      	adds	r2, #1
 800837e:	b292      	uxth	r2, r2
 8008380:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008386:	3301      	adds	r3, #1
 8008388:	b29a      	uxth	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr

0800839a <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 80083a2:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <virtqueue_notification+0x1c>
		vq->callback(vq);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	4798      	blx	r3
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f003 0302 	and.w	r3, r3, #2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d01d      	beq.n	800840e <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	885b      	ldrh	r3, [r3, #2]
 80083d8:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083de:	89fa      	ldrh	r2, [r7, #14]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	00db      	lsls	r3, r3, #3
 80083ee:	4413      	add	r3, r2
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 80083f4:	89ba      	ldrh	r2, [r7, #12]
 80083f6:	89f9      	ldrh	r1, [r7, #14]
 80083f8:	897b      	ldrh	r3, [r7, #10]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7ff fd3e 	bl	8007e7c <vring_need_event>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	bf14      	ite	ne
 8008406:	2301      	movne	r3, #1
 8008408:	2300      	moveq	r3, #0
 800840a:	b2db      	uxtb	r3, r3
 800840c:	e009      	b.n	8008422 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	bf0c      	ite	eq
 800841c:	2301      	moveq	r3, #1
 800841e:	2300      	movne	r3, #0
 8008420:	b2db      	uxtb	r3, r3
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	4798      	blx	r3
}
 8008442:	bf00      	nop
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8008454:	4b04      	ldr	r3, [pc, #16]	@ (8008468 <HAL_HSEM_FreeCallback+0x1c>)
 8008456:	2201      	movs	r2, #1
 8008458:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800845a:	2002      	movs	r0, #2
 800845c:	f7f9 f918 	bl	8001690 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	24004bf8 	.word	0x24004bf8

0800846c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8008472:	4b0b      	ldr	r3, [pc, #44]	@ (80084a0 <MAILBOX_Init+0x34>)
 8008474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008478:	4a09      	ldr	r2, [pc, #36]	@ (80084a0 <MAILBOX_Init+0x34>)
 800847a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800847e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008482:	4b07      	ldr	r3, [pc, #28]	@ (80084a0 <MAILBOX_Init+0x34>)
 8008484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800848c:	607b      	str	r3, [r7, #4]
 800848e:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8008490:	2002      	movs	r0, #2
 8008492:	f7f9 f8fd 	bl	8001690 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	58024400 	.word	0x58024400

080084a4 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 80084ac:	4b09      	ldr	r3, [pc, #36]	@ (80084d4 <MAILBOX_Poll+0x30>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d108      	bne.n	80084c6 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 80084b4:	2100      	movs	r1, #0
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fe fb75 	bl	8006ba6 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 80084bc:	4b05      	ldr	r3, [pc, #20]	@ (80084d4 <MAILBOX_Poll+0x30>)
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]
    return 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	e001      	b.n	80084ca <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 80084c6:	f06f 030a 	mvn.w	r3, #10
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	24004bf8 	.word	0x24004bf8

080084d8 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 80084e2:	2000      	movs	r0, #0
 80084e4:	f7f9 f8a6 	bl	8001634 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 80084e8:	2100      	movs	r1, #0
 80084ea:	2000      	movs	r0, #0
 80084ec:	f7f9 f8bc 	bl	8001668 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850a:	d006      	beq.n	800851a <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8008510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008514:	d001      	beq.n	800851a <is_rpmsg_ept_ready+0x20>
 8008516:	2301      	movs	r3, #1
 8008518:	e000      	b.n	800851c <is_rpmsg_ept_ready+0x22>
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d209      	bcs.n	8008550 <metal_device_io_region+0x28>
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	4613      	mov	r3, r2
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	4413      	add	r3, r2
 8008544:	011b      	lsls	r3, r3, #4
 8008546:	3308      	adds	r3, #8
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	4413      	add	r3, r2
 800854c:	3304      	adds	r3, #4
 800854e:	e000      	b.n	8008552 <metal_device_io_region+0x2a>
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
	...

08008560 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8008560:	b590      	push	{r4, r7, lr}
 8008562:	b08d      	sub	sp, #52	@ 0x34
 8008564:	af04      	add	r7, sp, #16
 8008566:	6078      	str	r0, [r7, #4]
  int status = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 800856c:	2300      	movs	r3, #0
 800856e:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8008570:	4a41      	ldr	r2, [pc, #260]	@ (8008678 <OPENAMP_shmem_init+0x118>)
 8008572:	f107 0310 	add.w	r3, r7, #16
 8008576:	e892 0003 	ldmia.w	r2, {r0, r1}
 800857a:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8008586:	f107 0310 	add.w	r3, r7, #16
 800858a:	4618      	mov	r0, r3
 800858c:	f7fd fda6 	bl	80060dc <metal_init>

  status = metal_register_generic_device(&shm_device);
 8008590:	483a      	ldr	r0, [pc, #232]	@ (800867c <OPENAMP_shmem_init+0x11c>)
 8008592:	f7fd fc41 	bl	8005e18 <metal_register_generic_device>
 8008596:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <OPENAMP_shmem_init+0x42>
    return status;
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	e066      	b.n	8008670 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 80085a2:	f107 0318 	add.w	r3, r7, #24
 80085a6:	461a      	mov	r2, r3
 80085a8:	4935      	ldr	r1, [pc, #212]	@ (8008680 <OPENAMP_shmem_init+0x120>)
 80085aa:	4836      	ldr	r0, [pc, #216]	@ (8008684 <OPENAMP_shmem_init+0x124>)
 80085ac:	f7fd fbf6 	bl	8005d9c <metal_device_open>
 80085b0:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <OPENAMP_shmem_init+0x5c>
    return status;
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	e059      	b.n	8008670 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 80085bc:	4a32      	ldr	r2, [pc, #200]	@ (8008688 <OPENAMP_shmem_init+0x128>)
 80085be:	4b33      	ldr	r3, [pc, #204]	@ (800868c <OPENAMP_shmem_init+0x12c>)
 80085c0:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 80085c8:	4a31      	ldr	r2, [pc, #196]	@ (8008690 <OPENAMP_shmem_init+0x130>)
 80085ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008688 <OPENAMP_shmem_init+0x128>)
 80085cc:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 80085ce:	461a      	mov	r2, r3
 80085d0:	2300      	movs	r3, #0
 80085d2:	9302      	str	r3, [sp, #8]
 80085d4:	2300      	movs	r3, #0
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	f04f 33ff 	mov.w	r3, #4294967295
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	4613      	mov	r3, r2
 80085e0:	4a2a      	ldr	r2, [pc, #168]	@ (800868c <OPENAMP_shmem_init+0x12c>)
 80085e2:	4929      	ldr	r1, [pc, #164]	@ (8008688 <OPENAMP_shmem_init+0x128>)
 80085e4:	f7fd fdd5 	bl	8006192 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	2100      	movs	r1, #0
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7ff ff9b 	bl	8008528 <metal_device_io_region>
 80085f2:	4603      	mov	r3, r0
 80085f4:	4a27      	ldr	r2, [pc, #156]	@ (8008694 <OPENAMP_shmem_init+0x134>)
 80085f6:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 80085f8:	4b26      	ldr	r3, [pc, #152]	@ (8008694 <OPENAMP_shmem_init+0x134>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d102      	bne.n	8008606 <OPENAMP_shmem_init+0xa6>
    return -1;
 8008600:	f04f 33ff 	mov.w	r3, #4294967295
 8008604:	e034      	b.n	8008670 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8008606:	f107 0208 	add.w	r2, r7, #8
 800860a:	f107 030c 	add.w	r3, r7, #12
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f929 	bl	8008868 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4a1f      	ldr	r2, [pc, #124]	@ (8008698 <OPENAMP_shmem_init+0x138>)
 800861a:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 800861c:	4b1e      	ldr	r3, [pc, #120]	@ (8008698 <OPENAMP_shmem_init+0x138>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d102      	bne.n	800862a <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8008624:	f04f 33ff 	mov.w	r3, #4294967295
 8008628:	e022      	b.n	8008670 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8008630:	4b19      	ldr	r3, [pc, #100]	@ (8008698 <OPENAMP_shmem_init+0x138>)
 8008632:	6819      	ldr	r1, [r3, #0]
 8008634:	4b18      	ldr	r3, [pc, #96]	@ (8008698 <OPENAMP_shmem_init+0x138>)
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	461c      	mov	r4, r3
 800863c:	2300      	movs	r3, #0
 800863e:	9302      	str	r3, [sp, #8]
 8008640:	2300      	movs	r3, #0
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	f04f 33ff 	mov.w	r3, #4294967295
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	4623      	mov	r3, r4
 800864c:	f7fd fda1 	bl	8006192 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	2101      	movs	r1, #1
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff ff67 	bl	8008528 <metal_device_io_region>
 800865a:	4603      	mov	r3, r0
 800865c:	4a0f      	ldr	r2, [pc, #60]	@ (800869c <OPENAMP_shmem_init+0x13c>)
 800865e:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8008660:	4b0e      	ldr	r3, [pc, #56]	@ (800869c <OPENAMP_shmem_init+0x13c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d102      	bne.n	800866e <OPENAMP_shmem_init+0x10e>
    return -1;
 8008668:	f04f 33ff 	mov.w	r3, #4294967295
 800866c:	e000      	b.n	8008670 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3724      	adds	r7, #36	@ 0x24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd90      	pop	{r4, r7, pc}
 8008678:	08009ba0 	.word	0x08009ba0
 800867c:	24000054 	.word	0x24000054
 8008680:	08009b8c 	.word	0x08009b8c
 8008684:	08009b98 	.word	0x08009b98
 8008688:	38000400 	.word	0x38000400
 800868c:	24004c8c 	.word	0x24004c8c
 8008690:	38010000 	.word	0x38010000
 8008694:	24004bfc 	.word	0x24004bfc
 8008698:	24004c04 	.word	0x24004c04
 800869c:	24004c00 	.word	0x24004c00

080086a0 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 80086a0:	b590      	push	{r4, r7, lr}
 80086a2:	b08b      	sub	sp, #44	@ 0x2c
 80086a4:	af04      	add	r7, sp, #16
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 80086aa:	2300      	movs	r3, #0
 80086ac:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 80086ae:	2300      	movs	r3, #0
 80086b0:	613b      	str	r3, [r7, #16]
  int status = 0;
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 80086b6:	f7ff fed9 	bl	800846c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7ff ff50 	bl	8008560 <OPENAMP_shmem_init>
 80086c0:	60f8      	str	r0, [r7, #12]
  if(status)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <MX_OPENAMP_Init+0x2c>
  {
    return status;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	e06a      	b.n	80087a2 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	4b37      	ldr	r3, [pc, #220]	@ (80087ac <MX_OPENAMP_Init+0x10c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f103 0218 	add.w	r2, r3, #24
 80086d6:	4b36      	ldr	r3, [pc, #216]	@ (80087b0 <MX_OPENAMP_Init+0x110>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2100      	movs	r1, #0
 80086dc:	9102      	str	r1, [sp, #8]
 80086de:	4935      	ldr	r1, [pc, #212]	@ (80087b4 <MX_OPENAMP_Init+0x114>)
 80086e0:	9101      	str	r1, [sp, #4]
 80086e2:	2100      	movs	r1, #0
 80086e4:	9100      	str	r1, [sp, #0]
 80086e6:	21ff      	movs	r1, #255	@ 0xff
 80086e8:	f7fe f97e 	bl	80069e8 <rproc_virtio_create_vdev>
 80086ec:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d102      	bne.n	80086fa <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 80086f4:	f04f 33ff 	mov.w	r3, #4294967295
 80086f8:	e053      	b.n	80087a2 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 80086fa:	6938      	ldr	r0, [r7, #16]
 80086fc:	f7fe fa8f 	bl	8006c1e <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8008700:	4b2a      	ldr	r3, [pc, #168]	@ (80087ac <MX_OPENAMP_Init+0x10c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3334      	adds	r3, #52	@ 0x34
 8008706:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8008710:	461c      	mov	r4, r3
 8008712:	4b29      	ldr	r3, [pc, #164]	@ (80087b8 <MX_OPENAMP_Init+0x118>)
 8008714:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	6892      	ldr	r2, [r2, #8]
 800871a:	6979      	ldr	r1, [r7, #20]
 800871c:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800871e:	9102      	str	r1, [sp, #8]
 8008720:	9201      	str	r2, [sp, #4]
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	4623      	mov	r3, r4
 8008726:	4602      	mov	r2, r0
 8008728:	2100      	movs	r1, #0
 800872a:	6938      	ldr	r0, [r7, #16]
 800872c:	f7fe fa0a 	bl	8006b44 <rproc_virtio_init_vring>
 8008730:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	e032      	b.n	80087a2 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 800873c:	4b1b      	ldr	r3, [pc, #108]	@ (80087ac <MX_OPENAMP_Init+0x10c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3348      	adds	r3, #72	@ 0x48
 8008742:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800874c:	461c      	mov	r4, r3
 800874e:	4b1a      	ldr	r3, [pc, #104]	@ (80087b8 <MX_OPENAMP_Init+0x118>)
 8008750:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	6892      	ldr	r2, [r2, #8]
 8008756:	6979      	ldr	r1, [r7, #20]
 8008758:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800875a:	9102      	str	r1, [sp, #8]
 800875c:	9201      	str	r2, [sp, #4]
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	4623      	mov	r3, r4
 8008762:	4602      	mov	r2, r0
 8008764:	2101      	movs	r1, #1
 8008766:	6938      	ldr	r0, [r7, #16]
 8008768:	f7fe f9ec 	bl	8006b44 <rproc_virtio_init_vring>
 800876c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	e014      	b.n	80087a2 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8008778:	4b10      	ldr	r3, [pc, #64]	@ (80087bc <MX_OPENAMP_Init+0x11c>)
 800877a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800877e:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8008780:	4a0f      	ldr	r2, [pc, #60]	@ (80087c0 <MX_OPENAMP_Init+0x120>)
 8008782:	4b0e      	ldr	r3, [pc, #56]	@ (80087bc <MX_OPENAMP_Init+0x11c>)
 8008784:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8008786:	461a      	mov	r2, r3
 8008788:	480e      	ldr	r0, [pc, #56]	@ (80087c4 <MX_OPENAMP_Init+0x124>)
 800878a:	f7fe ff04 	bl	8007596 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 800878e:	4b0a      	ldr	r3, [pc, #40]	@ (80087b8 <MX_OPENAMP_Init+0x118>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a0c      	ldr	r2, [pc, #48]	@ (80087c4 <MX_OPENAMP_Init+0x124>)
 8008794:	9200      	str	r2, [sp, #0]
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	6939      	ldr	r1, [r7, #16]
 800879a:	480b      	ldr	r0, [pc, #44]	@ (80087c8 <MX_OPENAMP_Init+0x128>)
 800879c:	f7ff f96c 	bl	8007a78 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	371c      	adds	r7, #28
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd90      	pop	{r4, r7, pc}
 80087aa:	bf00      	nop
 80087ac:	24004c04 	.word	0x24004c04
 80087b0:	24004c00 	.word	0x24004c00
 80087b4:	080084d9 	.word	0x080084d9
 80087b8:	24004bfc 	.word	0x24004bfc
 80087bc:	38000400 	.word	0x38000400
 80087c0:	38010000 	.word	0x38010000
 80087c4:	24004c08 	.word	0x24004c08
 80087c8:	24004c14 	.word	0x24004c14

080087cc <OPENAMP_DeInit>:

void OPENAMP_DeInit()
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN PRE_OPENAMP_DEINIT */

  /* USER CODE END PRE_OPENAMP_DEINIT */

  rpmsg_deinit_vdev(&rvdev);
 80087d0:	4803      	ldr	r0, [pc, #12]	@ (80087e0 <OPENAMP_DeInit+0x14>)
 80087d2:	f7ff fa3b 	bl	8007c4c <rpmsg_deinit_vdev>

  metal_finish();
 80087d6:	f7fd fcb3 	bl	8006140 <metal_finish>

  /* USER CODE BEGIN POST_OPENAMP_DEINIT */

  /* USER CODE END POST_OPENAMP_DEINIT */
}
 80087da:	bf00      	nop
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	24004c14 	.word	0x24004c14

080087e4 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b08a      	sub	sp, #40	@ 0x28
 80087e8:	af04      	add	r7, sp, #16
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	603b      	str	r3, [r7, #0]
  int ret = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	9302      	str	r3, [sp, #8]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	f04f 33ff 	mov.w	r3, #4294967295
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	4904      	ldr	r1, [pc, #16]	@ (800881c <OPENAMP_create_endpoint+0x38>)
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f7fe fc94 	bl	8007138 <rpmsg_create_ept>
 8008810:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 8008812:	697b      	ldr	r3, [r7, #20]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3718      	adds	r7, #24
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	24004c14 	.word	0x24004c14

08008820 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8008824:	4b03      	ldr	r3, [pc, #12]	@ (8008834 <OPENAMP_check_for_message+0x14>)
 8008826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008828:	4618      	mov	r0, r3
 800882a:	f7ff fe3b 	bl	80084a4 <MAILBOX_Poll>
}
 800882e:	bf00      	nop
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	24004c14 	.word	0x24004c14

08008838 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 8008840:	e004      	b.n	800884c <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 8008842:	4b08      	ldr	r3, [pc, #32]	@ (8008864 <OPENAMP_Wait_EndPointready+0x2c>)
 8008844:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008846:	4618      	mov	r0, r3
 8008848:	f7ff fe2c 	bl	80084a4 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff fe54 	bl	80084fa <is_rpmsg_ept_ready>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0f4      	beq.n	8008842 <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	24004c14 	.word	0x24004c14

08008868 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 8008874:	228c      	movs	r2, #140	@ 0x8c
 8008876:	2100      	movs	r1, #0
 8008878:	481e      	ldr	r0, [pc, #120]	@ (80088f4 <resource_table_init+0x8c>)
 800887a:	f000 fa32 	bl	8008ce2 <memset>
	resource_table.num = 1;
 800887e:	4b1d      	ldr	r3, [pc, #116]	@ (80088f4 <resource_table_init+0x8c>)
 8008880:	2201      	movs	r2, #1
 8008882:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 8008884:	4b1b      	ldr	r3, [pc, #108]	@ (80088f4 <resource_table_init+0x8c>)
 8008886:	2201      	movs	r2, #1
 8008888:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 800888a:	4b1a      	ldr	r3, [pc, #104]	@ (80088f4 <resource_table_init+0x8c>)
 800888c:	2218      	movs	r2, #24
 800888e:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 8008890:	4b19      	ldr	r3, [pc, #100]	@ (80088f8 <resource_table_init+0x90>)
 8008892:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008896:	4a17      	ldr	r2, [pc, #92]	@ (80088f4 <resource_table_init+0x8c>)
 8008898:	6353      	str	r3, [r2, #52]	@ 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 800889a:	4b16      	ldr	r3, [pc, #88]	@ (80088f4 <resource_table_init+0x8c>)
 800889c:	2204      	movs	r2, #4
 800889e:	639a      	str	r2, [r3, #56]	@ 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 80088a0:	4b14      	ldr	r3, [pc, #80]	@ (80088f4 <resource_table_init+0x8c>)
 80088a2:	2204      	movs	r2, #4
 80088a4:	63da      	str	r2, [r3, #60]	@ 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 80088a6:	4b13      	ldr	r3, [pc, #76]	@ (80088f4 <resource_table_init+0x8c>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	641a      	str	r2, [r3, #64]	@ 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 80088ac:	4a12      	ldr	r2, [pc, #72]	@ (80088f8 <resource_table_init+0x90>)
 80088ae:	4b11      	ldr	r3, [pc, #68]	@ (80088f4 <resource_table_init+0x8c>)
 80088b0:	649a      	str	r2, [r3, #72]	@ 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 80088b2:	4b10      	ldr	r3, [pc, #64]	@ (80088f4 <resource_table_init+0x8c>)
 80088b4:	2204      	movs	r2, #4
 80088b6:	64da      	str	r2, [r3, #76]	@ 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 80088b8:	4b0e      	ldr	r3, [pc, #56]	@ (80088f4 <resource_table_init+0x8c>)
 80088ba:	2204      	movs	r2, #4
 80088bc:	651a      	str	r2, [r3, #80]	@ 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 80088be:	4b0d      	ldr	r3, [pc, #52]	@ (80088f4 <resource_table_init+0x8c>)
 80088c0:	2201      	movs	r2, #1
 80088c2:	655a      	str	r2, [r3, #84]	@ 0x54

	resource_table.vdev.type = RSC_VDEV;
 80088c4:	4b0b      	ldr	r3, [pc, #44]	@ (80088f4 <resource_table_init+0x8c>)
 80088c6:	2203      	movs	r2, #3
 80088c8:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 80088ca:	4b0a      	ldr	r3, [pc, #40]	@ (80088f4 <resource_table_init+0x8c>)
 80088cc:	2207      	movs	r2, #7
 80088ce:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 80088d0:	4b08      	ldr	r3, [pc, #32]	@ (80088f4 <resource_table_init+0x8c>)
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 80088d8:	4b06      	ldr	r3, [pc, #24]	@ (80088f4 <resource_table_init+0x8c>)
 80088da:	2201      	movs	r2, #1
 80088dc:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	228c      	movs	r2, #140	@ 0x8c
 80088e2:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4a03      	ldr	r2, [pc, #12]	@ (80088f4 <resource_table_init+0x8c>)
 80088e8:	601a      	str	r2, [r3, #0]
}
 80088ea:	bf00      	nop
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	38000000 	.word	0x38000000
 80088f8:	38000400 	.word	0x38000400

080088fc <__assert_func>:
 80088fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088fe:	4614      	mov	r4, r2
 8008900:	461a      	mov	r2, r3
 8008902:	4b09      	ldr	r3, [pc, #36]	@ (8008928 <__assert_func+0x2c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4605      	mov	r5, r0
 8008908:	68d8      	ldr	r0, [r3, #12]
 800890a:	b954      	cbnz	r4, 8008922 <__assert_func+0x26>
 800890c:	4b07      	ldr	r3, [pc, #28]	@ (800892c <__assert_func+0x30>)
 800890e:	461c      	mov	r4, r3
 8008910:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008914:	9100      	str	r1, [sp, #0]
 8008916:	462b      	mov	r3, r5
 8008918:	4905      	ldr	r1, [pc, #20]	@ (8008930 <__assert_func+0x34>)
 800891a:	f000 f96f 	bl	8008bfc <fiprintf>
 800891e:	f000 faf4 	bl	8008f0a <abort>
 8008922:	4b04      	ldr	r3, [pc, #16]	@ (8008934 <__assert_func+0x38>)
 8008924:	e7f4      	b.n	8008910 <__assert_func+0x14>
 8008926:	bf00      	nop
 8008928:	240000dc 	.word	0x240000dc
 800892c:	08009ca2 	.word	0x08009ca2
 8008930:	08009c74 	.word	0x08009c74
 8008934:	08009c67 	.word	0x08009c67

08008938 <malloc>:
 8008938:	4b02      	ldr	r3, [pc, #8]	@ (8008944 <malloc+0xc>)
 800893a:	4601      	mov	r1, r0
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	f000 b82d 	b.w	800899c <_malloc_r>
 8008942:	bf00      	nop
 8008944:	240000dc 	.word	0x240000dc

08008948 <free>:
 8008948:	4b02      	ldr	r3, [pc, #8]	@ (8008954 <free+0xc>)
 800894a:	4601      	mov	r1, r0
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	f000 bae3 	b.w	8008f18 <_free_r>
 8008952:	bf00      	nop
 8008954:	240000dc 	.word	0x240000dc

08008958 <sbrk_aligned>:
 8008958:	b570      	push	{r4, r5, r6, lr}
 800895a:	4e0f      	ldr	r6, [pc, #60]	@ (8008998 <sbrk_aligned+0x40>)
 800895c:	460c      	mov	r4, r1
 800895e:	6831      	ldr	r1, [r6, #0]
 8008960:	4605      	mov	r5, r0
 8008962:	b911      	cbnz	r1, 800896a <sbrk_aligned+0x12>
 8008964:	f000 fa74 	bl	8008e50 <_sbrk_r>
 8008968:	6030      	str	r0, [r6, #0]
 800896a:	4621      	mov	r1, r4
 800896c:	4628      	mov	r0, r5
 800896e:	f000 fa6f 	bl	8008e50 <_sbrk_r>
 8008972:	1c43      	adds	r3, r0, #1
 8008974:	d103      	bne.n	800897e <sbrk_aligned+0x26>
 8008976:	f04f 34ff 	mov.w	r4, #4294967295
 800897a:	4620      	mov	r0, r4
 800897c:	bd70      	pop	{r4, r5, r6, pc}
 800897e:	1cc4      	adds	r4, r0, #3
 8008980:	f024 0403 	bic.w	r4, r4, #3
 8008984:	42a0      	cmp	r0, r4
 8008986:	d0f8      	beq.n	800897a <sbrk_aligned+0x22>
 8008988:	1a21      	subs	r1, r4, r0
 800898a:	4628      	mov	r0, r5
 800898c:	f000 fa60 	bl	8008e50 <_sbrk_r>
 8008990:	3001      	adds	r0, #1
 8008992:	d1f2      	bne.n	800897a <sbrk_aligned+0x22>
 8008994:	e7ef      	b.n	8008976 <sbrk_aligned+0x1e>
 8008996:	bf00      	nop
 8008998:	24004c90 	.word	0x24004c90

0800899c <_malloc_r>:
 800899c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089a0:	1ccd      	adds	r5, r1, #3
 80089a2:	f025 0503 	bic.w	r5, r5, #3
 80089a6:	3508      	adds	r5, #8
 80089a8:	2d0c      	cmp	r5, #12
 80089aa:	bf38      	it	cc
 80089ac:	250c      	movcc	r5, #12
 80089ae:	2d00      	cmp	r5, #0
 80089b0:	4606      	mov	r6, r0
 80089b2:	db01      	blt.n	80089b8 <_malloc_r+0x1c>
 80089b4:	42a9      	cmp	r1, r5
 80089b6:	d904      	bls.n	80089c2 <_malloc_r+0x26>
 80089b8:	230c      	movs	r3, #12
 80089ba:	6033      	str	r3, [r6, #0]
 80089bc:	2000      	movs	r0, #0
 80089be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a98 <_malloc_r+0xfc>
 80089c6:	f000 f869 	bl	8008a9c <__malloc_lock>
 80089ca:	f8d8 3000 	ldr.w	r3, [r8]
 80089ce:	461c      	mov	r4, r3
 80089d0:	bb44      	cbnz	r4, 8008a24 <_malloc_r+0x88>
 80089d2:	4629      	mov	r1, r5
 80089d4:	4630      	mov	r0, r6
 80089d6:	f7ff ffbf 	bl	8008958 <sbrk_aligned>
 80089da:	1c43      	adds	r3, r0, #1
 80089dc:	4604      	mov	r4, r0
 80089de:	d158      	bne.n	8008a92 <_malloc_r+0xf6>
 80089e0:	f8d8 4000 	ldr.w	r4, [r8]
 80089e4:	4627      	mov	r7, r4
 80089e6:	2f00      	cmp	r7, #0
 80089e8:	d143      	bne.n	8008a72 <_malloc_r+0xd6>
 80089ea:	2c00      	cmp	r4, #0
 80089ec:	d04b      	beq.n	8008a86 <_malloc_r+0xea>
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	4639      	mov	r1, r7
 80089f2:	4630      	mov	r0, r6
 80089f4:	eb04 0903 	add.w	r9, r4, r3
 80089f8:	f000 fa2a 	bl	8008e50 <_sbrk_r>
 80089fc:	4581      	cmp	r9, r0
 80089fe:	d142      	bne.n	8008a86 <_malloc_r+0xea>
 8008a00:	6821      	ldr	r1, [r4, #0]
 8008a02:	1a6d      	subs	r5, r5, r1
 8008a04:	4629      	mov	r1, r5
 8008a06:	4630      	mov	r0, r6
 8008a08:	f7ff ffa6 	bl	8008958 <sbrk_aligned>
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d03a      	beq.n	8008a86 <_malloc_r+0xea>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	442b      	add	r3, r5
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	f8d8 3000 	ldr.w	r3, [r8]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	bb62      	cbnz	r2, 8008a78 <_malloc_r+0xdc>
 8008a1e:	f8c8 7000 	str.w	r7, [r8]
 8008a22:	e00f      	b.n	8008a44 <_malloc_r+0xa8>
 8008a24:	6822      	ldr	r2, [r4, #0]
 8008a26:	1b52      	subs	r2, r2, r5
 8008a28:	d420      	bmi.n	8008a6c <_malloc_r+0xd0>
 8008a2a:	2a0b      	cmp	r2, #11
 8008a2c:	d917      	bls.n	8008a5e <_malloc_r+0xc2>
 8008a2e:	1961      	adds	r1, r4, r5
 8008a30:	42a3      	cmp	r3, r4
 8008a32:	6025      	str	r5, [r4, #0]
 8008a34:	bf18      	it	ne
 8008a36:	6059      	strne	r1, [r3, #4]
 8008a38:	6863      	ldr	r3, [r4, #4]
 8008a3a:	bf08      	it	eq
 8008a3c:	f8c8 1000 	streq.w	r1, [r8]
 8008a40:	5162      	str	r2, [r4, r5]
 8008a42:	604b      	str	r3, [r1, #4]
 8008a44:	4630      	mov	r0, r6
 8008a46:	f000 f82f 	bl	8008aa8 <__malloc_unlock>
 8008a4a:	f104 000b 	add.w	r0, r4, #11
 8008a4e:	1d23      	adds	r3, r4, #4
 8008a50:	f020 0007 	bic.w	r0, r0, #7
 8008a54:	1ac2      	subs	r2, r0, r3
 8008a56:	bf1c      	itt	ne
 8008a58:	1a1b      	subne	r3, r3, r0
 8008a5a:	50a3      	strne	r3, [r4, r2]
 8008a5c:	e7af      	b.n	80089be <_malloc_r+0x22>
 8008a5e:	6862      	ldr	r2, [r4, #4]
 8008a60:	42a3      	cmp	r3, r4
 8008a62:	bf0c      	ite	eq
 8008a64:	f8c8 2000 	streq.w	r2, [r8]
 8008a68:	605a      	strne	r2, [r3, #4]
 8008a6a:	e7eb      	b.n	8008a44 <_malloc_r+0xa8>
 8008a6c:	4623      	mov	r3, r4
 8008a6e:	6864      	ldr	r4, [r4, #4]
 8008a70:	e7ae      	b.n	80089d0 <_malloc_r+0x34>
 8008a72:	463c      	mov	r4, r7
 8008a74:	687f      	ldr	r7, [r7, #4]
 8008a76:	e7b6      	b.n	80089e6 <_malloc_r+0x4a>
 8008a78:	461a      	mov	r2, r3
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	d1fb      	bne.n	8008a78 <_malloc_r+0xdc>
 8008a80:	2300      	movs	r3, #0
 8008a82:	6053      	str	r3, [r2, #4]
 8008a84:	e7de      	b.n	8008a44 <_malloc_r+0xa8>
 8008a86:	230c      	movs	r3, #12
 8008a88:	6033      	str	r3, [r6, #0]
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f000 f80c 	bl	8008aa8 <__malloc_unlock>
 8008a90:	e794      	b.n	80089bc <_malloc_r+0x20>
 8008a92:	6005      	str	r5, [r0, #0]
 8008a94:	e7d6      	b.n	8008a44 <_malloc_r+0xa8>
 8008a96:	bf00      	nop
 8008a98:	24004c94 	.word	0x24004c94

08008a9c <__malloc_lock>:
 8008a9c:	4801      	ldr	r0, [pc, #4]	@ (8008aa4 <__malloc_lock+0x8>)
 8008a9e:	f000 ba24 	b.w	8008eea <__retarget_lock_acquire_recursive>
 8008aa2:	bf00      	nop
 8008aa4:	24004dd8 	.word	0x24004dd8

08008aa8 <__malloc_unlock>:
 8008aa8:	4801      	ldr	r0, [pc, #4]	@ (8008ab0 <__malloc_unlock+0x8>)
 8008aaa:	f000 ba1f 	b.w	8008eec <__retarget_lock_release_recursive>
 8008aae:	bf00      	nop
 8008ab0:	24004dd8 	.word	0x24004dd8

08008ab4 <std>:
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	b510      	push	{r4, lr}
 8008ab8:	4604      	mov	r4, r0
 8008aba:	e9c0 3300 	strd	r3, r3, [r0]
 8008abe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ac2:	6083      	str	r3, [r0, #8]
 8008ac4:	8181      	strh	r1, [r0, #12]
 8008ac6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ac8:	81c2      	strh	r2, [r0, #14]
 8008aca:	6183      	str	r3, [r0, #24]
 8008acc:	4619      	mov	r1, r3
 8008ace:	2208      	movs	r2, #8
 8008ad0:	305c      	adds	r0, #92	@ 0x5c
 8008ad2:	f000 f906 	bl	8008ce2 <memset>
 8008ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b0c <std+0x58>)
 8008ad8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ada:	4b0d      	ldr	r3, [pc, #52]	@ (8008b10 <std+0x5c>)
 8008adc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ade:	4b0d      	ldr	r3, [pc, #52]	@ (8008b14 <std+0x60>)
 8008ae0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b18 <std+0x64>)
 8008ae4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b1c <std+0x68>)
 8008ae8:	6224      	str	r4, [r4, #32]
 8008aea:	429c      	cmp	r4, r3
 8008aec:	d006      	beq.n	8008afc <std+0x48>
 8008aee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008af2:	4294      	cmp	r4, r2
 8008af4:	d002      	beq.n	8008afc <std+0x48>
 8008af6:	33d0      	adds	r3, #208	@ 0xd0
 8008af8:	429c      	cmp	r4, r3
 8008afa:	d105      	bne.n	8008b08 <std+0x54>
 8008afc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b04:	f000 b9f0 	b.w	8008ee8 <__retarget_lock_init_recursive>
 8008b08:	bd10      	pop	{r4, pc}
 8008b0a:	bf00      	nop
 8008b0c:	08008c5d 	.word	0x08008c5d
 8008b10:	08008c7f 	.word	0x08008c7f
 8008b14:	08008cb7 	.word	0x08008cb7
 8008b18:	08008cdb 	.word	0x08008cdb
 8008b1c:	24004c98 	.word	0x24004c98

08008b20 <stdio_exit_handler>:
 8008b20:	4a02      	ldr	r2, [pc, #8]	@ (8008b2c <stdio_exit_handler+0xc>)
 8008b22:	4903      	ldr	r1, [pc, #12]	@ (8008b30 <stdio_exit_handler+0x10>)
 8008b24:	4803      	ldr	r0, [pc, #12]	@ (8008b34 <stdio_exit_handler+0x14>)
 8008b26:	f000 b87b 	b.w	8008c20 <_fwalk_sglue>
 8008b2a:	bf00      	nop
 8008b2c:	240000d0 	.word	0x240000d0
 8008b30:	08009655 	.word	0x08009655
 8008b34:	240000e0 	.word	0x240000e0

08008b38 <cleanup_stdio>:
 8008b38:	6841      	ldr	r1, [r0, #4]
 8008b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b6c <cleanup_stdio+0x34>)
 8008b3c:	4299      	cmp	r1, r3
 8008b3e:	b510      	push	{r4, lr}
 8008b40:	4604      	mov	r4, r0
 8008b42:	d001      	beq.n	8008b48 <cleanup_stdio+0x10>
 8008b44:	f000 fd86 	bl	8009654 <_fflush_r>
 8008b48:	68a1      	ldr	r1, [r4, #8]
 8008b4a:	4b09      	ldr	r3, [pc, #36]	@ (8008b70 <cleanup_stdio+0x38>)
 8008b4c:	4299      	cmp	r1, r3
 8008b4e:	d002      	beq.n	8008b56 <cleanup_stdio+0x1e>
 8008b50:	4620      	mov	r0, r4
 8008b52:	f000 fd7f 	bl	8009654 <_fflush_r>
 8008b56:	68e1      	ldr	r1, [r4, #12]
 8008b58:	4b06      	ldr	r3, [pc, #24]	@ (8008b74 <cleanup_stdio+0x3c>)
 8008b5a:	4299      	cmp	r1, r3
 8008b5c:	d004      	beq.n	8008b68 <cleanup_stdio+0x30>
 8008b5e:	4620      	mov	r0, r4
 8008b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b64:	f000 bd76 	b.w	8009654 <_fflush_r>
 8008b68:	bd10      	pop	{r4, pc}
 8008b6a:	bf00      	nop
 8008b6c:	24004c98 	.word	0x24004c98
 8008b70:	24004d00 	.word	0x24004d00
 8008b74:	24004d68 	.word	0x24004d68

08008b78 <global_stdio_init.part.0>:
 8008b78:	b510      	push	{r4, lr}
 8008b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba8 <global_stdio_init.part.0+0x30>)
 8008b7c:	4c0b      	ldr	r4, [pc, #44]	@ (8008bac <global_stdio_init.part.0+0x34>)
 8008b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8008bb0 <global_stdio_init.part.0+0x38>)
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	4620      	mov	r0, r4
 8008b84:	2200      	movs	r2, #0
 8008b86:	2104      	movs	r1, #4
 8008b88:	f7ff ff94 	bl	8008ab4 <std>
 8008b8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b90:	2201      	movs	r2, #1
 8008b92:	2109      	movs	r1, #9
 8008b94:	f7ff ff8e 	bl	8008ab4 <std>
 8008b98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ba2:	2112      	movs	r1, #18
 8008ba4:	f7ff bf86 	b.w	8008ab4 <std>
 8008ba8:	24004dd0 	.word	0x24004dd0
 8008bac:	24004c98 	.word	0x24004c98
 8008bb0:	08008b21 	.word	0x08008b21

08008bb4 <__sfp_lock_acquire>:
 8008bb4:	4801      	ldr	r0, [pc, #4]	@ (8008bbc <__sfp_lock_acquire+0x8>)
 8008bb6:	f000 b998 	b.w	8008eea <__retarget_lock_acquire_recursive>
 8008bba:	bf00      	nop
 8008bbc:	24004dd9 	.word	0x24004dd9

08008bc0 <__sfp_lock_release>:
 8008bc0:	4801      	ldr	r0, [pc, #4]	@ (8008bc8 <__sfp_lock_release+0x8>)
 8008bc2:	f000 b993 	b.w	8008eec <__retarget_lock_release_recursive>
 8008bc6:	bf00      	nop
 8008bc8:	24004dd9 	.word	0x24004dd9

08008bcc <__sinit>:
 8008bcc:	b510      	push	{r4, lr}
 8008bce:	4604      	mov	r4, r0
 8008bd0:	f7ff fff0 	bl	8008bb4 <__sfp_lock_acquire>
 8008bd4:	6a23      	ldr	r3, [r4, #32]
 8008bd6:	b11b      	cbz	r3, 8008be0 <__sinit+0x14>
 8008bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bdc:	f7ff bff0 	b.w	8008bc0 <__sfp_lock_release>
 8008be0:	4b04      	ldr	r3, [pc, #16]	@ (8008bf4 <__sinit+0x28>)
 8008be2:	6223      	str	r3, [r4, #32]
 8008be4:	4b04      	ldr	r3, [pc, #16]	@ (8008bf8 <__sinit+0x2c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1f5      	bne.n	8008bd8 <__sinit+0xc>
 8008bec:	f7ff ffc4 	bl	8008b78 <global_stdio_init.part.0>
 8008bf0:	e7f2      	b.n	8008bd8 <__sinit+0xc>
 8008bf2:	bf00      	nop
 8008bf4:	08008b39 	.word	0x08008b39
 8008bf8:	24004dd0 	.word	0x24004dd0

08008bfc <fiprintf>:
 8008bfc:	b40e      	push	{r1, r2, r3}
 8008bfe:	b503      	push	{r0, r1, lr}
 8008c00:	4601      	mov	r1, r0
 8008c02:	ab03      	add	r3, sp, #12
 8008c04:	4805      	ldr	r0, [pc, #20]	@ (8008c1c <fiprintf+0x20>)
 8008c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c0a:	6800      	ldr	r0, [r0, #0]
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	f000 f9f7 	bl	8009000 <_vfiprintf_r>
 8008c12:	b002      	add	sp, #8
 8008c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c18:	b003      	add	sp, #12
 8008c1a:	4770      	bx	lr
 8008c1c:	240000dc 	.word	0x240000dc

08008c20 <_fwalk_sglue>:
 8008c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c24:	4607      	mov	r7, r0
 8008c26:	4688      	mov	r8, r1
 8008c28:	4614      	mov	r4, r2
 8008c2a:	2600      	movs	r6, #0
 8008c2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c30:	f1b9 0901 	subs.w	r9, r9, #1
 8008c34:	d505      	bpl.n	8008c42 <_fwalk_sglue+0x22>
 8008c36:	6824      	ldr	r4, [r4, #0]
 8008c38:	2c00      	cmp	r4, #0
 8008c3a:	d1f7      	bne.n	8008c2c <_fwalk_sglue+0xc>
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c42:	89ab      	ldrh	r3, [r5, #12]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d907      	bls.n	8008c58 <_fwalk_sglue+0x38>
 8008c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	d003      	beq.n	8008c58 <_fwalk_sglue+0x38>
 8008c50:	4629      	mov	r1, r5
 8008c52:	4638      	mov	r0, r7
 8008c54:	47c0      	blx	r8
 8008c56:	4306      	orrs	r6, r0
 8008c58:	3568      	adds	r5, #104	@ 0x68
 8008c5a:	e7e9      	b.n	8008c30 <_fwalk_sglue+0x10>

08008c5c <__sread>:
 8008c5c:	b510      	push	{r4, lr}
 8008c5e:	460c      	mov	r4, r1
 8008c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c64:	f000 f8e2 	bl	8008e2c <_read_r>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	bfab      	itete	ge
 8008c6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c70:	181b      	addge	r3, r3, r0
 8008c72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c76:	bfac      	ite	ge
 8008c78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c7a:	81a3      	strhlt	r3, [r4, #12]
 8008c7c:	bd10      	pop	{r4, pc}

08008c7e <__swrite>:
 8008c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c82:	461f      	mov	r7, r3
 8008c84:	898b      	ldrh	r3, [r1, #12]
 8008c86:	05db      	lsls	r3, r3, #23
 8008c88:	4605      	mov	r5, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	4616      	mov	r6, r2
 8008c8e:	d505      	bpl.n	8008c9c <__swrite+0x1e>
 8008c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c94:	2302      	movs	r3, #2
 8008c96:	2200      	movs	r2, #0
 8008c98:	f000 f8b6 	bl	8008e08 <_lseek_r>
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ca2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ca6:	81a3      	strh	r3, [r4, #12]
 8008ca8:	4632      	mov	r2, r6
 8008caa:	463b      	mov	r3, r7
 8008cac:	4628      	mov	r0, r5
 8008cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb2:	f000 b8dd 	b.w	8008e70 <_write_r>

08008cb6 <__sseek>:
 8008cb6:	b510      	push	{r4, lr}
 8008cb8:	460c      	mov	r4, r1
 8008cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cbe:	f000 f8a3 	bl	8008e08 <_lseek_r>
 8008cc2:	1c43      	adds	r3, r0, #1
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	bf15      	itete	ne
 8008cc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008cce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008cd2:	81a3      	strheq	r3, [r4, #12]
 8008cd4:	bf18      	it	ne
 8008cd6:	81a3      	strhne	r3, [r4, #12]
 8008cd8:	bd10      	pop	{r4, pc}

08008cda <__sclose>:
 8008cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cde:	f000 b82d 	b.w	8008d3c <_close_r>

08008ce2 <memset>:
 8008ce2:	4402      	add	r2, r0
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d100      	bne.n	8008cec <memset+0xa>
 8008cea:	4770      	bx	lr
 8008cec:	f803 1b01 	strb.w	r1, [r3], #1
 8008cf0:	e7f9      	b.n	8008ce6 <memset+0x4>

08008cf2 <strncmp>:
 8008cf2:	b510      	push	{r4, lr}
 8008cf4:	b16a      	cbz	r2, 8008d12 <strncmp+0x20>
 8008cf6:	3901      	subs	r1, #1
 8008cf8:	1884      	adds	r4, r0, r2
 8008cfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cfe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d103      	bne.n	8008d0e <strncmp+0x1c>
 8008d06:	42a0      	cmp	r0, r4
 8008d08:	d001      	beq.n	8008d0e <strncmp+0x1c>
 8008d0a:	2a00      	cmp	r2, #0
 8008d0c:	d1f5      	bne.n	8008cfa <strncmp+0x8>
 8008d0e:	1ad0      	subs	r0, r2, r3
 8008d10:	bd10      	pop	{r4, pc}
 8008d12:	4610      	mov	r0, r2
 8008d14:	e7fc      	b.n	8008d10 <strncmp+0x1e>

08008d16 <strncpy>:
 8008d16:	b510      	push	{r4, lr}
 8008d18:	3901      	subs	r1, #1
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	b132      	cbz	r2, 8008d2c <strncpy+0x16>
 8008d1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008d22:	f803 4b01 	strb.w	r4, [r3], #1
 8008d26:	3a01      	subs	r2, #1
 8008d28:	2c00      	cmp	r4, #0
 8008d2a:	d1f7      	bne.n	8008d1c <strncpy+0x6>
 8008d2c:	441a      	add	r2, r3
 8008d2e:	2100      	movs	r1, #0
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d100      	bne.n	8008d36 <strncpy+0x20>
 8008d34:	bd10      	pop	{r4, pc}
 8008d36:	f803 1b01 	strb.w	r1, [r3], #1
 8008d3a:	e7f9      	b.n	8008d30 <strncpy+0x1a>

08008d3c <_close_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4d06      	ldr	r5, [pc, #24]	@ (8008d58 <_close_r+0x1c>)
 8008d40:	2300      	movs	r3, #0
 8008d42:	4604      	mov	r4, r0
 8008d44:	4608      	mov	r0, r1
 8008d46:	602b      	str	r3, [r5, #0]
 8008d48:	f7f8 f83c 	bl	8000dc4 <_close>
 8008d4c:	1c43      	adds	r3, r0, #1
 8008d4e:	d102      	bne.n	8008d56 <_close_r+0x1a>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	b103      	cbz	r3, 8008d56 <_close_r+0x1a>
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	24004dd4 	.word	0x24004dd4

08008d5c <_reclaim_reent>:
 8008d5c:	4b29      	ldr	r3, [pc, #164]	@ (8008e04 <_reclaim_reent+0xa8>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4283      	cmp	r3, r0
 8008d62:	b570      	push	{r4, r5, r6, lr}
 8008d64:	4604      	mov	r4, r0
 8008d66:	d04b      	beq.n	8008e00 <_reclaim_reent+0xa4>
 8008d68:	69c3      	ldr	r3, [r0, #28]
 8008d6a:	b1ab      	cbz	r3, 8008d98 <_reclaim_reent+0x3c>
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	b16b      	cbz	r3, 8008d8c <_reclaim_reent+0x30>
 8008d70:	2500      	movs	r5, #0
 8008d72:	69e3      	ldr	r3, [r4, #28]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	5959      	ldr	r1, [r3, r5]
 8008d78:	2900      	cmp	r1, #0
 8008d7a:	d13b      	bne.n	8008df4 <_reclaim_reent+0x98>
 8008d7c:	3504      	adds	r5, #4
 8008d7e:	2d80      	cmp	r5, #128	@ 0x80
 8008d80:	d1f7      	bne.n	8008d72 <_reclaim_reent+0x16>
 8008d82:	69e3      	ldr	r3, [r4, #28]
 8008d84:	4620      	mov	r0, r4
 8008d86:	68d9      	ldr	r1, [r3, #12]
 8008d88:	f000 f8c6 	bl	8008f18 <_free_r>
 8008d8c:	69e3      	ldr	r3, [r4, #28]
 8008d8e:	6819      	ldr	r1, [r3, #0]
 8008d90:	b111      	cbz	r1, 8008d98 <_reclaim_reent+0x3c>
 8008d92:	4620      	mov	r0, r4
 8008d94:	f000 f8c0 	bl	8008f18 <_free_r>
 8008d98:	6961      	ldr	r1, [r4, #20]
 8008d9a:	b111      	cbz	r1, 8008da2 <_reclaim_reent+0x46>
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 f8bb 	bl	8008f18 <_free_r>
 8008da2:	69e1      	ldr	r1, [r4, #28]
 8008da4:	b111      	cbz	r1, 8008dac <_reclaim_reent+0x50>
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 f8b6 	bl	8008f18 <_free_r>
 8008dac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008dae:	b111      	cbz	r1, 8008db6 <_reclaim_reent+0x5a>
 8008db0:	4620      	mov	r0, r4
 8008db2:	f000 f8b1 	bl	8008f18 <_free_r>
 8008db6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008db8:	b111      	cbz	r1, 8008dc0 <_reclaim_reent+0x64>
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 f8ac 	bl	8008f18 <_free_r>
 8008dc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008dc2:	b111      	cbz	r1, 8008dca <_reclaim_reent+0x6e>
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f000 f8a7 	bl	8008f18 <_free_r>
 8008dca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008dcc:	b111      	cbz	r1, 8008dd4 <_reclaim_reent+0x78>
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 f8a2 	bl	8008f18 <_free_r>
 8008dd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008dd6:	b111      	cbz	r1, 8008dde <_reclaim_reent+0x82>
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f000 f89d 	bl	8008f18 <_free_r>
 8008dde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008de0:	b111      	cbz	r1, 8008de8 <_reclaim_reent+0x8c>
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 f898 	bl	8008f18 <_free_r>
 8008de8:	6a23      	ldr	r3, [r4, #32]
 8008dea:	b14b      	cbz	r3, 8008e00 <_reclaim_reent+0xa4>
 8008dec:	4620      	mov	r0, r4
 8008dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008df2:	4718      	bx	r3
 8008df4:	680e      	ldr	r6, [r1, #0]
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 f88e 	bl	8008f18 <_free_r>
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	e7bb      	b.n	8008d78 <_reclaim_reent+0x1c>
 8008e00:	bd70      	pop	{r4, r5, r6, pc}
 8008e02:	bf00      	nop
 8008e04:	240000dc 	.word	0x240000dc

08008e08 <_lseek_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	4d07      	ldr	r5, [pc, #28]	@ (8008e28 <_lseek_r+0x20>)
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	4608      	mov	r0, r1
 8008e10:	4611      	mov	r1, r2
 8008e12:	2200      	movs	r2, #0
 8008e14:	602a      	str	r2, [r5, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	f7f7 fffb 	bl	8000e12 <_lseek>
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	d102      	bne.n	8008e26 <_lseek_r+0x1e>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	b103      	cbz	r3, 8008e26 <_lseek_r+0x1e>
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	24004dd4 	.word	0x24004dd4

08008e2c <_read_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4d07      	ldr	r5, [pc, #28]	@ (8008e4c <_read_r+0x20>)
 8008e30:	4604      	mov	r4, r0
 8008e32:	4608      	mov	r0, r1
 8008e34:	4611      	mov	r1, r2
 8008e36:	2200      	movs	r2, #0
 8008e38:	602a      	str	r2, [r5, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f7f7 ff89 	bl	8000d52 <_read>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_read_r+0x1e>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_read_r+0x1e>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	24004dd4 	.word	0x24004dd4

08008e50 <_sbrk_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4d06      	ldr	r5, [pc, #24]	@ (8008e6c <_sbrk_r+0x1c>)
 8008e54:	2300      	movs	r3, #0
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	602b      	str	r3, [r5, #0]
 8008e5c:	f7f7 ffe6 	bl	8000e2c <_sbrk>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d102      	bne.n	8008e6a <_sbrk_r+0x1a>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b103      	cbz	r3, 8008e6a <_sbrk_r+0x1a>
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	24004dd4 	.word	0x24004dd4

08008e70 <_write_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4d07      	ldr	r5, [pc, #28]	@ (8008e90 <_write_r+0x20>)
 8008e74:	4604      	mov	r4, r0
 8008e76:	4608      	mov	r0, r1
 8008e78:	4611      	mov	r1, r2
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	602a      	str	r2, [r5, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	f7f7 ff84 	bl	8000d8c <_write>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d102      	bne.n	8008e8e <_write_r+0x1e>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	b103      	cbz	r3, 8008e8e <_write_r+0x1e>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	24004dd4 	.word	0x24004dd4

08008e94 <__errno>:
 8008e94:	4b01      	ldr	r3, [pc, #4]	@ (8008e9c <__errno+0x8>)
 8008e96:	6818      	ldr	r0, [r3, #0]
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	240000dc 	.word	0x240000dc

08008ea0 <__libc_init_array>:
 8008ea0:	b570      	push	{r4, r5, r6, lr}
 8008ea2:	4d0d      	ldr	r5, [pc, #52]	@ (8008ed8 <__libc_init_array+0x38>)
 8008ea4:	4c0d      	ldr	r4, [pc, #52]	@ (8008edc <__libc_init_array+0x3c>)
 8008ea6:	1b64      	subs	r4, r4, r5
 8008ea8:	10a4      	asrs	r4, r4, #2
 8008eaa:	2600      	movs	r6, #0
 8008eac:	42a6      	cmp	r6, r4
 8008eae:	d109      	bne.n	8008ec4 <__libc_init_array+0x24>
 8008eb0:	4d0b      	ldr	r5, [pc, #44]	@ (8008ee0 <__libc_init_array+0x40>)
 8008eb2:	4c0c      	ldr	r4, [pc, #48]	@ (8008ee4 <__libc_init_array+0x44>)
 8008eb4:	f000 fd52 	bl	800995c <_init>
 8008eb8:	1b64      	subs	r4, r4, r5
 8008eba:	10a4      	asrs	r4, r4, #2
 8008ebc:	2600      	movs	r6, #0
 8008ebe:	42a6      	cmp	r6, r4
 8008ec0:	d105      	bne.n	8008ece <__libc_init_array+0x2e>
 8008ec2:	bd70      	pop	{r4, r5, r6, pc}
 8008ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec8:	4798      	blx	r3
 8008eca:	3601      	adds	r6, #1
 8008ecc:	e7ee      	b.n	8008eac <__libc_init_array+0xc>
 8008ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed2:	4798      	blx	r3
 8008ed4:	3601      	adds	r6, #1
 8008ed6:	e7f2      	b.n	8008ebe <__libc_init_array+0x1e>
 8008ed8:	08009ce0 	.word	0x08009ce0
 8008edc:	08009ce0 	.word	0x08009ce0
 8008ee0:	08009ce0 	.word	0x08009ce0
 8008ee4:	08009ce4 	.word	0x08009ce4

08008ee8 <__retarget_lock_init_recursive>:
 8008ee8:	4770      	bx	lr

08008eea <__retarget_lock_acquire_recursive>:
 8008eea:	4770      	bx	lr

08008eec <__retarget_lock_release_recursive>:
 8008eec:	4770      	bx	lr

08008eee <memcpy>:
 8008eee:	440a      	add	r2, r1
 8008ef0:	4291      	cmp	r1, r2
 8008ef2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ef6:	d100      	bne.n	8008efa <memcpy+0xc>
 8008ef8:	4770      	bx	lr
 8008efa:	b510      	push	{r4, lr}
 8008efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f04:	4291      	cmp	r1, r2
 8008f06:	d1f9      	bne.n	8008efc <memcpy+0xe>
 8008f08:	bd10      	pop	{r4, pc}

08008f0a <abort>:
 8008f0a:	b508      	push	{r3, lr}
 8008f0c:	2006      	movs	r0, #6
 8008f0e:	f000 fc85 	bl	800981c <raise>
 8008f12:	2001      	movs	r0, #1
 8008f14:	f7f7 ff12 	bl	8000d3c <_exit>

08008f18 <_free_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	d041      	beq.n	8008fa4 <_free_r+0x8c>
 8008f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f24:	1f0c      	subs	r4, r1, #4
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bfb8      	it	lt
 8008f2a:	18e4      	addlt	r4, r4, r3
 8008f2c:	f7ff fdb6 	bl	8008a9c <__malloc_lock>
 8008f30:	4a1d      	ldr	r2, [pc, #116]	@ (8008fa8 <_free_r+0x90>)
 8008f32:	6813      	ldr	r3, [r2, #0]
 8008f34:	b933      	cbnz	r3, 8008f44 <_free_r+0x2c>
 8008f36:	6063      	str	r3, [r4, #4]
 8008f38:	6014      	str	r4, [r2, #0]
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f40:	f7ff bdb2 	b.w	8008aa8 <__malloc_unlock>
 8008f44:	42a3      	cmp	r3, r4
 8008f46:	d908      	bls.n	8008f5a <_free_r+0x42>
 8008f48:	6820      	ldr	r0, [r4, #0]
 8008f4a:	1821      	adds	r1, r4, r0
 8008f4c:	428b      	cmp	r3, r1
 8008f4e:	bf01      	itttt	eq
 8008f50:	6819      	ldreq	r1, [r3, #0]
 8008f52:	685b      	ldreq	r3, [r3, #4]
 8008f54:	1809      	addeq	r1, r1, r0
 8008f56:	6021      	streq	r1, [r4, #0]
 8008f58:	e7ed      	b.n	8008f36 <_free_r+0x1e>
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	b10b      	cbz	r3, 8008f64 <_free_r+0x4c>
 8008f60:	42a3      	cmp	r3, r4
 8008f62:	d9fa      	bls.n	8008f5a <_free_r+0x42>
 8008f64:	6811      	ldr	r1, [r2, #0]
 8008f66:	1850      	adds	r0, r2, r1
 8008f68:	42a0      	cmp	r0, r4
 8008f6a:	d10b      	bne.n	8008f84 <_free_r+0x6c>
 8008f6c:	6820      	ldr	r0, [r4, #0]
 8008f6e:	4401      	add	r1, r0
 8008f70:	1850      	adds	r0, r2, r1
 8008f72:	4283      	cmp	r3, r0
 8008f74:	6011      	str	r1, [r2, #0]
 8008f76:	d1e0      	bne.n	8008f3a <_free_r+0x22>
 8008f78:	6818      	ldr	r0, [r3, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	6053      	str	r3, [r2, #4]
 8008f7e:	4408      	add	r0, r1
 8008f80:	6010      	str	r0, [r2, #0]
 8008f82:	e7da      	b.n	8008f3a <_free_r+0x22>
 8008f84:	d902      	bls.n	8008f8c <_free_r+0x74>
 8008f86:	230c      	movs	r3, #12
 8008f88:	602b      	str	r3, [r5, #0]
 8008f8a:	e7d6      	b.n	8008f3a <_free_r+0x22>
 8008f8c:	6820      	ldr	r0, [r4, #0]
 8008f8e:	1821      	adds	r1, r4, r0
 8008f90:	428b      	cmp	r3, r1
 8008f92:	bf04      	itt	eq
 8008f94:	6819      	ldreq	r1, [r3, #0]
 8008f96:	685b      	ldreq	r3, [r3, #4]
 8008f98:	6063      	str	r3, [r4, #4]
 8008f9a:	bf04      	itt	eq
 8008f9c:	1809      	addeq	r1, r1, r0
 8008f9e:	6021      	streq	r1, [r4, #0]
 8008fa0:	6054      	str	r4, [r2, #4]
 8008fa2:	e7ca      	b.n	8008f3a <_free_r+0x22>
 8008fa4:	bd38      	pop	{r3, r4, r5, pc}
 8008fa6:	bf00      	nop
 8008fa8:	24004c94 	.word	0x24004c94

08008fac <__sfputc_r>:
 8008fac:	6893      	ldr	r3, [r2, #8]
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	b410      	push	{r4}
 8008fb4:	6093      	str	r3, [r2, #8]
 8008fb6:	da08      	bge.n	8008fca <__sfputc_r+0x1e>
 8008fb8:	6994      	ldr	r4, [r2, #24]
 8008fba:	42a3      	cmp	r3, r4
 8008fbc:	db01      	blt.n	8008fc2 <__sfputc_r+0x16>
 8008fbe:	290a      	cmp	r1, #10
 8008fc0:	d103      	bne.n	8008fca <__sfputc_r+0x1e>
 8008fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fc6:	f000 bb6d 	b.w	80096a4 <__swbuf_r>
 8008fca:	6813      	ldr	r3, [r2, #0]
 8008fcc:	1c58      	adds	r0, r3, #1
 8008fce:	6010      	str	r0, [r2, #0]
 8008fd0:	7019      	strb	r1, [r3, #0]
 8008fd2:	4608      	mov	r0, r1
 8008fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <__sfputs_r>:
 8008fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fdc:	4606      	mov	r6, r0
 8008fde:	460f      	mov	r7, r1
 8008fe0:	4614      	mov	r4, r2
 8008fe2:	18d5      	adds	r5, r2, r3
 8008fe4:	42ac      	cmp	r4, r5
 8008fe6:	d101      	bne.n	8008fec <__sfputs_r+0x12>
 8008fe8:	2000      	movs	r0, #0
 8008fea:	e007      	b.n	8008ffc <__sfputs_r+0x22>
 8008fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff0:	463a      	mov	r2, r7
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7ff ffda 	bl	8008fac <__sfputc_r>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d1f3      	bne.n	8008fe4 <__sfputs_r+0xa>
 8008ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009000 <_vfiprintf_r>:
 8009000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	460d      	mov	r5, r1
 8009006:	b09d      	sub	sp, #116	@ 0x74
 8009008:	4614      	mov	r4, r2
 800900a:	4698      	mov	r8, r3
 800900c:	4606      	mov	r6, r0
 800900e:	b118      	cbz	r0, 8009018 <_vfiprintf_r+0x18>
 8009010:	6a03      	ldr	r3, [r0, #32]
 8009012:	b90b      	cbnz	r3, 8009018 <_vfiprintf_r+0x18>
 8009014:	f7ff fdda 	bl	8008bcc <__sinit>
 8009018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800901a:	07d9      	lsls	r1, r3, #31
 800901c:	d405      	bmi.n	800902a <_vfiprintf_r+0x2a>
 800901e:	89ab      	ldrh	r3, [r5, #12]
 8009020:	059a      	lsls	r2, r3, #22
 8009022:	d402      	bmi.n	800902a <_vfiprintf_r+0x2a>
 8009024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009026:	f7ff ff60 	bl	8008eea <__retarget_lock_acquire_recursive>
 800902a:	89ab      	ldrh	r3, [r5, #12]
 800902c:	071b      	lsls	r3, r3, #28
 800902e:	d501      	bpl.n	8009034 <_vfiprintf_r+0x34>
 8009030:	692b      	ldr	r3, [r5, #16]
 8009032:	b99b      	cbnz	r3, 800905c <_vfiprintf_r+0x5c>
 8009034:	4629      	mov	r1, r5
 8009036:	4630      	mov	r0, r6
 8009038:	f000 fb72 	bl	8009720 <__swsetup_r>
 800903c:	b170      	cbz	r0, 800905c <_vfiprintf_r+0x5c>
 800903e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009040:	07dc      	lsls	r4, r3, #31
 8009042:	d504      	bpl.n	800904e <_vfiprintf_r+0x4e>
 8009044:	f04f 30ff 	mov.w	r0, #4294967295
 8009048:	b01d      	add	sp, #116	@ 0x74
 800904a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904e:	89ab      	ldrh	r3, [r5, #12]
 8009050:	0598      	lsls	r0, r3, #22
 8009052:	d4f7      	bmi.n	8009044 <_vfiprintf_r+0x44>
 8009054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009056:	f7ff ff49 	bl	8008eec <__retarget_lock_release_recursive>
 800905a:	e7f3      	b.n	8009044 <_vfiprintf_r+0x44>
 800905c:	2300      	movs	r3, #0
 800905e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009060:	2320      	movs	r3, #32
 8009062:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009066:	f8cd 800c 	str.w	r8, [sp, #12]
 800906a:	2330      	movs	r3, #48	@ 0x30
 800906c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800921c <_vfiprintf_r+0x21c>
 8009070:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009074:	f04f 0901 	mov.w	r9, #1
 8009078:	4623      	mov	r3, r4
 800907a:	469a      	mov	sl, r3
 800907c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009080:	b10a      	cbz	r2, 8009086 <_vfiprintf_r+0x86>
 8009082:	2a25      	cmp	r2, #37	@ 0x25
 8009084:	d1f9      	bne.n	800907a <_vfiprintf_r+0x7a>
 8009086:	ebba 0b04 	subs.w	fp, sl, r4
 800908a:	d00b      	beq.n	80090a4 <_vfiprintf_r+0xa4>
 800908c:	465b      	mov	r3, fp
 800908e:	4622      	mov	r2, r4
 8009090:	4629      	mov	r1, r5
 8009092:	4630      	mov	r0, r6
 8009094:	f7ff ffa1 	bl	8008fda <__sfputs_r>
 8009098:	3001      	adds	r0, #1
 800909a:	f000 80a7 	beq.w	80091ec <_vfiprintf_r+0x1ec>
 800909e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090a0:	445a      	add	r2, fp
 80090a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80090a4:	f89a 3000 	ldrb.w	r3, [sl]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 809f 	beq.w	80091ec <_vfiprintf_r+0x1ec>
 80090ae:	2300      	movs	r3, #0
 80090b0:	f04f 32ff 	mov.w	r2, #4294967295
 80090b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090b8:	f10a 0a01 	add.w	sl, sl, #1
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	9307      	str	r3, [sp, #28]
 80090c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80090c6:	4654      	mov	r4, sl
 80090c8:	2205      	movs	r2, #5
 80090ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ce:	4853      	ldr	r0, [pc, #332]	@ (800921c <_vfiprintf_r+0x21c>)
 80090d0:	f7f7 f91e 	bl	8000310 <memchr>
 80090d4:	9a04      	ldr	r2, [sp, #16]
 80090d6:	b9d8      	cbnz	r0, 8009110 <_vfiprintf_r+0x110>
 80090d8:	06d1      	lsls	r1, r2, #27
 80090da:	bf44      	itt	mi
 80090dc:	2320      	movmi	r3, #32
 80090de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090e2:	0713      	lsls	r3, r2, #28
 80090e4:	bf44      	itt	mi
 80090e6:	232b      	movmi	r3, #43	@ 0x2b
 80090e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090ec:	f89a 3000 	ldrb.w	r3, [sl]
 80090f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80090f2:	d015      	beq.n	8009120 <_vfiprintf_r+0x120>
 80090f4:	9a07      	ldr	r2, [sp, #28]
 80090f6:	4654      	mov	r4, sl
 80090f8:	2000      	movs	r0, #0
 80090fa:	f04f 0c0a 	mov.w	ip, #10
 80090fe:	4621      	mov	r1, r4
 8009100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009104:	3b30      	subs	r3, #48	@ 0x30
 8009106:	2b09      	cmp	r3, #9
 8009108:	d94b      	bls.n	80091a2 <_vfiprintf_r+0x1a2>
 800910a:	b1b0      	cbz	r0, 800913a <_vfiprintf_r+0x13a>
 800910c:	9207      	str	r2, [sp, #28]
 800910e:	e014      	b.n	800913a <_vfiprintf_r+0x13a>
 8009110:	eba0 0308 	sub.w	r3, r0, r8
 8009114:	fa09 f303 	lsl.w	r3, r9, r3
 8009118:	4313      	orrs	r3, r2
 800911a:	9304      	str	r3, [sp, #16]
 800911c:	46a2      	mov	sl, r4
 800911e:	e7d2      	b.n	80090c6 <_vfiprintf_r+0xc6>
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	1d19      	adds	r1, r3, #4
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	9103      	str	r1, [sp, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	bfbb      	ittet	lt
 800912c:	425b      	neglt	r3, r3
 800912e:	f042 0202 	orrlt.w	r2, r2, #2
 8009132:	9307      	strge	r3, [sp, #28]
 8009134:	9307      	strlt	r3, [sp, #28]
 8009136:	bfb8      	it	lt
 8009138:	9204      	strlt	r2, [sp, #16]
 800913a:	7823      	ldrb	r3, [r4, #0]
 800913c:	2b2e      	cmp	r3, #46	@ 0x2e
 800913e:	d10a      	bne.n	8009156 <_vfiprintf_r+0x156>
 8009140:	7863      	ldrb	r3, [r4, #1]
 8009142:	2b2a      	cmp	r3, #42	@ 0x2a
 8009144:	d132      	bne.n	80091ac <_vfiprintf_r+0x1ac>
 8009146:	9b03      	ldr	r3, [sp, #12]
 8009148:	1d1a      	adds	r2, r3, #4
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	9203      	str	r2, [sp, #12]
 800914e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009152:	3402      	adds	r4, #2
 8009154:	9305      	str	r3, [sp, #20]
 8009156:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800922c <_vfiprintf_r+0x22c>
 800915a:	7821      	ldrb	r1, [r4, #0]
 800915c:	2203      	movs	r2, #3
 800915e:	4650      	mov	r0, sl
 8009160:	f7f7 f8d6 	bl	8000310 <memchr>
 8009164:	b138      	cbz	r0, 8009176 <_vfiprintf_r+0x176>
 8009166:	9b04      	ldr	r3, [sp, #16]
 8009168:	eba0 000a 	sub.w	r0, r0, sl
 800916c:	2240      	movs	r2, #64	@ 0x40
 800916e:	4082      	lsls	r2, r0
 8009170:	4313      	orrs	r3, r2
 8009172:	3401      	adds	r4, #1
 8009174:	9304      	str	r3, [sp, #16]
 8009176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800917a:	4829      	ldr	r0, [pc, #164]	@ (8009220 <_vfiprintf_r+0x220>)
 800917c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009180:	2206      	movs	r2, #6
 8009182:	f7f7 f8c5 	bl	8000310 <memchr>
 8009186:	2800      	cmp	r0, #0
 8009188:	d03f      	beq.n	800920a <_vfiprintf_r+0x20a>
 800918a:	4b26      	ldr	r3, [pc, #152]	@ (8009224 <_vfiprintf_r+0x224>)
 800918c:	bb1b      	cbnz	r3, 80091d6 <_vfiprintf_r+0x1d6>
 800918e:	9b03      	ldr	r3, [sp, #12]
 8009190:	3307      	adds	r3, #7
 8009192:	f023 0307 	bic.w	r3, r3, #7
 8009196:	3308      	adds	r3, #8
 8009198:	9303      	str	r3, [sp, #12]
 800919a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800919c:	443b      	add	r3, r7
 800919e:	9309      	str	r3, [sp, #36]	@ 0x24
 80091a0:	e76a      	b.n	8009078 <_vfiprintf_r+0x78>
 80091a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80091a6:	460c      	mov	r4, r1
 80091a8:	2001      	movs	r0, #1
 80091aa:	e7a8      	b.n	80090fe <_vfiprintf_r+0xfe>
 80091ac:	2300      	movs	r3, #0
 80091ae:	3401      	adds	r4, #1
 80091b0:	9305      	str	r3, [sp, #20]
 80091b2:	4619      	mov	r1, r3
 80091b4:	f04f 0c0a 	mov.w	ip, #10
 80091b8:	4620      	mov	r0, r4
 80091ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091be:	3a30      	subs	r2, #48	@ 0x30
 80091c0:	2a09      	cmp	r2, #9
 80091c2:	d903      	bls.n	80091cc <_vfiprintf_r+0x1cc>
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d0c6      	beq.n	8009156 <_vfiprintf_r+0x156>
 80091c8:	9105      	str	r1, [sp, #20]
 80091ca:	e7c4      	b.n	8009156 <_vfiprintf_r+0x156>
 80091cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80091d0:	4604      	mov	r4, r0
 80091d2:	2301      	movs	r3, #1
 80091d4:	e7f0      	b.n	80091b8 <_vfiprintf_r+0x1b8>
 80091d6:	ab03      	add	r3, sp, #12
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	462a      	mov	r2, r5
 80091dc:	4b12      	ldr	r3, [pc, #72]	@ (8009228 <_vfiprintf_r+0x228>)
 80091de:	a904      	add	r1, sp, #16
 80091e0:	4630      	mov	r0, r6
 80091e2:	f3af 8000 	nop.w
 80091e6:	4607      	mov	r7, r0
 80091e8:	1c78      	adds	r0, r7, #1
 80091ea:	d1d6      	bne.n	800919a <_vfiprintf_r+0x19a>
 80091ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091ee:	07d9      	lsls	r1, r3, #31
 80091f0:	d405      	bmi.n	80091fe <_vfiprintf_r+0x1fe>
 80091f2:	89ab      	ldrh	r3, [r5, #12]
 80091f4:	059a      	lsls	r2, r3, #22
 80091f6:	d402      	bmi.n	80091fe <_vfiprintf_r+0x1fe>
 80091f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091fa:	f7ff fe77 	bl	8008eec <__retarget_lock_release_recursive>
 80091fe:	89ab      	ldrh	r3, [r5, #12]
 8009200:	065b      	lsls	r3, r3, #25
 8009202:	f53f af1f 	bmi.w	8009044 <_vfiprintf_r+0x44>
 8009206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009208:	e71e      	b.n	8009048 <_vfiprintf_r+0x48>
 800920a:	ab03      	add	r3, sp, #12
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	462a      	mov	r2, r5
 8009210:	4b05      	ldr	r3, [pc, #20]	@ (8009228 <_vfiprintf_r+0x228>)
 8009212:	a904      	add	r1, sp, #16
 8009214:	4630      	mov	r0, r6
 8009216:	f000 f879 	bl	800930c <_printf_i>
 800921a:	e7e4      	b.n	80091e6 <_vfiprintf_r+0x1e6>
 800921c:	08009ca3 	.word	0x08009ca3
 8009220:	08009cad 	.word	0x08009cad
 8009224:	00000000 	.word	0x00000000
 8009228:	08008fdb 	.word	0x08008fdb
 800922c:	08009ca9 	.word	0x08009ca9

08009230 <_printf_common>:
 8009230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009234:	4616      	mov	r6, r2
 8009236:	4698      	mov	r8, r3
 8009238:	688a      	ldr	r2, [r1, #8]
 800923a:	690b      	ldr	r3, [r1, #16]
 800923c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009240:	4293      	cmp	r3, r2
 8009242:	bfb8      	it	lt
 8009244:	4613      	movlt	r3, r2
 8009246:	6033      	str	r3, [r6, #0]
 8009248:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800924c:	4607      	mov	r7, r0
 800924e:	460c      	mov	r4, r1
 8009250:	b10a      	cbz	r2, 8009256 <_printf_common+0x26>
 8009252:	3301      	adds	r3, #1
 8009254:	6033      	str	r3, [r6, #0]
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	0699      	lsls	r1, r3, #26
 800925a:	bf42      	ittt	mi
 800925c:	6833      	ldrmi	r3, [r6, #0]
 800925e:	3302      	addmi	r3, #2
 8009260:	6033      	strmi	r3, [r6, #0]
 8009262:	6825      	ldr	r5, [r4, #0]
 8009264:	f015 0506 	ands.w	r5, r5, #6
 8009268:	d106      	bne.n	8009278 <_printf_common+0x48>
 800926a:	f104 0a19 	add.w	sl, r4, #25
 800926e:	68e3      	ldr	r3, [r4, #12]
 8009270:	6832      	ldr	r2, [r6, #0]
 8009272:	1a9b      	subs	r3, r3, r2
 8009274:	42ab      	cmp	r3, r5
 8009276:	dc26      	bgt.n	80092c6 <_printf_common+0x96>
 8009278:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800927c:	6822      	ldr	r2, [r4, #0]
 800927e:	3b00      	subs	r3, #0
 8009280:	bf18      	it	ne
 8009282:	2301      	movne	r3, #1
 8009284:	0692      	lsls	r2, r2, #26
 8009286:	d42b      	bmi.n	80092e0 <_printf_common+0xb0>
 8009288:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800928c:	4641      	mov	r1, r8
 800928e:	4638      	mov	r0, r7
 8009290:	47c8      	blx	r9
 8009292:	3001      	adds	r0, #1
 8009294:	d01e      	beq.n	80092d4 <_printf_common+0xa4>
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	6922      	ldr	r2, [r4, #16]
 800929a:	f003 0306 	and.w	r3, r3, #6
 800929e:	2b04      	cmp	r3, #4
 80092a0:	bf02      	ittt	eq
 80092a2:	68e5      	ldreq	r5, [r4, #12]
 80092a4:	6833      	ldreq	r3, [r6, #0]
 80092a6:	1aed      	subeq	r5, r5, r3
 80092a8:	68a3      	ldr	r3, [r4, #8]
 80092aa:	bf0c      	ite	eq
 80092ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092b0:	2500      	movne	r5, #0
 80092b2:	4293      	cmp	r3, r2
 80092b4:	bfc4      	itt	gt
 80092b6:	1a9b      	subgt	r3, r3, r2
 80092b8:	18ed      	addgt	r5, r5, r3
 80092ba:	2600      	movs	r6, #0
 80092bc:	341a      	adds	r4, #26
 80092be:	42b5      	cmp	r5, r6
 80092c0:	d11a      	bne.n	80092f8 <_printf_common+0xc8>
 80092c2:	2000      	movs	r0, #0
 80092c4:	e008      	b.n	80092d8 <_printf_common+0xa8>
 80092c6:	2301      	movs	r3, #1
 80092c8:	4652      	mov	r2, sl
 80092ca:	4641      	mov	r1, r8
 80092cc:	4638      	mov	r0, r7
 80092ce:	47c8      	blx	r9
 80092d0:	3001      	adds	r0, #1
 80092d2:	d103      	bne.n	80092dc <_printf_common+0xac>
 80092d4:	f04f 30ff 	mov.w	r0, #4294967295
 80092d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092dc:	3501      	adds	r5, #1
 80092de:	e7c6      	b.n	800926e <_printf_common+0x3e>
 80092e0:	18e1      	adds	r1, r4, r3
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	2030      	movs	r0, #48	@ 0x30
 80092e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80092ea:	4422      	add	r2, r4
 80092ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80092f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092f4:	3302      	adds	r3, #2
 80092f6:	e7c7      	b.n	8009288 <_printf_common+0x58>
 80092f8:	2301      	movs	r3, #1
 80092fa:	4622      	mov	r2, r4
 80092fc:	4641      	mov	r1, r8
 80092fe:	4638      	mov	r0, r7
 8009300:	47c8      	blx	r9
 8009302:	3001      	adds	r0, #1
 8009304:	d0e6      	beq.n	80092d4 <_printf_common+0xa4>
 8009306:	3601      	adds	r6, #1
 8009308:	e7d9      	b.n	80092be <_printf_common+0x8e>
	...

0800930c <_printf_i>:
 800930c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	7e0f      	ldrb	r7, [r1, #24]
 8009312:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009314:	2f78      	cmp	r7, #120	@ 0x78
 8009316:	4691      	mov	r9, r2
 8009318:	4680      	mov	r8, r0
 800931a:	460c      	mov	r4, r1
 800931c:	469a      	mov	sl, r3
 800931e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009322:	d807      	bhi.n	8009334 <_printf_i+0x28>
 8009324:	2f62      	cmp	r7, #98	@ 0x62
 8009326:	d80a      	bhi.n	800933e <_printf_i+0x32>
 8009328:	2f00      	cmp	r7, #0
 800932a:	f000 80d2 	beq.w	80094d2 <_printf_i+0x1c6>
 800932e:	2f58      	cmp	r7, #88	@ 0x58
 8009330:	f000 80b9 	beq.w	80094a6 <_printf_i+0x19a>
 8009334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009338:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800933c:	e03a      	b.n	80093b4 <_printf_i+0xa8>
 800933e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009342:	2b15      	cmp	r3, #21
 8009344:	d8f6      	bhi.n	8009334 <_printf_i+0x28>
 8009346:	a101      	add	r1, pc, #4	@ (adr r1, 800934c <_printf_i+0x40>)
 8009348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800934c:	080093a5 	.word	0x080093a5
 8009350:	080093b9 	.word	0x080093b9
 8009354:	08009335 	.word	0x08009335
 8009358:	08009335 	.word	0x08009335
 800935c:	08009335 	.word	0x08009335
 8009360:	08009335 	.word	0x08009335
 8009364:	080093b9 	.word	0x080093b9
 8009368:	08009335 	.word	0x08009335
 800936c:	08009335 	.word	0x08009335
 8009370:	08009335 	.word	0x08009335
 8009374:	08009335 	.word	0x08009335
 8009378:	080094b9 	.word	0x080094b9
 800937c:	080093e3 	.word	0x080093e3
 8009380:	08009473 	.word	0x08009473
 8009384:	08009335 	.word	0x08009335
 8009388:	08009335 	.word	0x08009335
 800938c:	080094db 	.word	0x080094db
 8009390:	08009335 	.word	0x08009335
 8009394:	080093e3 	.word	0x080093e3
 8009398:	08009335 	.word	0x08009335
 800939c:	08009335 	.word	0x08009335
 80093a0:	0800947b 	.word	0x0800947b
 80093a4:	6833      	ldr	r3, [r6, #0]
 80093a6:	1d1a      	adds	r2, r3, #4
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6032      	str	r2, [r6, #0]
 80093ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093b4:	2301      	movs	r3, #1
 80093b6:	e09d      	b.n	80094f4 <_printf_i+0x1e8>
 80093b8:	6833      	ldr	r3, [r6, #0]
 80093ba:	6820      	ldr	r0, [r4, #0]
 80093bc:	1d19      	adds	r1, r3, #4
 80093be:	6031      	str	r1, [r6, #0]
 80093c0:	0606      	lsls	r6, r0, #24
 80093c2:	d501      	bpl.n	80093c8 <_printf_i+0xbc>
 80093c4:	681d      	ldr	r5, [r3, #0]
 80093c6:	e003      	b.n	80093d0 <_printf_i+0xc4>
 80093c8:	0645      	lsls	r5, r0, #25
 80093ca:	d5fb      	bpl.n	80093c4 <_printf_i+0xb8>
 80093cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093d0:	2d00      	cmp	r5, #0
 80093d2:	da03      	bge.n	80093dc <_printf_i+0xd0>
 80093d4:	232d      	movs	r3, #45	@ 0x2d
 80093d6:	426d      	negs	r5, r5
 80093d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093dc:	4859      	ldr	r0, [pc, #356]	@ (8009544 <_printf_i+0x238>)
 80093de:	230a      	movs	r3, #10
 80093e0:	e011      	b.n	8009406 <_printf_i+0xfa>
 80093e2:	6821      	ldr	r1, [r4, #0]
 80093e4:	6833      	ldr	r3, [r6, #0]
 80093e6:	0608      	lsls	r0, r1, #24
 80093e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80093ec:	d402      	bmi.n	80093f4 <_printf_i+0xe8>
 80093ee:	0649      	lsls	r1, r1, #25
 80093f0:	bf48      	it	mi
 80093f2:	b2ad      	uxthmi	r5, r5
 80093f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80093f6:	4853      	ldr	r0, [pc, #332]	@ (8009544 <_printf_i+0x238>)
 80093f8:	6033      	str	r3, [r6, #0]
 80093fa:	bf14      	ite	ne
 80093fc:	230a      	movne	r3, #10
 80093fe:	2308      	moveq	r3, #8
 8009400:	2100      	movs	r1, #0
 8009402:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009406:	6866      	ldr	r6, [r4, #4]
 8009408:	60a6      	str	r6, [r4, #8]
 800940a:	2e00      	cmp	r6, #0
 800940c:	bfa2      	ittt	ge
 800940e:	6821      	ldrge	r1, [r4, #0]
 8009410:	f021 0104 	bicge.w	r1, r1, #4
 8009414:	6021      	strge	r1, [r4, #0]
 8009416:	b90d      	cbnz	r5, 800941c <_printf_i+0x110>
 8009418:	2e00      	cmp	r6, #0
 800941a:	d04b      	beq.n	80094b4 <_printf_i+0x1a8>
 800941c:	4616      	mov	r6, r2
 800941e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009422:	fb03 5711 	mls	r7, r3, r1, r5
 8009426:	5dc7      	ldrb	r7, [r0, r7]
 8009428:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800942c:	462f      	mov	r7, r5
 800942e:	42bb      	cmp	r3, r7
 8009430:	460d      	mov	r5, r1
 8009432:	d9f4      	bls.n	800941e <_printf_i+0x112>
 8009434:	2b08      	cmp	r3, #8
 8009436:	d10b      	bne.n	8009450 <_printf_i+0x144>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	07df      	lsls	r7, r3, #31
 800943c:	d508      	bpl.n	8009450 <_printf_i+0x144>
 800943e:	6923      	ldr	r3, [r4, #16]
 8009440:	6861      	ldr	r1, [r4, #4]
 8009442:	4299      	cmp	r1, r3
 8009444:	bfde      	ittt	le
 8009446:	2330      	movle	r3, #48	@ 0x30
 8009448:	f806 3c01 	strble.w	r3, [r6, #-1]
 800944c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009450:	1b92      	subs	r2, r2, r6
 8009452:	6122      	str	r2, [r4, #16]
 8009454:	f8cd a000 	str.w	sl, [sp]
 8009458:	464b      	mov	r3, r9
 800945a:	aa03      	add	r2, sp, #12
 800945c:	4621      	mov	r1, r4
 800945e:	4640      	mov	r0, r8
 8009460:	f7ff fee6 	bl	8009230 <_printf_common>
 8009464:	3001      	adds	r0, #1
 8009466:	d14a      	bne.n	80094fe <_printf_i+0x1f2>
 8009468:	f04f 30ff 	mov.w	r0, #4294967295
 800946c:	b004      	add	sp, #16
 800946e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	f043 0320 	orr.w	r3, r3, #32
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	4833      	ldr	r0, [pc, #204]	@ (8009548 <_printf_i+0x23c>)
 800947c:	2778      	movs	r7, #120	@ 0x78
 800947e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	6831      	ldr	r1, [r6, #0]
 8009486:	061f      	lsls	r7, r3, #24
 8009488:	f851 5b04 	ldr.w	r5, [r1], #4
 800948c:	d402      	bmi.n	8009494 <_printf_i+0x188>
 800948e:	065f      	lsls	r7, r3, #25
 8009490:	bf48      	it	mi
 8009492:	b2ad      	uxthmi	r5, r5
 8009494:	6031      	str	r1, [r6, #0]
 8009496:	07d9      	lsls	r1, r3, #31
 8009498:	bf44      	itt	mi
 800949a:	f043 0320 	orrmi.w	r3, r3, #32
 800949e:	6023      	strmi	r3, [r4, #0]
 80094a0:	b11d      	cbz	r5, 80094aa <_printf_i+0x19e>
 80094a2:	2310      	movs	r3, #16
 80094a4:	e7ac      	b.n	8009400 <_printf_i+0xf4>
 80094a6:	4827      	ldr	r0, [pc, #156]	@ (8009544 <_printf_i+0x238>)
 80094a8:	e7e9      	b.n	800947e <_printf_i+0x172>
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	f023 0320 	bic.w	r3, r3, #32
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	e7f6      	b.n	80094a2 <_printf_i+0x196>
 80094b4:	4616      	mov	r6, r2
 80094b6:	e7bd      	b.n	8009434 <_printf_i+0x128>
 80094b8:	6833      	ldr	r3, [r6, #0]
 80094ba:	6825      	ldr	r5, [r4, #0]
 80094bc:	6961      	ldr	r1, [r4, #20]
 80094be:	1d18      	adds	r0, r3, #4
 80094c0:	6030      	str	r0, [r6, #0]
 80094c2:	062e      	lsls	r6, r5, #24
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	d501      	bpl.n	80094cc <_printf_i+0x1c0>
 80094c8:	6019      	str	r1, [r3, #0]
 80094ca:	e002      	b.n	80094d2 <_printf_i+0x1c6>
 80094cc:	0668      	lsls	r0, r5, #25
 80094ce:	d5fb      	bpl.n	80094c8 <_printf_i+0x1bc>
 80094d0:	8019      	strh	r1, [r3, #0]
 80094d2:	2300      	movs	r3, #0
 80094d4:	6123      	str	r3, [r4, #16]
 80094d6:	4616      	mov	r6, r2
 80094d8:	e7bc      	b.n	8009454 <_printf_i+0x148>
 80094da:	6833      	ldr	r3, [r6, #0]
 80094dc:	1d1a      	adds	r2, r3, #4
 80094de:	6032      	str	r2, [r6, #0]
 80094e0:	681e      	ldr	r6, [r3, #0]
 80094e2:	6862      	ldr	r2, [r4, #4]
 80094e4:	2100      	movs	r1, #0
 80094e6:	4630      	mov	r0, r6
 80094e8:	f7f6 ff12 	bl	8000310 <memchr>
 80094ec:	b108      	cbz	r0, 80094f2 <_printf_i+0x1e6>
 80094ee:	1b80      	subs	r0, r0, r6
 80094f0:	6060      	str	r0, [r4, #4]
 80094f2:	6863      	ldr	r3, [r4, #4]
 80094f4:	6123      	str	r3, [r4, #16]
 80094f6:	2300      	movs	r3, #0
 80094f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094fc:	e7aa      	b.n	8009454 <_printf_i+0x148>
 80094fe:	6923      	ldr	r3, [r4, #16]
 8009500:	4632      	mov	r2, r6
 8009502:	4649      	mov	r1, r9
 8009504:	4640      	mov	r0, r8
 8009506:	47d0      	blx	sl
 8009508:	3001      	adds	r0, #1
 800950a:	d0ad      	beq.n	8009468 <_printf_i+0x15c>
 800950c:	6823      	ldr	r3, [r4, #0]
 800950e:	079b      	lsls	r3, r3, #30
 8009510:	d413      	bmi.n	800953a <_printf_i+0x22e>
 8009512:	68e0      	ldr	r0, [r4, #12]
 8009514:	9b03      	ldr	r3, [sp, #12]
 8009516:	4298      	cmp	r0, r3
 8009518:	bfb8      	it	lt
 800951a:	4618      	movlt	r0, r3
 800951c:	e7a6      	b.n	800946c <_printf_i+0x160>
 800951e:	2301      	movs	r3, #1
 8009520:	4632      	mov	r2, r6
 8009522:	4649      	mov	r1, r9
 8009524:	4640      	mov	r0, r8
 8009526:	47d0      	blx	sl
 8009528:	3001      	adds	r0, #1
 800952a:	d09d      	beq.n	8009468 <_printf_i+0x15c>
 800952c:	3501      	adds	r5, #1
 800952e:	68e3      	ldr	r3, [r4, #12]
 8009530:	9903      	ldr	r1, [sp, #12]
 8009532:	1a5b      	subs	r3, r3, r1
 8009534:	42ab      	cmp	r3, r5
 8009536:	dcf2      	bgt.n	800951e <_printf_i+0x212>
 8009538:	e7eb      	b.n	8009512 <_printf_i+0x206>
 800953a:	2500      	movs	r5, #0
 800953c:	f104 0619 	add.w	r6, r4, #25
 8009540:	e7f5      	b.n	800952e <_printf_i+0x222>
 8009542:	bf00      	nop
 8009544:	08009cb4 	.word	0x08009cb4
 8009548:	08009cc5 	.word	0x08009cc5

0800954c <__sflush_r>:
 800954c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009554:	0716      	lsls	r6, r2, #28
 8009556:	4605      	mov	r5, r0
 8009558:	460c      	mov	r4, r1
 800955a:	d454      	bmi.n	8009606 <__sflush_r+0xba>
 800955c:	684b      	ldr	r3, [r1, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	dc02      	bgt.n	8009568 <__sflush_r+0x1c>
 8009562:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009564:	2b00      	cmp	r3, #0
 8009566:	dd48      	ble.n	80095fa <__sflush_r+0xae>
 8009568:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800956a:	2e00      	cmp	r6, #0
 800956c:	d045      	beq.n	80095fa <__sflush_r+0xae>
 800956e:	2300      	movs	r3, #0
 8009570:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009574:	682f      	ldr	r7, [r5, #0]
 8009576:	6a21      	ldr	r1, [r4, #32]
 8009578:	602b      	str	r3, [r5, #0]
 800957a:	d030      	beq.n	80095de <__sflush_r+0x92>
 800957c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	0759      	lsls	r1, r3, #29
 8009582:	d505      	bpl.n	8009590 <__sflush_r+0x44>
 8009584:	6863      	ldr	r3, [r4, #4]
 8009586:	1ad2      	subs	r2, r2, r3
 8009588:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800958a:	b10b      	cbz	r3, 8009590 <__sflush_r+0x44>
 800958c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800958e:	1ad2      	subs	r2, r2, r3
 8009590:	2300      	movs	r3, #0
 8009592:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009594:	6a21      	ldr	r1, [r4, #32]
 8009596:	4628      	mov	r0, r5
 8009598:	47b0      	blx	r6
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	89a3      	ldrh	r3, [r4, #12]
 800959e:	d106      	bne.n	80095ae <__sflush_r+0x62>
 80095a0:	6829      	ldr	r1, [r5, #0]
 80095a2:	291d      	cmp	r1, #29
 80095a4:	d82b      	bhi.n	80095fe <__sflush_r+0xb2>
 80095a6:	4a2a      	ldr	r2, [pc, #168]	@ (8009650 <__sflush_r+0x104>)
 80095a8:	410a      	asrs	r2, r1
 80095aa:	07d6      	lsls	r6, r2, #31
 80095ac:	d427      	bmi.n	80095fe <__sflush_r+0xb2>
 80095ae:	2200      	movs	r2, #0
 80095b0:	6062      	str	r2, [r4, #4]
 80095b2:	04d9      	lsls	r1, r3, #19
 80095b4:	6922      	ldr	r2, [r4, #16]
 80095b6:	6022      	str	r2, [r4, #0]
 80095b8:	d504      	bpl.n	80095c4 <__sflush_r+0x78>
 80095ba:	1c42      	adds	r2, r0, #1
 80095bc:	d101      	bne.n	80095c2 <__sflush_r+0x76>
 80095be:	682b      	ldr	r3, [r5, #0]
 80095c0:	b903      	cbnz	r3, 80095c4 <__sflush_r+0x78>
 80095c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80095c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095c6:	602f      	str	r7, [r5, #0]
 80095c8:	b1b9      	cbz	r1, 80095fa <__sflush_r+0xae>
 80095ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095ce:	4299      	cmp	r1, r3
 80095d0:	d002      	beq.n	80095d8 <__sflush_r+0x8c>
 80095d2:	4628      	mov	r0, r5
 80095d4:	f7ff fca0 	bl	8008f18 <_free_r>
 80095d8:	2300      	movs	r3, #0
 80095da:	6363      	str	r3, [r4, #52]	@ 0x34
 80095dc:	e00d      	b.n	80095fa <__sflush_r+0xae>
 80095de:	2301      	movs	r3, #1
 80095e0:	4628      	mov	r0, r5
 80095e2:	47b0      	blx	r6
 80095e4:	4602      	mov	r2, r0
 80095e6:	1c50      	adds	r0, r2, #1
 80095e8:	d1c9      	bne.n	800957e <__sflush_r+0x32>
 80095ea:	682b      	ldr	r3, [r5, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0c6      	beq.n	800957e <__sflush_r+0x32>
 80095f0:	2b1d      	cmp	r3, #29
 80095f2:	d001      	beq.n	80095f8 <__sflush_r+0xac>
 80095f4:	2b16      	cmp	r3, #22
 80095f6:	d11e      	bne.n	8009636 <__sflush_r+0xea>
 80095f8:	602f      	str	r7, [r5, #0]
 80095fa:	2000      	movs	r0, #0
 80095fc:	e022      	b.n	8009644 <__sflush_r+0xf8>
 80095fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009602:	b21b      	sxth	r3, r3
 8009604:	e01b      	b.n	800963e <__sflush_r+0xf2>
 8009606:	690f      	ldr	r7, [r1, #16]
 8009608:	2f00      	cmp	r7, #0
 800960a:	d0f6      	beq.n	80095fa <__sflush_r+0xae>
 800960c:	0793      	lsls	r3, r2, #30
 800960e:	680e      	ldr	r6, [r1, #0]
 8009610:	bf08      	it	eq
 8009612:	694b      	ldreq	r3, [r1, #20]
 8009614:	600f      	str	r7, [r1, #0]
 8009616:	bf18      	it	ne
 8009618:	2300      	movne	r3, #0
 800961a:	eba6 0807 	sub.w	r8, r6, r7
 800961e:	608b      	str	r3, [r1, #8]
 8009620:	f1b8 0f00 	cmp.w	r8, #0
 8009624:	dde9      	ble.n	80095fa <__sflush_r+0xae>
 8009626:	6a21      	ldr	r1, [r4, #32]
 8009628:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800962a:	4643      	mov	r3, r8
 800962c:	463a      	mov	r2, r7
 800962e:	4628      	mov	r0, r5
 8009630:	47b0      	blx	r6
 8009632:	2800      	cmp	r0, #0
 8009634:	dc08      	bgt.n	8009648 <__sflush_r+0xfc>
 8009636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800963a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800963e:	81a3      	strh	r3, [r4, #12]
 8009640:	f04f 30ff 	mov.w	r0, #4294967295
 8009644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009648:	4407      	add	r7, r0
 800964a:	eba8 0800 	sub.w	r8, r8, r0
 800964e:	e7e7      	b.n	8009620 <__sflush_r+0xd4>
 8009650:	dfbffffe 	.word	0xdfbffffe

08009654 <_fflush_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	690b      	ldr	r3, [r1, #16]
 8009658:	4605      	mov	r5, r0
 800965a:	460c      	mov	r4, r1
 800965c:	b913      	cbnz	r3, 8009664 <_fflush_r+0x10>
 800965e:	2500      	movs	r5, #0
 8009660:	4628      	mov	r0, r5
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	b118      	cbz	r0, 800966e <_fflush_r+0x1a>
 8009666:	6a03      	ldr	r3, [r0, #32]
 8009668:	b90b      	cbnz	r3, 800966e <_fflush_r+0x1a>
 800966a:	f7ff faaf 	bl	8008bcc <__sinit>
 800966e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d0f3      	beq.n	800965e <_fflush_r+0xa>
 8009676:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009678:	07d0      	lsls	r0, r2, #31
 800967a:	d404      	bmi.n	8009686 <_fflush_r+0x32>
 800967c:	0599      	lsls	r1, r3, #22
 800967e:	d402      	bmi.n	8009686 <_fflush_r+0x32>
 8009680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009682:	f7ff fc32 	bl	8008eea <__retarget_lock_acquire_recursive>
 8009686:	4628      	mov	r0, r5
 8009688:	4621      	mov	r1, r4
 800968a:	f7ff ff5f 	bl	800954c <__sflush_r>
 800968e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009690:	07da      	lsls	r2, r3, #31
 8009692:	4605      	mov	r5, r0
 8009694:	d4e4      	bmi.n	8009660 <_fflush_r+0xc>
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	059b      	lsls	r3, r3, #22
 800969a:	d4e1      	bmi.n	8009660 <_fflush_r+0xc>
 800969c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800969e:	f7ff fc25 	bl	8008eec <__retarget_lock_release_recursive>
 80096a2:	e7dd      	b.n	8009660 <_fflush_r+0xc>

080096a4 <__swbuf_r>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	460e      	mov	r6, r1
 80096a8:	4614      	mov	r4, r2
 80096aa:	4605      	mov	r5, r0
 80096ac:	b118      	cbz	r0, 80096b6 <__swbuf_r+0x12>
 80096ae:	6a03      	ldr	r3, [r0, #32]
 80096b0:	b90b      	cbnz	r3, 80096b6 <__swbuf_r+0x12>
 80096b2:	f7ff fa8b 	bl	8008bcc <__sinit>
 80096b6:	69a3      	ldr	r3, [r4, #24]
 80096b8:	60a3      	str	r3, [r4, #8]
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	071a      	lsls	r2, r3, #28
 80096be:	d501      	bpl.n	80096c4 <__swbuf_r+0x20>
 80096c0:	6923      	ldr	r3, [r4, #16]
 80096c2:	b943      	cbnz	r3, 80096d6 <__swbuf_r+0x32>
 80096c4:	4621      	mov	r1, r4
 80096c6:	4628      	mov	r0, r5
 80096c8:	f000 f82a 	bl	8009720 <__swsetup_r>
 80096cc:	b118      	cbz	r0, 80096d6 <__swbuf_r+0x32>
 80096ce:	f04f 37ff 	mov.w	r7, #4294967295
 80096d2:	4638      	mov	r0, r7
 80096d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	6922      	ldr	r2, [r4, #16]
 80096da:	1a98      	subs	r0, r3, r2
 80096dc:	6963      	ldr	r3, [r4, #20]
 80096de:	b2f6      	uxtb	r6, r6
 80096e0:	4283      	cmp	r3, r0
 80096e2:	4637      	mov	r7, r6
 80096e4:	dc05      	bgt.n	80096f2 <__swbuf_r+0x4e>
 80096e6:	4621      	mov	r1, r4
 80096e8:	4628      	mov	r0, r5
 80096ea:	f7ff ffb3 	bl	8009654 <_fflush_r>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	d1ed      	bne.n	80096ce <__swbuf_r+0x2a>
 80096f2:	68a3      	ldr	r3, [r4, #8]
 80096f4:	3b01      	subs	r3, #1
 80096f6:	60a3      	str	r3, [r4, #8]
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	6022      	str	r2, [r4, #0]
 80096fe:	701e      	strb	r6, [r3, #0]
 8009700:	6962      	ldr	r2, [r4, #20]
 8009702:	1c43      	adds	r3, r0, #1
 8009704:	429a      	cmp	r2, r3
 8009706:	d004      	beq.n	8009712 <__swbuf_r+0x6e>
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	07db      	lsls	r3, r3, #31
 800970c:	d5e1      	bpl.n	80096d2 <__swbuf_r+0x2e>
 800970e:	2e0a      	cmp	r6, #10
 8009710:	d1df      	bne.n	80096d2 <__swbuf_r+0x2e>
 8009712:	4621      	mov	r1, r4
 8009714:	4628      	mov	r0, r5
 8009716:	f7ff ff9d 	bl	8009654 <_fflush_r>
 800971a:	2800      	cmp	r0, #0
 800971c:	d0d9      	beq.n	80096d2 <__swbuf_r+0x2e>
 800971e:	e7d6      	b.n	80096ce <__swbuf_r+0x2a>

08009720 <__swsetup_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4b29      	ldr	r3, [pc, #164]	@ (80097c8 <__swsetup_r+0xa8>)
 8009724:	4605      	mov	r5, r0
 8009726:	6818      	ldr	r0, [r3, #0]
 8009728:	460c      	mov	r4, r1
 800972a:	b118      	cbz	r0, 8009734 <__swsetup_r+0x14>
 800972c:	6a03      	ldr	r3, [r0, #32]
 800972e:	b90b      	cbnz	r3, 8009734 <__swsetup_r+0x14>
 8009730:	f7ff fa4c 	bl	8008bcc <__sinit>
 8009734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009738:	0719      	lsls	r1, r3, #28
 800973a:	d422      	bmi.n	8009782 <__swsetup_r+0x62>
 800973c:	06da      	lsls	r2, r3, #27
 800973e:	d407      	bmi.n	8009750 <__swsetup_r+0x30>
 8009740:	2209      	movs	r2, #9
 8009742:	602a      	str	r2, [r5, #0]
 8009744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009748:	81a3      	strh	r3, [r4, #12]
 800974a:	f04f 30ff 	mov.w	r0, #4294967295
 800974e:	e033      	b.n	80097b8 <__swsetup_r+0x98>
 8009750:	0758      	lsls	r0, r3, #29
 8009752:	d512      	bpl.n	800977a <__swsetup_r+0x5a>
 8009754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009756:	b141      	cbz	r1, 800976a <__swsetup_r+0x4a>
 8009758:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800975c:	4299      	cmp	r1, r3
 800975e:	d002      	beq.n	8009766 <__swsetup_r+0x46>
 8009760:	4628      	mov	r0, r5
 8009762:	f7ff fbd9 	bl	8008f18 <_free_r>
 8009766:	2300      	movs	r3, #0
 8009768:	6363      	str	r3, [r4, #52]	@ 0x34
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009770:	81a3      	strh	r3, [r4, #12]
 8009772:	2300      	movs	r3, #0
 8009774:	6063      	str	r3, [r4, #4]
 8009776:	6923      	ldr	r3, [r4, #16]
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	f043 0308 	orr.w	r3, r3, #8
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	b94b      	cbnz	r3, 800979a <__swsetup_r+0x7a>
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800978c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009790:	d003      	beq.n	800979a <__swsetup_r+0x7a>
 8009792:	4621      	mov	r1, r4
 8009794:	4628      	mov	r0, r5
 8009796:	f000 f883 	bl	80098a0 <__smakebuf_r>
 800979a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800979e:	f013 0201 	ands.w	r2, r3, #1
 80097a2:	d00a      	beq.n	80097ba <__swsetup_r+0x9a>
 80097a4:	2200      	movs	r2, #0
 80097a6:	60a2      	str	r2, [r4, #8]
 80097a8:	6962      	ldr	r2, [r4, #20]
 80097aa:	4252      	negs	r2, r2
 80097ac:	61a2      	str	r2, [r4, #24]
 80097ae:	6922      	ldr	r2, [r4, #16]
 80097b0:	b942      	cbnz	r2, 80097c4 <__swsetup_r+0xa4>
 80097b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80097b6:	d1c5      	bne.n	8009744 <__swsetup_r+0x24>
 80097b8:	bd38      	pop	{r3, r4, r5, pc}
 80097ba:	0799      	lsls	r1, r3, #30
 80097bc:	bf58      	it	pl
 80097be:	6962      	ldrpl	r2, [r4, #20]
 80097c0:	60a2      	str	r2, [r4, #8]
 80097c2:	e7f4      	b.n	80097ae <__swsetup_r+0x8e>
 80097c4:	2000      	movs	r0, #0
 80097c6:	e7f7      	b.n	80097b8 <__swsetup_r+0x98>
 80097c8:	240000dc 	.word	0x240000dc

080097cc <_raise_r>:
 80097cc:	291f      	cmp	r1, #31
 80097ce:	b538      	push	{r3, r4, r5, lr}
 80097d0:	4605      	mov	r5, r0
 80097d2:	460c      	mov	r4, r1
 80097d4:	d904      	bls.n	80097e0 <_raise_r+0x14>
 80097d6:	2316      	movs	r3, #22
 80097d8:	6003      	str	r3, [r0, #0]
 80097da:	f04f 30ff 	mov.w	r0, #4294967295
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80097e2:	b112      	cbz	r2, 80097ea <_raise_r+0x1e>
 80097e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097e8:	b94b      	cbnz	r3, 80097fe <_raise_r+0x32>
 80097ea:	4628      	mov	r0, r5
 80097ec:	f000 f830 	bl	8009850 <_getpid_r>
 80097f0:	4622      	mov	r2, r4
 80097f2:	4601      	mov	r1, r0
 80097f4:	4628      	mov	r0, r5
 80097f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097fa:	f000 b817 	b.w	800982c <_kill_r>
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d00a      	beq.n	8009818 <_raise_r+0x4c>
 8009802:	1c59      	adds	r1, r3, #1
 8009804:	d103      	bne.n	800980e <_raise_r+0x42>
 8009806:	2316      	movs	r3, #22
 8009808:	6003      	str	r3, [r0, #0]
 800980a:	2001      	movs	r0, #1
 800980c:	e7e7      	b.n	80097de <_raise_r+0x12>
 800980e:	2100      	movs	r1, #0
 8009810:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009814:	4620      	mov	r0, r4
 8009816:	4798      	blx	r3
 8009818:	2000      	movs	r0, #0
 800981a:	e7e0      	b.n	80097de <_raise_r+0x12>

0800981c <raise>:
 800981c:	4b02      	ldr	r3, [pc, #8]	@ (8009828 <raise+0xc>)
 800981e:	4601      	mov	r1, r0
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	f7ff bfd3 	b.w	80097cc <_raise_r>
 8009826:	bf00      	nop
 8009828:	240000dc 	.word	0x240000dc

0800982c <_kill_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d07      	ldr	r5, [pc, #28]	@ (800984c <_kill_r+0x20>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	4611      	mov	r1, r2
 8009838:	602b      	str	r3, [r5, #0]
 800983a:	f7f7 fa6f 	bl	8000d1c <_kill>
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	d102      	bne.n	8009848 <_kill_r+0x1c>
 8009842:	682b      	ldr	r3, [r5, #0]
 8009844:	b103      	cbz	r3, 8009848 <_kill_r+0x1c>
 8009846:	6023      	str	r3, [r4, #0]
 8009848:	bd38      	pop	{r3, r4, r5, pc}
 800984a:	bf00      	nop
 800984c:	24004dd4 	.word	0x24004dd4

08009850 <_getpid_r>:
 8009850:	f7f7 ba5c 	b.w	8000d0c <_getpid>

08009854 <__swhatbuf_r>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	460c      	mov	r4, r1
 8009858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985c:	2900      	cmp	r1, #0
 800985e:	b096      	sub	sp, #88	@ 0x58
 8009860:	4615      	mov	r5, r2
 8009862:	461e      	mov	r6, r3
 8009864:	da0d      	bge.n	8009882 <__swhatbuf_r+0x2e>
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800986c:	f04f 0100 	mov.w	r1, #0
 8009870:	bf14      	ite	ne
 8009872:	2340      	movne	r3, #64	@ 0x40
 8009874:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009878:	2000      	movs	r0, #0
 800987a:	6031      	str	r1, [r6, #0]
 800987c:	602b      	str	r3, [r5, #0]
 800987e:	b016      	add	sp, #88	@ 0x58
 8009880:	bd70      	pop	{r4, r5, r6, pc}
 8009882:	466a      	mov	r2, sp
 8009884:	f000 f848 	bl	8009918 <_fstat_r>
 8009888:	2800      	cmp	r0, #0
 800988a:	dbec      	blt.n	8009866 <__swhatbuf_r+0x12>
 800988c:	9901      	ldr	r1, [sp, #4]
 800988e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009892:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009896:	4259      	negs	r1, r3
 8009898:	4159      	adcs	r1, r3
 800989a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800989e:	e7eb      	b.n	8009878 <__swhatbuf_r+0x24>

080098a0 <__smakebuf_r>:
 80098a0:	898b      	ldrh	r3, [r1, #12]
 80098a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098a4:	079d      	lsls	r5, r3, #30
 80098a6:	4606      	mov	r6, r0
 80098a8:	460c      	mov	r4, r1
 80098aa:	d507      	bpl.n	80098bc <__smakebuf_r+0x1c>
 80098ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	6123      	str	r3, [r4, #16]
 80098b4:	2301      	movs	r3, #1
 80098b6:	6163      	str	r3, [r4, #20]
 80098b8:	b003      	add	sp, #12
 80098ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098bc:	ab01      	add	r3, sp, #4
 80098be:	466a      	mov	r2, sp
 80098c0:	f7ff ffc8 	bl	8009854 <__swhatbuf_r>
 80098c4:	9f00      	ldr	r7, [sp, #0]
 80098c6:	4605      	mov	r5, r0
 80098c8:	4639      	mov	r1, r7
 80098ca:	4630      	mov	r0, r6
 80098cc:	f7ff f866 	bl	800899c <_malloc_r>
 80098d0:	b948      	cbnz	r0, 80098e6 <__smakebuf_r+0x46>
 80098d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d6:	059a      	lsls	r2, r3, #22
 80098d8:	d4ee      	bmi.n	80098b8 <__smakebuf_r+0x18>
 80098da:	f023 0303 	bic.w	r3, r3, #3
 80098de:	f043 0302 	orr.w	r3, r3, #2
 80098e2:	81a3      	strh	r3, [r4, #12]
 80098e4:	e7e2      	b.n	80098ac <__smakebuf_r+0xc>
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	6020      	str	r0, [r4, #0]
 80098ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ee:	81a3      	strh	r3, [r4, #12]
 80098f0:	9b01      	ldr	r3, [sp, #4]
 80098f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098f6:	b15b      	cbz	r3, 8009910 <__smakebuf_r+0x70>
 80098f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098fc:	4630      	mov	r0, r6
 80098fe:	f000 f81d 	bl	800993c <_isatty_r>
 8009902:	b128      	cbz	r0, 8009910 <__smakebuf_r+0x70>
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f023 0303 	bic.w	r3, r3, #3
 800990a:	f043 0301 	orr.w	r3, r3, #1
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	431d      	orrs	r5, r3
 8009914:	81a5      	strh	r5, [r4, #12]
 8009916:	e7cf      	b.n	80098b8 <__smakebuf_r+0x18>

08009918 <_fstat_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4d07      	ldr	r5, [pc, #28]	@ (8009938 <_fstat_r+0x20>)
 800991c:	2300      	movs	r3, #0
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	4611      	mov	r1, r2
 8009924:	602b      	str	r3, [r5, #0]
 8009926:	f7f7 fa59 	bl	8000ddc <_fstat>
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	d102      	bne.n	8009934 <_fstat_r+0x1c>
 800992e:	682b      	ldr	r3, [r5, #0]
 8009930:	b103      	cbz	r3, 8009934 <_fstat_r+0x1c>
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	bd38      	pop	{r3, r4, r5, pc}
 8009936:	bf00      	nop
 8009938:	24004dd4 	.word	0x24004dd4

0800993c <_isatty_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d06      	ldr	r5, [pc, #24]	@ (8009958 <_isatty_r+0x1c>)
 8009940:	2300      	movs	r3, #0
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	602b      	str	r3, [r5, #0]
 8009948:	f7f7 fa58 	bl	8000dfc <_isatty>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	d102      	bne.n	8009956 <_isatty_r+0x1a>
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	b103      	cbz	r3, 8009956 <_isatty_r+0x1a>
 8009954:	6023      	str	r3, [r4, #0]
 8009956:	bd38      	pop	{r3, r4, r5, pc}
 8009958:	24004dd4 	.word	0x24004dd4

0800995c <_init>:
 800995c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995e:	bf00      	nop
 8009960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009962:	bc08      	pop	{r3}
 8009964:	469e      	mov	lr, r3
 8009966:	4770      	bx	lr

08009968 <_fini>:
 8009968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996a:	bf00      	nop
 800996c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800996e:	bc08      	pop	{r3}
 8009970:	469e      	mov	lr, r3
 8009972:	4770      	bx	lr
