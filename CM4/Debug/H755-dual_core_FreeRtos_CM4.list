
H755-dual_core_FreeRtos_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f5c  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  081081fc  081081fc  000091fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08108510  08108510  00009510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08108518  08108518  00009518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810851c  0810851c  0000951c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000114  10000000  08108520  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000368  10000114  08108634  0000a114  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  1000047c  08108634  0000a47c  2**0
                  ALLOC
  9 .openamp_section 0000008c  38000000  08108634  0000b000  2**2
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0000a114  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001a441  00000000  00000000  0000a144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000044df  00000000  00000000  00024585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000012c0  00000000  00000000  00028a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000e03  00000000  00000000  00029d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e371  00000000  00000000  0002ab2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001f1e6  00000000  00000000  00068e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001805cb  00000000  00000000  00088082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0020864d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000054dc  00000000  00000000  00208690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005e  00000000  00000000  0020db6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000114 	.word	0x10000114
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081081e4 	.word	0x081081e4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000118 	.word	0x10000118
 81002dc:	081081e4 	.word	0x081081e4

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_uldivmod>:
 81003b0:	b953      	cbnz	r3, 81003c8 <__aeabi_uldivmod+0x18>
 81003b2:	b94a      	cbnz	r2, 81003c8 <__aeabi_uldivmod+0x18>
 81003b4:	2900      	cmp	r1, #0
 81003b6:	bf08      	it	eq
 81003b8:	2800      	cmpeq	r0, #0
 81003ba:	bf1c      	itt	ne
 81003bc:	f04f 31ff 	movne.w	r1, #4294967295
 81003c0:	f04f 30ff 	movne.w	r0, #4294967295
 81003c4:	f000 b96a 	b.w	810069c <__aeabi_idiv0>
 81003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003d0:	f000 f806 	bl	81003e0 <__udivmoddi4>
 81003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003dc:	b004      	add	sp, #16
 81003de:	4770      	bx	lr

081003e0 <__udivmoddi4>:
 81003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003e4:	9d08      	ldr	r5, [sp, #32]
 81003e6:	460c      	mov	r4, r1
 81003e8:	2b00      	cmp	r3, #0
 81003ea:	d14e      	bne.n	810048a <__udivmoddi4+0xaa>
 81003ec:	4694      	mov	ip, r2
 81003ee:	458c      	cmp	ip, r1
 81003f0:	4686      	mov	lr, r0
 81003f2:	fab2 f282 	clz	r2, r2
 81003f6:	d962      	bls.n	81004be <__udivmoddi4+0xde>
 81003f8:	b14a      	cbz	r2, 810040e <__udivmoddi4+0x2e>
 81003fa:	f1c2 0320 	rsb	r3, r2, #32
 81003fe:	4091      	lsls	r1, r2
 8100400:	fa20 f303 	lsr.w	r3, r0, r3
 8100404:	fa0c fc02 	lsl.w	ip, ip, r2
 8100408:	4319      	orrs	r1, r3
 810040a:	fa00 fe02 	lsl.w	lr, r0, r2
 810040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100412:	fa1f f68c 	uxth.w	r6, ip
 8100416:	fbb1 f4f7 	udiv	r4, r1, r7
 810041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 810041e:	fb07 1114 	mls	r1, r7, r4, r1
 8100422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100426:	fb04 f106 	mul.w	r1, r4, r6
 810042a:	4299      	cmp	r1, r3
 810042c:	d90a      	bls.n	8100444 <__udivmoddi4+0x64>
 810042e:	eb1c 0303 	adds.w	r3, ip, r3
 8100432:	f104 30ff 	add.w	r0, r4, #4294967295
 8100436:	f080 8112 	bcs.w	810065e <__udivmoddi4+0x27e>
 810043a:	4299      	cmp	r1, r3
 810043c:	f240 810f 	bls.w	810065e <__udivmoddi4+0x27e>
 8100440:	3c02      	subs	r4, #2
 8100442:	4463      	add	r3, ip
 8100444:	1a59      	subs	r1, r3, r1
 8100446:	fa1f f38e 	uxth.w	r3, lr
 810044a:	fbb1 f0f7 	udiv	r0, r1, r7
 810044e:	fb07 1110 	mls	r1, r7, r0, r1
 8100452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100456:	fb00 f606 	mul.w	r6, r0, r6
 810045a:	429e      	cmp	r6, r3
 810045c:	d90a      	bls.n	8100474 <__udivmoddi4+0x94>
 810045e:	eb1c 0303 	adds.w	r3, ip, r3
 8100462:	f100 31ff 	add.w	r1, r0, #4294967295
 8100466:	f080 80fc 	bcs.w	8100662 <__udivmoddi4+0x282>
 810046a:	429e      	cmp	r6, r3
 810046c:	f240 80f9 	bls.w	8100662 <__udivmoddi4+0x282>
 8100470:	4463      	add	r3, ip
 8100472:	3802      	subs	r0, #2
 8100474:	1b9b      	subs	r3, r3, r6
 8100476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 810047a:	2100      	movs	r1, #0
 810047c:	b11d      	cbz	r5, 8100486 <__udivmoddi4+0xa6>
 810047e:	40d3      	lsrs	r3, r2
 8100480:	2200      	movs	r2, #0
 8100482:	e9c5 3200 	strd	r3, r2, [r5]
 8100486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810048a:	428b      	cmp	r3, r1
 810048c:	d905      	bls.n	810049a <__udivmoddi4+0xba>
 810048e:	b10d      	cbz	r5, 8100494 <__udivmoddi4+0xb4>
 8100490:	e9c5 0100 	strd	r0, r1, [r5]
 8100494:	2100      	movs	r1, #0
 8100496:	4608      	mov	r0, r1
 8100498:	e7f5      	b.n	8100486 <__udivmoddi4+0xa6>
 810049a:	fab3 f183 	clz	r1, r3
 810049e:	2900      	cmp	r1, #0
 81004a0:	d146      	bne.n	8100530 <__udivmoddi4+0x150>
 81004a2:	42a3      	cmp	r3, r4
 81004a4:	d302      	bcc.n	81004ac <__udivmoddi4+0xcc>
 81004a6:	4290      	cmp	r0, r2
 81004a8:	f0c0 80f0 	bcc.w	810068c <__udivmoddi4+0x2ac>
 81004ac:	1a86      	subs	r6, r0, r2
 81004ae:	eb64 0303 	sbc.w	r3, r4, r3
 81004b2:	2001      	movs	r0, #1
 81004b4:	2d00      	cmp	r5, #0
 81004b6:	d0e6      	beq.n	8100486 <__udivmoddi4+0xa6>
 81004b8:	e9c5 6300 	strd	r6, r3, [r5]
 81004bc:	e7e3      	b.n	8100486 <__udivmoddi4+0xa6>
 81004be:	2a00      	cmp	r2, #0
 81004c0:	f040 8090 	bne.w	81005e4 <__udivmoddi4+0x204>
 81004c4:	eba1 040c 	sub.w	r4, r1, ip
 81004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81004cc:	fa1f f78c 	uxth.w	r7, ip
 81004d0:	2101      	movs	r1, #1
 81004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 81004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 81004da:	fb08 4416 	mls	r4, r8, r6, r4
 81004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 81004e2:	fb07 f006 	mul.w	r0, r7, r6
 81004e6:	4298      	cmp	r0, r3
 81004e8:	d908      	bls.n	81004fc <__udivmoddi4+0x11c>
 81004ea:	eb1c 0303 	adds.w	r3, ip, r3
 81004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 81004f2:	d202      	bcs.n	81004fa <__udivmoddi4+0x11a>
 81004f4:	4298      	cmp	r0, r3
 81004f6:	f200 80cd 	bhi.w	8100694 <__udivmoddi4+0x2b4>
 81004fa:	4626      	mov	r6, r4
 81004fc:	1a1c      	subs	r4, r3, r0
 81004fe:	fa1f f38e 	uxth.w	r3, lr
 8100502:	fbb4 f0f8 	udiv	r0, r4, r8
 8100506:	fb08 4410 	mls	r4, r8, r0, r4
 810050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810050e:	fb00 f707 	mul.w	r7, r0, r7
 8100512:	429f      	cmp	r7, r3
 8100514:	d908      	bls.n	8100528 <__udivmoddi4+0x148>
 8100516:	eb1c 0303 	adds.w	r3, ip, r3
 810051a:	f100 34ff 	add.w	r4, r0, #4294967295
 810051e:	d202      	bcs.n	8100526 <__udivmoddi4+0x146>
 8100520:	429f      	cmp	r7, r3
 8100522:	f200 80b0 	bhi.w	8100686 <__udivmoddi4+0x2a6>
 8100526:	4620      	mov	r0, r4
 8100528:	1bdb      	subs	r3, r3, r7
 810052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 810052e:	e7a5      	b.n	810047c <__udivmoddi4+0x9c>
 8100530:	f1c1 0620 	rsb	r6, r1, #32
 8100534:	408b      	lsls	r3, r1
 8100536:	fa22 f706 	lsr.w	r7, r2, r6
 810053a:	431f      	orrs	r7, r3
 810053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8100540:	fa04 f301 	lsl.w	r3, r4, r1
 8100544:	ea43 030c 	orr.w	r3, r3, ip
 8100548:	40f4      	lsrs	r4, r6
 810054a:	fa00 f801 	lsl.w	r8, r0, r1
 810054e:	0c38      	lsrs	r0, r7, #16
 8100550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100554:	fbb4 fef0 	udiv	lr, r4, r0
 8100558:	fa1f fc87 	uxth.w	ip, r7
 810055c:	fb00 441e 	mls	r4, r0, lr, r4
 8100560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100564:	fb0e f90c 	mul.w	r9, lr, ip
 8100568:	45a1      	cmp	r9, r4
 810056a:	fa02 f201 	lsl.w	r2, r2, r1
 810056e:	d90a      	bls.n	8100586 <__udivmoddi4+0x1a6>
 8100570:	193c      	adds	r4, r7, r4
 8100572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100576:	f080 8084 	bcs.w	8100682 <__udivmoddi4+0x2a2>
 810057a:	45a1      	cmp	r9, r4
 810057c:	f240 8081 	bls.w	8100682 <__udivmoddi4+0x2a2>
 8100580:	f1ae 0e02 	sub.w	lr, lr, #2
 8100584:	443c      	add	r4, r7
 8100586:	eba4 0409 	sub.w	r4, r4, r9
 810058a:	fa1f f983 	uxth.w	r9, r3
 810058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8100592:	fb00 4413 	mls	r4, r0, r3, r4
 8100596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810059a:	fb03 fc0c 	mul.w	ip, r3, ip
 810059e:	45a4      	cmp	ip, r4
 81005a0:	d907      	bls.n	81005b2 <__udivmoddi4+0x1d2>
 81005a2:	193c      	adds	r4, r7, r4
 81005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 81005a8:	d267      	bcs.n	810067a <__udivmoddi4+0x29a>
 81005aa:	45a4      	cmp	ip, r4
 81005ac:	d965      	bls.n	810067a <__udivmoddi4+0x29a>
 81005ae:	3b02      	subs	r3, #2
 81005b0:	443c      	add	r4, r7
 81005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 81005b6:	fba0 9302 	umull	r9, r3, r0, r2
 81005ba:	eba4 040c 	sub.w	r4, r4, ip
 81005be:	429c      	cmp	r4, r3
 81005c0:	46ce      	mov	lr, r9
 81005c2:	469c      	mov	ip, r3
 81005c4:	d351      	bcc.n	810066a <__udivmoddi4+0x28a>
 81005c6:	d04e      	beq.n	8100666 <__udivmoddi4+0x286>
 81005c8:	b155      	cbz	r5, 81005e0 <__udivmoddi4+0x200>
 81005ca:	ebb8 030e 	subs.w	r3, r8, lr
 81005ce:	eb64 040c 	sbc.w	r4, r4, ip
 81005d2:	fa04 f606 	lsl.w	r6, r4, r6
 81005d6:	40cb      	lsrs	r3, r1
 81005d8:	431e      	orrs	r6, r3
 81005da:	40cc      	lsrs	r4, r1
 81005dc:	e9c5 6400 	strd	r6, r4, [r5]
 81005e0:	2100      	movs	r1, #0
 81005e2:	e750      	b.n	8100486 <__udivmoddi4+0xa6>
 81005e4:	f1c2 0320 	rsb	r3, r2, #32
 81005e8:	fa20 f103 	lsr.w	r1, r0, r3
 81005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 81005f0:	fa24 f303 	lsr.w	r3, r4, r3
 81005f4:	4094      	lsls	r4, r2
 81005f6:	430c      	orrs	r4, r1
 81005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8100600:	fa1f f78c 	uxth.w	r7, ip
 8100604:	fbb3 f0f8 	udiv	r0, r3, r8
 8100608:	fb08 3110 	mls	r1, r8, r0, r3
 810060c:	0c23      	lsrs	r3, r4, #16
 810060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100612:	fb00 f107 	mul.w	r1, r0, r7
 8100616:	4299      	cmp	r1, r3
 8100618:	d908      	bls.n	810062c <__udivmoddi4+0x24c>
 810061a:	eb1c 0303 	adds.w	r3, ip, r3
 810061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8100622:	d22c      	bcs.n	810067e <__udivmoddi4+0x29e>
 8100624:	4299      	cmp	r1, r3
 8100626:	d92a      	bls.n	810067e <__udivmoddi4+0x29e>
 8100628:	3802      	subs	r0, #2
 810062a:	4463      	add	r3, ip
 810062c:	1a5b      	subs	r3, r3, r1
 810062e:	b2a4      	uxth	r4, r4
 8100630:	fbb3 f1f8 	udiv	r1, r3, r8
 8100634:	fb08 3311 	mls	r3, r8, r1, r3
 8100638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 810063c:	fb01 f307 	mul.w	r3, r1, r7
 8100640:	42a3      	cmp	r3, r4
 8100642:	d908      	bls.n	8100656 <__udivmoddi4+0x276>
 8100644:	eb1c 0404 	adds.w	r4, ip, r4
 8100648:	f101 36ff 	add.w	r6, r1, #4294967295
 810064c:	d213      	bcs.n	8100676 <__udivmoddi4+0x296>
 810064e:	42a3      	cmp	r3, r4
 8100650:	d911      	bls.n	8100676 <__udivmoddi4+0x296>
 8100652:	3902      	subs	r1, #2
 8100654:	4464      	add	r4, ip
 8100656:	1ae4      	subs	r4, r4, r3
 8100658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810065c:	e739      	b.n	81004d2 <__udivmoddi4+0xf2>
 810065e:	4604      	mov	r4, r0
 8100660:	e6f0      	b.n	8100444 <__udivmoddi4+0x64>
 8100662:	4608      	mov	r0, r1
 8100664:	e706      	b.n	8100474 <__udivmoddi4+0x94>
 8100666:	45c8      	cmp	r8, r9
 8100668:	d2ae      	bcs.n	81005c8 <__udivmoddi4+0x1e8>
 810066a:	ebb9 0e02 	subs.w	lr, r9, r2
 810066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8100672:	3801      	subs	r0, #1
 8100674:	e7a8      	b.n	81005c8 <__udivmoddi4+0x1e8>
 8100676:	4631      	mov	r1, r6
 8100678:	e7ed      	b.n	8100656 <__udivmoddi4+0x276>
 810067a:	4603      	mov	r3, r0
 810067c:	e799      	b.n	81005b2 <__udivmoddi4+0x1d2>
 810067e:	4630      	mov	r0, r6
 8100680:	e7d4      	b.n	810062c <__udivmoddi4+0x24c>
 8100682:	46d6      	mov	lr, sl
 8100684:	e77f      	b.n	8100586 <__udivmoddi4+0x1a6>
 8100686:	4463      	add	r3, ip
 8100688:	3802      	subs	r0, #2
 810068a:	e74d      	b.n	8100528 <__udivmoddi4+0x148>
 810068c:	4606      	mov	r6, r0
 810068e:	4623      	mov	r3, r4
 8100690:	4608      	mov	r0, r1
 8100692:	e70f      	b.n	81004b4 <__udivmoddi4+0xd4>
 8100694:	3e02      	subs	r6, #2
 8100696:	4463      	add	r3, ip
 8100698:	e730      	b.n	81004fc <__udivmoddi4+0x11c>
 810069a:	bf00      	nop

0810069c <__aeabi_idiv0>:
 810069c:	4770      	bx	lr
 810069e:	bf00      	nop

081006a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81006a0:	b480      	push	{r7}
 81006a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81006a4:	4b09      	ldr	r3, [pc, #36]	@ (81006cc <SystemInit+0x2c>)
 81006a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81006aa:	4a08      	ldr	r2, [pc, #32]	@ (81006cc <SystemInit+0x2c>)
 81006ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81006b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81006b4:	4b05      	ldr	r3, [pc, #20]	@ (81006cc <SystemInit+0x2c>)
 81006b6:	691b      	ldr	r3, [r3, #16]
 81006b8:	4a04      	ldr	r2, [pc, #16]	@ (81006cc <SystemInit+0x2c>)
 81006ba:	f043 0310 	orr.w	r3, r3, #16
 81006be:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81006c0:	bf00      	nop
 81006c2:	46bd      	mov	sp, r7
 81006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006c8:	4770      	bx	lr
 81006ca:	bf00      	nop
 81006cc:	e000ed00 	.word	0xe000ed00

081006d0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 81006d0:	b580      	push	{r7, lr}
 81006d2:	b088      	sub	sp, #32
 81006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81006d6:	f107 030c 	add.w	r3, r7, #12
 81006da:	2200      	movs	r2, #0
 81006dc:	601a      	str	r2, [r3, #0]
 81006de:	605a      	str	r2, [r3, #4]
 81006e0:	609a      	str	r2, [r3, #8]
 81006e2:	60da      	str	r2, [r3, #12]
 81006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81006e6:	4b1a      	ldr	r3, [pc, #104]	@ (8100750 <MX_GPIO_Init+0x80>)
 81006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006ec:	4a18      	ldr	r2, [pc, #96]	@ (8100750 <MX_GPIO_Init+0x80>)
 81006ee:	f043 0308 	orr.w	r3, r3, #8
 81006f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006f6:	4b16      	ldr	r3, [pc, #88]	@ (8100750 <MX_GPIO_Init+0x80>)
 81006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006fc:	f003 0308 	and.w	r3, r3, #8
 8100700:	60bb      	str	r3, [r7, #8]
 8100702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100704:	4b12      	ldr	r3, [pc, #72]	@ (8100750 <MX_GPIO_Init+0x80>)
 8100706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810070a:	4a11      	ldr	r2, [pc, #68]	@ (8100750 <MX_GPIO_Init+0x80>)
 810070c:	f043 0310 	orr.w	r3, r3, #16
 8100710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100714:	4b0e      	ldr	r3, [pc, #56]	@ (8100750 <MX_GPIO_Init+0x80>)
 8100716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810071a:	f003 0310 	and.w	r3, r3, #16
 810071e:	607b      	str	r3, [r7, #4]
 8100720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8100722:	2200      	movs	r2, #0
 8100724:	2102      	movs	r1, #2
 8100726:	480b      	ldr	r0, [pc, #44]	@ (8100754 <MX_GPIO_Init+0x84>)
 8100728:	f000 fe5e 	bl	81013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 810072c:	2302      	movs	r3, #2
 810072e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100730:	2301      	movs	r3, #1
 8100732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100734:	2300      	movs	r3, #0
 8100736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100738:	2300      	movs	r3, #0
 810073a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 810073c:	f107 030c 	add.w	r3, r7, #12
 8100740:	4619      	mov	r1, r3
 8100742:	4804      	ldr	r0, [pc, #16]	@ (8100754 <MX_GPIO_Init+0x84>)
 8100744:	f000 fca0 	bl	8101088 <HAL_GPIO_Init>

}
 8100748:	bf00      	nop
 810074a:	3720      	adds	r7, #32
 810074c:	46bd      	mov	sp, r7
 810074e:	bd80      	pop	{r7, pc}
 8100750:	58024400 	.word	0x58024400
 8100754:	58021000 	.word	0x58021000

08100758 <rpmsg_recv_callback>:
static volatile int message_received;
volatile unsigned int received_data;
static struct rpmsg_endpoint rp_endpoint;
char data[100];

static int rpmsg_recv_callback (struct rpmsg_endpoint *ept, void *data, size_t len, uint32_t src, void *priv) {
 8100758:	b480      	push	{r7}
 810075a:	b085      	sub	sp, #20
 810075c:	af00      	add	r7, sp, #0
 810075e:	60f8      	str	r0, [r7, #12]
 8100760:	60b9      	str	r1, [r7, #8]
 8100762:	607a      	str	r2, [r7, #4]
 8100764:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8100766:	68bb      	ldr	r3, [r7, #8]
 8100768:	681b      	ldr	r3, [r3, #0]
 810076a:	4a06      	ldr	r2, [pc, #24]	@ (8100784 <rpmsg_recv_callback+0x2c>)
 810076c:	6013      	str	r3, [r2, #0]
	message_received = 1;
 810076e:	4b06      	ldr	r3, [pc, #24]	@ (8100788 <rpmsg_recv_callback+0x30>)
 8100770:	2201      	movs	r2, #1
 8100772:	601a      	str	r2, [r3, #0]

	return 0;
 8100774:	2300      	movs	r3, #0
}
 8100776:	4618      	mov	r0, r3
 8100778:	3714      	adds	r7, #20
 810077a:	46bd      	mov	sp, r7
 810077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100780:	4770      	bx	lr
 8100782:	bf00      	nop
 8100784:	10000134 	.word	0x10000134
 8100788:	10000130 	.word	0x10000130

0810078c <receive_message>:

unsigned int receive_message (void) {
 810078c:	b580      	push	{r7, lr}
 810078e:	af00      	add	r7, sp, #0
	while (message_received == 0) {
 8100790:	e001      	b.n	8100796 <receive_message+0xa>
		OPENAMP_check_for_message();
 8100792:	f006 fb5d 	bl	8106e50 <OPENAMP_check_for_message>
	while (message_received == 0) {
 8100796:	4b05      	ldr	r3, [pc, #20]	@ (81007ac <receive_message+0x20>)
 8100798:	681b      	ldr	r3, [r3, #0]
 810079a:	2b00      	cmp	r3, #0
 810079c:	d0f9      	beq.n	8100792 <receive_message+0x6>
	}

	message_received = 0;
 810079e:	4b03      	ldr	r3, [pc, #12]	@ (81007ac <receive_message+0x20>)
 81007a0:	2200      	movs	r2, #0
 81007a2:	601a      	str	r2, [r3, #0]

	return 0;
 81007a4:	2300      	movs	r3, #0
}
 81007a6:	4618      	mov	r0, r3
 81007a8:	bd80      	pop	{r7, pc}
 81007aa:	bf00      	nop
 81007ac:	10000130 	.word	0x10000130

081007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81007b0:	b580      	push	{r7, lr}
 81007b2:	b084      	sub	sp, #16
 81007b4:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81007b6:	4b3d      	ldr	r3, [pc, #244]	@ (81008ac <main+0xfc>)
 81007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007bc:	4a3b      	ldr	r2, [pc, #236]	@ (81008ac <main+0xfc>)
 81007be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81007c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81007c6:	4b39      	ldr	r3, [pc, #228]	@ (81008ac <main+0xfc>)
 81007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81007d0:	603b      	str	r3, [r7, #0]
 81007d2:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81007d4:	2001      	movs	r0, #1
 81007d6:	f000 fe4f 	bl	8101478 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81007da:	f000 fef3 	bl	81015c4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81007de:	2201      	movs	r2, #1
 81007e0:	2102      	movs	r1, #2
 81007e2:	2000      	movs	r0, #0
 81007e4:	f000 fe74 	bl	81014d0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81007e8:	4b31      	ldr	r3, [pc, #196]	@ (81008b0 <main+0x100>)
 81007ea:	681b      	ldr	r3, [r3, #0]
 81007ec:	091b      	lsrs	r3, r3, #4
 81007ee:	f003 030f 	and.w	r3, r3, #15
 81007f2:	2b07      	cmp	r3, #7
 81007f4:	d108      	bne.n	8100808 <main+0x58>
 81007f6:	4b2f      	ldr	r3, [pc, #188]	@ (81008b4 <main+0x104>)
 81007f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81007fc:	4a2d      	ldr	r2, [pc, #180]	@ (81008b4 <main+0x104>)
 81007fe:	f043 0301 	orr.w	r3, r3, #1
 8100802:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100806:	e007      	b.n	8100818 <main+0x68>
 8100808:	4b2a      	ldr	r3, [pc, #168]	@ (81008b4 <main+0x104>)
 810080a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810080e:	4a29      	ldr	r2, [pc, #164]	@ (81008b4 <main+0x104>)
 8100810:	f043 0301 	orr.w	r3, r3, #1
 8100814:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100818:	f000 fa5e 	bl	8100cd8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810081c:	f7ff ff58 	bl	81006d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8100820:	f000 f97a 	bl	8100b18 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  int32_t status = 0;
 8100824:	2300      	movs	r3, #0
 8100826:	607b      	str	r3, [r7, #4]

  MAILBOX_Init();
 8100828:	f006 f95c 	bl	8106ae4 <MAILBOX_Init>

  if (MX_OPENAMP_Init(RPMSG_REMOTE, NULL) != HAL_OK) {
 810082c:	2100      	movs	r1, #0
 810082e:	2001      	movs	r0, #1
 8100830:	f006 fa5a 	bl	8106ce8 <MX_OPENAMP_Init>
 8100834:	4603      	mov	r3, r0
 8100836:	2b00      	cmp	r3, #0
 8100838:	d001      	beq.n	810083e <main+0x8e>
	  Error_Handler();
 810083a:	f000 f84b 	bl	81008d4 <Error_Handler>
  }

  status = OPENAMP_create_endpoint (&rp_endpoint, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY, rpmsg_recv_callback, NULL);
 810083e:	2300      	movs	r3, #0
 8100840:	9300      	str	r3, [sp, #0]
 8100842:	4b1d      	ldr	r3, [pc, #116]	@ (81008b8 <main+0x108>)
 8100844:	f04f 32ff 	mov.w	r2, #4294967295
 8100848:	491c      	ldr	r1, [pc, #112]	@ (81008bc <main+0x10c>)
 810084a:	481d      	ldr	r0, [pc, #116]	@ (81008c0 <main+0x110>)
 810084c:	f006 fae2 	bl	8106e14 <OPENAMP_create_endpoint>
 8100850:	6078      	str	r0, [r7, #4]
  if (status < 0) {
 8100852:	687b      	ldr	r3, [r7, #4]
 8100854:	2b00      	cmp	r3, #0
 8100856:	da01      	bge.n	810085c <main+0xac>
	  Error_Handler();
 8100858:	f000 f83c 	bl	81008d4 <Error_Handler>
  }

  receive_message();
 810085c:	f7ff ff96 	bl	810078c <receive_message>

  sprintf (data, "%u\n\r", received_data);
 8100860:	4b18      	ldr	r3, [pc, #96]	@ (81008c4 <main+0x114>)
 8100862:	681b      	ldr	r3, [r3, #0]
 8100864:	461a      	mov	r2, r3
 8100866:	4918      	ldr	r1, [pc, #96]	@ (81008c8 <main+0x118>)
 8100868:	4818      	ldr	r0, [pc, #96]	@ (81008cc <main+0x11c>)
 810086a:	f006 fcc9 	bl	8107200 <siprintf>

  HAL_UART_Transmit(&huart3, data, strlen(data), 100);
 810086e:	4817      	ldr	r0, [pc, #92]	@ (81008cc <main+0x11c>)
 8100870:	f7ff fd40 	bl	81002f4 <strlen>
 8100874:	4603      	mov	r3, r0
 8100876:	b29a      	uxth	r2, r3
 8100878:	2364      	movs	r3, #100	@ 0x64
 810087a:	4914      	ldr	r1, [pc, #80]	@ (81008cc <main+0x11c>)
 810087c:	4814      	ldr	r0, [pc, #80]	@ (81008d0 <main+0x120>)
 810087e:	f002 ff03 	bl	8103688 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  receive_message();
 8100882:	f7ff ff83 	bl	810078c <receive_message>

	  sprintf (data, "%u\n\r", received_data);
 8100886:	4b0f      	ldr	r3, [pc, #60]	@ (81008c4 <main+0x114>)
 8100888:	681b      	ldr	r3, [r3, #0]
 810088a:	461a      	mov	r2, r3
 810088c:	490e      	ldr	r1, [pc, #56]	@ (81008c8 <main+0x118>)
 810088e:	480f      	ldr	r0, [pc, #60]	@ (81008cc <main+0x11c>)
 8100890:	f006 fcb6 	bl	8107200 <siprintf>

	  HAL_UART_Transmit(&huart3, data, strlen(data), 100);
 8100894:	480d      	ldr	r0, [pc, #52]	@ (81008cc <main+0x11c>)
 8100896:	f7ff fd2d 	bl	81002f4 <strlen>
 810089a:	4603      	mov	r3, r0
 810089c:	b29a      	uxth	r2, r3
 810089e:	2364      	movs	r3, #100	@ 0x64
 81008a0:	490a      	ldr	r1, [pc, #40]	@ (81008cc <main+0x11c>)
 81008a2:	480b      	ldr	r0, [pc, #44]	@ (81008d0 <main+0x120>)
 81008a4:	f002 fef0 	bl	8103688 <HAL_UART_Transmit>
	  receive_message();
 81008a8:	bf00      	nop
 81008aa:	e7ea      	b.n	8100882 <main+0xd2>
 81008ac:	58024400 	.word	0x58024400
 81008b0:	e000ed00 	.word	0xe000ed00
 81008b4:	58026400 	.word	0x58026400
 81008b8:	08100759 	.word	0x08100759
 81008bc:	081081fc 	.word	0x081081fc
 81008c0:	10000138 	.word	0x10000138
 81008c4:	10000134 	.word	0x10000134
 81008c8:	0810820c 	.word	0x0810820c
 81008cc:	10000178 	.word	0x10000178
 81008d0:	100001e0 	.word	0x100001e0

081008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81008d4:	b480      	push	{r7}
 81008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81008d8:	b672      	cpsid	i
}
 81008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81008dc:	bf00      	nop
 81008de:	e7fd      	b.n	81008dc <Error_Handler+0x8>

081008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81008e0:	b580      	push	{r7, lr}
 81008e2:	b082      	sub	sp, #8
 81008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81008e6:	4b0d      	ldr	r3, [pc, #52]	@ (810091c <HAL_MspInit+0x3c>)
 81008e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81008ec:	4a0b      	ldr	r2, [pc, #44]	@ (810091c <HAL_MspInit+0x3c>)
 81008ee:	f043 0302 	orr.w	r3, r3, #2
 81008f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81008f6:	4b09      	ldr	r3, [pc, #36]	@ (810091c <HAL_MspInit+0x3c>)
 81008f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81008fc:	f003 0302 	and.w	r3, r3, #2
 8100900:	607b      	str	r3, [r7, #4]
 8100902:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 8100904:	2200      	movs	r2, #0
 8100906:	2100      	movs	r1, #0
 8100908:	207e      	movs	r0, #126	@ 0x7e
 810090a:	f000 fb74 	bl	8100ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810090e:	207e      	movs	r0, #126	@ 0x7e
 8100910:	f000 fb8b 	bl	810102a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100914:	bf00      	nop
 8100916:	3708      	adds	r7, #8
 8100918:	46bd      	mov	sp, r7
 810091a:	bd80      	pop	{r7, pc}
 810091c:	58024400 	.word	0x58024400

08100920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100920:	b480      	push	{r7}
 8100922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100924:	bf00      	nop
 8100926:	e7fd      	b.n	8100924 <NMI_Handler+0x4>

08100928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100928:	b480      	push	{r7}
 810092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810092c:	bf00      	nop
 810092e:	e7fd      	b.n	810092c <HardFault_Handler+0x4>

08100930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100930:	b480      	push	{r7}
 8100932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100934:	bf00      	nop
 8100936:	e7fd      	b.n	8100934 <MemManage_Handler+0x4>

08100938 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100938:	b480      	push	{r7}
 810093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810093c:	bf00      	nop
 810093e:	e7fd      	b.n	810093c <BusFault_Handler+0x4>

08100940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100940:	b480      	push	{r7}
 8100942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100944:	bf00      	nop
 8100946:	e7fd      	b.n	8100944 <UsageFault_Handler+0x4>

08100948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100948:	b480      	push	{r7}
 810094a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810094c:	bf00      	nop
 810094e:	46bd      	mov	sp, r7
 8100950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100954:	4770      	bx	lr

08100956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100956:	b480      	push	{r7}
 8100958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810095a:	bf00      	nop
 810095c:	46bd      	mov	sp, r7
 810095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100962:	4770      	bx	lr

08100964 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100964:	b480      	push	{r7}
 8100966:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100968:	bf00      	nop
 810096a:	46bd      	mov	sp, r7
 810096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100970:	4770      	bx	lr

08100972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100972:	b580      	push	{r7, lr}
 8100974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100976:	f000 fa43 	bl	8100e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810097a:	bf00      	nop
 810097c:	bd80      	pop	{r7, pc}

0810097e <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 810097e:	b580      	push	{r7, lr}
 8100980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100982:	f000 fd8b 	bl	810149c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100986:	bf00      	nop
 8100988:	bd80      	pop	{r7, pc}

0810098a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 810098a:	b480      	push	{r7}
 810098c:	af00      	add	r7, sp, #0
  return 1;
 810098e:	2301      	movs	r3, #1
}
 8100990:	4618      	mov	r0, r3
 8100992:	46bd      	mov	sp, r7
 8100994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100998:	4770      	bx	lr

0810099a <_kill>:

int _kill(int pid, int sig)
{
 810099a:	b580      	push	{r7, lr}
 810099c:	b082      	sub	sp, #8
 810099e:	af00      	add	r7, sp, #0
 81009a0:	6078      	str	r0, [r7, #4]
 81009a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 81009a4:	f006 fd12 	bl	81073cc <__errno>
 81009a8:	4603      	mov	r3, r0
 81009aa:	2216      	movs	r2, #22
 81009ac:	601a      	str	r2, [r3, #0]
  return -1;
 81009ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 81009b2:	4618      	mov	r0, r3
 81009b4:	3708      	adds	r7, #8
 81009b6:	46bd      	mov	sp, r7
 81009b8:	bd80      	pop	{r7, pc}

081009ba <_exit>:

void _exit (int status)
{
 81009ba:	b580      	push	{r7, lr}
 81009bc:	b082      	sub	sp, #8
 81009be:	af00      	add	r7, sp, #0
 81009c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 81009c2:	f04f 31ff 	mov.w	r1, #4294967295
 81009c6:	6878      	ldr	r0, [r7, #4]
 81009c8:	f7ff ffe7 	bl	810099a <_kill>
  while (1) {}    /* Make sure we hang here */
 81009cc:	bf00      	nop
 81009ce:	e7fd      	b.n	81009cc <_exit+0x12>

081009d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81009d0:	b580      	push	{r7, lr}
 81009d2:	b086      	sub	sp, #24
 81009d4:	af00      	add	r7, sp, #0
 81009d6:	60f8      	str	r0, [r7, #12]
 81009d8:	60b9      	str	r1, [r7, #8]
 81009da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81009dc:	2300      	movs	r3, #0
 81009de:	617b      	str	r3, [r7, #20]
 81009e0:	e00a      	b.n	81009f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 81009e2:	f3af 8000 	nop.w
 81009e6:	4601      	mov	r1, r0
 81009e8:	68bb      	ldr	r3, [r7, #8]
 81009ea:	1c5a      	adds	r2, r3, #1
 81009ec:	60ba      	str	r2, [r7, #8]
 81009ee:	b2ca      	uxtb	r2, r1
 81009f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81009f2:	697b      	ldr	r3, [r7, #20]
 81009f4:	3301      	adds	r3, #1
 81009f6:	617b      	str	r3, [r7, #20]
 81009f8:	697a      	ldr	r2, [r7, #20]
 81009fa:	687b      	ldr	r3, [r7, #4]
 81009fc:	429a      	cmp	r2, r3
 81009fe:	dbf0      	blt.n	81009e2 <_read+0x12>
  }

  return len;
 8100a00:	687b      	ldr	r3, [r7, #4]
}
 8100a02:	4618      	mov	r0, r3
 8100a04:	3718      	adds	r7, #24
 8100a06:	46bd      	mov	sp, r7
 8100a08:	bd80      	pop	{r7, pc}

08100a0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100a0a:	b580      	push	{r7, lr}
 8100a0c:	b086      	sub	sp, #24
 8100a0e:	af00      	add	r7, sp, #0
 8100a10:	60f8      	str	r0, [r7, #12]
 8100a12:	60b9      	str	r1, [r7, #8]
 8100a14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a16:	2300      	movs	r3, #0
 8100a18:	617b      	str	r3, [r7, #20]
 8100a1a:	e009      	b.n	8100a30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8100a1c:	68bb      	ldr	r3, [r7, #8]
 8100a1e:	1c5a      	adds	r2, r3, #1
 8100a20:	60ba      	str	r2, [r7, #8]
 8100a22:	781b      	ldrb	r3, [r3, #0]
 8100a24:	4618      	mov	r0, r3
 8100a26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a2a:	697b      	ldr	r3, [r7, #20]
 8100a2c:	3301      	adds	r3, #1
 8100a2e:	617b      	str	r3, [r7, #20]
 8100a30:	697a      	ldr	r2, [r7, #20]
 8100a32:	687b      	ldr	r3, [r7, #4]
 8100a34:	429a      	cmp	r2, r3
 8100a36:	dbf1      	blt.n	8100a1c <_write+0x12>
  }
  return len;
 8100a38:	687b      	ldr	r3, [r7, #4]
}
 8100a3a:	4618      	mov	r0, r3
 8100a3c:	3718      	adds	r7, #24
 8100a3e:	46bd      	mov	sp, r7
 8100a40:	bd80      	pop	{r7, pc}

08100a42 <_close>:

int _close(int file)
{
 8100a42:	b480      	push	{r7}
 8100a44:	b083      	sub	sp, #12
 8100a46:	af00      	add	r7, sp, #0
 8100a48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8100a4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100a4e:	4618      	mov	r0, r3
 8100a50:	370c      	adds	r7, #12
 8100a52:	46bd      	mov	sp, r7
 8100a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a58:	4770      	bx	lr

08100a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8100a5a:	b480      	push	{r7}
 8100a5c:	b083      	sub	sp, #12
 8100a5e:	af00      	add	r7, sp, #0
 8100a60:	6078      	str	r0, [r7, #4]
 8100a62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8100a64:	683b      	ldr	r3, [r7, #0]
 8100a66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8100a6a:	605a      	str	r2, [r3, #4]
  return 0;
 8100a6c:	2300      	movs	r3, #0
}
 8100a6e:	4618      	mov	r0, r3
 8100a70:	370c      	adds	r7, #12
 8100a72:	46bd      	mov	sp, r7
 8100a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a78:	4770      	bx	lr

08100a7a <_isatty>:

int _isatty(int file)
{
 8100a7a:	b480      	push	{r7}
 8100a7c:	b083      	sub	sp, #12
 8100a7e:	af00      	add	r7, sp, #0
 8100a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8100a82:	2301      	movs	r3, #1
}
 8100a84:	4618      	mov	r0, r3
 8100a86:	370c      	adds	r7, #12
 8100a88:	46bd      	mov	sp, r7
 8100a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a8e:	4770      	bx	lr

08100a90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100a90:	b480      	push	{r7}
 8100a92:	b085      	sub	sp, #20
 8100a94:	af00      	add	r7, sp, #0
 8100a96:	60f8      	str	r0, [r7, #12]
 8100a98:	60b9      	str	r1, [r7, #8]
 8100a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8100a9c:	2300      	movs	r3, #0
}
 8100a9e:	4618      	mov	r0, r3
 8100aa0:	3714      	adds	r7, #20
 8100aa2:	46bd      	mov	sp, r7
 8100aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100aa8:	4770      	bx	lr
	...

08100aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100aac:	b580      	push	{r7, lr}
 8100aae:	b086      	sub	sp, #24
 8100ab0:	af00      	add	r7, sp, #0
 8100ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100ab4:	4a14      	ldr	r2, [pc, #80]	@ (8100b08 <_sbrk+0x5c>)
 8100ab6:	4b15      	ldr	r3, [pc, #84]	@ (8100b0c <_sbrk+0x60>)
 8100ab8:	1ad3      	subs	r3, r2, r3
 8100aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100abc:	697b      	ldr	r3, [r7, #20]
 8100abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100ac0:	4b13      	ldr	r3, [pc, #76]	@ (8100b10 <_sbrk+0x64>)
 8100ac2:	681b      	ldr	r3, [r3, #0]
 8100ac4:	2b00      	cmp	r3, #0
 8100ac6:	d102      	bne.n	8100ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100ac8:	4b11      	ldr	r3, [pc, #68]	@ (8100b10 <_sbrk+0x64>)
 8100aca:	4a12      	ldr	r2, [pc, #72]	@ (8100b14 <_sbrk+0x68>)
 8100acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100ace:	4b10      	ldr	r3, [pc, #64]	@ (8100b10 <_sbrk+0x64>)
 8100ad0:	681a      	ldr	r2, [r3, #0]
 8100ad2:	687b      	ldr	r3, [r7, #4]
 8100ad4:	4413      	add	r3, r2
 8100ad6:	693a      	ldr	r2, [r7, #16]
 8100ad8:	429a      	cmp	r2, r3
 8100ada:	d207      	bcs.n	8100aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8100adc:	f006 fc76 	bl	81073cc <__errno>
 8100ae0:	4603      	mov	r3, r0
 8100ae2:	220c      	movs	r2, #12
 8100ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8100aea:	e009      	b.n	8100b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8100aec:	4b08      	ldr	r3, [pc, #32]	@ (8100b10 <_sbrk+0x64>)
 8100aee:	681b      	ldr	r3, [r3, #0]
 8100af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100af2:	4b07      	ldr	r3, [pc, #28]	@ (8100b10 <_sbrk+0x64>)
 8100af4:	681a      	ldr	r2, [r3, #0]
 8100af6:	687b      	ldr	r3, [r7, #4]
 8100af8:	4413      	add	r3, r2
 8100afa:	4a05      	ldr	r2, [pc, #20]	@ (8100b10 <_sbrk+0x64>)
 8100afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100afe:	68fb      	ldr	r3, [r7, #12]
}
 8100b00:	4618      	mov	r0, r3
 8100b02:	3718      	adds	r7, #24
 8100b04:	46bd      	mov	sp, r7
 8100b06:	bd80      	pop	{r7, pc}
 8100b08:	10048000 	.word	0x10048000
 8100b0c:	00000400 	.word	0x00000400
 8100b10:	100001dc 	.word	0x100001dc
 8100b14:	10000480 	.word	0x10000480

08100b18 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8100b18:	b580      	push	{r7, lr}
 8100b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100b1c:	4b22      	ldr	r3, [pc, #136]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b1e:	4a23      	ldr	r2, [pc, #140]	@ (8100bac <MX_USART3_UART_Init+0x94>)
 8100b20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100b22:	4b21      	ldr	r3, [pc, #132]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8100b28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b2c:	2200      	movs	r2, #0
 8100b2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100b30:	4b1d      	ldr	r3, [pc, #116]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b32:	2200      	movs	r2, #0
 8100b34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100b36:	4b1c      	ldr	r3, [pc, #112]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b38:	2200      	movs	r2, #0
 8100b3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b3e:	220c      	movs	r2, #12
 8100b40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100b42:	4b19      	ldr	r3, [pc, #100]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b44:	2200      	movs	r2, #0
 8100b46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100b48:	4b17      	ldr	r3, [pc, #92]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b4a:	2200      	movs	r2, #0
 8100b4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100b4e:	4b16      	ldr	r3, [pc, #88]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b50:	2200      	movs	r2, #0
 8100b52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100b54:	4b14      	ldr	r3, [pc, #80]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b56:	2200      	movs	r2, #0
 8100b58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100b5a:	4b13      	ldr	r3, [pc, #76]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b5c:	2200      	movs	r2, #0
 8100b5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100b60:	4811      	ldr	r0, [pc, #68]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b62:	f002 fd41 	bl	81035e8 <HAL_UART_Init>
 8100b66:	4603      	mov	r3, r0
 8100b68:	2b00      	cmp	r3, #0
 8100b6a:	d001      	beq.n	8100b70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100b6c:	f7ff feb2 	bl	81008d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100b70:	2100      	movs	r1, #0
 8100b72:	480d      	ldr	r0, [pc, #52]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b74:	f003 fdd6 	bl	8104724 <HAL_UARTEx_SetTxFifoThreshold>
 8100b78:	4603      	mov	r3, r0
 8100b7a:	2b00      	cmp	r3, #0
 8100b7c:	d001      	beq.n	8100b82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100b7e:	f7ff fea9 	bl	81008d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100b82:	2100      	movs	r1, #0
 8100b84:	4808      	ldr	r0, [pc, #32]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b86:	f003 fe0b 	bl	81047a0 <HAL_UARTEx_SetRxFifoThreshold>
 8100b8a:	4603      	mov	r3, r0
 8100b8c:	2b00      	cmp	r3, #0
 8100b8e:	d001      	beq.n	8100b94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100b90:	f7ff fea0 	bl	81008d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100b94:	4804      	ldr	r0, [pc, #16]	@ (8100ba8 <MX_USART3_UART_Init+0x90>)
 8100b96:	f003 fd8c 	bl	81046b2 <HAL_UARTEx_DisableFifoMode>
 8100b9a:	4603      	mov	r3, r0
 8100b9c:	2b00      	cmp	r3, #0
 8100b9e:	d001      	beq.n	8100ba4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100ba0:	f7ff fe98 	bl	81008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100ba4:	bf00      	nop
 8100ba6:	bd80      	pop	{r7, pc}
 8100ba8:	100001e0 	.word	0x100001e0
 8100bac:	40004800 	.word	0x40004800

08100bb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8100bb0:	b580      	push	{r7, lr}
 8100bb2:	b0ba      	sub	sp, #232	@ 0xe8
 8100bb4:	af00      	add	r7, sp, #0
 8100bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100bb8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100bbc:	2200      	movs	r2, #0
 8100bbe:	601a      	str	r2, [r3, #0]
 8100bc0:	605a      	str	r2, [r3, #4]
 8100bc2:	609a      	str	r2, [r3, #8]
 8100bc4:	60da      	str	r2, [r3, #12]
 8100bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100bc8:	f107 0310 	add.w	r3, r7, #16
 8100bcc:	22c0      	movs	r2, #192	@ 0xc0
 8100bce:	2100      	movs	r1, #0
 8100bd0:	4618      	mov	r0, r3
 8100bd2:	f006 fb78 	bl	81072c6 <memset>
  if(uartHandle->Instance==USART3)
 8100bd6:	687b      	ldr	r3, [r7, #4]
 8100bd8:	681b      	ldr	r3, [r3, #0]
 8100bda:	4a27      	ldr	r2, [pc, #156]	@ (8100c78 <HAL_UART_MspInit+0xc8>)
 8100bdc:	4293      	cmp	r3, r2
 8100bde:	d146      	bne.n	8100c6e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100be0:	f04f 0202 	mov.w	r2, #2
 8100be4:	f04f 0300 	mov.w	r3, #0
 8100be8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100bec:	2300      	movs	r3, #0
 8100bee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100bf2:	f107 0310 	add.w	r3, r7, #16
 8100bf6:	4618      	mov	r0, r3
 8100bf8:	f000 feca 	bl	8101990 <HAL_RCCEx_PeriphCLKConfig>
 8100bfc:	4603      	mov	r3, r0
 8100bfe:	2b00      	cmp	r3, #0
 8100c00:	d001      	beq.n	8100c06 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8100c02:	f7ff fe67 	bl	81008d4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8100c06:	4b1d      	ldr	r3, [pc, #116]	@ (8100c7c <HAL_UART_MspInit+0xcc>)
 8100c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8100c7c <HAL_UART_MspInit+0xcc>)
 8100c0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8100c12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100c16:	4b19      	ldr	r3, [pc, #100]	@ (8100c7c <HAL_UART_MspInit+0xcc>)
 8100c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100c1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8100c20:	60fb      	str	r3, [r7, #12]
 8100c22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100c24:	4b15      	ldr	r3, [pc, #84]	@ (8100c7c <HAL_UART_MspInit+0xcc>)
 8100c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100c2a:	4a14      	ldr	r2, [pc, #80]	@ (8100c7c <HAL_UART_MspInit+0xcc>)
 8100c2c:	f043 0308 	orr.w	r3, r3, #8
 8100c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100c34:	4b11      	ldr	r3, [pc, #68]	@ (8100c7c <HAL_UART_MspInit+0xcc>)
 8100c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100c3a:	f003 0308 	and.w	r3, r3, #8
 8100c3e:	60bb      	str	r3, [r7, #8]
 8100c40:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8100c42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8100c46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c4a:	2302      	movs	r3, #2
 8100c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c50:	2300      	movs	r3, #0
 8100c52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c56:	2300      	movs	r3, #0
 8100c58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8100c5c:	2307      	movs	r3, #7
 8100c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100c62:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100c66:	4619      	mov	r1, r3
 8100c68:	4805      	ldr	r0, [pc, #20]	@ (8100c80 <HAL_UART_MspInit+0xd0>)
 8100c6a:	f000 fa0d 	bl	8101088 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8100c6e:	bf00      	nop
 8100c70:	37e8      	adds	r7, #232	@ 0xe8
 8100c72:	46bd      	mov	sp, r7
 8100c74:	bd80      	pop	{r7, pc}
 8100c76:	bf00      	nop
 8100c78:	40004800 	.word	0x40004800
 8100c7c:	58024400 	.word	0x58024400
 8100c80:	58020c00 	.word	0x58020c00

08100c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100c84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8100cbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100c88:	f7ff fd0a 	bl	81006a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100c8c:	480c      	ldr	r0, [pc, #48]	@ (8100cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100c8e:	490d      	ldr	r1, [pc, #52]	@ (8100cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100c90:	4a0d      	ldr	r2, [pc, #52]	@ (8100cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100c94:	e002      	b.n	8100c9c <LoopCopyDataInit>

08100c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100c9a:	3304      	adds	r3, #4

08100c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100ca0:	d3f9      	bcc.n	8100c96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8100ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8100cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100ca8:	e001      	b.n	8100cae <LoopFillZerobss>

08100caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100cac:	3204      	adds	r2, #4

08100cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100cb0:	d3fb      	bcc.n	8100caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100cb2:	f006 fb91 	bl	81073d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100cb6:	f7ff fd7b 	bl	81007b0 <main>
  bx  lr
 8100cba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100cbc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100cc0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100cc4:	10000114 	.word	0x10000114
  ldr r2, =_sidata
 8100cc8:	08108520 	.word	0x08108520
  ldr r2, =_sbss
 8100ccc:	10000114 	.word	0x10000114
  ldr r4, =_ebss
 8100cd0:	1000047c 	.word	0x1000047c

08100cd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100cd4:	e7fe      	b.n	8100cd4 <ADC3_IRQHandler>
	...

08100cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100cd8:	b580      	push	{r7, lr}
 8100cda:	b082      	sub	sp, #8
 8100cdc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100cde:	4b28      	ldr	r3, [pc, #160]	@ (8100d80 <HAL_Init+0xa8>)
 8100ce0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100ce4:	4a26      	ldr	r2, [pc, #152]	@ (8100d80 <HAL_Init+0xa8>)
 8100ce6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100cea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100cee:	4b24      	ldr	r3, [pc, #144]	@ (8100d80 <HAL_Init+0xa8>)
 8100cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100cf8:	603b      	str	r3, [r7, #0]
 8100cfa:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100cfc:	4b21      	ldr	r3, [pc, #132]	@ (8100d84 <HAL_Init+0xac>)
 8100cfe:	681b      	ldr	r3, [r3, #0]
 8100d00:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100d04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100d08:	4a1e      	ldr	r2, [pc, #120]	@ (8100d84 <HAL_Init+0xac>)
 8100d0a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8100d0e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100d10:	4b1c      	ldr	r3, [pc, #112]	@ (8100d84 <HAL_Init+0xac>)
 8100d12:	681b      	ldr	r3, [r3, #0]
 8100d14:	4a1b      	ldr	r2, [pc, #108]	@ (8100d84 <HAL_Init+0xac>)
 8100d16:	f043 0301 	orr.w	r3, r3, #1
 8100d1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100d1c:	2003      	movs	r0, #3
 8100d1e:	f000 f95f 	bl	8100fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100d22:	f000 fc5d 	bl	81015e0 <HAL_RCC_GetSysClockFreq>
 8100d26:	4602      	mov	r2, r0
 8100d28:	4b15      	ldr	r3, [pc, #84]	@ (8100d80 <HAL_Init+0xa8>)
 8100d2a:	699b      	ldr	r3, [r3, #24]
 8100d2c:	0a1b      	lsrs	r3, r3, #8
 8100d2e:	f003 030f 	and.w	r3, r3, #15
 8100d32:	4915      	ldr	r1, [pc, #84]	@ (8100d88 <HAL_Init+0xb0>)
 8100d34:	5ccb      	ldrb	r3, [r1, r3]
 8100d36:	f003 031f 	and.w	r3, r3, #31
 8100d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8100d3e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100d40:	4b0f      	ldr	r3, [pc, #60]	@ (8100d80 <HAL_Init+0xa8>)
 8100d42:	699b      	ldr	r3, [r3, #24]
 8100d44:	f003 030f 	and.w	r3, r3, #15
 8100d48:	4a0f      	ldr	r2, [pc, #60]	@ (8100d88 <HAL_Init+0xb0>)
 8100d4a:	5cd3      	ldrb	r3, [r2, r3]
 8100d4c:	f003 031f 	and.w	r3, r3, #31
 8100d50:	687a      	ldr	r2, [r7, #4]
 8100d52:	fa22 f303 	lsr.w	r3, r2, r3
 8100d56:	4a0d      	ldr	r2, [pc, #52]	@ (8100d8c <HAL_Init+0xb4>)
 8100d58:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8100d8c <HAL_Init+0xb4>)
 8100d5c:	681b      	ldr	r3, [r3, #0]
 8100d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8100d90 <HAL_Init+0xb8>)
 8100d60:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100d62:	2000      	movs	r0, #0
 8100d64:	f000 f816 	bl	8100d94 <HAL_InitTick>
 8100d68:	4603      	mov	r3, r0
 8100d6a:	2b00      	cmp	r3, #0
 8100d6c:	d001      	beq.n	8100d72 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100d6e:	2301      	movs	r3, #1
 8100d70:	e002      	b.n	8100d78 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100d72:	f7ff fdb5 	bl	81008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100d76:	2300      	movs	r3, #0
}
 8100d78:	4618      	mov	r0, r3
 8100d7a:	3708      	adds	r7, #8
 8100d7c:	46bd      	mov	sp, r7
 8100d7e:	bd80      	pop	{r7, pc}
 8100d80:	58024400 	.word	0x58024400
 8100d84:	40024400 	.word	0x40024400
 8100d88:	08108414 	.word	0x08108414
 8100d8c:	10000004 	.word	0x10000004
 8100d90:	10000000 	.word	0x10000000

08100d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100d94:	b580      	push	{r7, lr}
 8100d96:	b082      	sub	sp, #8
 8100d98:	af00      	add	r7, sp, #0
 8100d9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100d9c:	4b15      	ldr	r3, [pc, #84]	@ (8100df4 <HAL_InitTick+0x60>)
 8100d9e:	781b      	ldrb	r3, [r3, #0]
 8100da0:	2b00      	cmp	r3, #0
 8100da2:	d101      	bne.n	8100da8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100da4:	2301      	movs	r3, #1
 8100da6:	e021      	b.n	8100dec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100da8:	4b13      	ldr	r3, [pc, #76]	@ (8100df8 <HAL_InitTick+0x64>)
 8100daa:	681a      	ldr	r2, [r3, #0]
 8100dac:	4b11      	ldr	r3, [pc, #68]	@ (8100df4 <HAL_InitTick+0x60>)
 8100dae:	781b      	ldrb	r3, [r3, #0]
 8100db0:	4619      	mov	r1, r3
 8100db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8100dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8100dbe:	4618      	mov	r0, r3
 8100dc0:	f000 f941 	bl	8101046 <HAL_SYSTICK_Config>
 8100dc4:	4603      	mov	r3, r0
 8100dc6:	2b00      	cmp	r3, #0
 8100dc8:	d001      	beq.n	8100dce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100dca:	2301      	movs	r3, #1
 8100dcc:	e00e      	b.n	8100dec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100dce:	687b      	ldr	r3, [r7, #4]
 8100dd0:	2b0f      	cmp	r3, #15
 8100dd2:	d80a      	bhi.n	8100dea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100dd4:	2200      	movs	r2, #0
 8100dd6:	6879      	ldr	r1, [r7, #4]
 8100dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8100ddc:	f000 f90b 	bl	8100ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100de0:	4a06      	ldr	r2, [pc, #24]	@ (8100dfc <HAL_InitTick+0x68>)
 8100de2:	687b      	ldr	r3, [r7, #4]
 8100de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100de6:	2300      	movs	r3, #0
 8100de8:	e000      	b.n	8100dec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100dea:	2301      	movs	r3, #1
}
 8100dec:	4618      	mov	r0, r3
 8100dee:	3708      	adds	r7, #8
 8100df0:	46bd      	mov	sp, r7
 8100df2:	bd80      	pop	{r7, pc}
 8100df4:	1000000c 	.word	0x1000000c
 8100df8:	10000000 	.word	0x10000000
 8100dfc:	10000008 	.word	0x10000008

08100e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100e00:	b480      	push	{r7}
 8100e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100e04:	4b06      	ldr	r3, [pc, #24]	@ (8100e20 <HAL_IncTick+0x20>)
 8100e06:	781b      	ldrb	r3, [r3, #0]
 8100e08:	461a      	mov	r2, r3
 8100e0a:	4b06      	ldr	r3, [pc, #24]	@ (8100e24 <HAL_IncTick+0x24>)
 8100e0c:	681b      	ldr	r3, [r3, #0]
 8100e0e:	4413      	add	r3, r2
 8100e10:	4a04      	ldr	r2, [pc, #16]	@ (8100e24 <HAL_IncTick+0x24>)
 8100e12:	6013      	str	r3, [r2, #0]
}
 8100e14:	bf00      	nop
 8100e16:	46bd      	mov	sp, r7
 8100e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e1c:	4770      	bx	lr
 8100e1e:	bf00      	nop
 8100e20:	1000000c 	.word	0x1000000c
 8100e24:	10000274 	.word	0x10000274

08100e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100e28:	b480      	push	{r7}
 8100e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8100e2c:	4b03      	ldr	r3, [pc, #12]	@ (8100e3c <HAL_GetTick+0x14>)
 8100e2e:	681b      	ldr	r3, [r3, #0]
}
 8100e30:	4618      	mov	r0, r3
 8100e32:	46bd      	mov	sp, r7
 8100e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e38:	4770      	bx	lr
 8100e3a:	bf00      	nop
 8100e3c:	10000274 	.word	0x10000274

08100e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100e40:	b480      	push	{r7}
 8100e42:	b085      	sub	sp, #20
 8100e44:	af00      	add	r7, sp, #0
 8100e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100e48:	687b      	ldr	r3, [r7, #4]
 8100e4a:	f003 0307 	and.w	r3, r3, #7
 8100e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100e50:	4b0c      	ldr	r3, [pc, #48]	@ (8100e84 <__NVIC_SetPriorityGrouping+0x44>)
 8100e52:	68db      	ldr	r3, [r3, #12]
 8100e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100e56:	68ba      	ldr	r2, [r7, #8]
 8100e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100e5c:	4013      	ands	r3, r2
 8100e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100e60:	68fb      	ldr	r3, [r7, #12]
 8100e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100e64:	68bb      	ldr	r3, [r7, #8]
 8100e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100e72:	4a04      	ldr	r2, [pc, #16]	@ (8100e84 <__NVIC_SetPriorityGrouping+0x44>)
 8100e74:	68bb      	ldr	r3, [r7, #8]
 8100e76:	60d3      	str	r3, [r2, #12]
}
 8100e78:	bf00      	nop
 8100e7a:	3714      	adds	r7, #20
 8100e7c:	46bd      	mov	sp, r7
 8100e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e82:	4770      	bx	lr
 8100e84:	e000ed00 	.word	0xe000ed00

08100e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100e88:	b480      	push	{r7}
 8100e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100e8c:	4b04      	ldr	r3, [pc, #16]	@ (8100ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8100e8e:	68db      	ldr	r3, [r3, #12]
 8100e90:	0a1b      	lsrs	r3, r3, #8
 8100e92:	f003 0307 	and.w	r3, r3, #7
}
 8100e96:	4618      	mov	r0, r3
 8100e98:	46bd      	mov	sp, r7
 8100e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e9e:	4770      	bx	lr
 8100ea0:	e000ed00 	.word	0xe000ed00

08100ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100ea4:	b480      	push	{r7}
 8100ea6:	b083      	sub	sp, #12
 8100ea8:	af00      	add	r7, sp, #0
 8100eaa:	4603      	mov	r3, r0
 8100eac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100eb2:	2b00      	cmp	r3, #0
 8100eb4:	db0b      	blt.n	8100ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100eb6:	88fb      	ldrh	r3, [r7, #6]
 8100eb8:	f003 021f 	and.w	r2, r3, #31
 8100ebc:	4907      	ldr	r1, [pc, #28]	@ (8100edc <__NVIC_EnableIRQ+0x38>)
 8100ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100ec2:	095b      	lsrs	r3, r3, #5
 8100ec4:	2001      	movs	r0, #1
 8100ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8100eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100ece:	bf00      	nop
 8100ed0:	370c      	adds	r7, #12
 8100ed2:	46bd      	mov	sp, r7
 8100ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ed8:	4770      	bx	lr
 8100eda:	bf00      	nop
 8100edc:	e000e100 	.word	0xe000e100

08100ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100ee0:	b480      	push	{r7}
 8100ee2:	b083      	sub	sp, #12
 8100ee4:	af00      	add	r7, sp, #0
 8100ee6:	4603      	mov	r3, r0
 8100ee8:	6039      	str	r1, [r7, #0]
 8100eea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100ef0:	2b00      	cmp	r3, #0
 8100ef2:	db0a      	blt.n	8100f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100ef4:	683b      	ldr	r3, [r7, #0]
 8100ef6:	b2da      	uxtb	r2, r3
 8100ef8:	490c      	ldr	r1, [pc, #48]	@ (8100f2c <__NVIC_SetPriority+0x4c>)
 8100efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100efe:	0112      	lsls	r2, r2, #4
 8100f00:	b2d2      	uxtb	r2, r2
 8100f02:	440b      	add	r3, r1
 8100f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100f08:	e00a      	b.n	8100f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100f0a:	683b      	ldr	r3, [r7, #0]
 8100f0c:	b2da      	uxtb	r2, r3
 8100f0e:	4908      	ldr	r1, [pc, #32]	@ (8100f30 <__NVIC_SetPriority+0x50>)
 8100f10:	88fb      	ldrh	r3, [r7, #6]
 8100f12:	f003 030f 	and.w	r3, r3, #15
 8100f16:	3b04      	subs	r3, #4
 8100f18:	0112      	lsls	r2, r2, #4
 8100f1a:	b2d2      	uxtb	r2, r2
 8100f1c:	440b      	add	r3, r1
 8100f1e:	761a      	strb	r2, [r3, #24]
}
 8100f20:	bf00      	nop
 8100f22:	370c      	adds	r7, #12
 8100f24:	46bd      	mov	sp, r7
 8100f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f2a:	4770      	bx	lr
 8100f2c:	e000e100 	.word	0xe000e100
 8100f30:	e000ed00 	.word	0xe000ed00

08100f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100f34:	b480      	push	{r7}
 8100f36:	b089      	sub	sp, #36	@ 0x24
 8100f38:	af00      	add	r7, sp, #0
 8100f3a:	60f8      	str	r0, [r7, #12]
 8100f3c:	60b9      	str	r1, [r7, #8]
 8100f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100f40:	68fb      	ldr	r3, [r7, #12]
 8100f42:	f003 0307 	and.w	r3, r3, #7
 8100f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100f48:	69fb      	ldr	r3, [r7, #28]
 8100f4a:	f1c3 0307 	rsb	r3, r3, #7
 8100f4e:	2b04      	cmp	r3, #4
 8100f50:	bf28      	it	cs
 8100f52:	2304      	movcs	r3, #4
 8100f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100f56:	69fb      	ldr	r3, [r7, #28]
 8100f58:	3304      	adds	r3, #4
 8100f5a:	2b06      	cmp	r3, #6
 8100f5c:	d902      	bls.n	8100f64 <NVIC_EncodePriority+0x30>
 8100f5e:	69fb      	ldr	r3, [r7, #28]
 8100f60:	3b03      	subs	r3, #3
 8100f62:	e000      	b.n	8100f66 <NVIC_EncodePriority+0x32>
 8100f64:	2300      	movs	r3, #0
 8100f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100f68:	f04f 32ff 	mov.w	r2, #4294967295
 8100f6c:	69bb      	ldr	r3, [r7, #24]
 8100f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8100f72:	43da      	mvns	r2, r3
 8100f74:	68bb      	ldr	r3, [r7, #8]
 8100f76:	401a      	ands	r2, r3
 8100f78:	697b      	ldr	r3, [r7, #20]
 8100f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8100f80:	697b      	ldr	r3, [r7, #20]
 8100f82:	fa01 f303 	lsl.w	r3, r1, r3
 8100f86:	43d9      	mvns	r1, r3
 8100f88:	687b      	ldr	r3, [r7, #4]
 8100f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100f8c:	4313      	orrs	r3, r2
         );
}
 8100f8e:	4618      	mov	r0, r3
 8100f90:	3724      	adds	r7, #36	@ 0x24
 8100f92:	46bd      	mov	sp, r7
 8100f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f98:	4770      	bx	lr
	...

08100f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100f9c:	b580      	push	{r7, lr}
 8100f9e:	b082      	sub	sp, #8
 8100fa0:	af00      	add	r7, sp, #0
 8100fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100fa4:	687b      	ldr	r3, [r7, #4]
 8100fa6:	3b01      	subs	r3, #1
 8100fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100fac:	d301      	bcc.n	8100fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100fae:	2301      	movs	r3, #1
 8100fb0:	e00f      	b.n	8100fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8100fdc <SysTick_Config+0x40>)
 8100fb4:	687b      	ldr	r3, [r7, #4]
 8100fb6:	3b01      	subs	r3, #1
 8100fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100fba:	210f      	movs	r1, #15
 8100fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8100fc0:	f7ff ff8e 	bl	8100ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100fc4:	4b05      	ldr	r3, [pc, #20]	@ (8100fdc <SysTick_Config+0x40>)
 8100fc6:	2200      	movs	r2, #0
 8100fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100fca:	4b04      	ldr	r3, [pc, #16]	@ (8100fdc <SysTick_Config+0x40>)
 8100fcc:	2207      	movs	r2, #7
 8100fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100fd0:	2300      	movs	r3, #0
}
 8100fd2:	4618      	mov	r0, r3
 8100fd4:	3708      	adds	r7, #8
 8100fd6:	46bd      	mov	sp, r7
 8100fd8:	bd80      	pop	{r7, pc}
 8100fda:	bf00      	nop
 8100fdc:	e000e010 	.word	0xe000e010

08100fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100fe0:	b580      	push	{r7, lr}
 8100fe2:	b082      	sub	sp, #8
 8100fe4:	af00      	add	r7, sp, #0
 8100fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100fe8:	6878      	ldr	r0, [r7, #4]
 8100fea:	f7ff ff29 	bl	8100e40 <__NVIC_SetPriorityGrouping>
}
 8100fee:	bf00      	nop
 8100ff0:	3708      	adds	r7, #8
 8100ff2:	46bd      	mov	sp, r7
 8100ff4:	bd80      	pop	{r7, pc}

08100ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100ff6:	b580      	push	{r7, lr}
 8100ff8:	b086      	sub	sp, #24
 8100ffa:	af00      	add	r7, sp, #0
 8100ffc:	4603      	mov	r3, r0
 8100ffe:	60b9      	str	r1, [r7, #8]
 8101000:	607a      	str	r2, [r7, #4]
 8101002:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101004:	f7ff ff40 	bl	8100e88 <__NVIC_GetPriorityGrouping>
 8101008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810100a:	687a      	ldr	r2, [r7, #4]
 810100c:	68b9      	ldr	r1, [r7, #8]
 810100e:	6978      	ldr	r0, [r7, #20]
 8101010:	f7ff ff90 	bl	8100f34 <NVIC_EncodePriority>
 8101014:	4602      	mov	r2, r0
 8101016:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810101a:	4611      	mov	r1, r2
 810101c:	4618      	mov	r0, r3
 810101e:	f7ff ff5f 	bl	8100ee0 <__NVIC_SetPriority>
}
 8101022:	bf00      	nop
 8101024:	3718      	adds	r7, #24
 8101026:	46bd      	mov	sp, r7
 8101028:	bd80      	pop	{r7, pc}

0810102a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810102a:	b580      	push	{r7, lr}
 810102c:	b082      	sub	sp, #8
 810102e:	af00      	add	r7, sp, #0
 8101030:	4603      	mov	r3, r0
 8101032:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101038:	4618      	mov	r0, r3
 810103a:	f7ff ff33 	bl	8100ea4 <__NVIC_EnableIRQ>
}
 810103e:	bf00      	nop
 8101040:	3708      	adds	r7, #8
 8101042:	46bd      	mov	sp, r7
 8101044:	bd80      	pop	{r7, pc}

08101046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101046:	b580      	push	{r7, lr}
 8101048:	b082      	sub	sp, #8
 810104a:	af00      	add	r7, sp, #0
 810104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810104e:	6878      	ldr	r0, [r7, #4]
 8101050:	f7ff ffa4 	bl	8100f9c <SysTick_Config>
 8101054:	4603      	mov	r3, r0
}
 8101056:	4618      	mov	r0, r3
 8101058:	3708      	adds	r7, #8
 810105a:	46bd      	mov	sp, r7
 810105c:	bd80      	pop	{r7, pc}
	...

08101060 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101060:	b480      	push	{r7}
 8101062:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101064:	4b07      	ldr	r3, [pc, #28]	@ (8101084 <HAL_GetCurrentCPUID+0x24>)
 8101066:	681b      	ldr	r3, [r3, #0]
 8101068:	091b      	lsrs	r3, r3, #4
 810106a:	f003 030f 	and.w	r3, r3, #15
 810106e:	2b07      	cmp	r3, #7
 8101070:	d101      	bne.n	8101076 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101072:	2303      	movs	r3, #3
 8101074:	e000      	b.n	8101078 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101076:	2301      	movs	r3, #1
  }
}
 8101078:	4618      	mov	r0, r3
 810107a:	46bd      	mov	sp, r7
 810107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101080:	4770      	bx	lr
 8101082:	bf00      	nop
 8101084:	e000ed00 	.word	0xe000ed00

08101088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101088:	b480      	push	{r7}
 810108a:	b089      	sub	sp, #36	@ 0x24
 810108c:	af00      	add	r7, sp, #0
 810108e:	6078      	str	r0, [r7, #4]
 8101090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101092:	2300      	movs	r3, #0
 8101094:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101096:	4b89      	ldr	r3, [pc, #548]	@ (81012bc <HAL_GPIO_Init+0x234>)
 8101098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810109a:	e194      	b.n	81013c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810109c:	683b      	ldr	r3, [r7, #0]
 810109e:	681a      	ldr	r2, [r3, #0]
 81010a0:	2101      	movs	r1, #1
 81010a2:	69fb      	ldr	r3, [r7, #28]
 81010a4:	fa01 f303 	lsl.w	r3, r1, r3
 81010a8:	4013      	ands	r3, r2
 81010aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81010ac:	693b      	ldr	r3, [r7, #16]
 81010ae:	2b00      	cmp	r3, #0
 81010b0:	f000 8186 	beq.w	81013c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81010b4:	683b      	ldr	r3, [r7, #0]
 81010b6:	685b      	ldr	r3, [r3, #4]
 81010b8:	f003 0303 	and.w	r3, r3, #3
 81010bc:	2b01      	cmp	r3, #1
 81010be:	d005      	beq.n	81010cc <HAL_GPIO_Init+0x44>
 81010c0:	683b      	ldr	r3, [r7, #0]
 81010c2:	685b      	ldr	r3, [r3, #4]
 81010c4:	f003 0303 	and.w	r3, r3, #3
 81010c8:	2b02      	cmp	r3, #2
 81010ca:	d130      	bne.n	810112e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81010cc:	687b      	ldr	r3, [r7, #4]
 81010ce:	689b      	ldr	r3, [r3, #8]
 81010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81010d2:	69fb      	ldr	r3, [r7, #28]
 81010d4:	005b      	lsls	r3, r3, #1
 81010d6:	2203      	movs	r2, #3
 81010d8:	fa02 f303 	lsl.w	r3, r2, r3
 81010dc:	43db      	mvns	r3, r3
 81010de:	69ba      	ldr	r2, [r7, #24]
 81010e0:	4013      	ands	r3, r2
 81010e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81010e4:	683b      	ldr	r3, [r7, #0]
 81010e6:	68da      	ldr	r2, [r3, #12]
 81010e8:	69fb      	ldr	r3, [r7, #28]
 81010ea:	005b      	lsls	r3, r3, #1
 81010ec:	fa02 f303 	lsl.w	r3, r2, r3
 81010f0:	69ba      	ldr	r2, [r7, #24]
 81010f2:	4313      	orrs	r3, r2
 81010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81010f6:	687b      	ldr	r3, [r7, #4]
 81010f8:	69ba      	ldr	r2, [r7, #24]
 81010fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81010fc:	687b      	ldr	r3, [r7, #4]
 81010fe:	685b      	ldr	r3, [r3, #4]
 8101100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101102:	2201      	movs	r2, #1
 8101104:	69fb      	ldr	r3, [r7, #28]
 8101106:	fa02 f303 	lsl.w	r3, r2, r3
 810110a:	43db      	mvns	r3, r3
 810110c:	69ba      	ldr	r2, [r7, #24]
 810110e:	4013      	ands	r3, r2
 8101110:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101112:	683b      	ldr	r3, [r7, #0]
 8101114:	685b      	ldr	r3, [r3, #4]
 8101116:	091b      	lsrs	r3, r3, #4
 8101118:	f003 0201 	and.w	r2, r3, #1
 810111c:	69fb      	ldr	r3, [r7, #28]
 810111e:	fa02 f303 	lsl.w	r3, r2, r3
 8101122:	69ba      	ldr	r2, [r7, #24]
 8101124:	4313      	orrs	r3, r2
 8101126:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101128:	687b      	ldr	r3, [r7, #4]
 810112a:	69ba      	ldr	r2, [r7, #24]
 810112c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810112e:	683b      	ldr	r3, [r7, #0]
 8101130:	685b      	ldr	r3, [r3, #4]
 8101132:	f003 0303 	and.w	r3, r3, #3
 8101136:	2b03      	cmp	r3, #3
 8101138:	d017      	beq.n	810116a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810113a:	687b      	ldr	r3, [r7, #4]
 810113c:	68db      	ldr	r3, [r3, #12]
 810113e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101140:	69fb      	ldr	r3, [r7, #28]
 8101142:	005b      	lsls	r3, r3, #1
 8101144:	2203      	movs	r2, #3
 8101146:	fa02 f303 	lsl.w	r3, r2, r3
 810114a:	43db      	mvns	r3, r3
 810114c:	69ba      	ldr	r2, [r7, #24]
 810114e:	4013      	ands	r3, r2
 8101150:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101152:	683b      	ldr	r3, [r7, #0]
 8101154:	689a      	ldr	r2, [r3, #8]
 8101156:	69fb      	ldr	r3, [r7, #28]
 8101158:	005b      	lsls	r3, r3, #1
 810115a:	fa02 f303 	lsl.w	r3, r2, r3
 810115e:	69ba      	ldr	r2, [r7, #24]
 8101160:	4313      	orrs	r3, r2
 8101162:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101164:	687b      	ldr	r3, [r7, #4]
 8101166:	69ba      	ldr	r2, [r7, #24]
 8101168:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810116a:	683b      	ldr	r3, [r7, #0]
 810116c:	685b      	ldr	r3, [r3, #4]
 810116e:	f003 0303 	and.w	r3, r3, #3
 8101172:	2b02      	cmp	r3, #2
 8101174:	d123      	bne.n	81011be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101176:	69fb      	ldr	r3, [r7, #28]
 8101178:	08da      	lsrs	r2, r3, #3
 810117a:	687b      	ldr	r3, [r7, #4]
 810117c:	3208      	adds	r2, #8
 810117e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101184:	69fb      	ldr	r3, [r7, #28]
 8101186:	f003 0307 	and.w	r3, r3, #7
 810118a:	009b      	lsls	r3, r3, #2
 810118c:	220f      	movs	r2, #15
 810118e:	fa02 f303 	lsl.w	r3, r2, r3
 8101192:	43db      	mvns	r3, r3
 8101194:	69ba      	ldr	r2, [r7, #24]
 8101196:	4013      	ands	r3, r2
 8101198:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810119a:	683b      	ldr	r3, [r7, #0]
 810119c:	691a      	ldr	r2, [r3, #16]
 810119e:	69fb      	ldr	r3, [r7, #28]
 81011a0:	f003 0307 	and.w	r3, r3, #7
 81011a4:	009b      	lsls	r3, r3, #2
 81011a6:	fa02 f303 	lsl.w	r3, r2, r3
 81011aa:	69ba      	ldr	r2, [r7, #24]
 81011ac:	4313      	orrs	r3, r2
 81011ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81011b0:	69fb      	ldr	r3, [r7, #28]
 81011b2:	08da      	lsrs	r2, r3, #3
 81011b4:	687b      	ldr	r3, [r7, #4]
 81011b6:	3208      	adds	r2, #8
 81011b8:	69b9      	ldr	r1, [r7, #24]
 81011ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81011be:	687b      	ldr	r3, [r7, #4]
 81011c0:	681b      	ldr	r3, [r3, #0]
 81011c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81011c4:	69fb      	ldr	r3, [r7, #28]
 81011c6:	005b      	lsls	r3, r3, #1
 81011c8:	2203      	movs	r2, #3
 81011ca:	fa02 f303 	lsl.w	r3, r2, r3
 81011ce:	43db      	mvns	r3, r3
 81011d0:	69ba      	ldr	r2, [r7, #24]
 81011d2:	4013      	ands	r3, r2
 81011d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81011d6:	683b      	ldr	r3, [r7, #0]
 81011d8:	685b      	ldr	r3, [r3, #4]
 81011da:	f003 0203 	and.w	r2, r3, #3
 81011de:	69fb      	ldr	r3, [r7, #28]
 81011e0:	005b      	lsls	r3, r3, #1
 81011e2:	fa02 f303 	lsl.w	r3, r2, r3
 81011e6:	69ba      	ldr	r2, [r7, #24]
 81011e8:	4313      	orrs	r3, r2
 81011ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81011ec:	687b      	ldr	r3, [r7, #4]
 81011ee:	69ba      	ldr	r2, [r7, #24]
 81011f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81011f2:	683b      	ldr	r3, [r7, #0]
 81011f4:	685b      	ldr	r3, [r3, #4]
 81011f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81011fa:	2b00      	cmp	r3, #0
 81011fc:	f000 80e0 	beq.w	81013c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101200:	4b2f      	ldr	r3, [pc, #188]	@ (81012c0 <HAL_GPIO_Init+0x238>)
 8101202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101206:	4a2e      	ldr	r2, [pc, #184]	@ (81012c0 <HAL_GPIO_Init+0x238>)
 8101208:	f043 0302 	orr.w	r3, r3, #2
 810120c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101210:	4b2b      	ldr	r3, [pc, #172]	@ (81012c0 <HAL_GPIO_Init+0x238>)
 8101212:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101216:	f003 0302 	and.w	r3, r3, #2
 810121a:	60fb      	str	r3, [r7, #12]
 810121c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810121e:	4a29      	ldr	r2, [pc, #164]	@ (81012c4 <HAL_GPIO_Init+0x23c>)
 8101220:	69fb      	ldr	r3, [r7, #28]
 8101222:	089b      	lsrs	r3, r3, #2
 8101224:	3302      	adds	r3, #2
 8101226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810122c:	69fb      	ldr	r3, [r7, #28]
 810122e:	f003 0303 	and.w	r3, r3, #3
 8101232:	009b      	lsls	r3, r3, #2
 8101234:	220f      	movs	r2, #15
 8101236:	fa02 f303 	lsl.w	r3, r2, r3
 810123a:	43db      	mvns	r3, r3
 810123c:	69ba      	ldr	r2, [r7, #24]
 810123e:	4013      	ands	r3, r2
 8101240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101242:	687b      	ldr	r3, [r7, #4]
 8101244:	4a20      	ldr	r2, [pc, #128]	@ (81012c8 <HAL_GPIO_Init+0x240>)
 8101246:	4293      	cmp	r3, r2
 8101248:	d052      	beq.n	81012f0 <HAL_GPIO_Init+0x268>
 810124a:	687b      	ldr	r3, [r7, #4]
 810124c:	4a1f      	ldr	r2, [pc, #124]	@ (81012cc <HAL_GPIO_Init+0x244>)
 810124e:	4293      	cmp	r3, r2
 8101250:	d031      	beq.n	81012b6 <HAL_GPIO_Init+0x22e>
 8101252:	687b      	ldr	r3, [r7, #4]
 8101254:	4a1e      	ldr	r2, [pc, #120]	@ (81012d0 <HAL_GPIO_Init+0x248>)
 8101256:	4293      	cmp	r3, r2
 8101258:	d02b      	beq.n	81012b2 <HAL_GPIO_Init+0x22a>
 810125a:	687b      	ldr	r3, [r7, #4]
 810125c:	4a1d      	ldr	r2, [pc, #116]	@ (81012d4 <HAL_GPIO_Init+0x24c>)
 810125e:	4293      	cmp	r3, r2
 8101260:	d025      	beq.n	81012ae <HAL_GPIO_Init+0x226>
 8101262:	687b      	ldr	r3, [r7, #4]
 8101264:	4a1c      	ldr	r2, [pc, #112]	@ (81012d8 <HAL_GPIO_Init+0x250>)
 8101266:	4293      	cmp	r3, r2
 8101268:	d01f      	beq.n	81012aa <HAL_GPIO_Init+0x222>
 810126a:	687b      	ldr	r3, [r7, #4]
 810126c:	4a1b      	ldr	r2, [pc, #108]	@ (81012dc <HAL_GPIO_Init+0x254>)
 810126e:	4293      	cmp	r3, r2
 8101270:	d019      	beq.n	81012a6 <HAL_GPIO_Init+0x21e>
 8101272:	687b      	ldr	r3, [r7, #4]
 8101274:	4a1a      	ldr	r2, [pc, #104]	@ (81012e0 <HAL_GPIO_Init+0x258>)
 8101276:	4293      	cmp	r3, r2
 8101278:	d013      	beq.n	81012a2 <HAL_GPIO_Init+0x21a>
 810127a:	687b      	ldr	r3, [r7, #4]
 810127c:	4a19      	ldr	r2, [pc, #100]	@ (81012e4 <HAL_GPIO_Init+0x25c>)
 810127e:	4293      	cmp	r3, r2
 8101280:	d00d      	beq.n	810129e <HAL_GPIO_Init+0x216>
 8101282:	687b      	ldr	r3, [r7, #4]
 8101284:	4a18      	ldr	r2, [pc, #96]	@ (81012e8 <HAL_GPIO_Init+0x260>)
 8101286:	4293      	cmp	r3, r2
 8101288:	d007      	beq.n	810129a <HAL_GPIO_Init+0x212>
 810128a:	687b      	ldr	r3, [r7, #4]
 810128c:	4a17      	ldr	r2, [pc, #92]	@ (81012ec <HAL_GPIO_Init+0x264>)
 810128e:	4293      	cmp	r3, r2
 8101290:	d101      	bne.n	8101296 <HAL_GPIO_Init+0x20e>
 8101292:	2309      	movs	r3, #9
 8101294:	e02d      	b.n	81012f2 <HAL_GPIO_Init+0x26a>
 8101296:	230a      	movs	r3, #10
 8101298:	e02b      	b.n	81012f2 <HAL_GPIO_Init+0x26a>
 810129a:	2308      	movs	r3, #8
 810129c:	e029      	b.n	81012f2 <HAL_GPIO_Init+0x26a>
 810129e:	2307      	movs	r3, #7
 81012a0:	e027      	b.n	81012f2 <HAL_GPIO_Init+0x26a>
 81012a2:	2306      	movs	r3, #6
 81012a4:	e025      	b.n	81012f2 <HAL_GPIO_Init+0x26a>
 81012a6:	2305      	movs	r3, #5
 81012a8:	e023      	b.n	81012f2 <HAL_GPIO_Init+0x26a>
 81012aa:	2304      	movs	r3, #4
 81012ac:	e021      	b.n	81012f2 <HAL_GPIO_Init+0x26a>
 81012ae:	2303      	movs	r3, #3
 81012b0:	e01f      	b.n	81012f2 <HAL_GPIO_Init+0x26a>
 81012b2:	2302      	movs	r3, #2
 81012b4:	e01d      	b.n	81012f2 <HAL_GPIO_Init+0x26a>
 81012b6:	2301      	movs	r3, #1
 81012b8:	e01b      	b.n	81012f2 <HAL_GPIO_Init+0x26a>
 81012ba:	bf00      	nop
 81012bc:	580000c0 	.word	0x580000c0
 81012c0:	58024400 	.word	0x58024400
 81012c4:	58000400 	.word	0x58000400
 81012c8:	58020000 	.word	0x58020000
 81012cc:	58020400 	.word	0x58020400
 81012d0:	58020800 	.word	0x58020800
 81012d4:	58020c00 	.word	0x58020c00
 81012d8:	58021000 	.word	0x58021000
 81012dc:	58021400 	.word	0x58021400
 81012e0:	58021800 	.word	0x58021800
 81012e4:	58021c00 	.word	0x58021c00
 81012e8:	58022000 	.word	0x58022000
 81012ec:	58022400 	.word	0x58022400
 81012f0:	2300      	movs	r3, #0
 81012f2:	69fa      	ldr	r2, [r7, #28]
 81012f4:	f002 0203 	and.w	r2, r2, #3
 81012f8:	0092      	lsls	r2, r2, #2
 81012fa:	4093      	lsls	r3, r2
 81012fc:	69ba      	ldr	r2, [r7, #24]
 81012fe:	4313      	orrs	r3, r2
 8101300:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101302:	4938      	ldr	r1, [pc, #224]	@ (81013e4 <HAL_GPIO_Init+0x35c>)
 8101304:	69fb      	ldr	r3, [r7, #28]
 8101306:	089b      	lsrs	r3, r3, #2
 8101308:	3302      	adds	r3, #2
 810130a:	69ba      	ldr	r2, [r7, #24]
 810130c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101314:	681b      	ldr	r3, [r3, #0]
 8101316:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101318:	693b      	ldr	r3, [r7, #16]
 810131a:	43db      	mvns	r3, r3
 810131c:	69ba      	ldr	r2, [r7, #24]
 810131e:	4013      	ands	r3, r2
 8101320:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101322:	683b      	ldr	r3, [r7, #0]
 8101324:	685b      	ldr	r3, [r3, #4]
 8101326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810132a:	2b00      	cmp	r3, #0
 810132c:	d003      	beq.n	8101336 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810132e:	69ba      	ldr	r2, [r7, #24]
 8101330:	693b      	ldr	r3, [r7, #16]
 8101332:	4313      	orrs	r3, r2
 8101334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101336:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810133a:	69bb      	ldr	r3, [r7, #24]
 810133c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810133e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101342:	685b      	ldr	r3, [r3, #4]
 8101344:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101346:	693b      	ldr	r3, [r7, #16]
 8101348:	43db      	mvns	r3, r3
 810134a:	69ba      	ldr	r2, [r7, #24]
 810134c:	4013      	ands	r3, r2
 810134e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101350:	683b      	ldr	r3, [r7, #0]
 8101352:	685b      	ldr	r3, [r3, #4]
 8101354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8101358:	2b00      	cmp	r3, #0
 810135a:	d003      	beq.n	8101364 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810135c:	69ba      	ldr	r2, [r7, #24]
 810135e:	693b      	ldr	r3, [r7, #16]
 8101360:	4313      	orrs	r3, r2
 8101362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101364:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101368:	69bb      	ldr	r3, [r7, #24]
 810136a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810136c:	697b      	ldr	r3, [r7, #20]
 810136e:	685b      	ldr	r3, [r3, #4]
 8101370:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101372:	693b      	ldr	r3, [r7, #16]
 8101374:	43db      	mvns	r3, r3
 8101376:	69ba      	ldr	r2, [r7, #24]
 8101378:	4013      	ands	r3, r2
 810137a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810137c:	683b      	ldr	r3, [r7, #0]
 810137e:	685b      	ldr	r3, [r3, #4]
 8101380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101384:	2b00      	cmp	r3, #0
 8101386:	d003      	beq.n	8101390 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101388:	69ba      	ldr	r2, [r7, #24]
 810138a:	693b      	ldr	r3, [r7, #16]
 810138c:	4313      	orrs	r3, r2
 810138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101390:	697b      	ldr	r3, [r7, #20]
 8101392:	69ba      	ldr	r2, [r7, #24]
 8101394:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101396:	697b      	ldr	r3, [r7, #20]
 8101398:	681b      	ldr	r3, [r3, #0]
 810139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810139c:	693b      	ldr	r3, [r7, #16]
 810139e:	43db      	mvns	r3, r3
 81013a0:	69ba      	ldr	r2, [r7, #24]
 81013a2:	4013      	ands	r3, r2
 81013a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81013a6:	683b      	ldr	r3, [r7, #0]
 81013a8:	685b      	ldr	r3, [r3, #4]
 81013aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81013ae:	2b00      	cmp	r3, #0
 81013b0:	d003      	beq.n	81013ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81013b2:	69ba      	ldr	r2, [r7, #24]
 81013b4:	693b      	ldr	r3, [r7, #16]
 81013b6:	4313      	orrs	r3, r2
 81013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81013ba:	697b      	ldr	r3, [r7, #20]
 81013bc:	69ba      	ldr	r2, [r7, #24]
 81013be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81013c0:	69fb      	ldr	r3, [r7, #28]
 81013c2:	3301      	adds	r3, #1
 81013c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81013c6:	683b      	ldr	r3, [r7, #0]
 81013c8:	681a      	ldr	r2, [r3, #0]
 81013ca:	69fb      	ldr	r3, [r7, #28]
 81013cc:	fa22 f303 	lsr.w	r3, r2, r3
 81013d0:	2b00      	cmp	r3, #0
 81013d2:	f47f ae63 	bne.w	810109c <HAL_GPIO_Init+0x14>
  }
}
 81013d6:	bf00      	nop
 81013d8:	bf00      	nop
 81013da:	3724      	adds	r7, #36	@ 0x24
 81013dc:	46bd      	mov	sp, r7
 81013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013e2:	4770      	bx	lr
 81013e4:	58000400 	.word	0x58000400

081013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81013e8:	b480      	push	{r7}
 81013ea:	b083      	sub	sp, #12
 81013ec:	af00      	add	r7, sp, #0
 81013ee:	6078      	str	r0, [r7, #4]
 81013f0:	460b      	mov	r3, r1
 81013f2:	807b      	strh	r3, [r7, #2]
 81013f4:	4613      	mov	r3, r2
 81013f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81013f8:	787b      	ldrb	r3, [r7, #1]
 81013fa:	2b00      	cmp	r3, #0
 81013fc:	d003      	beq.n	8101406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81013fe:	887a      	ldrh	r2, [r7, #2]
 8101400:	687b      	ldr	r3, [r7, #4]
 8101402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101404:	e003      	b.n	810140e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101406:	887b      	ldrh	r3, [r7, #2]
 8101408:	041a      	lsls	r2, r3, #16
 810140a:	687b      	ldr	r3, [r7, #4]
 810140c:	619a      	str	r2, [r3, #24]
}
 810140e:	bf00      	nop
 8101410:	370c      	adds	r7, #12
 8101412:	46bd      	mov	sp, r7
 8101414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101418:	4770      	bx	lr
	...

0810141c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 810141c:	b480      	push	{r7}
 810141e:	b083      	sub	sp, #12
 8101420:	af00      	add	r7, sp, #0
 8101422:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8101424:	4a08      	ldr	r2, [pc, #32]	@ (8101448 <HAL_HSEM_FastTake+0x2c>)
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	3320      	adds	r3, #32
 810142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810142e:	4a07      	ldr	r2, [pc, #28]	@ (810144c <HAL_HSEM_FastTake+0x30>)
 8101430:	4293      	cmp	r3, r2
 8101432:	d101      	bne.n	8101438 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8101434:	2300      	movs	r3, #0
 8101436:	e000      	b.n	810143a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8101438:	2301      	movs	r3, #1
}
 810143a:	4618      	mov	r0, r3
 810143c:	370c      	adds	r7, #12
 810143e:	46bd      	mov	sp, r7
 8101440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101444:	4770      	bx	lr
 8101446:	bf00      	nop
 8101448:	58026400 	.word	0x58026400
 810144c:	80000100 	.word	0x80000100

08101450 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8101450:	b480      	push	{r7}
 8101452:	b083      	sub	sp, #12
 8101454:	af00      	add	r7, sp, #0
 8101456:	6078      	str	r0, [r7, #4]
 8101458:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810145a:	4906      	ldr	r1, [pc, #24]	@ (8101474 <HAL_HSEM_Release+0x24>)
 810145c:	683b      	ldr	r3, [r7, #0]
 810145e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8101462:	687b      	ldr	r3, [r7, #4]
 8101464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8101468:	bf00      	nop
 810146a:	370c      	adds	r7, #12
 810146c:	46bd      	mov	sp, r7
 810146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101472:	4770      	bx	lr
 8101474:	58026400 	.word	0x58026400

08101478 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101478:	b480      	push	{r7}
 810147a:	b083      	sub	sp, #12
 810147c:	af00      	add	r7, sp, #0
 810147e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101480:	4b05      	ldr	r3, [pc, #20]	@ (8101498 <HAL_HSEM_ActivateNotification+0x20>)
 8101482:	681a      	ldr	r2, [r3, #0]
 8101484:	4904      	ldr	r1, [pc, #16]	@ (8101498 <HAL_HSEM_ActivateNotification+0x20>)
 8101486:	687b      	ldr	r3, [r7, #4]
 8101488:	4313      	orrs	r3, r2
 810148a:	600b      	str	r3, [r1, #0]
#endif
}
 810148c:	bf00      	nop
 810148e:	370c      	adds	r7, #12
 8101490:	46bd      	mov	sp, r7
 8101492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101496:	4770      	bx	lr
 8101498:	58026510 	.word	0x58026510

0810149c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 810149c:	b580      	push	{r7, lr}
 810149e:	b082      	sub	sp, #8
 81014a0:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81014a2:	4b0a      	ldr	r3, [pc, #40]	@ (81014cc <HAL_HSEM_IRQHandler+0x30>)
 81014a4:	68db      	ldr	r3, [r3, #12]
 81014a6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81014a8:	4b08      	ldr	r3, [pc, #32]	@ (81014cc <HAL_HSEM_IRQHandler+0x30>)
 81014aa:	681a      	ldr	r2, [r3, #0]
 81014ac:	687b      	ldr	r3, [r7, #4]
 81014ae:	43db      	mvns	r3, r3
 81014b0:	4906      	ldr	r1, [pc, #24]	@ (81014cc <HAL_HSEM_IRQHandler+0x30>)
 81014b2:	4013      	ands	r3, r2
 81014b4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 81014b6:	4a05      	ldr	r2, [pc, #20]	@ (81014cc <HAL_HSEM_IRQHandler+0x30>)
 81014b8:	687b      	ldr	r3, [r7, #4]
 81014ba:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 81014bc:	6878      	ldr	r0, [r7, #4]
 81014be:	f005 fb01 	bl	8106ac4 <HAL_HSEM_FreeCallback>
}
 81014c2:	bf00      	nop
 81014c4:	3708      	adds	r7, #8
 81014c6:	46bd      	mov	sp, r7
 81014c8:	bd80      	pop	{r7, pc}
 81014ca:	bf00      	nop
 81014cc:	58026510 	.word	0x58026510

081014d0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81014d0:	b580      	push	{r7, lr}
 81014d2:	b084      	sub	sp, #16
 81014d4:	af00      	add	r7, sp, #0
 81014d6:	60f8      	str	r0, [r7, #12]
 81014d8:	460b      	mov	r3, r1
 81014da:	607a      	str	r2, [r7, #4]
 81014dc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81014de:	4b37      	ldr	r3, [pc, #220]	@ (81015bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81014e0:	681b      	ldr	r3, [r3, #0]
 81014e2:	f023 0201 	bic.w	r2, r3, #1
 81014e6:	4935      	ldr	r1, [pc, #212]	@ (81015bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81014e8:	68fb      	ldr	r3, [r7, #12]
 81014ea:	4313      	orrs	r3, r2
 81014ec:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81014ee:	687b      	ldr	r3, [r7, #4]
 81014f0:	2b00      	cmp	r3, #0
 81014f2:	d123      	bne.n	810153c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81014f4:	f7ff fdb4 	bl	8101060 <HAL_GetCurrentCPUID>
 81014f8:	4603      	mov	r3, r0
 81014fa:	2b03      	cmp	r3, #3
 81014fc:	d158      	bne.n	81015b0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81014fe:	4b2f      	ldr	r3, [pc, #188]	@ (81015bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8101500:	691b      	ldr	r3, [r3, #16]
 8101502:	4a2e      	ldr	r2, [pc, #184]	@ (81015bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8101504:	f023 0301 	bic.w	r3, r3, #1
 8101508:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810150a:	4b2d      	ldr	r3, [pc, #180]	@ (81015c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810150c:	691b      	ldr	r3, [r3, #16]
 810150e:	4a2c      	ldr	r2, [pc, #176]	@ (81015c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101510:	f043 0304 	orr.w	r3, r3, #4
 8101514:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101516:	f3bf 8f4f 	dsb	sy
}
 810151a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810151c:	f3bf 8f6f 	isb	sy
}
 8101520:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101522:	7afb      	ldrb	r3, [r7, #11]
 8101524:	2b01      	cmp	r3, #1
 8101526:	d101      	bne.n	810152c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101528:	bf30      	wfi
 810152a:	e000      	b.n	810152e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810152c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810152e:	4b24      	ldr	r3, [pc, #144]	@ (81015c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101530:	691b      	ldr	r3, [r3, #16]
 8101532:	4a23      	ldr	r2, [pc, #140]	@ (81015c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101534:	f023 0304 	bic.w	r3, r3, #4
 8101538:	6113      	str	r3, [r2, #16]
 810153a:	e03c      	b.n	81015b6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810153c:	687b      	ldr	r3, [r7, #4]
 810153e:	2b01      	cmp	r3, #1
 8101540:	d123      	bne.n	810158a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101542:	f7ff fd8d 	bl	8101060 <HAL_GetCurrentCPUID>
 8101546:	4603      	mov	r3, r0
 8101548:	2b01      	cmp	r3, #1
 810154a:	d133      	bne.n	81015b4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810154c:	4b1b      	ldr	r3, [pc, #108]	@ (81015bc <HAL_PWREx_EnterSTOPMode+0xec>)
 810154e:	695b      	ldr	r3, [r3, #20]
 8101550:	4a1a      	ldr	r2, [pc, #104]	@ (81015bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8101552:	f023 0302 	bic.w	r3, r3, #2
 8101556:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101558:	4b19      	ldr	r3, [pc, #100]	@ (81015c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810155a:	691b      	ldr	r3, [r3, #16]
 810155c:	4a18      	ldr	r2, [pc, #96]	@ (81015c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810155e:	f043 0304 	orr.w	r3, r3, #4
 8101562:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101564:	f3bf 8f4f 	dsb	sy
}
 8101568:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810156a:	f3bf 8f6f 	isb	sy
}
 810156e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101570:	7afb      	ldrb	r3, [r7, #11]
 8101572:	2b01      	cmp	r3, #1
 8101574:	d101      	bne.n	810157a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101576:	bf30      	wfi
 8101578:	e000      	b.n	810157c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810157a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810157c:	4b10      	ldr	r3, [pc, #64]	@ (81015c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810157e:	691b      	ldr	r3, [r3, #16]
 8101580:	4a0f      	ldr	r2, [pc, #60]	@ (81015c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101582:	f023 0304 	bic.w	r3, r3, #4
 8101586:	6113      	str	r3, [r2, #16]
 8101588:	e015      	b.n	81015b6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810158a:	f7ff fd69 	bl	8101060 <HAL_GetCurrentCPUID>
 810158e:	4603      	mov	r3, r0
 8101590:	2b03      	cmp	r3, #3
 8101592:	d106      	bne.n	81015a2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101594:	4b09      	ldr	r3, [pc, #36]	@ (81015bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8101596:	691b      	ldr	r3, [r3, #16]
 8101598:	4a08      	ldr	r2, [pc, #32]	@ (81015bc <HAL_PWREx_EnterSTOPMode+0xec>)
 810159a:	f023 0304 	bic.w	r3, r3, #4
 810159e:	6113      	str	r3, [r2, #16]
 81015a0:	e009      	b.n	81015b6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81015a2:	4b06      	ldr	r3, [pc, #24]	@ (81015bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81015a4:	695b      	ldr	r3, [r3, #20]
 81015a6:	4a05      	ldr	r2, [pc, #20]	@ (81015bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81015a8:	f023 0304 	bic.w	r3, r3, #4
 81015ac:	6153      	str	r3, [r2, #20]
 81015ae:	e002      	b.n	81015b6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81015b0:	bf00      	nop
 81015b2:	e000      	b.n	81015b6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81015b4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81015b6:	3710      	adds	r7, #16
 81015b8:	46bd      	mov	sp, r7
 81015ba:	bd80      	pop	{r7, pc}
 81015bc:	58024800 	.word	0x58024800
 81015c0:	e000ed00 	.word	0xe000ed00

081015c4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81015c4:	b580      	push	{r7, lr}
 81015c6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81015c8:	f7ff fd4a 	bl	8101060 <HAL_GetCurrentCPUID>
 81015cc:	4603      	mov	r3, r0
 81015ce:	2b03      	cmp	r3, #3
 81015d0:	d101      	bne.n	81015d6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81015d2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81015d4:	e001      	b.n	81015da <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81015d6:	bf40      	sev
    __WFE ();
 81015d8:	bf20      	wfe
}
 81015da:	bf00      	nop
 81015dc:	bd80      	pop	{r7, pc}
	...

081015e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81015e0:	b480      	push	{r7}
 81015e2:	b089      	sub	sp, #36	@ 0x24
 81015e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81015e6:	4bb3      	ldr	r3, [pc, #716]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015e8:	691b      	ldr	r3, [r3, #16]
 81015ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81015ee:	2b18      	cmp	r3, #24
 81015f0:	f200 8155 	bhi.w	810189e <HAL_RCC_GetSysClockFreq+0x2be>
 81015f4:	a201      	add	r2, pc, #4	@ (adr r2, 81015fc <HAL_RCC_GetSysClockFreq+0x1c>)
 81015f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81015fa:	bf00      	nop
 81015fc:	08101661 	.word	0x08101661
 8101600:	0810189f 	.word	0x0810189f
 8101604:	0810189f 	.word	0x0810189f
 8101608:	0810189f 	.word	0x0810189f
 810160c:	0810189f 	.word	0x0810189f
 8101610:	0810189f 	.word	0x0810189f
 8101614:	0810189f 	.word	0x0810189f
 8101618:	0810189f 	.word	0x0810189f
 810161c:	08101687 	.word	0x08101687
 8101620:	0810189f 	.word	0x0810189f
 8101624:	0810189f 	.word	0x0810189f
 8101628:	0810189f 	.word	0x0810189f
 810162c:	0810189f 	.word	0x0810189f
 8101630:	0810189f 	.word	0x0810189f
 8101634:	0810189f 	.word	0x0810189f
 8101638:	0810189f 	.word	0x0810189f
 810163c:	0810168d 	.word	0x0810168d
 8101640:	0810189f 	.word	0x0810189f
 8101644:	0810189f 	.word	0x0810189f
 8101648:	0810189f 	.word	0x0810189f
 810164c:	0810189f 	.word	0x0810189f
 8101650:	0810189f 	.word	0x0810189f
 8101654:	0810189f 	.word	0x0810189f
 8101658:	0810189f 	.word	0x0810189f
 810165c:	08101693 	.word	0x08101693
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101660:	4b94      	ldr	r3, [pc, #592]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101662:	681b      	ldr	r3, [r3, #0]
 8101664:	f003 0320 	and.w	r3, r3, #32
 8101668:	2b00      	cmp	r3, #0
 810166a:	d009      	beq.n	8101680 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810166c:	4b91      	ldr	r3, [pc, #580]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810166e:	681b      	ldr	r3, [r3, #0]
 8101670:	08db      	lsrs	r3, r3, #3
 8101672:	f003 0303 	and.w	r3, r3, #3
 8101676:	4a90      	ldr	r2, [pc, #576]	@ (81018b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101678:	fa22 f303 	lsr.w	r3, r2, r3
 810167c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810167e:	e111      	b.n	81018a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101680:	4b8d      	ldr	r3, [pc, #564]	@ (81018b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101682:	61bb      	str	r3, [r7, #24]
      break;
 8101684:	e10e      	b.n	81018a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101686:	4b8d      	ldr	r3, [pc, #564]	@ (81018bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101688:	61bb      	str	r3, [r7, #24]
      break;
 810168a:	e10b      	b.n	81018a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810168c:	4b8c      	ldr	r3, [pc, #560]	@ (81018c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810168e:	61bb      	str	r3, [r7, #24]
      break;
 8101690:	e108      	b.n	81018a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101692:	4b88      	ldr	r3, [pc, #544]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101696:	f003 0303 	and.w	r3, r3, #3
 810169a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810169c:	4b85      	ldr	r3, [pc, #532]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810169e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81016a0:	091b      	lsrs	r3, r3, #4
 81016a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81016a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81016a8:	4b82      	ldr	r3, [pc, #520]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81016aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81016ac:	f003 0301 	and.w	r3, r3, #1
 81016b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81016b2:	4b80      	ldr	r3, [pc, #512]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81016b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81016b6:	08db      	lsrs	r3, r3, #3
 81016b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81016bc:	68fa      	ldr	r2, [r7, #12]
 81016be:	fb02 f303 	mul.w	r3, r2, r3
 81016c2:	ee07 3a90 	vmov	s15, r3
 81016c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81016ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81016ce:	693b      	ldr	r3, [r7, #16]
 81016d0:	2b00      	cmp	r3, #0
 81016d2:	f000 80e1 	beq.w	8101898 <HAL_RCC_GetSysClockFreq+0x2b8>
 81016d6:	697b      	ldr	r3, [r7, #20]
 81016d8:	2b02      	cmp	r3, #2
 81016da:	f000 8083 	beq.w	81017e4 <HAL_RCC_GetSysClockFreq+0x204>
 81016de:	697b      	ldr	r3, [r7, #20]
 81016e0:	2b02      	cmp	r3, #2
 81016e2:	f200 80a1 	bhi.w	8101828 <HAL_RCC_GetSysClockFreq+0x248>
 81016e6:	697b      	ldr	r3, [r7, #20]
 81016e8:	2b00      	cmp	r3, #0
 81016ea:	d003      	beq.n	81016f4 <HAL_RCC_GetSysClockFreq+0x114>
 81016ec:	697b      	ldr	r3, [r7, #20]
 81016ee:	2b01      	cmp	r3, #1
 81016f0:	d056      	beq.n	81017a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 81016f2:	e099      	b.n	8101828 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81016f4:	4b6f      	ldr	r3, [pc, #444]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81016f6:	681b      	ldr	r3, [r3, #0]
 81016f8:	f003 0320 	and.w	r3, r3, #32
 81016fc:	2b00      	cmp	r3, #0
 81016fe:	d02d      	beq.n	810175c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101700:	4b6c      	ldr	r3, [pc, #432]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101702:	681b      	ldr	r3, [r3, #0]
 8101704:	08db      	lsrs	r3, r3, #3
 8101706:	f003 0303 	and.w	r3, r3, #3
 810170a:	4a6b      	ldr	r2, [pc, #428]	@ (81018b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810170c:	fa22 f303 	lsr.w	r3, r2, r3
 8101710:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101712:	687b      	ldr	r3, [r7, #4]
 8101714:	ee07 3a90 	vmov	s15, r3
 8101718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810171c:	693b      	ldr	r3, [r7, #16]
 810171e:	ee07 3a90 	vmov	s15, r3
 8101722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810172a:	4b62      	ldr	r3, [pc, #392]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810172e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101732:	ee07 3a90 	vmov	s15, r3
 8101736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810173a:	ed97 6a02 	vldr	s12, [r7, #8]
 810173e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81018c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810174a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810174e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101756:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810175a:	e087      	b.n	810186c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810175c:	693b      	ldr	r3, [r7, #16]
 810175e:	ee07 3a90 	vmov	s15, r3
 8101762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101766:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81018c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810176a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810176e:	4b51      	ldr	r3, [pc, #324]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101776:	ee07 3a90 	vmov	s15, r3
 810177a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810177e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101782:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81018c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810178a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810178e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101796:	ee67 7a27 	vmul.f32	s15, s14, s15
 810179a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810179e:	e065      	b.n	810186c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81017a0:	693b      	ldr	r3, [r7, #16]
 81017a2:	ee07 3a90 	vmov	s15, r3
 81017a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81017aa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81018cc <HAL_RCC_GetSysClockFreq+0x2ec>
 81017ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81017b2:	4b40      	ldr	r3, [pc, #256]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81017b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81017ba:	ee07 3a90 	vmov	s15, r3
 81017be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81017c2:	ed97 6a02 	vldr	s12, [r7, #8]
 81017c6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81018c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81017ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81017ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81017d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81017d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81017da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81017de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81017e2:	e043      	b.n	810186c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81017e4:	693b      	ldr	r3, [r7, #16]
 81017e6:	ee07 3a90 	vmov	s15, r3
 81017ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81017ee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81018d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 81017f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81017f6:	4b2f      	ldr	r3, [pc, #188]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81017fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81017fe:	ee07 3a90 	vmov	s15, r3
 8101802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101806:	ed97 6a02 	vldr	s12, [r7, #8]
 810180a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81018c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810180e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810181a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810181e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101822:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101826:	e021      	b.n	810186c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101828:	693b      	ldr	r3, [r7, #16]
 810182a:	ee07 3a90 	vmov	s15, r3
 810182e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101832:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81018cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8101836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810183a:	4b1e      	ldr	r3, [pc, #120]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810183e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101842:	ee07 3a90 	vmov	s15, r3
 8101846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810184a:	ed97 6a02 	vldr	s12, [r7, #8]
 810184e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81018c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810185a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810185e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101866:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810186a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810186c:	4b11      	ldr	r3, [pc, #68]	@ (81018b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810186e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101870:	0a5b      	lsrs	r3, r3, #9
 8101872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101876:	3301      	adds	r3, #1
 8101878:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810187a:	683b      	ldr	r3, [r7, #0]
 810187c:	ee07 3a90 	vmov	s15, r3
 8101880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101884:	edd7 6a07 	vldr	s13, [r7, #28]
 8101888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810188c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101890:	ee17 3a90 	vmov	r3, s15
 8101894:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101896:	e005      	b.n	81018a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101898:	2300      	movs	r3, #0
 810189a:	61bb      	str	r3, [r7, #24]
      break;
 810189c:	e002      	b.n	81018a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810189e:	4b07      	ldr	r3, [pc, #28]	@ (81018bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 81018a0:	61bb      	str	r3, [r7, #24]
      break;
 81018a2:	bf00      	nop
  }

  return sysclockfreq;
 81018a4:	69bb      	ldr	r3, [r7, #24]
}
 81018a6:	4618      	mov	r0, r3
 81018a8:	3724      	adds	r7, #36	@ 0x24
 81018aa:	46bd      	mov	sp, r7
 81018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018b0:	4770      	bx	lr
 81018b2:	bf00      	nop
 81018b4:	58024400 	.word	0x58024400
 81018b8:	03d09000 	.word	0x03d09000
 81018bc:	003d0900 	.word	0x003d0900
 81018c0:	017d7840 	.word	0x017d7840
 81018c4:	46000000 	.word	0x46000000
 81018c8:	4c742400 	.word	0x4c742400
 81018cc:	4a742400 	.word	0x4a742400
 81018d0:	4bbebc20 	.word	0x4bbebc20

081018d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81018d4:	b580      	push	{r7, lr}
 81018d6:	b082      	sub	sp, #8
 81018d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81018da:	f7ff fe81 	bl	81015e0 <HAL_RCC_GetSysClockFreq>
 81018de:	4602      	mov	r2, r0
 81018e0:	4b11      	ldr	r3, [pc, #68]	@ (8101928 <HAL_RCC_GetHCLKFreq+0x54>)
 81018e2:	699b      	ldr	r3, [r3, #24]
 81018e4:	0a1b      	lsrs	r3, r3, #8
 81018e6:	f003 030f 	and.w	r3, r3, #15
 81018ea:	4910      	ldr	r1, [pc, #64]	@ (810192c <HAL_RCC_GetHCLKFreq+0x58>)
 81018ec:	5ccb      	ldrb	r3, [r1, r3]
 81018ee:	f003 031f 	and.w	r3, r3, #31
 81018f2:	fa22 f303 	lsr.w	r3, r2, r3
 81018f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8101928 <HAL_RCC_GetHCLKFreq+0x54>)
 81018fa:	699b      	ldr	r3, [r3, #24]
 81018fc:	f003 030f 	and.w	r3, r3, #15
 8101900:	4a0a      	ldr	r2, [pc, #40]	@ (810192c <HAL_RCC_GetHCLKFreq+0x58>)
 8101902:	5cd3      	ldrb	r3, [r2, r3]
 8101904:	f003 031f 	and.w	r3, r3, #31
 8101908:	687a      	ldr	r2, [r7, #4]
 810190a:	fa22 f303 	lsr.w	r3, r2, r3
 810190e:	4a08      	ldr	r2, [pc, #32]	@ (8101930 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101910:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101912:	4b07      	ldr	r3, [pc, #28]	@ (8101930 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101914:	681b      	ldr	r3, [r3, #0]
 8101916:	4a07      	ldr	r2, [pc, #28]	@ (8101934 <HAL_RCC_GetHCLKFreq+0x60>)
 8101918:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810191a:	4b05      	ldr	r3, [pc, #20]	@ (8101930 <HAL_RCC_GetHCLKFreq+0x5c>)
 810191c:	681b      	ldr	r3, [r3, #0]
}
 810191e:	4618      	mov	r0, r3
 8101920:	3708      	adds	r7, #8
 8101922:	46bd      	mov	sp, r7
 8101924:	bd80      	pop	{r7, pc}
 8101926:	bf00      	nop
 8101928:	58024400 	.word	0x58024400
 810192c:	08108414 	.word	0x08108414
 8101930:	10000004 	.word	0x10000004
 8101934:	10000000 	.word	0x10000000

08101938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101938:	b580      	push	{r7, lr}
 810193a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810193c:	f7ff ffca 	bl	81018d4 <HAL_RCC_GetHCLKFreq>
 8101940:	4602      	mov	r2, r0
 8101942:	4b06      	ldr	r3, [pc, #24]	@ (810195c <HAL_RCC_GetPCLK1Freq+0x24>)
 8101944:	69db      	ldr	r3, [r3, #28]
 8101946:	091b      	lsrs	r3, r3, #4
 8101948:	f003 0307 	and.w	r3, r3, #7
 810194c:	4904      	ldr	r1, [pc, #16]	@ (8101960 <HAL_RCC_GetPCLK1Freq+0x28>)
 810194e:	5ccb      	ldrb	r3, [r1, r3]
 8101950:	f003 031f 	and.w	r3, r3, #31
 8101954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101958:	4618      	mov	r0, r3
 810195a:	bd80      	pop	{r7, pc}
 810195c:	58024400 	.word	0x58024400
 8101960:	08108414 	.word	0x08108414

08101964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101964:	b580      	push	{r7, lr}
 8101966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8101968:	f7ff ffb4 	bl	81018d4 <HAL_RCC_GetHCLKFreq>
 810196c:	4602      	mov	r2, r0
 810196e:	4b06      	ldr	r3, [pc, #24]	@ (8101988 <HAL_RCC_GetPCLK2Freq+0x24>)
 8101970:	69db      	ldr	r3, [r3, #28]
 8101972:	0a1b      	lsrs	r3, r3, #8
 8101974:	f003 0307 	and.w	r3, r3, #7
 8101978:	4904      	ldr	r1, [pc, #16]	@ (810198c <HAL_RCC_GetPCLK2Freq+0x28>)
 810197a:	5ccb      	ldrb	r3, [r1, r3]
 810197c:	f003 031f 	and.w	r3, r3, #31
 8101980:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101984:	4618      	mov	r0, r3
 8101986:	bd80      	pop	{r7, pc}
 8101988:	58024400 	.word	0x58024400
 810198c:	08108414 	.word	0x08108414

08101990 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101994:	b0ca      	sub	sp, #296	@ 0x128
 8101996:	af00      	add	r7, sp, #0
 8101998:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810199c:	2300      	movs	r3, #0
 810199e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81019a2:	2300      	movs	r3, #0
 81019a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81019a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81019b0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81019b4:	2500      	movs	r5, #0
 81019b6:	ea54 0305 	orrs.w	r3, r4, r5
 81019ba:	d049      	beq.n	8101a50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81019bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81019c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81019c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81019c6:	d02f      	beq.n	8101a28 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81019c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81019cc:	d828      	bhi.n	8101a20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81019ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81019d2:	d01a      	beq.n	8101a0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81019d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81019d8:	d822      	bhi.n	8101a20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81019da:	2b00      	cmp	r3, #0
 81019dc:	d003      	beq.n	81019e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 81019de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81019e2:	d007      	beq.n	81019f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81019e4:	e01c      	b.n	8101a20 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81019e6:	4bb8      	ldr	r3, [pc, #736]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81019e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81019ea:	4ab7      	ldr	r2, [pc, #732]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81019ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81019f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81019f2:	e01a      	b.n	8101a2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81019f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81019f8:	3308      	adds	r3, #8
 81019fa:	2102      	movs	r1, #2
 81019fc:	4618      	mov	r0, r3
 81019fe:	f001 fc8f 	bl	8103320 <RCCEx_PLL2_Config>
 8101a02:	4603      	mov	r3, r0
 8101a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101a08:	e00f      	b.n	8101a2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8101a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a0e:	3328      	adds	r3, #40	@ 0x28
 8101a10:	2102      	movs	r1, #2
 8101a12:	4618      	mov	r0, r3
 8101a14:	f001 fd36 	bl	8103484 <RCCEx_PLL3_Config>
 8101a18:	4603      	mov	r3, r0
 8101a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101a1e:	e004      	b.n	8101a2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101a20:	2301      	movs	r3, #1
 8101a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101a26:	e000      	b.n	8101a2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8101a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101a2e:	2b00      	cmp	r3, #0
 8101a30:	d10a      	bne.n	8101a48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101a32:	4ba5      	ldr	r3, [pc, #660]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101a36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8101a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101a40:	4aa1      	ldr	r2, [pc, #644]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101a42:	430b      	orrs	r3, r1
 8101a44:	6513      	str	r3, [r2, #80]	@ 0x50
 8101a46:	e003      	b.n	8101a50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101a4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a58:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8101a5c:	f04f 0900 	mov.w	r9, #0
 8101a60:	ea58 0309 	orrs.w	r3, r8, r9
 8101a64:	d047      	beq.n	8101af6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8101a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101a6c:	2b04      	cmp	r3, #4
 8101a6e:	d82a      	bhi.n	8101ac6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8101a70:	a201      	add	r2, pc, #4	@ (adr r2, 8101a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8101a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101a76:	bf00      	nop
 8101a78:	08101a8d 	.word	0x08101a8d
 8101a7c:	08101a9b 	.word	0x08101a9b
 8101a80:	08101ab1 	.word	0x08101ab1
 8101a84:	08101acf 	.word	0x08101acf
 8101a88:	08101acf 	.word	0x08101acf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101a8c:	4b8e      	ldr	r3, [pc, #568]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101a90:	4a8d      	ldr	r2, [pc, #564]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101a98:	e01a      	b.n	8101ad0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a9e:	3308      	adds	r3, #8
 8101aa0:	2100      	movs	r1, #0
 8101aa2:	4618      	mov	r0, r3
 8101aa4:	f001 fc3c 	bl	8103320 <RCCEx_PLL2_Config>
 8101aa8:	4603      	mov	r3, r0
 8101aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101aae:	e00f      	b.n	8101ad0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ab4:	3328      	adds	r3, #40	@ 0x28
 8101ab6:	2100      	movs	r1, #0
 8101ab8:	4618      	mov	r0, r3
 8101aba:	f001 fce3 	bl	8103484 <RCCEx_PLL3_Config>
 8101abe:	4603      	mov	r3, r0
 8101ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101ac4:	e004      	b.n	8101ad0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101ac6:	2301      	movs	r3, #1
 8101ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101acc:	e000      	b.n	8101ad0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8101ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101ad4:	2b00      	cmp	r3, #0
 8101ad6:	d10a      	bne.n	8101aee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101ad8:	4b7b      	ldr	r3, [pc, #492]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101adc:	f023 0107 	bic.w	r1, r3, #7
 8101ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101ae6:	4a78      	ldr	r2, [pc, #480]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101ae8:	430b      	orrs	r3, r1
 8101aea:	6513      	str	r3, [r2, #80]	@ 0x50
 8101aec:	e003      	b.n	8101af6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101afe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8101b02:	f04f 0b00 	mov.w	fp, #0
 8101b06:	ea5a 030b 	orrs.w	r3, sl, fp
 8101b0a:	d04c      	beq.n	8101ba6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8101b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101b16:	d030      	beq.n	8101b7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8101b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101b1c:	d829      	bhi.n	8101b72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8101b20:	d02d      	beq.n	8101b7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8101b22:	2bc0      	cmp	r3, #192	@ 0xc0
 8101b24:	d825      	bhi.n	8101b72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101b26:	2b80      	cmp	r3, #128	@ 0x80
 8101b28:	d018      	beq.n	8101b5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8101b2a:	2b80      	cmp	r3, #128	@ 0x80
 8101b2c:	d821      	bhi.n	8101b72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101b2e:	2b00      	cmp	r3, #0
 8101b30:	d002      	beq.n	8101b38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8101b32:	2b40      	cmp	r3, #64	@ 0x40
 8101b34:	d007      	beq.n	8101b46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8101b36:	e01c      	b.n	8101b72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101b38:	4b63      	ldr	r3, [pc, #396]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101b3c:	4a62      	ldr	r2, [pc, #392]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101b44:	e01c      	b.n	8101b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b4a:	3308      	adds	r3, #8
 8101b4c:	2100      	movs	r1, #0
 8101b4e:	4618      	mov	r0, r3
 8101b50:	f001 fbe6 	bl	8103320 <RCCEx_PLL2_Config>
 8101b54:	4603      	mov	r3, r0
 8101b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101b5a:	e011      	b.n	8101b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b60:	3328      	adds	r3, #40	@ 0x28
 8101b62:	2100      	movs	r1, #0
 8101b64:	4618      	mov	r0, r3
 8101b66:	f001 fc8d 	bl	8103484 <RCCEx_PLL3_Config>
 8101b6a:	4603      	mov	r3, r0
 8101b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101b70:	e006      	b.n	8101b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101b72:	2301      	movs	r3, #1
 8101b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101b78:	e002      	b.n	8101b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101b7a:	bf00      	nop
 8101b7c:	e000      	b.n	8101b80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101b80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101b84:	2b00      	cmp	r3, #0
 8101b86:	d10a      	bne.n	8101b9e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8101b88:	4b4f      	ldr	r3, [pc, #316]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101b8c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8101b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101b96:	4a4c      	ldr	r2, [pc, #304]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101b98:	430b      	orrs	r3, r1
 8101b9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8101b9c:	e003      	b.n	8101ba6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8101ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101bae:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8101bb2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8101bb6:	2300      	movs	r3, #0
 8101bb8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8101bbc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8101bc0:	460b      	mov	r3, r1
 8101bc2:	4313      	orrs	r3, r2
 8101bc4:	d053      	beq.n	8101c6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8101bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8101bce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101bd2:	d035      	beq.n	8101c40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8101bd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101bd8:	d82e      	bhi.n	8101c38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101bda:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8101bde:	d031      	beq.n	8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8101be0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8101be4:	d828      	bhi.n	8101c38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101be6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101bea:	d01a      	beq.n	8101c22 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8101bec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101bf0:	d822      	bhi.n	8101c38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101bf2:	2b00      	cmp	r3, #0
 8101bf4:	d003      	beq.n	8101bfe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8101bf6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101bfa:	d007      	beq.n	8101c0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8101bfc:	e01c      	b.n	8101c38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101bfe:	4b32      	ldr	r3, [pc, #200]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101c02:	4a31      	ldr	r2, [pc, #196]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101c08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101c0a:	e01c      	b.n	8101c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c10:	3308      	adds	r3, #8
 8101c12:	2100      	movs	r1, #0
 8101c14:	4618      	mov	r0, r3
 8101c16:	f001 fb83 	bl	8103320 <RCCEx_PLL2_Config>
 8101c1a:	4603      	mov	r3, r0
 8101c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101c20:	e011      	b.n	8101c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c26:	3328      	adds	r3, #40	@ 0x28
 8101c28:	2100      	movs	r1, #0
 8101c2a:	4618      	mov	r0, r3
 8101c2c:	f001 fc2a 	bl	8103484 <RCCEx_PLL3_Config>
 8101c30:	4603      	mov	r3, r0
 8101c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101c36:	e006      	b.n	8101c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101c38:	2301      	movs	r3, #1
 8101c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101c3e:	e002      	b.n	8101c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101c40:	bf00      	nop
 8101c42:	e000      	b.n	8101c46 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101c4a:	2b00      	cmp	r3, #0
 8101c4c:	d10b      	bne.n	8101c66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101c52:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8101c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8101c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c60:	430b      	orrs	r3, r1
 8101c62:	6593      	str	r3, [r2, #88]	@ 0x58
 8101c64:	e003      	b.n	8101c6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c76:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8101c7a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8101c7e:	2300      	movs	r3, #0
 8101c80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8101c84:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8101c88:	460b      	mov	r3, r1
 8101c8a:	4313      	orrs	r3, r2
 8101c8c:	d056      	beq.n	8101d3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8101c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8101c96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8101c9a:	d038      	beq.n	8101d0e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8101c9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8101ca0:	d831      	bhi.n	8101d06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101ca2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8101ca6:	d034      	beq.n	8101d12 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8101ca8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8101cac:	d82b      	bhi.n	8101d06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101cae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8101cb2:	d01d      	beq.n	8101cf0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8101cb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8101cb8:	d825      	bhi.n	8101d06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101cba:	2b00      	cmp	r3, #0
 8101cbc:	d006      	beq.n	8101ccc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8101cbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101cc2:	d00a      	beq.n	8101cda <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8101cc4:	e01f      	b.n	8101d06 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101cc6:	bf00      	nop
 8101cc8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101ccc:	4ba2      	ldr	r3, [pc, #648]	@ (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101cd0:	4aa1      	ldr	r2, [pc, #644]	@ (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101cd8:	e01c      	b.n	8101d14 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101cde:	3308      	adds	r3, #8
 8101ce0:	2100      	movs	r1, #0
 8101ce2:	4618      	mov	r0, r3
 8101ce4:	f001 fb1c 	bl	8103320 <RCCEx_PLL2_Config>
 8101ce8:	4603      	mov	r3, r0
 8101cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101cee:	e011      	b.n	8101d14 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101cf4:	3328      	adds	r3, #40	@ 0x28
 8101cf6:	2100      	movs	r1, #0
 8101cf8:	4618      	mov	r0, r3
 8101cfa:	f001 fbc3 	bl	8103484 <RCCEx_PLL3_Config>
 8101cfe:	4603      	mov	r3, r0
 8101d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101d04:	e006      	b.n	8101d14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101d06:	2301      	movs	r3, #1
 8101d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101d0c:	e002      	b.n	8101d14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101d0e:	bf00      	nop
 8101d10:	e000      	b.n	8101d14 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d18:	2b00      	cmp	r3, #0
 8101d1a:	d10b      	bne.n	8101d34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101d1c:	4b8e      	ldr	r3, [pc, #568]	@ (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101d20:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8101d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8101d2c:	4a8a      	ldr	r2, [pc, #552]	@ (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101d2e:	430b      	orrs	r3, r1
 8101d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8101d32:	e003      	b.n	8101d3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101d44:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8101d48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8101d4c:	2300      	movs	r3, #0
 8101d4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8101d52:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8101d56:	460b      	mov	r3, r1
 8101d58:	4313      	orrs	r3, r2
 8101d5a:	d03a      	beq.n	8101dd2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8101d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101d62:	2b30      	cmp	r3, #48	@ 0x30
 8101d64:	d01f      	beq.n	8101da6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8101d66:	2b30      	cmp	r3, #48	@ 0x30
 8101d68:	d819      	bhi.n	8101d9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101d6a:	2b20      	cmp	r3, #32
 8101d6c:	d00c      	beq.n	8101d88 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8101d6e:	2b20      	cmp	r3, #32
 8101d70:	d815      	bhi.n	8101d9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101d72:	2b00      	cmp	r3, #0
 8101d74:	d019      	beq.n	8101daa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8101d76:	2b10      	cmp	r3, #16
 8101d78:	d111      	bne.n	8101d9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101d7a:	4b77      	ldr	r3, [pc, #476]	@ (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101d7e:	4a76      	ldr	r2, [pc, #472]	@ (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101d86:	e011      	b.n	8101dac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d8c:	3308      	adds	r3, #8
 8101d8e:	2102      	movs	r1, #2
 8101d90:	4618      	mov	r0, r3
 8101d92:	f001 fac5 	bl	8103320 <RCCEx_PLL2_Config>
 8101d96:	4603      	mov	r3, r0
 8101d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101d9c:	e006      	b.n	8101dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101d9e:	2301      	movs	r3, #1
 8101da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101da4:	e002      	b.n	8101dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101da6:	bf00      	nop
 8101da8:	e000      	b.n	8101dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101db0:	2b00      	cmp	r3, #0
 8101db2:	d10a      	bne.n	8101dca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101db4:	4b68      	ldr	r3, [pc, #416]	@ (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101db8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8101dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101dc2:	4a65      	ldr	r2, [pc, #404]	@ (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101dc4:	430b      	orrs	r3, r1
 8101dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101dc8:	e003      	b.n	8101dd2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101dda:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8101dde:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8101de2:	2300      	movs	r3, #0
 8101de4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8101de8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8101dec:	460b      	mov	r3, r1
 8101dee:	4313      	orrs	r3, r2
 8101df0:	d051      	beq.n	8101e96 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8101df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101df8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101dfc:	d035      	beq.n	8101e6a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8101dfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101e02:	d82e      	bhi.n	8101e62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101e04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8101e08:	d031      	beq.n	8101e6e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8101e0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8101e0e:	d828      	bhi.n	8101e62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101e14:	d01a      	beq.n	8101e4c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8101e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101e1a:	d822      	bhi.n	8101e62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101e1c:	2b00      	cmp	r3, #0
 8101e1e:	d003      	beq.n	8101e28 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8101e20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8101e24:	d007      	beq.n	8101e36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8101e26:	e01c      	b.n	8101e62 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101e28:	4b4b      	ldr	r3, [pc, #300]	@ (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101e2c:	4a4a      	ldr	r2, [pc, #296]	@ (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101e34:	e01c      	b.n	8101e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e3a:	3308      	adds	r3, #8
 8101e3c:	2100      	movs	r1, #0
 8101e3e:	4618      	mov	r0, r3
 8101e40:	f001 fa6e 	bl	8103320 <RCCEx_PLL2_Config>
 8101e44:	4603      	mov	r3, r0
 8101e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101e4a:	e011      	b.n	8101e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e50:	3328      	adds	r3, #40	@ 0x28
 8101e52:	2100      	movs	r1, #0
 8101e54:	4618      	mov	r0, r3
 8101e56:	f001 fb15 	bl	8103484 <RCCEx_PLL3_Config>
 8101e5a:	4603      	mov	r3, r0
 8101e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101e60:	e006      	b.n	8101e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101e62:	2301      	movs	r3, #1
 8101e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101e68:	e002      	b.n	8101e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101e6a:	bf00      	nop
 8101e6c:	e000      	b.n	8101e70 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e74:	2b00      	cmp	r3, #0
 8101e76:	d10a      	bne.n	8101e8e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101e78:	4b37      	ldr	r3, [pc, #220]	@ (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101e7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8101e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101e86:	4a34      	ldr	r2, [pc, #208]	@ (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e88:	430b      	orrs	r3, r1
 8101e8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8101e8c:	e003      	b.n	8101e96 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101e9e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8101ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8101ea6:	2300      	movs	r3, #0
 8101ea8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8101eac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8101eb0:	460b      	mov	r3, r1
 8101eb2:	4313      	orrs	r3, r2
 8101eb4:	d056      	beq.n	8101f64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8101eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8101ec0:	d033      	beq.n	8101f2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8101ec2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8101ec6:	d82c      	bhi.n	8101f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101ec8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101ecc:	d02f      	beq.n	8101f2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8101ece:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101ed2:	d826      	bhi.n	8101f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101ed4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101ed8:	d02b      	beq.n	8101f32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8101eda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101ede:	d820      	bhi.n	8101f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101ee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101ee4:	d012      	beq.n	8101f0c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8101ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101eea:	d81a      	bhi.n	8101f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101eec:	2b00      	cmp	r3, #0
 8101eee:	d022      	beq.n	8101f36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8101ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101ef4:	d115      	bne.n	8101f22 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101efa:	3308      	adds	r3, #8
 8101efc:	2101      	movs	r1, #1
 8101efe:	4618      	mov	r0, r3
 8101f00:	f001 fa0e 	bl	8103320 <RCCEx_PLL2_Config>
 8101f04:	4603      	mov	r3, r0
 8101f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8101f0a:	e015      	b.n	8101f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f10:	3328      	adds	r3, #40	@ 0x28
 8101f12:	2101      	movs	r1, #1
 8101f14:	4618      	mov	r0, r3
 8101f16:	f001 fab5 	bl	8103484 <RCCEx_PLL3_Config>
 8101f1a:	4603      	mov	r3, r0
 8101f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8101f20:	e00a      	b.n	8101f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101f22:	2301      	movs	r3, #1
 8101f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101f28:	e006      	b.n	8101f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101f2a:	bf00      	nop
 8101f2c:	e004      	b.n	8101f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101f2e:	bf00      	nop
 8101f30:	e002      	b.n	8101f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101f32:	bf00      	nop
 8101f34:	e000      	b.n	8101f38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101f3c:	2b00      	cmp	r3, #0
 8101f3e:	d10d      	bne.n	8101f5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101f40:	4b05      	ldr	r3, [pc, #20]	@ (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101f44:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8101f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101f4e:	4a02      	ldr	r2, [pc, #8]	@ (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f50:	430b      	orrs	r3, r1
 8101f52:	6513      	str	r3, [r2, #80]	@ 0x50
 8101f54:	e006      	b.n	8101f64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8101f56:	bf00      	nop
 8101f58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101f60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f6c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8101f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8101f74:	2300      	movs	r3, #0
 8101f76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8101f7a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8101f7e:	460b      	mov	r3, r1
 8101f80:	4313      	orrs	r3, r2
 8101f82:	d055      	beq.n	8102030 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8101f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8101f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8101f90:	d033      	beq.n	8101ffa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8101f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8101f96:	d82c      	bhi.n	8101ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101f9c:	d02f      	beq.n	8101ffe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8101f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101fa2:	d826      	bhi.n	8101ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101fa4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8101fa8:	d02b      	beq.n	8102002 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8101faa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8101fae:	d820      	bhi.n	8101ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101fb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101fb4:	d012      	beq.n	8101fdc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8101fb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101fba:	d81a      	bhi.n	8101ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101fbc:	2b00      	cmp	r3, #0
 8101fbe:	d022      	beq.n	8102006 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8101fc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101fc4:	d115      	bne.n	8101ff2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fca:	3308      	adds	r3, #8
 8101fcc:	2101      	movs	r1, #1
 8101fce:	4618      	mov	r0, r3
 8101fd0:	f001 f9a6 	bl	8103320 <RCCEx_PLL2_Config>
 8101fd4:	4603      	mov	r3, r0
 8101fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8101fda:	e015      	b.n	8102008 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fe0:	3328      	adds	r3, #40	@ 0x28
 8101fe2:	2101      	movs	r1, #1
 8101fe4:	4618      	mov	r0, r3
 8101fe6:	f001 fa4d 	bl	8103484 <RCCEx_PLL3_Config>
 8101fea:	4603      	mov	r3, r0
 8101fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8101ff0:	e00a      	b.n	8102008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8101ff2:	2301      	movs	r3, #1
 8101ff4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101ff8:	e006      	b.n	8102008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101ffa:	bf00      	nop
 8101ffc:	e004      	b.n	8102008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101ffe:	bf00      	nop
 8102000:	e002      	b.n	8102008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102002:	bf00      	nop
 8102004:	e000      	b.n	8102008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810200c:	2b00      	cmp	r3, #0
 810200e:	d10b      	bne.n	8102028 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102010:	4ba4      	ldr	r3, [pc, #656]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102014:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8102018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810201c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102020:	4aa0      	ldr	r2, [pc, #640]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102022:	430b      	orrs	r3, r1
 8102024:	6593      	str	r3, [r2, #88]	@ 0x58
 8102026:	e003      	b.n	8102030 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810202c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102038:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810203c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8102040:	2300      	movs	r3, #0
 8102042:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8102046:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810204a:	460b      	mov	r3, r1
 810204c:	4313      	orrs	r3, r2
 810204e:	d037      	beq.n	81020c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8102050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810205a:	d00e      	beq.n	810207a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 810205c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102060:	d816      	bhi.n	8102090 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8102062:	2b00      	cmp	r3, #0
 8102064:	d018      	beq.n	8102098 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8102066:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810206a:	d111      	bne.n	8102090 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810206c:	4b8d      	ldr	r3, [pc, #564]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102070:	4a8c      	ldr	r2, [pc, #560]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8102078:	e00f      	b.n	810209a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810207a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810207e:	3308      	adds	r3, #8
 8102080:	2101      	movs	r1, #1
 8102082:	4618      	mov	r0, r3
 8102084:	f001 f94c 	bl	8103320 <RCCEx_PLL2_Config>
 8102088:	4603      	mov	r3, r0
 810208a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810208e:	e004      	b.n	810209a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102090:	2301      	movs	r3, #1
 8102092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102096:	e000      	b.n	810209a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8102098:	bf00      	nop
    }

    if (ret == HAL_OK)
 810209a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810209e:	2b00      	cmp	r3, #0
 81020a0:	d10a      	bne.n	81020b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81020a2:	4b80      	ldr	r3, [pc, #512]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81020a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81020a6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81020aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81020b0:	4a7c      	ldr	r2, [pc, #496]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81020b2:	430b      	orrs	r3, r1
 81020b4:	6513      	str	r3, [r2, #80]	@ 0x50
 81020b6:	e003      	b.n	81020c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81020bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81020c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81020c8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 81020cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81020d0:	2300      	movs	r3, #0
 81020d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 81020d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 81020da:	460b      	mov	r3, r1
 81020dc:	4313      	orrs	r3, r2
 81020de:	d039      	beq.n	8102154 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81020e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81020e6:	2b03      	cmp	r3, #3
 81020e8:	d81c      	bhi.n	8102124 <HAL_RCCEx_PeriphCLKConfig+0x794>
 81020ea:	a201      	add	r2, pc, #4	@ (adr r2, 81020f0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81020f0:	0810212d 	.word	0x0810212d
 81020f4:	08102101 	.word	0x08102101
 81020f8:	0810210f 	.word	0x0810210f
 81020fc:	0810212d 	.word	0x0810212d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102100:	4b68      	ldr	r3, [pc, #416]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102104:	4a67      	ldr	r2, [pc, #412]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810210a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810210c:	e00f      	b.n	810212e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810210e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102112:	3308      	adds	r3, #8
 8102114:	2102      	movs	r1, #2
 8102116:	4618      	mov	r0, r3
 8102118:	f001 f902 	bl	8103320 <RCCEx_PLL2_Config>
 810211c:	4603      	mov	r3, r0
 810211e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8102122:	e004      	b.n	810212e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102124:	2301      	movs	r3, #1
 8102126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810212a:	e000      	b.n	810212e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 810212c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810212e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102132:	2b00      	cmp	r3, #0
 8102134:	d10a      	bne.n	810214c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8102136:	4b5b      	ldr	r3, [pc, #364]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810213a:	f023 0103 	bic.w	r1, r3, #3
 810213e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102144:	4a57      	ldr	r2, [pc, #348]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102146:	430b      	orrs	r3, r1
 8102148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810214a:	e003      	b.n	8102154 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810214c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102158:	e9d3 2300 	ldrd	r2, r3, [r3]
 810215c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8102160:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8102164:	2300      	movs	r3, #0
 8102166:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810216a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810216e:	460b      	mov	r3, r1
 8102170:	4313      	orrs	r3, r2
 8102172:	f000 809f 	beq.w	81022b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102176:	4b4c      	ldr	r3, [pc, #304]	@ (81022a8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102178:	681b      	ldr	r3, [r3, #0]
 810217a:	4a4b      	ldr	r2, [pc, #300]	@ (81022a8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810217c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8102180:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8102182:	f7fe fe51 	bl	8100e28 <HAL_GetTick>
 8102186:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810218a:	e00b      	b.n	81021a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810218c:	f7fe fe4c 	bl	8100e28 <HAL_GetTick>
 8102190:	4602      	mov	r2, r0
 8102192:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8102196:	1ad3      	subs	r3, r2, r3
 8102198:	2b64      	cmp	r3, #100	@ 0x64
 810219a:	d903      	bls.n	81021a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 810219c:	2303      	movs	r3, #3
 810219e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81021a2:	e005      	b.n	81021b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81021a4:	4b40      	ldr	r3, [pc, #256]	@ (81022a8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81021a6:	681b      	ldr	r3, [r3, #0]
 81021a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81021ac:	2b00      	cmp	r3, #0
 81021ae:	d0ed      	beq.n	810218c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81021b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81021b4:	2b00      	cmp	r3, #0
 81021b6:	d179      	bne.n	81022ac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81021b8:	4b3a      	ldr	r3, [pc, #232]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81021ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81021bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81021c4:	4053      	eors	r3, r2
 81021c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81021ca:	2b00      	cmp	r3, #0
 81021cc:	d015      	beq.n	81021fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81021ce:	4b35      	ldr	r3, [pc, #212]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81021d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81021d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81021d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81021da:	4b32      	ldr	r3, [pc, #200]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81021dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81021de:	4a31      	ldr	r2, [pc, #196]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81021e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81021e4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81021e6:	4b2f      	ldr	r3, [pc, #188]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81021e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81021ea:	4a2e      	ldr	r2, [pc, #184]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81021ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81021f0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81021f2:	4a2c      	ldr	r2, [pc, #176]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81021f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81021f8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81021fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102206:	d118      	bne.n	810223a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102208:	f7fe fe0e 	bl	8100e28 <HAL_GetTick>
 810220c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102210:	e00d      	b.n	810222e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102212:	f7fe fe09 	bl	8100e28 <HAL_GetTick>
 8102216:	4602      	mov	r2, r0
 8102218:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810221c:	1ad2      	subs	r2, r2, r3
 810221e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8102222:	429a      	cmp	r2, r3
 8102224:	d903      	bls.n	810222e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8102226:	2303      	movs	r3, #3
 8102228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 810222c:	e005      	b.n	810223a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810222e:	4b1d      	ldr	r3, [pc, #116]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102232:	f003 0302 	and.w	r3, r3, #2
 8102236:	2b00      	cmp	r3, #0
 8102238:	d0eb      	beq.n	8102212 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810223a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810223e:	2b00      	cmp	r3, #0
 8102240:	d12b      	bne.n	810229a <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810224a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810224e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102252:	d110      	bne.n	8102276 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8102254:	4b13      	ldr	r3, [pc, #76]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102256:	691b      	ldr	r3, [r3, #16]
 8102258:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 810225c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102260:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102264:	091b      	lsrs	r3, r3, #4
 8102266:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810226a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810226e:	4a0d      	ldr	r2, [pc, #52]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102270:	430b      	orrs	r3, r1
 8102272:	6113      	str	r3, [r2, #16]
 8102274:	e005      	b.n	8102282 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8102276:	4b0b      	ldr	r3, [pc, #44]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102278:	691b      	ldr	r3, [r3, #16]
 810227a:	4a0a      	ldr	r2, [pc, #40]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810227c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8102280:	6113      	str	r3, [r2, #16]
 8102282:	4b08      	ldr	r3, [pc, #32]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102284:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8102286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810228a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810228e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102292:	4a04      	ldr	r2, [pc, #16]	@ (81022a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102294:	430b      	orrs	r3, r1
 8102296:	6713      	str	r3, [r2, #112]	@ 0x70
 8102298:	e00c      	b.n	81022b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810229a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810229e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 81022a2:	e007      	b.n	81022b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81022a4:	58024400 	.word	0x58024400
 81022a8:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81022b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81022b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81022bc:	f002 0301 	and.w	r3, r2, #1
 81022c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 81022c4:	2300      	movs	r3, #0
 81022c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 81022ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 81022ce:	460b      	mov	r3, r1
 81022d0:	4313      	orrs	r3, r2
 81022d2:	f000 8089 	beq.w	81023e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81022d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81022dc:	2b28      	cmp	r3, #40	@ 0x28
 81022de:	d86b      	bhi.n	81023b8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 81022e0:	a201      	add	r2, pc, #4	@ (adr r2, 81022e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 81022e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81022e6:	bf00      	nop
 81022e8:	081023c1 	.word	0x081023c1
 81022ec:	081023b9 	.word	0x081023b9
 81022f0:	081023b9 	.word	0x081023b9
 81022f4:	081023b9 	.word	0x081023b9
 81022f8:	081023b9 	.word	0x081023b9
 81022fc:	081023b9 	.word	0x081023b9
 8102300:	081023b9 	.word	0x081023b9
 8102304:	081023b9 	.word	0x081023b9
 8102308:	0810238d 	.word	0x0810238d
 810230c:	081023b9 	.word	0x081023b9
 8102310:	081023b9 	.word	0x081023b9
 8102314:	081023b9 	.word	0x081023b9
 8102318:	081023b9 	.word	0x081023b9
 810231c:	081023b9 	.word	0x081023b9
 8102320:	081023b9 	.word	0x081023b9
 8102324:	081023b9 	.word	0x081023b9
 8102328:	081023a3 	.word	0x081023a3
 810232c:	081023b9 	.word	0x081023b9
 8102330:	081023b9 	.word	0x081023b9
 8102334:	081023b9 	.word	0x081023b9
 8102338:	081023b9 	.word	0x081023b9
 810233c:	081023b9 	.word	0x081023b9
 8102340:	081023b9 	.word	0x081023b9
 8102344:	081023b9 	.word	0x081023b9
 8102348:	081023c1 	.word	0x081023c1
 810234c:	081023b9 	.word	0x081023b9
 8102350:	081023b9 	.word	0x081023b9
 8102354:	081023b9 	.word	0x081023b9
 8102358:	081023b9 	.word	0x081023b9
 810235c:	081023b9 	.word	0x081023b9
 8102360:	081023b9 	.word	0x081023b9
 8102364:	081023b9 	.word	0x081023b9
 8102368:	081023c1 	.word	0x081023c1
 810236c:	081023b9 	.word	0x081023b9
 8102370:	081023b9 	.word	0x081023b9
 8102374:	081023b9 	.word	0x081023b9
 8102378:	081023b9 	.word	0x081023b9
 810237c:	081023b9 	.word	0x081023b9
 8102380:	081023b9 	.word	0x081023b9
 8102384:	081023b9 	.word	0x081023b9
 8102388:	081023c1 	.word	0x081023c1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810238c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102390:	3308      	adds	r3, #8
 8102392:	2101      	movs	r1, #1
 8102394:	4618      	mov	r0, r3
 8102396:	f000 ffc3 	bl	8103320 <RCCEx_PLL2_Config>
 810239a:	4603      	mov	r3, r0
 810239c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81023a0:	e00f      	b.n	81023c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81023a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023a6:	3328      	adds	r3, #40	@ 0x28
 81023a8:	2101      	movs	r1, #1
 81023aa:	4618      	mov	r0, r3
 81023ac:	f001 f86a 	bl	8103484 <RCCEx_PLL3_Config>
 81023b0:	4603      	mov	r3, r0
 81023b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81023b6:	e004      	b.n	81023c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81023b8:	2301      	movs	r3, #1
 81023ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81023be:	e000      	b.n	81023c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81023c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81023c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81023c6:	2b00      	cmp	r3, #0
 81023c8:	d10a      	bne.n	81023e0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81023ca:	4bbf      	ldr	r3, [pc, #764]	@ (81026c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81023cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81023ce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 81023d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81023d8:	4abb      	ldr	r2, [pc, #748]	@ (81026c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81023da:	430b      	orrs	r3, r1
 81023dc:	6553      	str	r3, [r2, #84]	@ 0x54
 81023de:	e003      	b.n	81023e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81023e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81023e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81023f0:	f002 0302 	and.w	r3, r2, #2
 81023f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81023f8:	2300      	movs	r3, #0
 81023fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81023fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8102402:	460b      	mov	r3, r1
 8102404:	4313      	orrs	r3, r2
 8102406:	d041      	beq.n	810248c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8102408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810240c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810240e:	2b05      	cmp	r3, #5
 8102410:	d824      	bhi.n	810245c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8102412:	a201      	add	r2, pc, #4	@ (adr r2, 8102418 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8102414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102418:	08102465 	.word	0x08102465
 810241c:	08102431 	.word	0x08102431
 8102420:	08102447 	.word	0x08102447
 8102424:	08102465 	.word	0x08102465
 8102428:	08102465 	.word	0x08102465
 810242c:	08102465 	.word	0x08102465
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102434:	3308      	adds	r3, #8
 8102436:	2101      	movs	r1, #1
 8102438:	4618      	mov	r0, r3
 810243a:	f000 ff71 	bl	8103320 <RCCEx_PLL2_Config>
 810243e:	4603      	mov	r3, r0
 8102440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102444:	e00f      	b.n	8102466 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810244a:	3328      	adds	r3, #40	@ 0x28
 810244c:	2101      	movs	r1, #1
 810244e:	4618      	mov	r0, r3
 8102450:	f001 f818 	bl	8103484 <RCCEx_PLL3_Config>
 8102454:	4603      	mov	r3, r0
 8102456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810245a:	e004      	b.n	8102466 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810245c:	2301      	movs	r3, #1
 810245e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102462:	e000      	b.n	8102466 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8102464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810246a:	2b00      	cmp	r3, #0
 810246c:	d10a      	bne.n	8102484 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810246e:	4b96      	ldr	r3, [pc, #600]	@ (81026c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102472:	f023 0107 	bic.w	r1, r3, #7
 8102476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810247a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810247c:	4a92      	ldr	r2, [pc, #584]	@ (81026c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810247e:	430b      	orrs	r3, r1
 8102480:	6553      	str	r3, [r2, #84]	@ 0x54
 8102482:	e003      	b.n	810248c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810248c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102494:	f002 0304 	and.w	r3, r2, #4
 8102498:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810249c:	2300      	movs	r3, #0
 810249e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81024a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 81024a6:	460b      	mov	r3, r1
 81024a8:	4313      	orrs	r3, r2
 81024aa:	d044      	beq.n	8102536 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81024ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81024b4:	2b05      	cmp	r3, #5
 81024b6:	d825      	bhi.n	8102504 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81024b8:	a201      	add	r2, pc, #4	@ (adr r2, 81024c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81024be:	bf00      	nop
 81024c0:	0810250d 	.word	0x0810250d
 81024c4:	081024d9 	.word	0x081024d9
 81024c8:	081024ef 	.word	0x081024ef
 81024cc:	0810250d 	.word	0x0810250d
 81024d0:	0810250d 	.word	0x0810250d
 81024d4:	0810250d 	.word	0x0810250d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81024d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024dc:	3308      	adds	r3, #8
 81024de:	2101      	movs	r1, #1
 81024e0:	4618      	mov	r0, r3
 81024e2:	f000 ff1d 	bl	8103320 <RCCEx_PLL2_Config>
 81024e6:	4603      	mov	r3, r0
 81024e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81024ec:	e00f      	b.n	810250e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81024ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024f2:	3328      	adds	r3, #40	@ 0x28
 81024f4:	2101      	movs	r1, #1
 81024f6:	4618      	mov	r0, r3
 81024f8:	f000 ffc4 	bl	8103484 <RCCEx_PLL3_Config>
 81024fc:	4603      	mov	r3, r0
 81024fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102502:	e004      	b.n	810250e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102504:	2301      	movs	r3, #1
 8102506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810250a:	e000      	b.n	810250e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 810250c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810250e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102512:	2b00      	cmp	r3, #0
 8102514:	d10b      	bne.n	810252e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102516:	4b6c      	ldr	r3, [pc, #432]	@ (81026c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810251a:	f023 0107 	bic.w	r1, r3, #7
 810251e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102526:	4a68      	ldr	r2, [pc, #416]	@ (81026c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102528:	430b      	orrs	r3, r1
 810252a:	6593      	str	r3, [r2, #88]	@ 0x58
 810252c:	e003      	b.n	8102536 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810252e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810253e:	f002 0320 	and.w	r3, r2, #32
 8102542:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8102546:	2300      	movs	r3, #0
 8102548:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810254c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8102550:	460b      	mov	r3, r1
 8102552:	4313      	orrs	r3, r2
 8102554:	d055      	beq.n	8102602 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8102556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810255e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102562:	d033      	beq.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8102564:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102568:	d82c      	bhi.n	81025c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810256a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810256e:	d02f      	beq.n	81025d0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8102570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102574:	d826      	bhi.n	81025c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102576:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810257a:	d02b      	beq.n	81025d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 810257c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102580:	d820      	bhi.n	81025c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102582:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102586:	d012      	beq.n	81025ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8102588:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810258c:	d81a      	bhi.n	81025c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810258e:	2b00      	cmp	r3, #0
 8102590:	d022      	beq.n	81025d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8102592:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102596:	d115      	bne.n	81025c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810259c:	3308      	adds	r3, #8
 810259e:	2100      	movs	r1, #0
 81025a0:	4618      	mov	r0, r3
 81025a2:	f000 febd 	bl	8103320 <RCCEx_PLL2_Config>
 81025a6:	4603      	mov	r3, r0
 81025a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81025ac:	e015      	b.n	81025da <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81025ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025b2:	3328      	adds	r3, #40	@ 0x28
 81025b4:	2102      	movs	r1, #2
 81025b6:	4618      	mov	r0, r3
 81025b8:	f000 ff64 	bl	8103484 <RCCEx_PLL3_Config>
 81025bc:	4603      	mov	r3, r0
 81025be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81025c2:	e00a      	b.n	81025da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81025c4:	2301      	movs	r3, #1
 81025c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81025ca:	e006      	b.n	81025da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81025cc:	bf00      	nop
 81025ce:	e004      	b.n	81025da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81025d0:	bf00      	nop
 81025d2:	e002      	b.n	81025da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81025d4:	bf00      	nop
 81025d6:	e000      	b.n	81025da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81025d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81025da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025de:	2b00      	cmp	r3, #0
 81025e0:	d10b      	bne.n	81025fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81025e2:	4b39      	ldr	r3, [pc, #228]	@ (81026c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81025e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81025e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81025ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81025f2:	4a35      	ldr	r2, [pc, #212]	@ (81026c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81025f4:	430b      	orrs	r3, r1
 81025f6:	6553      	str	r3, [r2, #84]	@ 0x54
 81025f8:	e003      	b.n	8102602 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102606:	e9d3 2300 	ldrd	r2, r3, [r3]
 810260a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810260e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8102612:	2300      	movs	r3, #0
 8102614:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8102618:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810261c:	460b      	mov	r3, r1
 810261e:	4313      	orrs	r3, r2
 8102620:	d058      	beq.n	81026d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8102622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102626:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810262a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810262e:	d033      	beq.n	8102698 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8102630:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102634:	d82c      	bhi.n	8102690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810263a:	d02f      	beq.n	810269c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 810263c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102640:	d826      	bhi.n	8102690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102642:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102646:	d02b      	beq.n	81026a0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8102648:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810264c:	d820      	bhi.n	8102690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810264e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102652:	d012      	beq.n	810267a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8102654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102658:	d81a      	bhi.n	8102690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810265a:	2b00      	cmp	r3, #0
 810265c:	d022      	beq.n	81026a4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810265e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8102662:	d115      	bne.n	8102690 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102668:	3308      	adds	r3, #8
 810266a:	2100      	movs	r1, #0
 810266c:	4618      	mov	r0, r3
 810266e:	f000 fe57 	bl	8103320 <RCCEx_PLL2_Config>
 8102672:	4603      	mov	r3, r0
 8102674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102678:	e015      	b.n	81026a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810267a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810267e:	3328      	adds	r3, #40	@ 0x28
 8102680:	2102      	movs	r1, #2
 8102682:	4618      	mov	r0, r3
 8102684:	f000 fefe 	bl	8103484 <RCCEx_PLL3_Config>
 8102688:	4603      	mov	r3, r0
 810268a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810268e:	e00a      	b.n	81026a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102690:	2301      	movs	r3, #1
 8102692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102696:	e006      	b.n	81026a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102698:	bf00      	nop
 810269a:	e004      	b.n	81026a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810269c:	bf00      	nop
 810269e:	e002      	b.n	81026a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81026a0:	bf00      	nop
 81026a2:	e000      	b.n	81026a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81026a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81026a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81026aa:	2b00      	cmp	r3, #0
 81026ac:	d10e      	bne.n	81026cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81026ae:	4b06      	ldr	r3, [pc, #24]	@ (81026c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81026b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81026b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81026b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81026be:	4a02      	ldr	r2, [pc, #8]	@ (81026c8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81026c0:	430b      	orrs	r3, r1
 81026c2:	6593      	str	r3, [r2, #88]	@ 0x58
 81026c4:	e006      	b.n	81026d4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81026c6:	bf00      	nop
 81026c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81026cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81026d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81026d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81026e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81026e4:	2300      	movs	r3, #0
 81026e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81026ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81026ee:	460b      	mov	r3, r1
 81026f0:	4313      	orrs	r3, r2
 81026f2:	d055      	beq.n	81027a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81026f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81026fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102700:	d033      	beq.n	810276a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8102702:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102706:	d82c      	bhi.n	8102762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810270c:	d02f      	beq.n	810276e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810270e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102712:	d826      	bhi.n	8102762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102714:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8102718:	d02b      	beq.n	8102772 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810271a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810271e:	d820      	bhi.n	8102762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102720:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102724:	d012      	beq.n	810274c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8102726:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810272a:	d81a      	bhi.n	8102762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810272c:	2b00      	cmp	r3, #0
 810272e:	d022      	beq.n	8102776 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8102730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102734:	d115      	bne.n	8102762 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810273a:	3308      	adds	r3, #8
 810273c:	2100      	movs	r1, #0
 810273e:	4618      	mov	r0, r3
 8102740:	f000 fdee 	bl	8103320 <RCCEx_PLL2_Config>
 8102744:	4603      	mov	r3, r0
 8102746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810274a:	e015      	b.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810274c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102750:	3328      	adds	r3, #40	@ 0x28
 8102752:	2102      	movs	r1, #2
 8102754:	4618      	mov	r0, r3
 8102756:	f000 fe95 	bl	8103484 <RCCEx_PLL3_Config>
 810275a:	4603      	mov	r3, r0
 810275c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102760:	e00a      	b.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102762:	2301      	movs	r3, #1
 8102764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102768:	e006      	b.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810276a:	bf00      	nop
 810276c:	e004      	b.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810276e:	bf00      	nop
 8102770:	e002      	b.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102772:	bf00      	nop
 8102774:	e000      	b.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810277c:	2b00      	cmp	r3, #0
 810277e:	d10b      	bne.n	8102798 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102780:	4ba1      	ldr	r3, [pc, #644]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102784:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8102788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810278c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102790:	4a9d      	ldr	r2, [pc, #628]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102792:	430b      	orrs	r3, r1
 8102794:	6593      	str	r3, [r2, #88]	@ 0x58
 8102796:	e003      	b.n	81027a0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810279c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81027a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027a8:	f002 0308 	and.w	r3, r2, #8
 81027ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81027b0:	2300      	movs	r3, #0
 81027b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81027b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81027ba:	460b      	mov	r3, r1
 81027bc:	4313      	orrs	r3, r2
 81027be:	d01e      	beq.n	81027fe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81027c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81027c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81027cc:	d10c      	bne.n	81027e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81027ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027d2:	3328      	adds	r3, #40	@ 0x28
 81027d4:	2102      	movs	r1, #2
 81027d6:	4618      	mov	r0, r3
 81027d8:	f000 fe54 	bl	8103484 <RCCEx_PLL3_Config>
 81027dc:	4603      	mov	r3, r0
 81027de:	2b00      	cmp	r3, #0
 81027e0:	d002      	beq.n	81027e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81027e2:	2301      	movs	r3, #1
 81027e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81027e8:	4b87      	ldr	r3, [pc, #540]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81027ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81027f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81027f8:	4a83      	ldr	r2, [pc, #524]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81027fa:	430b      	orrs	r3, r1
 81027fc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81027fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102806:	f002 0310 	and.w	r3, r2, #16
 810280a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810280e:	2300      	movs	r3, #0
 8102810:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8102814:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8102818:	460b      	mov	r3, r1
 810281a:	4313      	orrs	r3, r2
 810281c:	d01e      	beq.n	810285c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810281e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810282a:	d10c      	bne.n	8102846 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810282c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102830:	3328      	adds	r3, #40	@ 0x28
 8102832:	2102      	movs	r1, #2
 8102834:	4618      	mov	r0, r3
 8102836:	f000 fe25 	bl	8103484 <RCCEx_PLL3_Config>
 810283a:	4603      	mov	r3, r0
 810283c:	2b00      	cmp	r3, #0
 810283e:	d002      	beq.n	8102846 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8102840:	2301      	movs	r3, #1
 8102842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102846:	4b70      	ldr	r3, [pc, #448]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810284a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810284e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102852:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102856:	4a6c      	ldr	r2, [pc, #432]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102858:	430b      	orrs	r3, r1
 810285a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810285c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102864:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8102868:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810286c:	2300      	movs	r3, #0
 810286e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8102872:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8102876:	460b      	mov	r3, r1
 8102878:	4313      	orrs	r3, r2
 810287a:	d03e      	beq.n	81028fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810287c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102888:	d022      	beq.n	81028d0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810288a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810288e:	d81b      	bhi.n	81028c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8102890:	2b00      	cmp	r3, #0
 8102892:	d003      	beq.n	810289c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8102894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102898:	d00b      	beq.n	81028b2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810289a:	e015      	b.n	81028c8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810289c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028a0:	3308      	adds	r3, #8
 81028a2:	2100      	movs	r1, #0
 81028a4:	4618      	mov	r0, r3
 81028a6:	f000 fd3b 	bl	8103320 <RCCEx_PLL2_Config>
 81028aa:	4603      	mov	r3, r0
 81028ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81028b0:	e00f      	b.n	81028d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81028b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028b6:	3328      	adds	r3, #40	@ 0x28
 81028b8:	2102      	movs	r1, #2
 81028ba:	4618      	mov	r0, r3
 81028bc:	f000 fde2 	bl	8103484 <RCCEx_PLL3_Config>
 81028c0:	4603      	mov	r3, r0
 81028c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81028c6:	e004      	b.n	81028d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81028c8:	2301      	movs	r3, #1
 81028ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81028ce:	e000      	b.n	81028d2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81028d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81028d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028d6:	2b00      	cmp	r3, #0
 81028d8:	d10b      	bne.n	81028f2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81028da:	4b4b      	ldr	r3, [pc, #300]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81028dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81028de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81028e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81028ea:	4a47      	ldr	r2, [pc, #284]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81028ec:	430b      	orrs	r3, r1
 81028ee:	6593      	str	r3, [r2, #88]	@ 0x58
 81028f0:	e003      	b.n	81028fa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81028fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102902:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8102906:	67bb      	str	r3, [r7, #120]	@ 0x78
 8102908:	2300      	movs	r3, #0
 810290a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810290c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8102910:	460b      	mov	r3, r1
 8102912:	4313      	orrs	r3, r2
 8102914:	d03b      	beq.n	810298e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8102916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810291e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102922:	d01f      	beq.n	8102964 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8102924:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102928:	d818      	bhi.n	810295c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810292a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810292e:	d003      	beq.n	8102938 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8102930:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102934:	d007      	beq.n	8102946 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8102936:	e011      	b.n	810295c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102938:	4b33      	ldr	r3, [pc, #204]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810293c:	4a32      	ldr	r2, [pc, #200]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810293e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8102944:	e00f      	b.n	8102966 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810294a:	3328      	adds	r3, #40	@ 0x28
 810294c:	2101      	movs	r1, #1
 810294e:	4618      	mov	r0, r3
 8102950:	f000 fd98 	bl	8103484 <RCCEx_PLL3_Config>
 8102954:	4603      	mov	r3, r0
 8102956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810295a:	e004      	b.n	8102966 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810295c:	2301      	movs	r3, #1
 810295e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102962:	e000      	b.n	8102966 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8102964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810296a:	2b00      	cmp	r3, #0
 810296c:	d10b      	bne.n	8102986 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810296e:	4b26      	ldr	r3, [pc, #152]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102972:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810297e:	4a22      	ldr	r2, [pc, #136]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102980:	430b      	orrs	r3, r1
 8102982:	6553      	str	r3, [r2, #84]	@ 0x54
 8102984:	e003      	b.n	810298e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810298a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810298e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102996:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810299a:	673b      	str	r3, [r7, #112]	@ 0x70
 810299c:	2300      	movs	r3, #0
 810299e:	677b      	str	r3, [r7, #116]	@ 0x74
 81029a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81029a4:	460b      	mov	r3, r1
 81029a6:	4313      	orrs	r3, r2
 81029a8:	d034      	beq.n	8102a14 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81029aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81029b0:	2b00      	cmp	r3, #0
 81029b2:	d003      	beq.n	81029bc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81029b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81029b8:	d007      	beq.n	81029ca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81029ba:	e011      	b.n	81029e0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81029bc:	4b12      	ldr	r3, [pc, #72]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81029c0:	4a11      	ldr	r2, [pc, #68]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81029c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81029c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81029c8:	e00e      	b.n	81029e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81029ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029ce:	3308      	adds	r3, #8
 81029d0:	2102      	movs	r1, #2
 81029d2:	4618      	mov	r0, r3
 81029d4:	f000 fca4 	bl	8103320 <RCCEx_PLL2_Config>
 81029d8:	4603      	mov	r3, r0
 81029da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81029de:	e003      	b.n	81029e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81029e0:	2301      	movs	r3, #1
 81029e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81029e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81029e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81029ec:	2b00      	cmp	r3, #0
 81029ee:	d10d      	bne.n	8102a0c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81029f0:	4b05      	ldr	r3, [pc, #20]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81029f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81029f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81029f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81029fe:	4a02      	ldr	r2, [pc, #8]	@ (8102a08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102a00:	430b      	orrs	r3, r1
 8102a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102a04:	e006      	b.n	8102a14 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8102a06:	bf00      	nop
 8102a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a1c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8102a20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8102a22:	2300      	movs	r3, #0
 8102a24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8102a26:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8102a2a:	460b      	mov	r3, r1
 8102a2c:	4313      	orrs	r3, r2
 8102a2e:	d00c      	beq.n	8102a4a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a34:	3328      	adds	r3, #40	@ 0x28
 8102a36:	2102      	movs	r1, #2
 8102a38:	4618      	mov	r0, r3
 8102a3a:	f000 fd23 	bl	8103484 <RCCEx_PLL3_Config>
 8102a3e:	4603      	mov	r3, r0
 8102a40:	2b00      	cmp	r3, #0
 8102a42:	d002      	beq.n	8102a4a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8102a44:	2301      	movs	r3, #1
 8102a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a52:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8102a56:	663b      	str	r3, [r7, #96]	@ 0x60
 8102a58:	2300      	movs	r3, #0
 8102a5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8102a5c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8102a60:	460b      	mov	r3, r1
 8102a62:	4313      	orrs	r3, r2
 8102a64:	d038      	beq.n	8102ad8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8102a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102a6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102a72:	d018      	beq.n	8102aa6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8102a74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102a78:	d811      	bhi.n	8102a9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8102a7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102a7e:	d014      	beq.n	8102aaa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8102a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102a84:	d80b      	bhi.n	8102a9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8102a86:	2b00      	cmp	r3, #0
 8102a88:	d011      	beq.n	8102aae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8102a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102a8e:	d106      	bne.n	8102a9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102a90:	4bc3      	ldr	r3, [pc, #780]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a94:	4ac2      	ldr	r2, [pc, #776]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8102a9c:	e008      	b.n	8102ab0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102a9e:	2301      	movs	r3, #1
 8102aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102aa4:	e004      	b.n	8102ab0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102aa6:	bf00      	nop
 8102aa8:	e002      	b.n	8102ab0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102aaa:	bf00      	nop
 8102aac:	e000      	b.n	8102ab0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ab4:	2b00      	cmp	r3, #0
 8102ab6:	d10b      	bne.n	8102ad0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102ab8:	4bb9      	ldr	r3, [pc, #740]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102abc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102ac8:	4ab5      	ldr	r2, [pc, #724]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102aca:	430b      	orrs	r3, r1
 8102acc:	6553      	str	r3, [r2, #84]	@ 0x54
 8102ace:	e003      	b.n	8102ad8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ad4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ae0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8102ae4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8102ae6:	2300      	movs	r3, #0
 8102ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8102aea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8102aee:	460b      	mov	r3, r1
 8102af0:	4313      	orrs	r3, r2
 8102af2:	d009      	beq.n	8102b08 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8102af4:	4baa      	ldr	r3, [pc, #680]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102af8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8102afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8102b02:	4aa7      	ldr	r2, [pc, #668]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102b04:	430b      	orrs	r3, r1
 8102b06:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b10:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8102b14:	653b      	str	r3, [r7, #80]	@ 0x50
 8102b16:	2300      	movs	r3, #0
 8102b18:	657b      	str	r3, [r7, #84]	@ 0x54
 8102b1a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8102b1e:	460b      	mov	r3, r1
 8102b20:	4313      	orrs	r3, r2
 8102b22:	d00a      	beq.n	8102b3a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102b24:	4b9e      	ldr	r3, [pc, #632]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102b26:	691b      	ldr	r3, [r3, #16]
 8102b28:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8102b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8102b34:	4a9a      	ldr	r2, [pc, #616]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102b36:	430b      	orrs	r3, r1
 8102b38:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b42:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8102b46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8102b48:	2300      	movs	r3, #0
 8102b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8102b4c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8102b50:	460b      	mov	r3, r1
 8102b52:	4313      	orrs	r3, r2
 8102b54:	d009      	beq.n	8102b6a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102b56:	4b92      	ldr	r3, [pc, #584]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102b5a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8102b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102b64:	4a8e      	ldr	r2, [pc, #568]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102b66:	430b      	orrs	r3, r1
 8102b68:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b72:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8102b76:	643b      	str	r3, [r7, #64]	@ 0x40
 8102b78:	2300      	movs	r3, #0
 8102b7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8102b7c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8102b80:	460b      	mov	r3, r1
 8102b82:	4313      	orrs	r3, r2
 8102b84:	d00e      	beq.n	8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102b86:	4b86      	ldr	r3, [pc, #536]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102b88:	691b      	ldr	r3, [r3, #16]
 8102b8a:	4a85      	ldr	r2, [pc, #532]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102b8c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8102b90:	6113      	str	r3, [r2, #16]
 8102b92:	4b83      	ldr	r3, [pc, #524]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102b94:	6919      	ldr	r1, [r3, #16]
 8102b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102b9e:	4a80      	ldr	r2, [pc, #512]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102ba0:	430b      	orrs	r3, r1
 8102ba2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102bac:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8102bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8102bb2:	2300      	movs	r3, #0
 8102bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102bb6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8102bba:	460b      	mov	r3, r1
 8102bbc:	4313      	orrs	r3, r2
 8102bbe:	d009      	beq.n	8102bd4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102bc0:	4b77      	ldr	r3, [pc, #476]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102bc4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8102bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102bce:	4a74      	ldr	r2, [pc, #464]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102bd0:	430b      	orrs	r3, r1
 8102bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102bdc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8102be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8102be2:	2300      	movs	r3, #0
 8102be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8102be6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8102bea:	460b      	mov	r3, r1
 8102bec:	4313      	orrs	r3, r2
 8102bee:	d00a      	beq.n	8102c06 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8102bf0:	4b6b      	ldr	r3, [pc, #428]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102bf4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8102bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8102c00:	4a67      	ldr	r2, [pc, #412]	@ (8102da0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c02:	430b      	orrs	r3, r1
 8102c04:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8102c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c0e:	2100      	movs	r1, #0
 8102c10:	62b9      	str	r1, [r7, #40]	@ 0x28
 8102c12:	f003 0301 	and.w	r3, r3, #1
 8102c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102c18:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8102c1c:	460b      	mov	r3, r1
 8102c1e:	4313      	orrs	r3, r2
 8102c20:	d011      	beq.n	8102c46 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c26:	3308      	adds	r3, #8
 8102c28:	2100      	movs	r1, #0
 8102c2a:	4618      	mov	r0, r3
 8102c2c:	f000 fb78 	bl	8103320 <RCCEx_PLL2_Config>
 8102c30:	4603      	mov	r3, r0
 8102c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c3a:	2b00      	cmp	r3, #0
 8102c3c:	d003      	beq.n	8102c46 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8102c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c4e:	2100      	movs	r1, #0
 8102c50:	6239      	str	r1, [r7, #32]
 8102c52:	f003 0302 	and.w	r3, r3, #2
 8102c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8102c58:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8102c5c:	460b      	mov	r3, r1
 8102c5e:	4313      	orrs	r3, r2
 8102c60:	d011      	beq.n	8102c86 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c66:	3308      	adds	r3, #8
 8102c68:	2101      	movs	r1, #1
 8102c6a:	4618      	mov	r0, r3
 8102c6c:	f000 fb58 	bl	8103320 <RCCEx_PLL2_Config>
 8102c70:	4603      	mov	r3, r0
 8102c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c7a:	2b00      	cmp	r3, #0
 8102c7c:	d003      	beq.n	8102c86 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8102c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c8e:	2100      	movs	r1, #0
 8102c90:	61b9      	str	r1, [r7, #24]
 8102c92:	f003 0304 	and.w	r3, r3, #4
 8102c96:	61fb      	str	r3, [r7, #28]
 8102c98:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8102c9c:	460b      	mov	r3, r1
 8102c9e:	4313      	orrs	r3, r2
 8102ca0:	d011      	beq.n	8102cc6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ca6:	3308      	adds	r3, #8
 8102ca8:	2102      	movs	r1, #2
 8102caa:	4618      	mov	r0, r3
 8102cac:	f000 fb38 	bl	8103320 <RCCEx_PLL2_Config>
 8102cb0:	4603      	mov	r3, r0
 8102cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102cba:	2b00      	cmp	r3, #0
 8102cbc:	d003      	beq.n	8102cc6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8102cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cce:	2100      	movs	r1, #0
 8102cd0:	6139      	str	r1, [r7, #16]
 8102cd2:	f003 0308 	and.w	r3, r3, #8
 8102cd6:	617b      	str	r3, [r7, #20]
 8102cd8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8102cdc:	460b      	mov	r3, r1
 8102cde:	4313      	orrs	r3, r2
 8102ce0:	d011      	beq.n	8102d06 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ce6:	3328      	adds	r3, #40	@ 0x28
 8102ce8:	2100      	movs	r1, #0
 8102cea:	4618      	mov	r0, r3
 8102cec:	f000 fbca 	bl	8103484 <RCCEx_PLL3_Config>
 8102cf0:	4603      	mov	r3, r0
 8102cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8102cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102cfa:	2b00      	cmp	r3, #0
 8102cfc:	d003      	beq.n	8102d06 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8102d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d0e:	2100      	movs	r1, #0
 8102d10:	60b9      	str	r1, [r7, #8]
 8102d12:	f003 0310 	and.w	r3, r3, #16
 8102d16:	60fb      	str	r3, [r7, #12]
 8102d18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8102d1c:	460b      	mov	r3, r1
 8102d1e:	4313      	orrs	r3, r2
 8102d20:	d011      	beq.n	8102d46 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d26:	3328      	adds	r3, #40	@ 0x28
 8102d28:	2101      	movs	r1, #1
 8102d2a:	4618      	mov	r0, r3
 8102d2c:	f000 fbaa 	bl	8103484 <RCCEx_PLL3_Config>
 8102d30:	4603      	mov	r3, r0
 8102d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d3a:	2b00      	cmp	r3, #0
 8102d3c:	d003      	beq.n	8102d46 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8102d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d4e:	2100      	movs	r1, #0
 8102d50:	6039      	str	r1, [r7, #0]
 8102d52:	f003 0320 	and.w	r3, r3, #32
 8102d56:	607b      	str	r3, [r7, #4]
 8102d58:	e9d7 1200 	ldrd	r1, r2, [r7]
 8102d5c:	460b      	mov	r3, r1
 8102d5e:	4313      	orrs	r3, r2
 8102d60:	d011      	beq.n	8102d86 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d66:	3328      	adds	r3, #40	@ 0x28
 8102d68:	2102      	movs	r1, #2
 8102d6a:	4618      	mov	r0, r3
 8102d6c:	f000 fb8a 	bl	8103484 <RCCEx_PLL3_Config>
 8102d70:	4603      	mov	r3, r0
 8102d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d7a:	2b00      	cmp	r3, #0
 8102d7c:	d003      	beq.n	8102d86 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8102d86:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8102d8a:	2b00      	cmp	r3, #0
 8102d8c:	d101      	bne.n	8102d92 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8102d8e:	2300      	movs	r3, #0
 8102d90:	e000      	b.n	8102d94 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8102d92:	2301      	movs	r3, #1
}
 8102d94:	4618      	mov	r0, r3
 8102d96:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8102d9a:	46bd      	mov	sp, r7
 8102d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8102da0:	58024400 	.word	0x58024400

08102da4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8102da4:	b580      	push	{r7, lr}
 8102da6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8102da8:	f7fe fd94 	bl	81018d4 <HAL_RCC_GetHCLKFreq>
 8102dac:	4602      	mov	r2, r0
 8102dae:	4b06      	ldr	r3, [pc, #24]	@ (8102dc8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8102db0:	6a1b      	ldr	r3, [r3, #32]
 8102db2:	091b      	lsrs	r3, r3, #4
 8102db4:	f003 0307 	and.w	r3, r3, #7
 8102db8:	4904      	ldr	r1, [pc, #16]	@ (8102dcc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8102dba:	5ccb      	ldrb	r3, [r1, r3]
 8102dbc:	f003 031f 	and.w	r3, r3, #31
 8102dc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8102dc4:	4618      	mov	r0, r3
 8102dc6:	bd80      	pop	{r7, pc}
 8102dc8:	58024400 	.word	0x58024400
 8102dcc:	08108414 	.word	0x08108414

08102dd0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8102dd0:	b480      	push	{r7}
 8102dd2:	b089      	sub	sp, #36	@ 0x24
 8102dd4:	af00      	add	r7, sp, #0
 8102dd6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102dd8:	4ba1      	ldr	r3, [pc, #644]	@ (8103060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102ddc:	f003 0303 	and.w	r3, r3, #3
 8102de0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8102de2:	4b9f      	ldr	r3, [pc, #636]	@ (8103060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102de6:	0b1b      	lsrs	r3, r3, #12
 8102de8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102dec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8102dee:	4b9c      	ldr	r3, [pc, #624]	@ (8103060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102df2:	091b      	lsrs	r3, r3, #4
 8102df4:	f003 0301 	and.w	r3, r3, #1
 8102df8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8102dfa:	4b99      	ldr	r3, [pc, #612]	@ (8103060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102dfe:	08db      	lsrs	r3, r3, #3
 8102e00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102e04:	693a      	ldr	r2, [r7, #16]
 8102e06:	fb02 f303 	mul.w	r3, r2, r3
 8102e0a:	ee07 3a90 	vmov	s15, r3
 8102e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8102e16:	697b      	ldr	r3, [r7, #20]
 8102e18:	2b00      	cmp	r3, #0
 8102e1a:	f000 8111 	beq.w	8103040 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8102e1e:	69bb      	ldr	r3, [r7, #24]
 8102e20:	2b02      	cmp	r3, #2
 8102e22:	f000 8083 	beq.w	8102f2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8102e26:	69bb      	ldr	r3, [r7, #24]
 8102e28:	2b02      	cmp	r3, #2
 8102e2a:	f200 80a1 	bhi.w	8102f70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8102e2e:	69bb      	ldr	r3, [r7, #24]
 8102e30:	2b00      	cmp	r3, #0
 8102e32:	d003      	beq.n	8102e3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8102e34:	69bb      	ldr	r3, [r7, #24]
 8102e36:	2b01      	cmp	r3, #1
 8102e38:	d056      	beq.n	8102ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8102e3a:	e099      	b.n	8102f70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102e3c:	4b88      	ldr	r3, [pc, #544]	@ (8103060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102e3e:	681b      	ldr	r3, [r3, #0]
 8102e40:	f003 0320 	and.w	r3, r3, #32
 8102e44:	2b00      	cmp	r3, #0
 8102e46:	d02d      	beq.n	8102ea4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102e48:	4b85      	ldr	r3, [pc, #532]	@ (8103060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102e4a:	681b      	ldr	r3, [r3, #0]
 8102e4c:	08db      	lsrs	r3, r3, #3
 8102e4e:	f003 0303 	and.w	r3, r3, #3
 8102e52:	4a84      	ldr	r2, [pc, #528]	@ (8103064 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8102e54:	fa22 f303 	lsr.w	r3, r2, r3
 8102e58:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102e5a:	68bb      	ldr	r3, [r7, #8]
 8102e5c:	ee07 3a90 	vmov	s15, r3
 8102e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e64:	697b      	ldr	r3, [r7, #20]
 8102e66:	ee07 3a90 	vmov	s15, r3
 8102e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e72:	4b7b      	ldr	r3, [pc, #492]	@ (8103060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e7a:	ee07 3a90 	vmov	s15, r3
 8102e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8102e86:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8103068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8102ea2:	e087      	b.n	8102fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102ea4:	697b      	ldr	r3, [r7, #20]
 8102ea6:	ee07 3a90 	vmov	s15, r3
 8102eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102eae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810306c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8102eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102eb6:	4b6a      	ldr	r3, [pc, #424]	@ (8103060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102ebe:	ee07 3a90 	vmov	s15, r3
 8102ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8102eca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8103068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102ee6:	e065      	b.n	8102fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102ee8:	697b      	ldr	r3, [r7, #20]
 8102eea:	ee07 3a90 	vmov	s15, r3
 8102eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ef2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8103070 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8102ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102efa:	4b59      	ldr	r3, [pc, #356]	@ (8103060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102f02:	ee07 3a90 	vmov	s15, r3
 8102f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8102f0e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8103068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102f2a:	e043      	b.n	8102fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102f2c:	697b      	ldr	r3, [r7, #20]
 8102f2e:	ee07 3a90 	vmov	s15, r3
 8102f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f36:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8103074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8102f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102f3e:	4b48      	ldr	r3, [pc, #288]	@ (8103060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102f46:	ee07 3a90 	vmov	s15, r3
 8102f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102f52:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8103068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102f5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102f6e:	e021      	b.n	8102fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102f70:	697b      	ldr	r3, [r7, #20]
 8102f72:	ee07 3a90 	vmov	s15, r3
 8102f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f7a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8103070 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8102f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102f82:	4b37      	ldr	r3, [pc, #220]	@ (8103060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102f8a:	ee07 3a90 	vmov	s15, r3
 8102f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8102f96:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8103068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102fa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102fb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8102fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8103060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102fb8:	0a5b      	lsrs	r3, r3, #9
 8102fba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102fbe:	ee07 3a90 	vmov	s15, r3
 8102fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102fc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102fca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102fce:	edd7 6a07 	vldr	s13, [r7, #28]
 8102fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102fda:	ee17 2a90 	vmov	r2, s15
 8102fde:	687b      	ldr	r3, [r7, #4]
 8102fe0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8102fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8103060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102fe6:	0c1b      	lsrs	r3, r3, #16
 8102fe8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102fec:	ee07 3a90 	vmov	s15, r3
 8102ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ff4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102ff8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8103000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103008:	ee17 2a90 	vmov	r2, s15
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8103010:	4b13      	ldr	r3, [pc, #76]	@ (8103060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103014:	0e1b      	lsrs	r3, r3, #24
 8103016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810301a:	ee07 3a90 	vmov	s15, r3
 810301e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103022:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103026:	ee37 7a87 	vadd.f32	s14, s15, s14
 810302a:	edd7 6a07 	vldr	s13, [r7, #28]
 810302e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103036:	ee17 2a90 	vmov	r2, s15
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810303e:	e008      	b.n	8103052 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	2200      	movs	r2, #0
 8103044:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103046:	687b      	ldr	r3, [r7, #4]
 8103048:	2200      	movs	r2, #0
 810304a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810304c:	687b      	ldr	r3, [r7, #4]
 810304e:	2200      	movs	r2, #0
 8103050:	609a      	str	r2, [r3, #8]
}
 8103052:	bf00      	nop
 8103054:	3724      	adds	r7, #36	@ 0x24
 8103056:	46bd      	mov	sp, r7
 8103058:	f85d 7b04 	ldr.w	r7, [sp], #4
 810305c:	4770      	bx	lr
 810305e:	bf00      	nop
 8103060:	58024400 	.word	0x58024400
 8103064:	03d09000 	.word	0x03d09000
 8103068:	46000000 	.word	0x46000000
 810306c:	4c742400 	.word	0x4c742400
 8103070:	4a742400 	.word	0x4a742400
 8103074:	4bbebc20 	.word	0x4bbebc20

08103078 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8103078:	b480      	push	{r7}
 810307a:	b089      	sub	sp, #36	@ 0x24
 810307c:	af00      	add	r7, sp, #0
 810307e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103080:	4ba1      	ldr	r3, [pc, #644]	@ (8103308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103084:	f003 0303 	and.w	r3, r3, #3
 8103088:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810308a:	4b9f      	ldr	r3, [pc, #636]	@ (8103308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810308c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810308e:	0d1b      	lsrs	r3, r3, #20
 8103090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103094:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8103096:	4b9c      	ldr	r3, [pc, #624]	@ (8103308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810309a:	0a1b      	lsrs	r3, r3, #8
 810309c:	f003 0301 	and.w	r3, r3, #1
 81030a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81030a2:	4b99      	ldr	r3, [pc, #612]	@ (8103308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81030a6:	08db      	lsrs	r3, r3, #3
 81030a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81030ac:	693a      	ldr	r2, [r7, #16]
 81030ae:	fb02 f303 	mul.w	r3, r2, r3
 81030b2:	ee07 3a90 	vmov	s15, r3
 81030b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81030be:	697b      	ldr	r3, [r7, #20]
 81030c0:	2b00      	cmp	r3, #0
 81030c2:	f000 8111 	beq.w	81032e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81030c6:	69bb      	ldr	r3, [r7, #24]
 81030c8:	2b02      	cmp	r3, #2
 81030ca:	f000 8083 	beq.w	81031d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81030ce:	69bb      	ldr	r3, [r7, #24]
 81030d0:	2b02      	cmp	r3, #2
 81030d2:	f200 80a1 	bhi.w	8103218 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81030d6:	69bb      	ldr	r3, [r7, #24]
 81030d8:	2b00      	cmp	r3, #0
 81030da:	d003      	beq.n	81030e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81030dc:	69bb      	ldr	r3, [r7, #24]
 81030de:	2b01      	cmp	r3, #1
 81030e0:	d056      	beq.n	8103190 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81030e2:	e099      	b.n	8103218 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81030e4:	4b88      	ldr	r3, [pc, #544]	@ (8103308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81030e6:	681b      	ldr	r3, [r3, #0]
 81030e8:	f003 0320 	and.w	r3, r3, #32
 81030ec:	2b00      	cmp	r3, #0
 81030ee:	d02d      	beq.n	810314c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81030f0:	4b85      	ldr	r3, [pc, #532]	@ (8103308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81030f2:	681b      	ldr	r3, [r3, #0]
 81030f4:	08db      	lsrs	r3, r3, #3
 81030f6:	f003 0303 	and.w	r3, r3, #3
 81030fa:	4a84      	ldr	r2, [pc, #528]	@ (810330c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81030fc:	fa22 f303 	lsr.w	r3, r2, r3
 8103100:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103102:	68bb      	ldr	r3, [r7, #8]
 8103104:	ee07 3a90 	vmov	s15, r3
 8103108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810310c:	697b      	ldr	r3, [r7, #20]
 810310e:	ee07 3a90 	vmov	s15, r3
 8103112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810311a:	4b7b      	ldr	r3, [pc, #492]	@ (8103308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810311e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103122:	ee07 3a90 	vmov	s15, r3
 8103126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810312a:	ed97 6a03 	vldr	s12, [r7, #12]
 810312e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8103310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810313a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810313e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103146:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810314a:	e087      	b.n	810325c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810314c:	697b      	ldr	r3, [r7, #20]
 810314e:	ee07 3a90 	vmov	s15, r3
 8103152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103156:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8103314 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810315a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810315e:	4b6a      	ldr	r3, [pc, #424]	@ (8103308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103166:	ee07 3a90 	vmov	s15, r3
 810316a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810316e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103172:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8103310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810317a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810317e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103186:	ee67 7a27 	vmul.f32	s15, s14, s15
 810318a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810318e:	e065      	b.n	810325c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103190:	697b      	ldr	r3, [r7, #20]
 8103192:	ee07 3a90 	vmov	s15, r3
 8103196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810319a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8103318 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810319e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81031a2:	4b59      	ldr	r3, [pc, #356]	@ (8103308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81031a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031aa:	ee07 3a90 	vmov	s15, r3
 81031ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81031b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8103310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81031ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81031c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81031c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81031ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81031d2:	e043      	b.n	810325c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81031d4:	697b      	ldr	r3, [r7, #20]
 81031d6:	ee07 3a90 	vmov	s15, r3
 81031da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810331c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81031e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81031e6:	4b48      	ldr	r3, [pc, #288]	@ (8103308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031ee:	ee07 3a90 	vmov	s15, r3
 81031f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81031fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8103310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81031fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810320a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103216:	e021      	b.n	810325c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103218:	697b      	ldr	r3, [r7, #20]
 810321a:	ee07 3a90 	vmov	s15, r3
 810321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103222:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8103318 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810322a:	4b37      	ldr	r3, [pc, #220]	@ (8103308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103232:	ee07 3a90 	vmov	s15, r3
 8103236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810323a:	ed97 6a03 	vldr	s12, [r7, #12]
 810323e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8103310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810324a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810324e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810325a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 810325c:	4b2a      	ldr	r3, [pc, #168]	@ (8103308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103260:	0a5b      	lsrs	r3, r3, #9
 8103262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103266:	ee07 3a90 	vmov	s15, r3
 810326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810326e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103272:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103276:	edd7 6a07 	vldr	s13, [r7, #28]
 810327a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810327e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103282:	ee17 2a90 	vmov	r2, s15
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810328a:	4b1f      	ldr	r3, [pc, #124]	@ (8103308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810328e:	0c1b      	lsrs	r3, r3, #16
 8103290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103294:	ee07 3a90 	vmov	s15, r3
 8103298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810329c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81032a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81032a4:	edd7 6a07 	vldr	s13, [r7, #28]
 81032a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81032ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81032b0:	ee17 2a90 	vmov	r2, s15
 81032b4:	687b      	ldr	r3, [r7, #4]
 81032b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81032b8:	4b13      	ldr	r3, [pc, #76]	@ (8103308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81032bc:	0e1b      	lsrs	r3, r3, #24
 81032be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81032c2:	ee07 3a90 	vmov	s15, r3
 81032c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81032ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81032ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 81032d2:	edd7 6a07 	vldr	s13, [r7, #28]
 81032d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81032da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81032de:	ee17 2a90 	vmov	r2, s15
 81032e2:	687b      	ldr	r3, [r7, #4]
 81032e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81032e6:	e008      	b.n	81032fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81032e8:	687b      	ldr	r3, [r7, #4]
 81032ea:	2200      	movs	r2, #0
 81032ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81032ee:	687b      	ldr	r3, [r7, #4]
 81032f0:	2200      	movs	r2, #0
 81032f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	2200      	movs	r2, #0
 81032f8:	609a      	str	r2, [r3, #8]
}
 81032fa:	bf00      	nop
 81032fc:	3724      	adds	r7, #36	@ 0x24
 81032fe:	46bd      	mov	sp, r7
 8103300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103304:	4770      	bx	lr
 8103306:	bf00      	nop
 8103308:	58024400 	.word	0x58024400
 810330c:	03d09000 	.word	0x03d09000
 8103310:	46000000 	.word	0x46000000
 8103314:	4c742400 	.word	0x4c742400
 8103318:	4a742400 	.word	0x4a742400
 810331c:	4bbebc20 	.word	0x4bbebc20

08103320 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103320:	b580      	push	{r7, lr}
 8103322:	b084      	sub	sp, #16
 8103324:	af00      	add	r7, sp, #0
 8103326:	6078      	str	r0, [r7, #4]
 8103328:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810332a:	2300      	movs	r3, #0
 810332c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810332e:	4b54      	ldr	r3, [pc, #336]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 8103330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103332:	f003 0303 	and.w	r3, r3, #3
 8103336:	2b03      	cmp	r3, #3
 8103338:	d101      	bne.n	810333e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810333a:	2301      	movs	r3, #1
 810333c:	e09b      	b.n	8103476 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810333e:	4b50      	ldr	r3, [pc, #320]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 8103340:	681b      	ldr	r3, [r3, #0]
 8103342:	4a4f      	ldr	r2, [pc, #316]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 8103344:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8103348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810334a:	f7fd fd6d 	bl	8100e28 <HAL_GetTick>
 810334e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103350:	e008      	b.n	8103364 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103352:	f7fd fd69 	bl	8100e28 <HAL_GetTick>
 8103356:	4602      	mov	r2, r0
 8103358:	68bb      	ldr	r3, [r7, #8]
 810335a:	1ad3      	subs	r3, r2, r3
 810335c:	2b02      	cmp	r3, #2
 810335e:	d901      	bls.n	8103364 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103360:	2303      	movs	r3, #3
 8103362:	e088      	b.n	8103476 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103364:	4b46      	ldr	r3, [pc, #280]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 8103366:	681b      	ldr	r3, [r3, #0]
 8103368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810336c:	2b00      	cmp	r3, #0
 810336e:	d1f0      	bne.n	8103352 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103370:	4b43      	ldr	r3, [pc, #268]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 8103372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103374:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8103378:	687b      	ldr	r3, [r7, #4]
 810337a:	681b      	ldr	r3, [r3, #0]
 810337c:	031b      	lsls	r3, r3, #12
 810337e:	4940      	ldr	r1, [pc, #256]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 8103380:	4313      	orrs	r3, r2
 8103382:	628b      	str	r3, [r1, #40]	@ 0x28
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	685b      	ldr	r3, [r3, #4]
 8103388:	3b01      	subs	r3, #1
 810338a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	689b      	ldr	r3, [r3, #8]
 8103392:	3b01      	subs	r3, #1
 8103394:	025b      	lsls	r3, r3, #9
 8103396:	b29b      	uxth	r3, r3
 8103398:	431a      	orrs	r2, r3
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	68db      	ldr	r3, [r3, #12]
 810339e:	3b01      	subs	r3, #1
 81033a0:	041b      	lsls	r3, r3, #16
 81033a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81033a6:	431a      	orrs	r2, r3
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	691b      	ldr	r3, [r3, #16]
 81033ac:	3b01      	subs	r3, #1
 81033ae:	061b      	lsls	r3, r3, #24
 81033b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81033b4:	4932      	ldr	r1, [pc, #200]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 81033b6:	4313      	orrs	r3, r2
 81033b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81033ba:	4b31      	ldr	r3, [pc, #196]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 81033bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81033be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 81033c2:	687b      	ldr	r3, [r7, #4]
 81033c4:	695b      	ldr	r3, [r3, #20]
 81033c6:	492e      	ldr	r1, [pc, #184]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 81033c8:	4313      	orrs	r3, r2
 81033ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81033cc:	4b2c      	ldr	r3, [pc, #176]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 81033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81033d0:	f023 0220 	bic.w	r2, r3, #32
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	699b      	ldr	r3, [r3, #24]
 81033d8:	4929      	ldr	r1, [pc, #164]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 81033da:	4313      	orrs	r3, r2
 81033dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81033de:	4b28      	ldr	r3, [pc, #160]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 81033e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81033e2:	4a27      	ldr	r2, [pc, #156]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 81033e4:	f023 0310 	bic.w	r3, r3, #16
 81033e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81033ea:	4b25      	ldr	r3, [pc, #148]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 81033ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81033ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81033f2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81033f6:	687a      	ldr	r2, [r7, #4]
 81033f8:	69d2      	ldr	r2, [r2, #28]
 81033fa:	00d2      	lsls	r2, r2, #3
 81033fc:	4920      	ldr	r1, [pc, #128]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 81033fe:	4313      	orrs	r3, r2
 8103400:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103402:	4b1f      	ldr	r3, [pc, #124]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 8103404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103406:	4a1e      	ldr	r2, [pc, #120]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 8103408:	f043 0310 	orr.w	r3, r3, #16
 810340c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810340e:	683b      	ldr	r3, [r7, #0]
 8103410:	2b00      	cmp	r3, #0
 8103412:	d106      	bne.n	8103422 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103414:	4b1a      	ldr	r3, [pc, #104]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 8103416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103418:	4a19      	ldr	r2, [pc, #100]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 810341a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810341e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103420:	e00f      	b.n	8103442 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103422:	683b      	ldr	r3, [r7, #0]
 8103424:	2b01      	cmp	r3, #1
 8103426:	d106      	bne.n	8103436 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103428:	4b15      	ldr	r3, [pc, #84]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 810342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810342c:	4a14      	ldr	r2, [pc, #80]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 810342e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8103432:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103434:	e005      	b.n	8103442 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103436:	4b12      	ldr	r3, [pc, #72]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 8103438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810343a:	4a11      	ldr	r2, [pc, #68]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 810343c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8103440:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103442:	4b0f      	ldr	r3, [pc, #60]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 8103444:	681b      	ldr	r3, [r3, #0]
 8103446:	4a0e      	ldr	r2, [pc, #56]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 8103448:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810344c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810344e:	f7fd fceb 	bl	8100e28 <HAL_GetTick>
 8103452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103454:	e008      	b.n	8103468 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103456:	f7fd fce7 	bl	8100e28 <HAL_GetTick>
 810345a:	4602      	mov	r2, r0
 810345c:	68bb      	ldr	r3, [r7, #8]
 810345e:	1ad3      	subs	r3, r2, r3
 8103460:	2b02      	cmp	r3, #2
 8103462:	d901      	bls.n	8103468 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103464:	2303      	movs	r3, #3
 8103466:	e006      	b.n	8103476 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103468:	4b05      	ldr	r3, [pc, #20]	@ (8103480 <RCCEx_PLL2_Config+0x160>)
 810346a:	681b      	ldr	r3, [r3, #0]
 810346c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103470:	2b00      	cmp	r3, #0
 8103472:	d0f0      	beq.n	8103456 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103474:	7bfb      	ldrb	r3, [r7, #15]
}
 8103476:	4618      	mov	r0, r3
 8103478:	3710      	adds	r7, #16
 810347a:	46bd      	mov	sp, r7
 810347c:	bd80      	pop	{r7, pc}
 810347e:	bf00      	nop
 8103480:	58024400 	.word	0x58024400

08103484 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103484:	b580      	push	{r7, lr}
 8103486:	b084      	sub	sp, #16
 8103488:	af00      	add	r7, sp, #0
 810348a:	6078      	str	r0, [r7, #4]
 810348c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810348e:	2300      	movs	r3, #0
 8103490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103492:	4b54      	ldr	r3, [pc, #336]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 8103494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103496:	f003 0303 	and.w	r3, r3, #3
 810349a:	2b03      	cmp	r3, #3
 810349c:	d101      	bne.n	81034a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810349e:	2301      	movs	r3, #1
 81034a0:	e09b      	b.n	81035da <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81034a2:	4b50      	ldr	r3, [pc, #320]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 81034a4:	681b      	ldr	r3, [r3, #0]
 81034a6:	4a4f      	ldr	r2, [pc, #316]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 81034a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81034ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81034ae:	f7fd fcbb 	bl	8100e28 <HAL_GetTick>
 81034b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81034b4:	e008      	b.n	81034c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81034b6:	f7fd fcb7 	bl	8100e28 <HAL_GetTick>
 81034ba:	4602      	mov	r2, r0
 81034bc:	68bb      	ldr	r3, [r7, #8]
 81034be:	1ad3      	subs	r3, r2, r3
 81034c0:	2b02      	cmp	r3, #2
 81034c2:	d901      	bls.n	81034c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81034c4:	2303      	movs	r3, #3
 81034c6:	e088      	b.n	81035da <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81034c8:	4b46      	ldr	r3, [pc, #280]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 81034ca:	681b      	ldr	r3, [r3, #0]
 81034cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81034d0:	2b00      	cmp	r3, #0
 81034d2:	d1f0      	bne.n	81034b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81034d4:	4b43      	ldr	r3, [pc, #268]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 81034d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81034d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81034dc:	687b      	ldr	r3, [r7, #4]
 81034de:	681b      	ldr	r3, [r3, #0]
 81034e0:	051b      	lsls	r3, r3, #20
 81034e2:	4940      	ldr	r1, [pc, #256]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 81034e4:	4313      	orrs	r3, r2
 81034e6:	628b      	str	r3, [r1, #40]	@ 0x28
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	685b      	ldr	r3, [r3, #4]
 81034ec:	3b01      	subs	r3, #1
 81034ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81034f2:	687b      	ldr	r3, [r7, #4]
 81034f4:	689b      	ldr	r3, [r3, #8]
 81034f6:	3b01      	subs	r3, #1
 81034f8:	025b      	lsls	r3, r3, #9
 81034fa:	b29b      	uxth	r3, r3
 81034fc:	431a      	orrs	r2, r3
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	68db      	ldr	r3, [r3, #12]
 8103502:	3b01      	subs	r3, #1
 8103504:	041b      	lsls	r3, r3, #16
 8103506:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810350a:	431a      	orrs	r2, r3
 810350c:	687b      	ldr	r3, [r7, #4]
 810350e:	691b      	ldr	r3, [r3, #16]
 8103510:	3b01      	subs	r3, #1
 8103512:	061b      	lsls	r3, r3, #24
 8103514:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103518:	4932      	ldr	r1, [pc, #200]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 810351a:	4313      	orrs	r3, r2
 810351c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810351e:	4b31      	ldr	r3, [pc, #196]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 8103520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103522:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	695b      	ldr	r3, [r3, #20]
 810352a:	492e      	ldr	r1, [pc, #184]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 810352c:	4313      	orrs	r3, r2
 810352e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103530:	4b2c      	ldr	r3, [pc, #176]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 8103532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103534:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8103538:	687b      	ldr	r3, [r7, #4]
 810353a:	699b      	ldr	r3, [r3, #24]
 810353c:	4929      	ldr	r1, [pc, #164]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 810353e:	4313      	orrs	r3, r2
 8103540:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103542:	4b28      	ldr	r3, [pc, #160]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 8103544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103546:	4a27      	ldr	r2, [pc, #156]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 8103548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810354c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810354e:	4b25      	ldr	r3, [pc, #148]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 8103550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103552:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103556:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810355a:	687a      	ldr	r2, [r7, #4]
 810355c:	69d2      	ldr	r2, [r2, #28]
 810355e:	00d2      	lsls	r2, r2, #3
 8103560:	4920      	ldr	r1, [pc, #128]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 8103562:	4313      	orrs	r3, r2
 8103564:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103566:	4b1f      	ldr	r3, [pc, #124]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 8103568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810356a:	4a1e      	ldr	r2, [pc, #120]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 810356c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103570:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8103572:	683b      	ldr	r3, [r7, #0]
 8103574:	2b00      	cmp	r3, #0
 8103576:	d106      	bne.n	8103586 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103578:	4b1a      	ldr	r3, [pc, #104]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 810357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810357c:	4a19      	ldr	r2, [pc, #100]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 810357e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8103582:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103584:	e00f      	b.n	81035a6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103586:	683b      	ldr	r3, [r7, #0]
 8103588:	2b01      	cmp	r3, #1
 810358a:	d106      	bne.n	810359a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810358c:	4b15      	ldr	r3, [pc, #84]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 810358e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103590:	4a14      	ldr	r2, [pc, #80]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 8103592:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8103596:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103598:	e005      	b.n	81035a6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810359a:	4b12      	ldr	r3, [pc, #72]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 810359c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810359e:	4a11      	ldr	r2, [pc, #68]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 81035a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81035a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81035a6:	4b0f      	ldr	r3, [pc, #60]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 81035a8:	681b      	ldr	r3, [r3, #0]
 81035aa:	4a0e      	ldr	r2, [pc, #56]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 81035ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81035b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81035b2:	f7fd fc39 	bl	8100e28 <HAL_GetTick>
 81035b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81035b8:	e008      	b.n	81035cc <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81035ba:	f7fd fc35 	bl	8100e28 <HAL_GetTick>
 81035be:	4602      	mov	r2, r0
 81035c0:	68bb      	ldr	r3, [r7, #8]
 81035c2:	1ad3      	subs	r3, r2, r3
 81035c4:	2b02      	cmp	r3, #2
 81035c6:	d901      	bls.n	81035cc <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81035c8:	2303      	movs	r3, #3
 81035ca:	e006      	b.n	81035da <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81035cc:	4b05      	ldr	r3, [pc, #20]	@ (81035e4 <RCCEx_PLL3_Config+0x160>)
 81035ce:	681b      	ldr	r3, [r3, #0]
 81035d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81035d4:	2b00      	cmp	r3, #0
 81035d6:	d0f0      	beq.n	81035ba <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81035d8:	7bfb      	ldrb	r3, [r7, #15]
}
 81035da:	4618      	mov	r0, r3
 81035dc:	3710      	adds	r7, #16
 81035de:	46bd      	mov	sp, r7
 81035e0:	bd80      	pop	{r7, pc}
 81035e2:	bf00      	nop
 81035e4:	58024400 	.word	0x58024400

081035e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81035e8:	b580      	push	{r7, lr}
 81035ea:	b082      	sub	sp, #8
 81035ec:	af00      	add	r7, sp, #0
 81035ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81035f0:	687b      	ldr	r3, [r7, #4]
 81035f2:	2b00      	cmp	r3, #0
 81035f4:	d101      	bne.n	81035fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81035f6:	2301      	movs	r3, #1
 81035f8:	e042      	b.n	8103680 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81035fa:	687b      	ldr	r3, [r7, #4]
 81035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103600:	2b00      	cmp	r3, #0
 8103602:	d106      	bne.n	8103612 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8103604:	687b      	ldr	r3, [r7, #4]
 8103606:	2200      	movs	r2, #0
 8103608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810360c:	6878      	ldr	r0, [r7, #4]
 810360e:	f7fd facf 	bl	8100bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	2224      	movs	r2, #36	@ 0x24
 8103616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	681b      	ldr	r3, [r3, #0]
 810361e:	681a      	ldr	r2, [r3, #0]
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	681b      	ldr	r3, [r3, #0]
 8103624:	f022 0201 	bic.w	r2, r2, #1
 8103628:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810362e:	2b00      	cmp	r3, #0
 8103630:	d002      	beq.n	8103638 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8103632:	6878      	ldr	r0, [r7, #4]
 8103634:	f000 fe1e 	bl	8104274 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8103638:	6878      	ldr	r0, [r7, #4]
 810363a:	f000 f8b3 	bl	81037a4 <UART_SetConfig>
 810363e:	4603      	mov	r3, r0
 8103640:	2b01      	cmp	r3, #1
 8103642:	d101      	bne.n	8103648 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8103644:	2301      	movs	r3, #1
 8103646:	e01b      	b.n	8103680 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	681b      	ldr	r3, [r3, #0]
 810364c:	685a      	ldr	r2, [r3, #4]
 810364e:	687b      	ldr	r3, [r7, #4]
 8103650:	681b      	ldr	r3, [r3, #0]
 8103652:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8103656:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	689a      	ldr	r2, [r3, #8]
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	681b      	ldr	r3, [r3, #0]
 8103662:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8103666:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	681b      	ldr	r3, [r3, #0]
 810366c:	681a      	ldr	r2, [r3, #0]
 810366e:	687b      	ldr	r3, [r7, #4]
 8103670:	681b      	ldr	r3, [r3, #0]
 8103672:	f042 0201 	orr.w	r2, r2, #1
 8103676:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8103678:	6878      	ldr	r0, [r7, #4]
 810367a:	f000 fe9d 	bl	81043b8 <UART_CheckIdleState>
 810367e:	4603      	mov	r3, r0
}
 8103680:	4618      	mov	r0, r3
 8103682:	3708      	adds	r7, #8
 8103684:	46bd      	mov	sp, r7
 8103686:	bd80      	pop	{r7, pc}

08103688 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103688:	b580      	push	{r7, lr}
 810368a:	b08a      	sub	sp, #40	@ 0x28
 810368c:	af02      	add	r7, sp, #8
 810368e:	60f8      	str	r0, [r7, #12]
 8103690:	60b9      	str	r1, [r7, #8]
 8103692:	603b      	str	r3, [r7, #0]
 8103694:	4613      	mov	r3, r2
 8103696:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8103698:	68fb      	ldr	r3, [r7, #12]
 810369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810369e:	2b20      	cmp	r3, #32
 81036a0:	d17b      	bne.n	810379a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 81036a2:	68bb      	ldr	r3, [r7, #8]
 81036a4:	2b00      	cmp	r3, #0
 81036a6:	d002      	beq.n	81036ae <HAL_UART_Transmit+0x26>
 81036a8:	88fb      	ldrh	r3, [r7, #6]
 81036aa:	2b00      	cmp	r3, #0
 81036ac:	d101      	bne.n	81036b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 81036ae:	2301      	movs	r3, #1
 81036b0:	e074      	b.n	810379c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81036b2:	68fb      	ldr	r3, [r7, #12]
 81036b4:	2200      	movs	r2, #0
 81036b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81036ba:	68fb      	ldr	r3, [r7, #12]
 81036bc:	2221      	movs	r2, #33	@ 0x21
 81036be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81036c2:	f7fd fbb1 	bl	8100e28 <HAL_GetTick>
 81036c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81036c8:	68fb      	ldr	r3, [r7, #12]
 81036ca:	88fa      	ldrh	r2, [r7, #6]
 81036cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 81036d0:	68fb      	ldr	r3, [r7, #12]
 81036d2:	88fa      	ldrh	r2, [r7, #6]
 81036d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81036d8:	68fb      	ldr	r3, [r7, #12]
 81036da:	689b      	ldr	r3, [r3, #8]
 81036dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81036e0:	d108      	bne.n	81036f4 <HAL_UART_Transmit+0x6c>
 81036e2:	68fb      	ldr	r3, [r7, #12]
 81036e4:	691b      	ldr	r3, [r3, #16]
 81036e6:	2b00      	cmp	r3, #0
 81036e8:	d104      	bne.n	81036f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 81036ea:	2300      	movs	r3, #0
 81036ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81036ee:	68bb      	ldr	r3, [r7, #8]
 81036f0:	61bb      	str	r3, [r7, #24]
 81036f2:	e003      	b.n	81036fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 81036f4:	68bb      	ldr	r3, [r7, #8]
 81036f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81036f8:	2300      	movs	r3, #0
 81036fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 81036fc:	e030      	b.n	8103760 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81036fe:	683b      	ldr	r3, [r7, #0]
 8103700:	9300      	str	r3, [sp, #0]
 8103702:	697b      	ldr	r3, [r7, #20]
 8103704:	2200      	movs	r2, #0
 8103706:	2180      	movs	r1, #128	@ 0x80
 8103708:	68f8      	ldr	r0, [r7, #12]
 810370a:	f000 feff 	bl	810450c <UART_WaitOnFlagUntilTimeout>
 810370e:	4603      	mov	r3, r0
 8103710:	2b00      	cmp	r3, #0
 8103712:	d005      	beq.n	8103720 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8103714:	68fb      	ldr	r3, [r7, #12]
 8103716:	2220      	movs	r2, #32
 8103718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810371c:	2303      	movs	r3, #3
 810371e:	e03d      	b.n	810379c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8103720:	69fb      	ldr	r3, [r7, #28]
 8103722:	2b00      	cmp	r3, #0
 8103724:	d10b      	bne.n	810373e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8103726:	69bb      	ldr	r3, [r7, #24]
 8103728:	881b      	ldrh	r3, [r3, #0]
 810372a:	461a      	mov	r2, r3
 810372c:	68fb      	ldr	r3, [r7, #12]
 810372e:	681b      	ldr	r3, [r3, #0]
 8103730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8103734:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8103736:	69bb      	ldr	r3, [r7, #24]
 8103738:	3302      	adds	r3, #2
 810373a:	61bb      	str	r3, [r7, #24]
 810373c:	e007      	b.n	810374e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810373e:	69fb      	ldr	r3, [r7, #28]
 8103740:	781a      	ldrb	r2, [r3, #0]
 8103742:	68fb      	ldr	r3, [r7, #12]
 8103744:	681b      	ldr	r3, [r3, #0]
 8103746:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8103748:	69fb      	ldr	r3, [r7, #28]
 810374a:	3301      	adds	r3, #1
 810374c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810374e:	68fb      	ldr	r3, [r7, #12]
 8103750:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8103754:	b29b      	uxth	r3, r3
 8103756:	3b01      	subs	r3, #1
 8103758:	b29a      	uxth	r2, r3
 810375a:	68fb      	ldr	r3, [r7, #12]
 810375c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8103760:	68fb      	ldr	r3, [r7, #12]
 8103762:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8103766:	b29b      	uxth	r3, r3
 8103768:	2b00      	cmp	r3, #0
 810376a:	d1c8      	bne.n	81036fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810376c:	683b      	ldr	r3, [r7, #0]
 810376e:	9300      	str	r3, [sp, #0]
 8103770:	697b      	ldr	r3, [r7, #20]
 8103772:	2200      	movs	r2, #0
 8103774:	2140      	movs	r1, #64	@ 0x40
 8103776:	68f8      	ldr	r0, [r7, #12]
 8103778:	f000 fec8 	bl	810450c <UART_WaitOnFlagUntilTimeout>
 810377c:	4603      	mov	r3, r0
 810377e:	2b00      	cmp	r3, #0
 8103780:	d005      	beq.n	810378e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8103782:	68fb      	ldr	r3, [r7, #12]
 8103784:	2220      	movs	r2, #32
 8103786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810378a:	2303      	movs	r3, #3
 810378c:	e006      	b.n	810379c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810378e:	68fb      	ldr	r3, [r7, #12]
 8103790:	2220      	movs	r2, #32
 8103792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8103796:	2300      	movs	r3, #0
 8103798:	e000      	b.n	810379c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810379a:	2302      	movs	r3, #2
  }
}
 810379c:	4618      	mov	r0, r3
 810379e:	3720      	adds	r7, #32
 81037a0:	46bd      	mov	sp, r7
 81037a2:	bd80      	pop	{r7, pc}

081037a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81037a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81037a8:	b092      	sub	sp, #72	@ 0x48
 81037aa:	af00      	add	r7, sp, #0
 81037ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81037ae:	2300      	movs	r3, #0
 81037b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81037b4:	697b      	ldr	r3, [r7, #20]
 81037b6:	689a      	ldr	r2, [r3, #8]
 81037b8:	697b      	ldr	r3, [r7, #20]
 81037ba:	691b      	ldr	r3, [r3, #16]
 81037bc:	431a      	orrs	r2, r3
 81037be:	697b      	ldr	r3, [r7, #20]
 81037c0:	695b      	ldr	r3, [r3, #20]
 81037c2:	431a      	orrs	r2, r3
 81037c4:	697b      	ldr	r3, [r7, #20]
 81037c6:	69db      	ldr	r3, [r3, #28]
 81037c8:	4313      	orrs	r3, r2
 81037ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81037cc:	697b      	ldr	r3, [r7, #20]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	681a      	ldr	r2, [r3, #0]
 81037d2:	4bbd      	ldr	r3, [pc, #756]	@ (8103ac8 <UART_SetConfig+0x324>)
 81037d4:	4013      	ands	r3, r2
 81037d6:	697a      	ldr	r2, [r7, #20]
 81037d8:	6812      	ldr	r2, [r2, #0]
 81037da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81037dc:	430b      	orrs	r3, r1
 81037de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81037e0:	697b      	ldr	r3, [r7, #20]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	685b      	ldr	r3, [r3, #4]
 81037e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81037ea:	697b      	ldr	r3, [r7, #20]
 81037ec:	68da      	ldr	r2, [r3, #12]
 81037ee:	697b      	ldr	r3, [r7, #20]
 81037f0:	681b      	ldr	r3, [r3, #0]
 81037f2:	430a      	orrs	r2, r1
 81037f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81037f6:	697b      	ldr	r3, [r7, #20]
 81037f8:	699b      	ldr	r3, [r3, #24]
 81037fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81037fc:	697b      	ldr	r3, [r7, #20]
 81037fe:	681b      	ldr	r3, [r3, #0]
 8103800:	4ab2      	ldr	r2, [pc, #712]	@ (8103acc <UART_SetConfig+0x328>)
 8103802:	4293      	cmp	r3, r2
 8103804:	d004      	beq.n	8103810 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8103806:	697b      	ldr	r3, [r7, #20]
 8103808:	6a1b      	ldr	r3, [r3, #32]
 810380a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810380c:	4313      	orrs	r3, r2
 810380e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8103810:	697b      	ldr	r3, [r7, #20]
 8103812:	681b      	ldr	r3, [r3, #0]
 8103814:	689b      	ldr	r3, [r3, #8]
 8103816:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810381a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810381e:	697a      	ldr	r2, [r7, #20]
 8103820:	6812      	ldr	r2, [r2, #0]
 8103822:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8103824:	430b      	orrs	r3, r1
 8103826:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8103828:	697b      	ldr	r3, [r7, #20]
 810382a:	681b      	ldr	r3, [r3, #0]
 810382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810382e:	f023 010f 	bic.w	r1, r3, #15
 8103832:	697b      	ldr	r3, [r7, #20]
 8103834:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8103836:	697b      	ldr	r3, [r7, #20]
 8103838:	681b      	ldr	r3, [r3, #0]
 810383a:	430a      	orrs	r2, r1
 810383c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810383e:	697b      	ldr	r3, [r7, #20]
 8103840:	681b      	ldr	r3, [r3, #0]
 8103842:	4aa3      	ldr	r2, [pc, #652]	@ (8103ad0 <UART_SetConfig+0x32c>)
 8103844:	4293      	cmp	r3, r2
 8103846:	d177      	bne.n	8103938 <UART_SetConfig+0x194>
 8103848:	4ba2      	ldr	r3, [pc, #648]	@ (8103ad4 <UART_SetConfig+0x330>)
 810384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810384c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8103850:	2b28      	cmp	r3, #40	@ 0x28
 8103852:	d86d      	bhi.n	8103930 <UART_SetConfig+0x18c>
 8103854:	a201      	add	r2, pc, #4	@ (adr r2, 810385c <UART_SetConfig+0xb8>)
 8103856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810385a:	bf00      	nop
 810385c:	08103901 	.word	0x08103901
 8103860:	08103931 	.word	0x08103931
 8103864:	08103931 	.word	0x08103931
 8103868:	08103931 	.word	0x08103931
 810386c:	08103931 	.word	0x08103931
 8103870:	08103931 	.word	0x08103931
 8103874:	08103931 	.word	0x08103931
 8103878:	08103931 	.word	0x08103931
 810387c:	08103909 	.word	0x08103909
 8103880:	08103931 	.word	0x08103931
 8103884:	08103931 	.word	0x08103931
 8103888:	08103931 	.word	0x08103931
 810388c:	08103931 	.word	0x08103931
 8103890:	08103931 	.word	0x08103931
 8103894:	08103931 	.word	0x08103931
 8103898:	08103931 	.word	0x08103931
 810389c:	08103911 	.word	0x08103911
 81038a0:	08103931 	.word	0x08103931
 81038a4:	08103931 	.word	0x08103931
 81038a8:	08103931 	.word	0x08103931
 81038ac:	08103931 	.word	0x08103931
 81038b0:	08103931 	.word	0x08103931
 81038b4:	08103931 	.word	0x08103931
 81038b8:	08103931 	.word	0x08103931
 81038bc:	08103919 	.word	0x08103919
 81038c0:	08103931 	.word	0x08103931
 81038c4:	08103931 	.word	0x08103931
 81038c8:	08103931 	.word	0x08103931
 81038cc:	08103931 	.word	0x08103931
 81038d0:	08103931 	.word	0x08103931
 81038d4:	08103931 	.word	0x08103931
 81038d8:	08103931 	.word	0x08103931
 81038dc:	08103921 	.word	0x08103921
 81038e0:	08103931 	.word	0x08103931
 81038e4:	08103931 	.word	0x08103931
 81038e8:	08103931 	.word	0x08103931
 81038ec:	08103931 	.word	0x08103931
 81038f0:	08103931 	.word	0x08103931
 81038f4:	08103931 	.word	0x08103931
 81038f8:	08103931 	.word	0x08103931
 81038fc:	08103929 	.word	0x08103929
 8103900:	2301      	movs	r3, #1
 8103902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103906:	e220      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103908:	2304      	movs	r3, #4
 810390a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810390e:	e21c      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103910:	2308      	movs	r3, #8
 8103912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103916:	e218      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103918:	2310      	movs	r3, #16
 810391a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810391e:	e214      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103920:	2320      	movs	r3, #32
 8103922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103926:	e210      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103928:	2340      	movs	r3, #64	@ 0x40
 810392a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810392e:	e20c      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103930:	2380      	movs	r3, #128	@ 0x80
 8103932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103936:	e208      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103938:	697b      	ldr	r3, [r7, #20]
 810393a:	681b      	ldr	r3, [r3, #0]
 810393c:	4a66      	ldr	r2, [pc, #408]	@ (8103ad8 <UART_SetConfig+0x334>)
 810393e:	4293      	cmp	r3, r2
 8103940:	d130      	bne.n	81039a4 <UART_SetConfig+0x200>
 8103942:	4b64      	ldr	r3, [pc, #400]	@ (8103ad4 <UART_SetConfig+0x330>)
 8103944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103946:	f003 0307 	and.w	r3, r3, #7
 810394a:	2b05      	cmp	r3, #5
 810394c:	d826      	bhi.n	810399c <UART_SetConfig+0x1f8>
 810394e:	a201      	add	r2, pc, #4	@ (adr r2, 8103954 <UART_SetConfig+0x1b0>)
 8103950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103954:	0810396d 	.word	0x0810396d
 8103958:	08103975 	.word	0x08103975
 810395c:	0810397d 	.word	0x0810397d
 8103960:	08103985 	.word	0x08103985
 8103964:	0810398d 	.word	0x0810398d
 8103968:	08103995 	.word	0x08103995
 810396c:	2300      	movs	r3, #0
 810396e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103972:	e1ea      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103974:	2304      	movs	r3, #4
 8103976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810397a:	e1e6      	b.n	8103d4a <UART_SetConfig+0x5a6>
 810397c:	2308      	movs	r3, #8
 810397e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103982:	e1e2      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103984:	2310      	movs	r3, #16
 8103986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810398a:	e1de      	b.n	8103d4a <UART_SetConfig+0x5a6>
 810398c:	2320      	movs	r3, #32
 810398e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103992:	e1da      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103994:	2340      	movs	r3, #64	@ 0x40
 8103996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810399a:	e1d6      	b.n	8103d4a <UART_SetConfig+0x5a6>
 810399c:	2380      	movs	r3, #128	@ 0x80
 810399e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81039a2:	e1d2      	b.n	8103d4a <UART_SetConfig+0x5a6>
 81039a4:	697b      	ldr	r3, [r7, #20]
 81039a6:	681b      	ldr	r3, [r3, #0]
 81039a8:	4a4c      	ldr	r2, [pc, #304]	@ (8103adc <UART_SetConfig+0x338>)
 81039aa:	4293      	cmp	r3, r2
 81039ac:	d130      	bne.n	8103a10 <UART_SetConfig+0x26c>
 81039ae:	4b49      	ldr	r3, [pc, #292]	@ (8103ad4 <UART_SetConfig+0x330>)
 81039b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81039b2:	f003 0307 	and.w	r3, r3, #7
 81039b6:	2b05      	cmp	r3, #5
 81039b8:	d826      	bhi.n	8103a08 <UART_SetConfig+0x264>
 81039ba:	a201      	add	r2, pc, #4	@ (adr r2, 81039c0 <UART_SetConfig+0x21c>)
 81039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81039c0:	081039d9 	.word	0x081039d9
 81039c4:	081039e1 	.word	0x081039e1
 81039c8:	081039e9 	.word	0x081039e9
 81039cc:	081039f1 	.word	0x081039f1
 81039d0:	081039f9 	.word	0x081039f9
 81039d4:	08103a01 	.word	0x08103a01
 81039d8:	2300      	movs	r3, #0
 81039da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81039de:	e1b4      	b.n	8103d4a <UART_SetConfig+0x5a6>
 81039e0:	2304      	movs	r3, #4
 81039e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81039e6:	e1b0      	b.n	8103d4a <UART_SetConfig+0x5a6>
 81039e8:	2308      	movs	r3, #8
 81039ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81039ee:	e1ac      	b.n	8103d4a <UART_SetConfig+0x5a6>
 81039f0:	2310      	movs	r3, #16
 81039f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81039f6:	e1a8      	b.n	8103d4a <UART_SetConfig+0x5a6>
 81039f8:	2320      	movs	r3, #32
 81039fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81039fe:	e1a4      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103a00:	2340      	movs	r3, #64	@ 0x40
 8103a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103a06:	e1a0      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103a08:	2380      	movs	r3, #128	@ 0x80
 8103a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103a0e:	e19c      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103a10:	697b      	ldr	r3, [r7, #20]
 8103a12:	681b      	ldr	r3, [r3, #0]
 8103a14:	4a32      	ldr	r2, [pc, #200]	@ (8103ae0 <UART_SetConfig+0x33c>)
 8103a16:	4293      	cmp	r3, r2
 8103a18:	d130      	bne.n	8103a7c <UART_SetConfig+0x2d8>
 8103a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8103ad4 <UART_SetConfig+0x330>)
 8103a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103a1e:	f003 0307 	and.w	r3, r3, #7
 8103a22:	2b05      	cmp	r3, #5
 8103a24:	d826      	bhi.n	8103a74 <UART_SetConfig+0x2d0>
 8103a26:	a201      	add	r2, pc, #4	@ (adr r2, 8103a2c <UART_SetConfig+0x288>)
 8103a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a2c:	08103a45 	.word	0x08103a45
 8103a30:	08103a4d 	.word	0x08103a4d
 8103a34:	08103a55 	.word	0x08103a55
 8103a38:	08103a5d 	.word	0x08103a5d
 8103a3c:	08103a65 	.word	0x08103a65
 8103a40:	08103a6d 	.word	0x08103a6d
 8103a44:	2300      	movs	r3, #0
 8103a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103a4a:	e17e      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103a4c:	2304      	movs	r3, #4
 8103a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103a52:	e17a      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103a54:	2308      	movs	r3, #8
 8103a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103a5a:	e176      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103a5c:	2310      	movs	r3, #16
 8103a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103a62:	e172      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103a64:	2320      	movs	r3, #32
 8103a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103a6a:	e16e      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103a6c:	2340      	movs	r3, #64	@ 0x40
 8103a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103a72:	e16a      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103a74:	2380      	movs	r3, #128	@ 0x80
 8103a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103a7a:	e166      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103a7c:	697b      	ldr	r3, [r7, #20]
 8103a7e:	681b      	ldr	r3, [r3, #0]
 8103a80:	4a18      	ldr	r2, [pc, #96]	@ (8103ae4 <UART_SetConfig+0x340>)
 8103a82:	4293      	cmp	r3, r2
 8103a84:	d140      	bne.n	8103b08 <UART_SetConfig+0x364>
 8103a86:	4b13      	ldr	r3, [pc, #76]	@ (8103ad4 <UART_SetConfig+0x330>)
 8103a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103a8a:	f003 0307 	and.w	r3, r3, #7
 8103a8e:	2b05      	cmp	r3, #5
 8103a90:	d836      	bhi.n	8103b00 <UART_SetConfig+0x35c>
 8103a92:	a201      	add	r2, pc, #4	@ (adr r2, 8103a98 <UART_SetConfig+0x2f4>)
 8103a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a98:	08103ab1 	.word	0x08103ab1
 8103a9c:	08103ab9 	.word	0x08103ab9
 8103aa0:	08103ac1 	.word	0x08103ac1
 8103aa4:	08103ae9 	.word	0x08103ae9
 8103aa8:	08103af1 	.word	0x08103af1
 8103aac:	08103af9 	.word	0x08103af9
 8103ab0:	2300      	movs	r3, #0
 8103ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103ab6:	e148      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103ab8:	2304      	movs	r3, #4
 8103aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103abe:	e144      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103ac0:	2308      	movs	r3, #8
 8103ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103ac6:	e140      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103ac8:	cfff69f3 	.word	0xcfff69f3
 8103acc:	58000c00 	.word	0x58000c00
 8103ad0:	40011000 	.word	0x40011000
 8103ad4:	58024400 	.word	0x58024400
 8103ad8:	40004400 	.word	0x40004400
 8103adc:	40004800 	.word	0x40004800
 8103ae0:	40004c00 	.word	0x40004c00
 8103ae4:	40005000 	.word	0x40005000
 8103ae8:	2310      	movs	r3, #16
 8103aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103aee:	e12c      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103af0:	2320      	movs	r3, #32
 8103af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103af6:	e128      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103af8:	2340      	movs	r3, #64	@ 0x40
 8103afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103afe:	e124      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103b00:	2380      	movs	r3, #128	@ 0x80
 8103b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103b06:	e120      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103b08:	697b      	ldr	r3, [r7, #20]
 8103b0a:	681b      	ldr	r3, [r3, #0]
 8103b0c:	4acb      	ldr	r2, [pc, #812]	@ (8103e3c <UART_SetConfig+0x698>)
 8103b0e:	4293      	cmp	r3, r2
 8103b10:	d176      	bne.n	8103c00 <UART_SetConfig+0x45c>
 8103b12:	4bcb      	ldr	r3, [pc, #812]	@ (8103e40 <UART_SetConfig+0x69c>)
 8103b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103b16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8103b1a:	2b28      	cmp	r3, #40	@ 0x28
 8103b1c:	d86c      	bhi.n	8103bf8 <UART_SetConfig+0x454>
 8103b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8103b24 <UART_SetConfig+0x380>)
 8103b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b24:	08103bc9 	.word	0x08103bc9
 8103b28:	08103bf9 	.word	0x08103bf9
 8103b2c:	08103bf9 	.word	0x08103bf9
 8103b30:	08103bf9 	.word	0x08103bf9
 8103b34:	08103bf9 	.word	0x08103bf9
 8103b38:	08103bf9 	.word	0x08103bf9
 8103b3c:	08103bf9 	.word	0x08103bf9
 8103b40:	08103bf9 	.word	0x08103bf9
 8103b44:	08103bd1 	.word	0x08103bd1
 8103b48:	08103bf9 	.word	0x08103bf9
 8103b4c:	08103bf9 	.word	0x08103bf9
 8103b50:	08103bf9 	.word	0x08103bf9
 8103b54:	08103bf9 	.word	0x08103bf9
 8103b58:	08103bf9 	.word	0x08103bf9
 8103b5c:	08103bf9 	.word	0x08103bf9
 8103b60:	08103bf9 	.word	0x08103bf9
 8103b64:	08103bd9 	.word	0x08103bd9
 8103b68:	08103bf9 	.word	0x08103bf9
 8103b6c:	08103bf9 	.word	0x08103bf9
 8103b70:	08103bf9 	.word	0x08103bf9
 8103b74:	08103bf9 	.word	0x08103bf9
 8103b78:	08103bf9 	.word	0x08103bf9
 8103b7c:	08103bf9 	.word	0x08103bf9
 8103b80:	08103bf9 	.word	0x08103bf9
 8103b84:	08103be1 	.word	0x08103be1
 8103b88:	08103bf9 	.word	0x08103bf9
 8103b8c:	08103bf9 	.word	0x08103bf9
 8103b90:	08103bf9 	.word	0x08103bf9
 8103b94:	08103bf9 	.word	0x08103bf9
 8103b98:	08103bf9 	.word	0x08103bf9
 8103b9c:	08103bf9 	.word	0x08103bf9
 8103ba0:	08103bf9 	.word	0x08103bf9
 8103ba4:	08103be9 	.word	0x08103be9
 8103ba8:	08103bf9 	.word	0x08103bf9
 8103bac:	08103bf9 	.word	0x08103bf9
 8103bb0:	08103bf9 	.word	0x08103bf9
 8103bb4:	08103bf9 	.word	0x08103bf9
 8103bb8:	08103bf9 	.word	0x08103bf9
 8103bbc:	08103bf9 	.word	0x08103bf9
 8103bc0:	08103bf9 	.word	0x08103bf9
 8103bc4:	08103bf1 	.word	0x08103bf1
 8103bc8:	2301      	movs	r3, #1
 8103bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103bce:	e0bc      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103bd0:	2304      	movs	r3, #4
 8103bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103bd6:	e0b8      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103bd8:	2308      	movs	r3, #8
 8103bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103bde:	e0b4      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103be0:	2310      	movs	r3, #16
 8103be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103be6:	e0b0      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103be8:	2320      	movs	r3, #32
 8103bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103bee:	e0ac      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103bf0:	2340      	movs	r3, #64	@ 0x40
 8103bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103bf6:	e0a8      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103bf8:	2380      	movs	r3, #128	@ 0x80
 8103bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103bfe:	e0a4      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103c00:	697b      	ldr	r3, [r7, #20]
 8103c02:	681b      	ldr	r3, [r3, #0]
 8103c04:	4a8f      	ldr	r2, [pc, #572]	@ (8103e44 <UART_SetConfig+0x6a0>)
 8103c06:	4293      	cmp	r3, r2
 8103c08:	d130      	bne.n	8103c6c <UART_SetConfig+0x4c8>
 8103c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8103e40 <UART_SetConfig+0x69c>)
 8103c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c0e:	f003 0307 	and.w	r3, r3, #7
 8103c12:	2b05      	cmp	r3, #5
 8103c14:	d826      	bhi.n	8103c64 <UART_SetConfig+0x4c0>
 8103c16:	a201      	add	r2, pc, #4	@ (adr r2, 8103c1c <UART_SetConfig+0x478>)
 8103c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103c1c:	08103c35 	.word	0x08103c35
 8103c20:	08103c3d 	.word	0x08103c3d
 8103c24:	08103c45 	.word	0x08103c45
 8103c28:	08103c4d 	.word	0x08103c4d
 8103c2c:	08103c55 	.word	0x08103c55
 8103c30:	08103c5d 	.word	0x08103c5d
 8103c34:	2300      	movs	r3, #0
 8103c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103c3a:	e086      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103c3c:	2304      	movs	r3, #4
 8103c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103c42:	e082      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103c44:	2308      	movs	r3, #8
 8103c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103c4a:	e07e      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103c4c:	2310      	movs	r3, #16
 8103c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103c52:	e07a      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103c54:	2320      	movs	r3, #32
 8103c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103c5a:	e076      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103c5c:	2340      	movs	r3, #64	@ 0x40
 8103c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103c62:	e072      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103c64:	2380      	movs	r3, #128	@ 0x80
 8103c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103c6a:	e06e      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103c6c:	697b      	ldr	r3, [r7, #20]
 8103c6e:	681b      	ldr	r3, [r3, #0]
 8103c70:	4a75      	ldr	r2, [pc, #468]	@ (8103e48 <UART_SetConfig+0x6a4>)
 8103c72:	4293      	cmp	r3, r2
 8103c74:	d130      	bne.n	8103cd8 <UART_SetConfig+0x534>
 8103c76:	4b72      	ldr	r3, [pc, #456]	@ (8103e40 <UART_SetConfig+0x69c>)
 8103c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c7a:	f003 0307 	and.w	r3, r3, #7
 8103c7e:	2b05      	cmp	r3, #5
 8103c80:	d826      	bhi.n	8103cd0 <UART_SetConfig+0x52c>
 8103c82:	a201      	add	r2, pc, #4	@ (adr r2, 8103c88 <UART_SetConfig+0x4e4>)
 8103c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103c88:	08103ca1 	.word	0x08103ca1
 8103c8c:	08103ca9 	.word	0x08103ca9
 8103c90:	08103cb1 	.word	0x08103cb1
 8103c94:	08103cb9 	.word	0x08103cb9
 8103c98:	08103cc1 	.word	0x08103cc1
 8103c9c:	08103cc9 	.word	0x08103cc9
 8103ca0:	2300      	movs	r3, #0
 8103ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103ca6:	e050      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103ca8:	2304      	movs	r3, #4
 8103caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103cae:	e04c      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103cb0:	2308      	movs	r3, #8
 8103cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103cb6:	e048      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103cb8:	2310      	movs	r3, #16
 8103cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103cbe:	e044      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103cc0:	2320      	movs	r3, #32
 8103cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103cc6:	e040      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103cc8:	2340      	movs	r3, #64	@ 0x40
 8103cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103cce:	e03c      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103cd0:	2380      	movs	r3, #128	@ 0x80
 8103cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103cd6:	e038      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103cd8:	697b      	ldr	r3, [r7, #20]
 8103cda:	681b      	ldr	r3, [r3, #0]
 8103cdc:	4a5b      	ldr	r2, [pc, #364]	@ (8103e4c <UART_SetConfig+0x6a8>)
 8103cde:	4293      	cmp	r3, r2
 8103ce0:	d130      	bne.n	8103d44 <UART_SetConfig+0x5a0>
 8103ce2:	4b57      	ldr	r3, [pc, #348]	@ (8103e40 <UART_SetConfig+0x69c>)
 8103ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103ce6:	f003 0307 	and.w	r3, r3, #7
 8103cea:	2b05      	cmp	r3, #5
 8103cec:	d826      	bhi.n	8103d3c <UART_SetConfig+0x598>
 8103cee:	a201      	add	r2, pc, #4	@ (adr r2, 8103cf4 <UART_SetConfig+0x550>)
 8103cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103cf4:	08103d0d 	.word	0x08103d0d
 8103cf8:	08103d15 	.word	0x08103d15
 8103cfc:	08103d1d 	.word	0x08103d1d
 8103d00:	08103d25 	.word	0x08103d25
 8103d04:	08103d2d 	.word	0x08103d2d
 8103d08:	08103d35 	.word	0x08103d35
 8103d0c:	2302      	movs	r3, #2
 8103d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d12:	e01a      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103d14:	2304      	movs	r3, #4
 8103d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d1a:	e016      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103d1c:	2308      	movs	r3, #8
 8103d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d22:	e012      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103d24:	2310      	movs	r3, #16
 8103d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d2a:	e00e      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103d2c:	2320      	movs	r3, #32
 8103d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d32:	e00a      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103d34:	2340      	movs	r3, #64	@ 0x40
 8103d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d3a:	e006      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103d3c:	2380      	movs	r3, #128	@ 0x80
 8103d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103d42:	e002      	b.n	8103d4a <UART_SetConfig+0x5a6>
 8103d44:	2380      	movs	r3, #128	@ 0x80
 8103d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8103d4a:	697b      	ldr	r3, [r7, #20]
 8103d4c:	681b      	ldr	r3, [r3, #0]
 8103d4e:	4a3f      	ldr	r2, [pc, #252]	@ (8103e4c <UART_SetConfig+0x6a8>)
 8103d50:	4293      	cmp	r3, r2
 8103d52:	f040 80f8 	bne.w	8103f46 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8103d56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8103d5a:	2b20      	cmp	r3, #32
 8103d5c:	dc46      	bgt.n	8103dec <UART_SetConfig+0x648>
 8103d5e:	2b02      	cmp	r3, #2
 8103d60:	f2c0 8082 	blt.w	8103e68 <UART_SetConfig+0x6c4>
 8103d64:	3b02      	subs	r3, #2
 8103d66:	2b1e      	cmp	r3, #30
 8103d68:	d87e      	bhi.n	8103e68 <UART_SetConfig+0x6c4>
 8103d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8103d70 <UART_SetConfig+0x5cc>)
 8103d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103d70:	08103df3 	.word	0x08103df3
 8103d74:	08103e69 	.word	0x08103e69
 8103d78:	08103dfb 	.word	0x08103dfb
 8103d7c:	08103e69 	.word	0x08103e69
 8103d80:	08103e69 	.word	0x08103e69
 8103d84:	08103e69 	.word	0x08103e69
 8103d88:	08103e0b 	.word	0x08103e0b
 8103d8c:	08103e69 	.word	0x08103e69
 8103d90:	08103e69 	.word	0x08103e69
 8103d94:	08103e69 	.word	0x08103e69
 8103d98:	08103e69 	.word	0x08103e69
 8103d9c:	08103e69 	.word	0x08103e69
 8103da0:	08103e69 	.word	0x08103e69
 8103da4:	08103e69 	.word	0x08103e69
 8103da8:	08103e1b 	.word	0x08103e1b
 8103dac:	08103e69 	.word	0x08103e69
 8103db0:	08103e69 	.word	0x08103e69
 8103db4:	08103e69 	.word	0x08103e69
 8103db8:	08103e69 	.word	0x08103e69
 8103dbc:	08103e69 	.word	0x08103e69
 8103dc0:	08103e69 	.word	0x08103e69
 8103dc4:	08103e69 	.word	0x08103e69
 8103dc8:	08103e69 	.word	0x08103e69
 8103dcc:	08103e69 	.word	0x08103e69
 8103dd0:	08103e69 	.word	0x08103e69
 8103dd4:	08103e69 	.word	0x08103e69
 8103dd8:	08103e69 	.word	0x08103e69
 8103ddc:	08103e69 	.word	0x08103e69
 8103de0:	08103e69 	.word	0x08103e69
 8103de4:	08103e69 	.word	0x08103e69
 8103de8:	08103e5b 	.word	0x08103e5b
 8103dec:	2b40      	cmp	r3, #64	@ 0x40
 8103dee:	d037      	beq.n	8103e60 <UART_SetConfig+0x6bc>
 8103df0:	e03a      	b.n	8103e68 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8103df2:	f7fe ffd7 	bl	8102da4 <HAL_RCCEx_GetD3PCLK1Freq>
 8103df6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103df8:	e03c      	b.n	8103e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103dfe:	4618      	mov	r0, r3
 8103e00:	f7fe ffe6 	bl	8102dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103e08:	e034      	b.n	8103e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103e0a:	f107 0318 	add.w	r3, r7, #24
 8103e0e:	4618      	mov	r0, r3
 8103e10:	f7ff f932 	bl	8103078 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103e14:	69fb      	ldr	r3, [r7, #28]
 8103e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103e18:	e02c      	b.n	8103e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103e1a:	4b09      	ldr	r3, [pc, #36]	@ (8103e40 <UART_SetConfig+0x69c>)
 8103e1c:	681b      	ldr	r3, [r3, #0]
 8103e1e:	f003 0320 	and.w	r3, r3, #32
 8103e22:	2b00      	cmp	r3, #0
 8103e24:	d016      	beq.n	8103e54 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103e26:	4b06      	ldr	r3, [pc, #24]	@ (8103e40 <UART_SetConfig+0x69c>)
 8103e28:	681b      	ldr	r3, [r3, #0]
 8103e2a:	08db      	lsrs	r3, r3, #3
 8103e2c:	f003 0303 	and.w	r3, r3, #3
 8103e30:	4a07      	ldr	r2, [pc, #28]	@ (8103e50 <UART_SetConfig+0x6ac>)
 8103e32:	fa22 f303 	lsr.w	r3, r2, r3
 8103e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103e38:	e01c      	b.n	8103e74 <UART_SetConfig+0x6d0>
 8103e3a:	bf00      	nop
 8103e3c:	40011400 	.word	0x40011400
 8103e40:	58024400 	.word	0x58024400
 8103e44:	40007800 	.word	0x40007800
 8103e48:	40007c00 	.word	0x40007c00
 8103e4c:	58000c00 	.word	0x58000c00
 8103e50:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8103e54:	4b9d      	ldr	r3, [pc, #628]	@ (81040cc <UART_SetConfig+0x928>)
 8103e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103e58:	e00c      	b.n	8103e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103e5a:	4b9d      	ldr	r3, [pc, #628]	@ (81040d0 <UART_SetConfig+0x92c>)
 8103e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103e5e:	e009      	b.n	8103e74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8103e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103e66:	e005      	b.n	8103e74 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8103e68:	2300      	movs	r3, #0
 8103e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8103e6c:	2301      	movs	r3, #1
 8103e6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8103e72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8103e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103e76:	2b00      	cmp	r3, #0
 8103e78:	f000 81de 	beq.w	8104238 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8103e7c:	697b      	ldr	r3, [r7, #20]
 8103e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103e80:	4a94      	ldr	r2, [pc, #592]	@ (81040d4 <UART_SetConfig+0x930>)
 8103e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103e86:	461a      	mov	r2, r3
 8103e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8103e8e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103e90:	697b      	ldr	r3, [r7, #20]
 8103e92:	685a      	ldr	r2, [r3, #4]
 8103e94:	4613      	mov	r3, r2
 8103e96:	005b      	lsls	r3, r3, #1
 8103e98:	4413      	add	r3, r2
 8103e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103e9c:	429a      	cmp	r2, r3
 8103e9e:	d305      	bcc.n	8103eac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8103ea0:	697b      	ldr	r3, [r7, #20]
 8103ea2:	685b      	ldr	r3, [r3, #4]
 8103ea4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103ea8:	429a      	cmp	r2, r3
 8103eaa:	d903      	bls.n	8103eb4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8103eac:	2301      	movs	r3, #1
 8103eae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8103eb2:	e1c1      	b.n	8104238 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103eb6:	2200      	movs	r2, #0
 8103eb8:	60bb      	str	r3, [r7, #8]
 8103eba:	60fa      	str	r2, [r7, #12]
 8103ebc:	697b      	ldr	r3, [r7, #20]
 8103ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103ec0:	4a84      	ldr	r2, [pc, #528]	@ (81040d4 <UART_SetConfig+0x930>)
 8103ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103ec6:	b29b      	uxth	r3, r3
 8103ec8:	2200      	movs	r2, #0
 8103eca:	603b      	str	r3, [r7, #0]
 8103ecc:	607a      	str	r2, [r7, #4]
 8103ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103ed2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8103ed6:	f7fc fa6b 	bl	81003b0 <__aeabi_uldivmod>
 8103eda:	4602      	mov	r2, r0
 8103edc:	460b      	mov	r3, r1
 8103ede:	4610      	mov	r0, r2
 8103ee0:	4619      	mov	r1, r3
 8103ee2:	f04f 0200 	mov.w	r2, #0
 8103ee6:	f04f 0300 	mov.w	r3, #0
 8103eea:	020b      	lsls	r3, r1, #8
 8103eec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8103ef0:	0202      	lsls	r2, r0, #8
 8103ef2:	6979      	ldr	r1, [r7, #20]
 8103ef4:	6849      	ldr	r1, [r1, #4]
 8103ef6:	0849      	lsrs	r1, r1, #1
 8103ef8:	2000      	movs	r0, #0
 8103efa:	460c      	mov	r4, r1
 8103efc:	4605      	mov	r5, r0
 8103efe:	eb12 0804 	adds.w	r8, r2, r4
 8103f02:	eb43 0905 	adc.w	r9, r3, r5
 8103f06:	697b      	ldr	r3, [r7, #20]
 8103f08:	685b      	ldr	r3, [r3, #4]
 8103f0a:	2200      	movs	r2, #0
 8103f0c:	469a      	mov	sl, r3
 8103f0e:	4693      	mov	fp, r2
 8103f10:	4652      	mov	r2, sl
 8103f12:	465b      	mov	r3, fp
 8103f14:	4640      	mov	r0, r8
 8103f16:	4649      	mov	r1, r9
 8103f18:	f7fc fa4a 	bl	81003b0 <__aeabi_uldivmod>
 8103f1c:	4602      	mov	r2, r0
 8103f1e:	460b      	mov	r3, r1
 8103f20:	4613      	mov	r3, r2
 8103f22:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8103f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103f26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103f2a:	d308      	bcc.n	8103f3e <UART_SetConfig+0x79a>
 8103f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103f32:	d204      	bcs.n	8103f3e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8103f34:	697b      	ldr	r3, [r7, #20]
 8103f36:	681b      	ldr	r3, [r3, #0]
 8103f38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8103f3a:	60da      	str	r2, [r3, #12]
 8103f3c:	e17c      	b.n	8104238 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8103f3e:	2301      	movs	r3, #1
 8103f40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8103f44:	e178      	b.n	8104238 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8103f46:	697b      	ldr	r3, [r7, #20]
 8103f48:	69db      	ldr	r3, [r3, #28]
 8103f4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103f4e:	f040 80c5 	bne.w	81040dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8103f52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8103f56:	2b20      	cmp	r3, #32
 8103f58:	dc48      	bgt.n	8103fec <UART_SetConfig+0x848>
 8103f5a:	2b00      	cmp	r3, #0
 8103f5c:	db7b      	blt.n	8104056 <UART_SetConfig+0x8b2>
 8103f5e:	2b20      	cmp	r3, #32
 8103f60:	d879      	bhi.n	8104056 <UART_SetConfig+0x8b2>
 8103f62:	a201      	add	r2, pc, #4	@ (adr r2, 8103f68 <UART_SetConfig+0x7c4>)
 8103f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f68:	08103ff3 	.word	0x08103ff3
 8103f6c:	08103ffb 	.word	0x08103ffb
 8103f70:	08104057 	.word	0x08104057
 8103f74:	08104057 	.word	0x08104057
 8103f78:	08104003 	.word	0x08104003
 8103f7c:	08104057 	.word	0x08104057
 8103f80:	08104057 	.word	0x08104057
 8103f84:	08104057 	.word	0x08104057
 8103f88:	08104013 	.word	0x08104013
 8103f8c:	08104057 	.word	0x08104057
 8103f90:	08104057 	.word	0x08104057
 8103f94:	08104057 	.word	0x08104057
 8103f98:	08104057 	.word	0x08104057
 8103f9c:	08104057 	.word	0x08104057
 8103fa0:	08104057 	.word	0x08104057
 8103fa4:	08104057 	.word	0x08104057
 8103fa8:	08104023 	.word	0x08104023
 8103fac:	08104057 	.word	0x08104057
 8103fb0:	08104057 	.word	0x08104057
 8103fb4:	08104057 	.word	0x08104057
 8103fb8:	08104057 	.word	0x08104057
 8103fbc:	08104057 	.word	0x08104057
 8103fc0:	08104057 	.word	0x08104057
 8103fc4:	08104057 	.word	0x08104057
 8103fc8:	08104057 	.word	0x08104057
 8103fcc:	08104057 	.word	0x08104057
 8103fd0:	08104057 	.word	0x08104057
 8103fd4:	08104057 	.word	0x08104057
 8103fd8:	08104057 	.word	0x08104057
 8103fdc:	08104057 	.word	0x08104057
 8103fe0:	08104057 	.word	0x08104057
 8103fe4:	08104057 	.word	0x08104057
 8103fe8:	08104049 	.word	0x08104049
 8103fec:	2b40      	cmp	r3, #64	@ 0x40
 8103fee:	d02e      	beq.n	810404e <UART_SetConfig+0x8aa>
 8103ff0:	e031      	b.n	8104056 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103ff2:	f7fd fca1 	bl	8101938 <HAL_RCC_GetPCLK1Freq>
 8103ff6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103ff8:	e033      	b.n	8104062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8103ffa:	f7fd fcb3 	bl	8101964 <HAL_RCC_GetPCLK2Freq>
 8103ffe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104000:	e02f      	b.n	8104062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104006:	4618      	mov	r0, r3
 8104008:	f7fe fee2 	bl	8102dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810400c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810400e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104010:	e027      	b.n	8104062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104012:	f107 0318 	add.w	r3, r7, #24
 8104016:	4618      	mov	r0, r3
 8104018:	f7ff f82e 	bl	8103078 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810401c:	69fb      	ldr	r3, [r7, #28]
 810401e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104020:	e01f      	b.n	8104062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104022:	4b2d      	ldr	r3, [pc, #180]	@ (81040d8 <UART_SetConfig+0x934>)
 8104024:	681b      	ldr	r3, [r3, #0]
 8104026:	f003 0320 	and.w	r3, r3, #32
 810402a:	2b00      	cmp	r3, #0
 810402c:	d009      	beq.n	8104042 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810402e:	4b2a      	ldr	r3, [pc, #168]	@ (81040d8 <UART_SetConfig+0x934>)
 8104030:	681b      	ldr	r3, [r3, #0]
 8104032:	08db      	lsrs	r3, r3, #3
 8104034:	f003 0303 	and.w	r3, r3, #3
 8104038:	4a24      	ldr	r2, [pc, #144]	@ (81040cc <UART_SetConfig+0x928>)
 810403a:	fa22 f303 	lsr.w	r3, r2, r3
 810403e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104040:	e00f      	b.n	8104062 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8104042:	4b22      	ldr	r3, [pc, #136]	@ (81040cc <UART_SetConfig+0x928>)
 8104044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104046:	e00c      	b.n	8104062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8104048:	4b21      	ldr	r3, [pc, #132]	@ (81040d0 <UART_SetConfig+0x92c>)
 810404a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810404c:	e009      	b.n	8104062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810404e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8104052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104054:	e005      	b.n	8104062 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8104056:	2300      	movs	r3, #0
 8104058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810405a:	2301      	movs	r3, #1
 810405c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8104060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8104062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104064:	2b00      	cmp	r3, #0
 8104066:	f000 80e7 	beq.w	8104238 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810406a:	697b      	ldr	r3, [r7, #20]
 810406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810406e:	4a19      	ldr	r2, [pc, #100]	@ (81040d4 <UART_SetConfig+0x930>)
 8104070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104074:	461a      	mov	r2, r3
 8104076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104078:	fbb3 f3f2 	udiv	r3, r3, r2
 810407c:	005a      	lsls	r2, r3, #1
 810407e:	697b      	ldr	r3, [r7, #20]
 8104080:	685b      	ldr	r3, [r3, #4]
 8104082:	085b      	lsrs	r3, r3, #1
 8104084:	441a      	add	r2, r3
 8104086:	697b      	ldr	r3, [r7, #20]
 8104088:	685b      	ldr	r3, [r3, #4]
 810408a:	fbb2 f3f3 	udiv	r3, r2, r3
 810408e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8104090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104092:	2b0f      	cmp	r3, #15
 8104094:	d916      	bls.n	81040c4 <UART_SetConfig+0x920>
 8104096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810409c:	d212      	bcs.n	81040c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810409e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81040a0:	b29b      	uxth	r3, r3
 81040a2:	f023 030f 	bic.w	r3, r3, #15
 81040a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81040a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81040aa:	085b      	lsrs	r3, r3, #1
 81040ac:	b29b      	uxth	r3, r3
 81040ae:	f003 0307 	and.w	r3, r3, #7
 81040b2:	b29a      	uxth	r2, r3
 81040b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 81040b6:	4313      	orrs	r3, r2
 81040b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 81040ba:	697b      	ldr	r3, [r7, #20]
 81040bc:	681b      	ldr	r3, [r3, #0]
 81040be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 81040c0:	60da      	str	r2, [r3, #12]
 81040c2:	e0b9      	b.n	8104238 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81040c4:	2301      	movs	r3, #1
 81040c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 81040ca:	e0b5      	b.n	8104238 <UART_SetConfig+0xa94>
 81040cc:	03d09000 	.word	0x03d09000
 81040d0:	003d0900 	.word	0x003d0900
 81040d4:	08108424 	.word	0x08108424
 81040d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81040dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81040e0:	2b20      	cmp	r3, #32
 81040e2:	dc49      	bgt.n	8104178 <UART_SetConfig+0x9d4>
 81040e4:	2b00      	cmp	r3, #0
 81040e6:	db7c      	blt.n	81041e2 <UART_SetConfig+0xa3e>
 81040e8:	2b20      	cmp	r3, #32
 81040ea:	d87a      	bhi.n	81041e2 <UART_SetConfig+0xa3e>
 81040ec:	a201      	add	r2, pc, #4	@ (adr r2, 81040f4 <UART_SetConfig+0x950>)
 81040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81040f2:	bf00      	nop
 81040f4:	0810417f 	.word	0x0810417f
 81040f8:	08104187 	.word	0x08104187
 81040fc:	081041e3 	.word	0x081041e3
 8104100:	081041e3 	.word	0x081041e3
 8104104:	0810418f 	.word	0x0810418f
 8104108:	081041e3 	.word	0x081041e3
 810410c:	081041e3 	.word	0x081041e3
 8104110:	081041e3 	.word	0x081041e3
 8104114:	0810419f 	.word	0x0810419f
 8104118:	081041e3 	.word	0x081041e3
 810411c:	081041e3 	.word	0x081041e3
 8104120:	081041e3 	.word	0x081041e3
 8104124:	081041e3 	.word	0x081041e3
 8104128:	081041e3 	.word	0x081041e3
 810412c:	081041e3 	.word	0x081041e3
 8104130:	081041e3 	.word	0x081041e3
 8104134:	081041af 	.word	0x081041af
 8104138:	081041e3 	.word	0x081041e3
 810413c:	081041e3 	.word	0x081041e3
 8104140:	081041e3 	.word	0x081041e3
 8104144:	081041e3 	.word	0x081041e3
 8104148:	081041e3 	.word	0x081041e3
 810414c:	081041e3 	.word	0x081041e3
 8104150:	081041e3 	.word	0x081041e3
 8104154:	081041e3 	.word	0x081041e3
 8104158:	081041e3 	.word	0x081041e3
 810415c:	081041e3 	.word	0x081041e3
 8104160:	081041e3 	.word	0x081041e3
 8104164:	081041e3 	.word	0x081041e3
 8104168:	081041e3 	.word	0x081041e3
 810416c:	081041e3 	.word	0x081041e3
 8104170:	081041e3 	.word	0x081041e3
 8104174:	081041d5 	.word	0x081041d5
 8104178:	2b40      	cmp	r3, #64	@ 0x40
 810417a:	d02e      	beq.n	81041da <UART_SetConfig+0xa36>
 810417c:	e031      	b.n	81041e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810417e:	f7fd fbdb 	bl	8101938 <HAL_RCC_GetPCLK1Freq>
 8104182:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104184:	e033      	b.n	81041ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8104186:	f7fd fbed 	bl	8101964 <HAL_RCC_GetPCLK2Freq>
 810418a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810418c:	e02f      	b.n	81041ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810418e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104192:	4618      	mov	r0, r3
 8104194:	f7fe fe1c 	bl	8102dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8104198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810419a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810419c:	e027      	b.n	81041ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810419e:	f107 0318 	add.w	r3, r7, #24
 81041a2:	4618      	mov	r0, r3
 81041a4:	f7fe ff68 	bl	8103078 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81041a8:	69fb      	ldr	r3, [r7, #28]
 81041aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81041ac:	e01f      	b.n	81041ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81041ae:	4b2d      	ldr	r3, [pc, #180]	@ (8104264 <UART_SetConfig+0xac0>)
 81041b0:	681b      	ldr	r3, [r3, #0]
 81041b2:	f003 0320 	and.w	r3, r3, #32
 81041b6:	2b00      	cmp	r3, #0
 81041b8:	d009      	beq.n	81041ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81041ba:	4b2a      	ldr	r3, [pc, #168]	@ (8104264 <UART_SetConfig+0xac0>)
 81041bc:	681b      	ldr	r3, [r3, #0]
 81041be:	08db      	lsrs	r3, r3, #3
 81041c0:	f003 0303 	and.w	r3, r3, #3
 81041c4:	4a28      	ldr	r2, [pc, #160]	@ (8104268 <UART_SetConfig+0xac4>)
 81041c6:	fa22 f303 	lsr.w	r3, r2, r3
 81041ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81041cc:	e00f      	b.n	81041ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81041ce:	4b26      	ldr	r3, [pc, #152]	@ (8104268 <UART_SetConfig+0xac4>)
 81041d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81041d2:	e00c      	b.n	81041ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81041d4:	4b25      	ldr	r3, [pc, #148]	@ (810426c <UART_SetConfig+0xac8>)
 81041d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81041d8:	e009      	b.n	81041ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81041da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81041de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81041e0:	e005      	b.n	81041ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81041e2:	2300      	movs	r3, #0
 81041e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81041e6:	2301      	movs	r3, #1
 81041e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81041ec:	bf00      	nop
    }

    if (pclk != 0U)
 81041ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81041f0:	2b00      	cmp	r3, #0
 81041f2:	d021      	beq.n	8104238 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81041f4:	697b      	ldr	r3, [r7, #20]
 81041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81041f8:	4a1d      	ldr	r2, [pc, #116]	@ (8104270 <UART_SetConfig+0xacc>)
 81041fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81041fe:	461a      	mov	r2, r3
 8104200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104202:	fbb3 f2f2 	udiv	r2, r3, r2
 8104206:	697b      	ldr	r3, [r7, #20]
 8104208:	685b      	ldr	r3, [r3, #4]
 810420a:	085b      	lsrs	r3, r3, #1
 810420c:	441a      	add	r2, r3
 810420e:	697b      	ldr	r3, [r7, #20]
 8104210:	685b      	ldr	r3, [r3, #4]
 8104212:	fbb2 f3f3 	udiv	r3, r2, r3
 8104216:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8104218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810421a:	2b0f      	cmp	r3, #15
 810421c:	d909      	bls.n	8104232 <UART_SetConfig+0xa8e>
 810421e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104224:	d205      	bcs.n	8104232 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8104226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104228:	b29a      	uxth	r2, r3
 810422a:	697b      	ldr	r3, [r7, #20]
 810422c:	681b      	ldr	r3, [r3, #0]
 810422e:	60da      	str	r2, [r3, #12]
 8104230:	e002      	b.n	8104238 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8104232:	2301      	movs	r3, #1
 8104234:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8104238:	697b      	ldr	r3, [r7, #20]
 810423a:	2201      	movs	r2, #1
 810423c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8104240:	697b      	ldr	r3, [r7, #20]
 8104242:	2201      	movs	r2, #1
 8104244:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8104248:	697b      	ldr	r3, [r7, #20]
 810424a:	2200      	movs	r2, #0
 810424c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810424e:	697b      	ldr	r3, [r7, #20]
 8104250:	2200      	movs	r2, #0
 8104252:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8104254:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8104258:	4618      	mov	r0, r3
 810425a:	3748      	adds	r7, #72	@ 0x48
 810425c:	46bd      	mov	sp, r7
 810425e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8104262:	bf00      	nop
 8104264:	58024400 	.word	0x58024400
 8104268:	03d09000 	.word	0x03d09000
 810426c:	003d0900 	.word	0x003d0900
 8104270:	08108424 	.word	0x08108424

08104274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8104274:	b480      	push	{r7}
 8104276:	b083      	sub	sp, #12
 8104278:	af00      	add	r7, sp, #0
 810427a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104280:	f003 0308 	and.w	r3, r3, #8
 8104284:	2b00      	cmp	r3, #0
 8104286:	d00a      	beq.n	810429e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8104288:	687b      	ldr	r3, [r7, #4]
 810428a:	681b      	ldr	r3, [r3, #0]
 810428c:	685b      	ldr	r3, [r3, #4]
 810428e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	681b      	ldr	r3, [r3, #0]
 810429a:	430a      	orrs	r2, r1
 810429c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810429e:	687b      	ldr	r3, [r7, #4]
 81042a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81042a2:	f003 0301 	and.w	r3, r3, #1
 81042a6:	2b00      	cmp	r3, #0
 81042a8:	d00a      	beq.n	81042c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	681b      	ldr	r3, [r3, #0]
 81042ae:	685b      	ldr	r3, [r3, #4]
 81042b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	681b      	ldr	r3, [r3, #0]
 81042bc:	430a      	orrs	r2, r1
 81042be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81042c0:	687b      	ldr	r3, [r7, #4]
 81042c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81042c4:	f003 0302 	and.w	r3, r3, #2
 81042c8:	2b00      	cmp	r3, #0
 81042ca:	d00a      	beq.n	81042e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81042cc:	687b      	ldr	r3, [r7, #4]
 81042ce:	681b      	ldr	r3, [r3, #0]
 81042d0:	685b      	ldr	r3, [r3, #4]
 81042d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81042da:	687b      	ldr	r3, [r7, #4]
 81042dc:	681b      	ldr	r3, [r3, #0]
 81042de:	430a      	orrs	r2, r1
 81042e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81042e6:	f003 0304 	and.w	r3, r3, #4
 81042ea:	2b00      	cmp	r3, #0
 81042ec:	d00a      	beq.n	8104304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	681b      	ldr	r3, [r3, #0]
 81042f2:	685b      	ldr	r3, [r3, #4]
 81042f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81042fc:	687b      	ldr	r3, [r7, #4]
 81042fe:	681b      	ldr	r3, [r3, #0]
 8104300:	430a      	orrs	r2, r1
 8104302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8104304:	687b      	ldr	r3, [r7, #4]
 8104306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104308:	f003 0310 	and.w	r3, r3, #16
 810430c:	2b00      	cmp	r3, #0
 810430e:	d00a      	beq.n	8104326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8104310:	687b      	ldr	r3, [r7, #4]
 8104312:	681b      	ldr	r3, [r3, #0]
 8104314:	689b      	ldr	r3, [r3, #8]
 8104316:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810431a:	687b      	ldr	r3, [r7, #4]
 810431c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	681b      	ldr	r3, [r3, #0]
 8104322:	430a      	orrs	r2, r1
 8104324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8104326:	687b      	ldr	r3, [r7, #4]
 8104328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810432a:	f003 0320 	and.w	r3, r3, #32
 810432e:	2b00      	cmp	r3, #0
 8104330:	d00a      	beq.n	8104348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8104332:	687b      	ldr	r3, [r7, #4]
 8104334:	681b      	ldr	r3, [r3, #0]
 8104336:	689b      	ldr	r3, [r3, #8]
 8104338:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8104340:	687b      	ldr	r3, [r7, #4]
 8104342:	681b      	ldr	r3, [r3, #0]
 8104344:	430a      	orrs	r2, r1
 8104346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8104348:	687b      	ldr	r3, [r7, #4]
 810434a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810434c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104350:	2b00      	cmp	r3, #0
 8104352:	d01a      	beq.n	810438a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	681b      	ldr	r3, [r3, #0]
 8104358:	685b      	ldr	r3, [r3, #4]
 810435a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	681b      	ldr	r3, [r3, #0]
 8104366:	430a      	orrs	r2, r1
 8104368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810436e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104372:	d10a      	bne.n	810438a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	681b      	ldr	r3, [r3, #0]
 8104378:	685b      	ldr	r3, [r3, #4]
 810437a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810437e:	687b      	ldr	r3, [r7, #4]
 8104380:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8104382:	687b      	ldr	r3, [r7, #4]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	430a      	orrs	r2, r1
 8104388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810438a:	687b      	ldr	r3, [r7, #4]
 810438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810438e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104392:	2b00      	cmp	r3, #0
 8104394:	d00a      	beq.n	81043ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	681b      	ldr	r3, [r3, #0]
 810439a:	685b      	ldr	r3, [r3, #4]
 810439c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81043a4:	687b      	ldr	r3, [r7, #4]
 81043a6:	681b      	ldr	r3, [r3, #0]
 81043a8:	430a      	orrs	r2, r1
 81043aa:	605a      	str	r2, [r3, #4]
  }
}
 81043ac:	bf00      	nop
 81043ae:	370c      	adds	r7, #12
 81043b0:	46bd      	mov	sp, r7
 81043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043b6:	4770      	bx	lr

081043b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81043b8:	b580      	push	{r7, lr}
 81043ba:	b098      	sub	sp, #96	@ 0x60
 81043bc:	af02      	add	r7, sp, #8
 81043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	2200      	movs	r2, #0
 81043c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81043c8:	f7fc fd2e 	bl	8100e28 <HAL_GetTick>
 81043cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81043ce:	687b      	ldr	r3, [r7, #4]
 81043d0:	681b      	ldr	r3, [r3, #0]
 81043d2:	681b      	ldr	r3, [r3, #0]
 81043d4:	f003 0308 	and.w	r3, r3, #8
 81043d8:	2b08      	cmp	r3, #8
 81043da:	d12f      	bne.n	810443c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81043dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 81043e0:	9300      	str	r3, [sp, #0]
 81043e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81043e4:	2200      	movs	r2, #0
 81043e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 81043ea:	6878      	ldr	r0, [r7, #4]
 81043ec:	f000 f88e 	bl	810450c <UART_WaitOnFlagUntilTimeout>
 81043f0:	4603      	mov	r3, r0
 81043f2:	2b00      	cmp	r3, #0
 81043f4:	d022      	beq.n	810443c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 81043f6:	687b      	ldr	r3, [r7, #4]
 81043f8:	681b      	ldr	r3, [r3, #0]
 81043fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81043fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81043fe:	e853 3f00 	ldrex	r3, [r3]
 8104402:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8104404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810440a:	653b      	str	r3, [r7, #80]	@ 0x50
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	681b      	ldr	r3, [r3, #0]
 8104410:	461a      	mov	r2, r3
 8104412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104414:	647b      	str	r3, [r7, #68]	@ 0x44
 8104416:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104418:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810441a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810441c:	e841 2300 	strex	r3, r2, [r1]
 8104420:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8104422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104424:	2b00      	cmp	r3, #0
 8104426:	d1e6      	bne.n	81043f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8104428:	687b      	ldr	r3, [r7, #4]
 810442a:	2220      	movs	r2, #32
 810442c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	2200      	movs	r2, #0
 8104434:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8104438:	2303      	movs	r3, #3
 810443a:	e063      	b.n	8104504 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810443c:	687b      	ldr	r3, [r7, #4]
 810443e:	681b      	ldr	r3, [r3, #0]
 8104440:	681b      	ldr	r3, [r3, #0]
 8104442:	f003 0304 	and.w	r3, r3, #4
 8104446:	2b04      	cmp	r3, #4
 8104448:	d149      	bne.n	81044de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810444a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810444e:	9300      	str	r3, [sp, #0]
 8104450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8104452:	2200      	movs	r2, #0
 8104454:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8104458:	6878      	ldr	r0, [r7, #4]
 810445a:	f000 f857 	bl	810450c <UART_WaitOnFlagUntilTimeout>
 810445e:	4603      	mov	r3, r0
 8104460:	2b00      	cmp	r3, #0
 8104462:	d03c      	beq.n	81044de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8104464:	687b      	ldr	r3, [r7, #4]
 8104466:	681b      	ldr	r3, [r3, #0]
 8104468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810446c:	e853 3f00 	ldrex	r3, [r3]
 8104470:	623b      	str	r3, [r7, #32]
   return(result);
 8104472:	6a3b      	ldr	r3, [r7, #32]
 8104474:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8104478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	681b      	ldr	r3, [r3, #0]
 810447e:	461a      	mov	r2, r3
 8104480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8104482:	633b      	str	r3, [r7, #48]	@ 0x30
 8104484:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8104488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810448a:	e841 2300 	strex	r3, r2, [r1]
 810448e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8104490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104492:	2b00      	cmp	r3, #0
 8104494:	d1e6      	bne.n	8104464 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8104496:	687b      	ldr	r3, [r7, #4]
 8104498:	681b      	ldr	r3, [r3, #0]
 810449a:	3308      	adds	r3, #8
 810449c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810449e:	693b      	ldr	r3, [r7, #16]
 81044a0:	e853 3f00 	ldrex	r3, [r3]
 81044a4:	60fb      	str	r3, [r7, #12]
   return(result);
 81044a6:	68fb      	ldr	r3, [r7, #12]
 81044a8:	f023 0301 	bic.w	r3, r3, #1
 81044ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 81044ae:	687b      	ldr	r3, [r7, #4]
 81044b0:	681b      	ldr	r3, [r3, #0]
 81044b2:	3308      	adds	r3, #8
 81044b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81044b6:	61fa      	str	r2, [r7, #28]
 81044b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81044ba:	69b9      	ldr	r1, [r7, #24]
 81044bc:	69fa      	ldr	r2, [r7, #28]
 81044be:	e841 2300 	strex	r3, r2, [r1]
 81044c2:	617b      	str	r3, [r7, #20]
   return(result);
 81044c4:	697b      	ldr	r3, [r7, #20]
 81044c6:	2b00      	cmp	r3, #0
 81044c8:	d1e5      	bne.n	8104496 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 81044ca:	687b      	ldr	r3, [r7, #4]
 81044cc:	2220      	movs	r2, #32
 81044ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 81044d2:	687b      	ldr	r3, [r7, #4]
 81044d4:	2200      	movs	r2, #0
 81044d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81044da:	2303      	movs	r3, #3
 81044dc:	e012      	b.n	8104504 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81044de:	687b      	ldr	r3, [r7, #4]
 81044e0:	2220      	movs	r2, #32
 81044e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 81044e6:	687b      	ldr	r3, [r7, #4]
 81044e8:	2220      	movs	r2, #32
 81044ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81044ee:	687b      	ldr	r3, [r7, #4]
 81044f0:	2200      	movs	r2, #0
 81044f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81044f4:	687b      	ldr	r3, [r7, #4]
 81044f6:	2200      	movs	r2, #0
 81044f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	2200      	movs	r2, #0
 81044fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104502:	2300      	movs	r3, #0
}
 8104504:	4618      	mov	r0, r3
 8104506:	3758      	adds	r7, #88	@ 0x58
 8104508:	46bd      	mov	sp, r7
 810450a:	bd80      	pop	{r7, pc}

0810450c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810450c:	b580      	push	{r7, lr}
 810450e:	b084      	sub	sp, #16
 8104510:	af00      	add	r7, sp, #0
 8104512:	60f8      	str	r0, [r7, #12]
 8104514:	60b9      	str	r1, [r7, #8]
 8104516:	603b      	str	r3, [r7, #0]
 8104518:	4613      	mov	r3, r2
 810451a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810451c:	e04f      	b.n	81045be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810451e:	69bb      	ldr	r3, [r7, #24]
 8104520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104524:	d04b      	beq.n	81045be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104526:	f7fc fc7f 	bl	8100e28 <HAL_GetTick>
 810452a:	4602      	mov	r2, r0
 810452c:	683b      	ldr	r3, [r7, #0]
 810452e:	1ad3      	subs	r3, r2, r3
 8104530:	69ba      	ldr	r2, [r7, #24]
 8104532:	429a      	cmp	r2, r3
 8104534:	d302      	bcc.n	810453c <UART_WaitOnFlagUntilTimeout+0x30>
 8104536:	69bb      	ldr	r3, [r7, #24]
 8104538:	2b00      	cmp	r3, #0
 810453a:	d101      	bne.n	8104540 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810453c:	2303      	movs	r3, #3
 810453e:	e04e      	b.n	81045de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8104540:	68fb      	ldr	r3, [r7, #12]
 8104542:	681b      	ldr	r3, [r3, #0]
 8104544:	681b      	ldr	r3, [r3, #0]
 8104546:	f003 0304 	and.w	r3, r3, #4
 810454a:	2b00      	cmp	r3, #0
 810454c:	d037      	beq.n	81045be <UART_WaitOnFlagUntilTimeout+0xb2>
 810454e:	68bb      	ldr	r3, [r7, #8]
 8104550:	2b80      	cmp	r3, #128	@ 0x80
 8104552:	d034      	beq.n	81045be <UART_WaitOnFlagUntilTimeout+0xb2>
 8104554:	68bb      	ldr	r3, [r7, #8]
 8104556:	2b40      	cmp	r3, #64	@ 0x40
 8104558:	d031      	beq.n	81045be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810455a:	68fb      	ldr	r3, [r7, #12]
 810455c:	681b      	ldr	r3, [r3, #0]
 810455e:	69db      	ldr	r3, [r3, #28]
 8104560:	f003 0308 	and.w	r3, r3, #8
 8104564:	2b08      	cmp	r3, #8
 8104566:	d110      	bne.n	810458a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8104568:	68fb      	ldr	r3, [r7, #12]
 810456a:	681b      	ldr	r3, [r3, #0]
 810456c:	2208      	movs	r2, #8
 810456e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8104570:	68f8      	ldr	r0, [r7, #12]
 8104572:	f000 f838 	bl	81045e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8104576:	68fb      	ldr	r3, [r7, #12]
 8104578:	2208      	movs	r2, #8
 810457a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810457e:	68fb      	ldr	r3, [r7, #12]
 8104580:	2200      	movs	r2, #0
 8104582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8104586:	2301      	movs	r3, #1
 8104588:	e029      	b.n	81045de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810458a:	68fb      	ldr	r3, [r7, #12]
 810458c:	681b      	ldr	r3, [r3, #0]
 810458e:	69db      	ldr	r3, [r3, #28]
 8104590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8104594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104598:	d111      	bne.n	81045be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810459a:	68fb      	ldr	r3, [r7, #12]
 810459c:	681b      	ldr	r3, [r3, #0]
 810459e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81045a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81045a4:	68f8      	ldr	r0, [r7, #12]
 81045a6:	f000 f81e 	bl	81045e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81045aa:	68fb      	ldr	r3, [r7, #12]
 81045ac:	2220      	movs	r2, #32
 81045ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81045b2:	68fb      	ldr	r3, [r7, #12]
 81045b4:	2200      	movs	r2, #0
 81045b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 81045ba:	2303      	movs	r3, #3
 81045bc:	e00f      	b.n	81045de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81045be:	68fb      	ldr	r3, [r7, #12]
 81045c0:	681b      	ldr	r3, [r3, #0]
 81045c2:	69da      	ldr	r2, [r3, #28]
 81045c4:	68bb      	ldr	r3, [r7, #8]
 81045c6:	4013      	ands	r3, r2
 81045c8:	68ba      	ldr	r2, [r7, #8]
 81045ca:	429a      	cmp	r2, r3
 81045cc:	bf0c      	ite	eq
 81045ce:	2301      	moveq	r3, #1
 81045d0:	2300      	movne	r3, #0
 81045d2:	b2db      	uxtb	r3, r3
 81045d4:	461a      	mov	r2, r3
 81045d6:	79fb      	ldrb	r3, [r7, #7]
 81045d8:	429a      	cmp	r2, r3
 81045da:	d0a0      	beq.n	810451e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81045dc:	2300      	movs	r3, #0
}
 81045de:	4618      	mov	r0, r3
 81045e0:	3710      	adds	r7, #16
 81045e2:	46bd      	mov	sp, r7
 81045e4:	bd80      	pop	{r7, pc}

081045e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81045e6:	b480      	push	{r7}
 81045e8:	b095      	sub	sp, #84	@ 0x54
 81045ea:	af00      	add	r7, sp, #0
 81045ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81045ee:	687b      	ldr	r3, [r7, #4]
 81045f0:	681b      	ldr	r3, [r3, #0]
 81045f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81045f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81045f6:	e853 3f00 	ldrex	r3, [r3]
 81045fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81045fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81045fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8104602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	681b      	ldr	r3, [r3, #0]
 8104608:	461a      	mov	r2, r3
 810460a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810460c:	643b      	str	r3, [r7, #64]	@ 0x40
 810460e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104610:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8104612:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8104614:	e841 2300 	strex	r3, r2, [r1]
 8104618:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810461a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810461c:	2b00      	cmp	r3, #0
 810461e:	d1e6      	bne.n	81045ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8104620:	687b      	ldr	r3, [r7, #4]
 8104622:	681b      	ldr	r3, [r3, #0]
 8104624:	3308      	adds	r3, #8
 8104626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104628:	6a3b      	ldr	r3, [r7, #32]
 810462a:	e853 3f00 	ldrex	r3, [r3]
 810462e:	61fb      	str	r3, [r7, #28]
   return(result);
 8104630:	69fb      	ldr	r3, [r7, #28]
 8104632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8104636:	f023 0301 	bic.w	r3, r3, #1
 810463a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	681b      	ldr	r3, [r3, #0]
 8104640:	3308      	adds	r3, #8
 8104642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8104644:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8104646:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810464a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810464c:	e841 2300 	strex	r3, r2, [r1]
 8104650:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8104652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104654:	2b00      	cmp	r3, #0
 8104656:	d1e3      	bne.n	8104620 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8104658:	687b      	ldr	r3, [r7, #4]
 810465a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810465c:	2b01      	cmp	r3, #1
 810465e:	d118      	bne.n	8104692 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	681b      	ldr	r3, [r3, #0]
 8104664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104666:	68fb      	ldr	r3, [r7, #12]
 8104668:	e853 3f00 	ldrex	r3, [r3]
 810466c:	60bb      	str	r3, [r7, #8]
   return(result);
 810466e:	68bb      	ldr	r3, [r7, #8]
 8104670:	f023 0310 	bic.w	r3, r3, #16
 8104674:	647b      	str	r3, [r7, #68]	@ 0x44
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	681b      	ldr	r3, [r3, #0]
 810467a:	461a      	mov	r2, r3
 810467c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810467e:	61bb      	str	r3, [r7, #24]
 8104680:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104682:	6979      	ldr	r1, [r7, #20]
 8104684:	69ba      	ldr	r2, [r7, #24]
 8104686:	e841 2300 	strex	r3, r2, [r1]
 810468a:	613b      	str	r3, [r7, #16]
   return(result);
 810468c:	693b      	ldr	r3, [r7, #16]
 810468e:	2b00      	cmp	r3, #0
 8104690:	d1e6      	bne.n	8104660 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8104692:	687b      	ldr	r3, [r7, #4]
 8104694:	2220      	movs	r2, #32
 8104696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	2200      	movs	r2, #0
 810469e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 81046a0:	687b      	ldr	r3, [r7, #4]
 81046a2:	2200      	movs	r2, #0
 81046a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 81046a6:	bf00      	nop
 81046a8:	3754      	adds	r7, #84	@ 0x54
 81046aa:	46bd      	mov	sp, r7
 81046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046b0:	4770      	bx	lr

081046b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81046b2:	b480      	push	{r7}
 81046b4:	b085      	sub	sp, #20
 81046b6:	af00      	add	r7, sp, #0
 81046b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81046c0:	2b01      	cmp	r3, #1
 81046c2:	d101      	bne.n	81046c8 <HAL_UARTEx_DisableFifoMode+0x16>
 81046c4:	2302      	movs	r3, #2
 81046c6:	e027      	b.n	8104718 <HAL_UARTEx_DisableFifoMode+0x66>
 81046c8:	687b      	ldr	r3, [r7, #4]
 81046ca:	2201      	movs	r2, #1
 81046cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81046d0:	687b      	ldr	r3, [r7, #4]
 81046d2:	2224      	movs	r2, #36	@ 0x24
 81046d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81046d8:	687b      	ldr	r3, [r7, #4]
 81046da:	681b      	ldr	r3, [r3, #0]
 81046dc:	681b      	ldr	r3, [r3, #0]
 81046de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	681b      	ldr	r3, [r3, #0]
 81046e4:	681a      	ldr	r2, [r3, #0]
 81046e6:	687b      	ldr	r3, [r7, #4]
 81046e8:	681b      	ldr	r3, [r3, #0]
 81046ea:	f022 0201 	bic.w	r2, r2, #1
 81046ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81046f0:	68fb      	ldr	r3, [r7, #12]
 81046f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 81046f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81046f8:	687b      	ldr	r3, [r7, #4]
 81046fa:	2200      	movs	r2, #0
 81046fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	68fa      	ldr	r2, [r7, #12]
 8104704:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	2220      	movs	r2, #32
 810470a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810470e:	687b      	ldr	r3, [r7, #4]
 8104710:	2200      	movs	r2, #0
 8104712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104716:	2300      	movs	r3, #0
}
 8104718:	4618      	mov	r0, r3
 810471a:	3714      	adds	r7, #20
 810471c:	46bd      	mov	sp, r7
 810471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104722:	4770      	bx	lr

08104724 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8104724:	b580      	push	{r7, lr}
 8104726:	b084      	sub	sp, #16
 8104728:	af00      	add	r7, sp, #0
 810472a:	6078      	str	r0, [r7, #4]
 810472c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8104734:	2b01      	cmp	r3, #1
 8104736:	d101      	bne.n	810473c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8104738:	2302      	movs	r3, #2
 810473a:	e02d      	b.n	8104798 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810473c:	687b      	ldr	r3, [r7, #4]
 810473e:	2201      	movs	r2, #1
 8104740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	2224      	movs	r2, #36	@ 0x24
 8104748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810474c:	687b      	ldr	r3, [r7, #4]
 810474e:	681b      	ldr	r3, [r3, #0]
 8104750:	681b      	ldr	r3, [r3, #0]
 8104752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104754:	687b      	ldr	r3, [r7, #4]
 8104756:	681b      	ldr	r3, [r3, #0]
 8104758:	681a      	ldr	r2, [r3, #0]
 810475a:	687b      	ldr	r3, [r7, #4]
 810475c:	681b      	ldr	r3, [r3, #0]
 810475e:	f022 0201 	bic.w	r2, r2, #1
 8104762:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8104764:	687b      	ldr	r3, [r7, #4]
 8104766:	681b      	ldr	r3, [r3, #0]
 8104768:	689b      	ldr	r3, [r3, #8]
 810476a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	683a      	ldr	r2, [r7, #0]
 8104774:	430a      	orrs	r2, r1
 8104776:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8104778:	6878      	ldr	r0, [r7, #4]
 810477a:	f000 f84f 	bl	810481c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810477e:	687b      	ldr	r3, [r7, #4]
 8104780:	681b      	ldr	r3, [r3, #0]
 8104782:	68fa      	ldr	r2, [r7, #12]
 8104784:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8104786:	687b      	ldr	r3, [r7, #4]
 8104788:	2220      	movs	r2, #32
 810478a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810478e:	687b      	ldr	r3, [r7, #4]
 8104790:	2200      	movs	r2, #0
 8104792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104796:	2300      	movs	r3, #0
}
 8104798:	4618      	mov	r0, r3
 810479a:	3710      	adds	r7, #16
 810479c:	46bd      	mov	sp, r7
 810479e:	bd80      	pop	{r7, pc}

081047a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81047a0:	b580      	push	{r7, lr}
 81047a2:	b084      	sub	sp, #16
 81047a4:	af00      	add	r7, sp, #0
 81047a6:	6078      	str	r0, [r7, #4]
 81047a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81047aa:	687b      	ldr	r3, [r7, #4]
 81047ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81047b0:	2b01      	cmp	r3, #1
 81047b2:	d101      	bne.n	81047b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81047b4:	2302      	movs	r3, #2
 81047b6:	e02d      	b.n	8104814 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81047b8:	687b      	ldr	r3, [r7, #4]
 81047ba:	2201      	movs	r2, #1
 81047bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81047c0:	687b      	ldr	r3, [r7, #4]
 81047c2:	2224      	movs	r2, #36	@ 0x24
 81047c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	681b      	ldr	r3, [r3, #0]
 81047cc:	681b      	ldr	r3, [r3, #0]
 81047ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81047d0:	687b      	ldr	r3, [r7, #4]
 81047d2:	681b      	ldr	r3, [r3, #0]
 81047d4:	681a      	ldr	r2, [r3, #0]
 81047d6:	687b      	ldr	r3, [r7, #4]
 81047d8:	681b      	ldr	r3, [r3, #0]
 81047da:	f022 0201 	bic.w	r2, r2, #1
 81047de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81047e0:	687b      	ldr	r3, [r7, #4]
 81047e2:	681b      	ldr	r3, [r3, #0]
 81047e4:	689b      	ldr	r3, [r3, #8]
 81047e6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 81047ea:	687b      	ldr	r3, [r7, #4]
 81047ec:	681b      	ldr	r3, [r3, #0]
 81047ee:	683a      	ldr	r2, [r7, #0]
 81047f0:	430a      	orrs	r2, r1
 81047f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81047f4:	6878      	ldr	r0, [r7, #4]
 81047f6:	f000 f811 	bl	810481c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	681b      	ldr	r3, [r3, #0]
 81047fe:	68fa      	ldr	r2, [r7, #12]
 8104800:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	2220      	movs	r2, #32
 8104806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810480a:	687b      	ldr	r3, [r7, #4]
 810480c:	2200      	movs	r2, #0
 810480e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104812:	2300      	movs	r3, #0
}
 8104814:	4618      	mov	r0, r3
 8104816:	3710      	adds	r7, #16
 8104818:	46bd      	mov	sp, r7
 810481a:	bd80      	pop	{r7, pc}

0810481c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810481c:	b480      	push	{r7}
 810481e:	b085      	sub	sp, #20
 8104820:	af00      	add	r7, sp, #0
 8104822:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104828:	2b00      	cmp	r3, #0
 810482a:	d108      	bne.n	810483e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810482c:	687b      	ldr	r3, [r7, #4]
 810482e:	2201      	movs	r2, #1
 8104830:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8104834:	687b      	ldr	r3, [r7, #4]
 8104836:	2201      	movs	r2, #1
 8104838:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810483c:	e031      	b.n	81048a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810483e:	2310      	movs	r3, #16
 8104840:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8104842:	2310      	movs	r3, #16
 8104844:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8104846:	687b      	ldr	r3, [r7, #4]
 8104848:	681b      	ldr	r3, [r3, #0]
 810484a:	689b      	ldr	r3, [r3, #8]
 810484c:	0e5b      	lsrs	r3, r3, #25
 810484e:	b2db      	uxtb	r3, r3
 8104850:	f003 0307 	and.w	r3, r3, #7
 8104854:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	681b      	ldr	r3, [r3, #0]
 810485a:	689b      	ldr	r3, [r3, #8]
 810485c:	0f5b      	lsrs	r3, r3, #29
 810485e:	b2db      	uxtb	r3, r3
 8104860:	f003 0307 	and.w	r3, r3, #7
 8104864:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8104866:	7bbb      	ldrb	r3, [r7, #14]
 8104868:	7b3a      	ldrb	r2, [r7, #12]
 810486a:	4911      	ldr	r1, [pc, #68]	@ (81048b0 <UARTEx_SetNbDataToProcess+0x94>)
 810486c:	5c8a      	ldrb	r2, [r1, r2]
 810486e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8104872:	7b3a      	ldrb	r2, [r7, #12]
 8104874:	490f      	ldr	r1, [pc, #60]	@ (81048b4 <UARTEx_SetNbDataToProcess+0x98>)
 8104876:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8104878:	fb93 f3f2 	sdiv	r3, r3, r2
 810487c:	b29a      	uxth	r2, r3
 810487e:	687b      	ldr	r3, [r7, #4]
 8104880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8104884:	7bfb      	ldrb	r3, [r7, #15]
 8104886:	7b7a      	ldrb	r2, [r7, #13]
 8104888:	4909      	ldr	r1, [pc, #36]	@ (81048b0 <UARTEx_SetNbDataToProcess+0x94>)
 810488a:	5c8a      	ldrb	r2, [r1, r2]
 810488c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8104890:	7b7a      	ldrb	r2, [r7, #13]
 8104892:	4908      	ldr	r1, [pc, #32]	@ (81048b4 <UARTEx_SetNbDataToProcess+0x98>)
 8104894:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8104896:	fb93 f3f2 	sdiv	r3, r3, r2
 810489a:	b29a      	uxth	r2, r3
 810489c:	687b      	ldr	r3, [r7, #4]
 810489e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 81048a2:	bf00      	nop
 81048a4:	3714      	adds	r7, #20
 81048a6:	46bd      	mov	sp, r7
 81048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048ac:	4770      	bx	lr
 81048ae:	bf00      	nop
 81048b0:	0810843c 	.word	0x0810843c
 81048b4:	08108444 	.word	0x08108444

081048b8 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 81048b8:	b480      	push	{r7}
 81048ba:	b083      	sub	sp, #12
 81048bc:	af00      	add	r7, sp, #0
 81048be:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 81048c0:	687b      	ldr	r3, [r7, #4]
 81048c2:	687a      	ldr	r2, [r7, #4]
 81048c4:	605a      	str	r2, [r3, #4]
 81048c6:	687b      	ldr	r3, [r7, #4]
 81048c8:	685a      	ldr	r2, [r3, #4]
 81048ca:	687b      	ldr	r3, [r7, #4]
 81048cc:	601a      	str	r2, [r3, #0]
}
 81048ce:	bf00      	nop
 81048d0:	370c      	adds	r7, #12
 81048d2:	46bd      	mov	sp, r7
 81048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048d8:	4770      	bx	lr

081048da <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 81048da:	b480      	push	{r7}
 81048dc:	b083      	sub	sp, #12
 81048de:	af00      	add	r7, sp, #0
 81048e0:	6078      	str	r0, [r7, #4]
 81048e2:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 81048e4:	687b      	ldr	r3, [r7, #4]
 81048e6:	685a      	ldr	r2, [r3, #4]
 81048e8:	683b      	ldr	r3, [r7, #0]
 81048ea:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 81048ec:	683b      	ldr	r3, [r7, #0]
 81048ee:	687a      	ldr	r2, [r7, #4]
 81048f0:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 81048f2:	683b      	ldr	r3, [r7, #0]
 81048f4:	681b      	ldr	r3, [r3, #0]
 81048f6:	683a      	ldr	r2, [r7, #0]
 81048f8:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 81048fa:	683b      	ldr	r3, [r7, #0]
 81048fc:	685b      	ldr	r3, [r3, #4]
 81048fe:	683a      	ldr	r2, [r7, #0]
 8104900:	601a      	str	r2, [r3, #0]
}
 8104902:	bf00      	nop
 8104904:	370c      	adds	r7, #12
 8104906:	46bd      	mov	sp, r7
 8104908:	f85d 7b04 	ldr.w	r7, [sp], #4
 810490c:	4770      	bx	lr

0810490e <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 810490e:	b580      	push	{r7, lr}
 8104910:	b082      	sub	sp, #8
 8104912:	af00      	add	r7, sp, #0
 8104914:	6078      	str	r0, [r7, #4]
 8104916:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8104918:	6839      	ldr	r1, [r7, #0]
 810491a:	6878      	ldr	r0, [r7, #4]
 810491c:	f7ff ffdd 	bl	81048da <metal_list_add_before>
}
 8104920:	bf00      	nop
 8104922:	3708      	adds	r7, #8
 8104924:	46bd      	mov	sp, r7
 8104926:	bd80      	pop	{r7, pc}

08104928 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8104928:	b580      	push	{r7, lr}
 810492a:	b082      	sub	sp, #8
 810492c:	af00      	add	r7, sp, #0
 810492e:	6078      	str	r0, [r7, #4]
 8104930:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8104932:	6839      	ldr	r1, [r7, #0]
 8104934:	6878      	ldr	r0, [r7, #4]
 8104936:	f001 fdbf 	bl	81064b8 <metal_machine_cache_flush>
}
 810493a:	bf00      	nop
 810493c:	3708      	adds	r7, #8
 810493e:	46bd      	mov	sp, r7
 8104940:	bd80      	pop	{r7, pc}

08104942 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8104942:	b580      	push	{r7, lr}
 8104944:	b082      	sub	sp, #8
 8104946:	af00      	add	r7, sp, #0
 8104948:	6078      	str	r0, [r7, #4]
 810494a:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 810494c:	6839      	ldr	r1, [r7, #0]
 810494e:	6878      	ldr	r0, [r7, #4]
 8104950:	f001 fdbd 	bl	81064ce <metal_machine_cache_invalidate>
}
 8104954:	bf00      	nop
 8104956:	3708      	adds	r7, #8
 8104958:	46bd      	mov	sp, r7
 810495a:	bd80      	pop	{r7, pc}

0810495c <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 810495c:	b580      	push	{r7, lr}
 810495e:	b082      	sub	sp, #8
 8104960:	af00      	add	r7, sp, #0
 8104962:	6078      	str	r0, [r7, #4]
 8104964:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8104966:	6839      	ldr	r1, [r7, #0]
 8104968:	6878      	ldr	r0, [r7, #4]
 810496a:	f7ff ffdd 	bl	8104928 <__metal_cache_flush>
}
 810496e:	bf00      	nop
 8104970:	3708      	adds	r7, #8
 8104972:	46bd      	mov	sp, r7
 8104974:	bd80      	pop	{r7, pc}

08104976 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8104976:	b580      	push	{r7, lr}
 8104978:	b082      	sub	sp, #8
 810497a:	af00      	add	r7, sp, #0
 810497c:	6078      	str	r0, [r7, #4]
 810497e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8104980:	6839      	ldr	r1, [r7, #0]
 8104982:	6878      	ldr	r0, [r7, #4]
 8104984:	f7ff ffdd 	bl	8104942 <__metal_cache_invalidate>
}
 8104988:	bf00      	nop
 810498a:	3708      	adds	r7, #8
 810498c:	46bd      	mov	sp, r7
 810498e:	bd80      	pop	{r7, pc}

08104990 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8104990:	b580      	push	{r7, lr}
 8104992:	b082      	sub	sp, #8
 8104994:	af00      	add	r7, sp, #0
 8104996:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8104998:	687b      	ldr	r3, [r7, #4]
 810499a:	2b00      	cmp	r3, #0
 810499c:	d008      	beq.n	81049b0 <metal_bus_register+0x20>
 810499e:	687b      	ldr	r3, [r7, #4]
 81049a0:	681b      	ldr	r3, [r3, #0]
 81049a2:	2b00      	cmp	r3, #0
 81049a4:	d004      	beq.n	81049b0 <metal_bus_register+0x20>
 81049a6:	687b      	ldr	r3, [r7, #4]
 81049a8:	681b      	ldr	r3, [r3, #0]
 81049aa:	781b      	ldrb	r3, [r3, #0]
 81049ac:	2b00      	cmp	r3, #0
 81049ae:	d102      	bne.n	81049b6 <metal_bus_register+0x26>
		return -EINVAL;
 81049b0:	f06f 0315 	mvn.w	r3, #21
 81049b4:	e026      	b.n	8104a04 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 81049b6:	687b      	ldr	r3, [r7, #4]
 81049b8:	681b      	ldr	r3, [r3, #0]
 81049ba:	2100      	movs	r1, #0
 81049bc:	4618      	mov	r0, r3
 81049be:	f000 f82b 	bl	8104a18 <metal_bus_find>
 81049c2:	4603      	mov	r3, r0
 81049c4:	2b00      	cmp	r3, #0
 81049c6:	d102      	bne.n	81049ce <metal_bus_register+0x3e>
		return -EEXIST;
 81049c8:	f06f 0310 	mvn.w	r3, #16
 81049cc:	e01a      	b.n	8104a04 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 81049ce:	687b      	ldr	r3, [r7, #4]
 81049d0:	331c      	adds	r3, #28
 81049d2:	4618      	mov	r0, r3
 81049d4:	f7ff ff70 	bl	81048b8 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 81049d8:	687b      	ldr	r3, [r7, #4]
 81049da:	3324      	adds	r3, #36	@ 0x24
 81049dc:	4619      	mov	r1, r3
 81049de:	480b      	ldr	r0, [pc, #44]	@ (8104a0c <metal_bus_register+0x7c>)
 81049e0:	f7ff ff95 	bl	810490e <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 81049e4:	4b0a      	ldr	r3, [pc, #40]	@ (8104a10 <metal_bus_register+0x80>)
 81049e6:	781b      	ldrb	r3, [r3, #0]
 81049e8:	2b06      	cmp	r3, #6
 81049ea:	d90a      	bls.n	8104a02 <metal_bus_register+0x72>
 81049ec:	4b08      	ldr	r3, [pc, #32]	@ (8104a10 <metal_bus_register+0x80>)
 81049ee:	685b      	ldr	r3, [r3, #4]
 81049f0:	2b00      	cmp	r3, #0
 81049f2:	d006      	beq.n	8104a02 <metal_bus_register+0x72>
 81049f4:	4b06      	ldr	r3, [pc, #24]	@ (8104a10 <metal_bus_register+0x80>)
 81049f6:	685b      	ldr	r3, [r3, #4]
 81049f8:	687a      	ldr	r2, [r7, #4]
 81049fa:	6812      	ldr	r2, [r2, #0]
 81049fc:	4905      	ldr	r1, [pc, #20]	@ (8104a14 <metal_bus_register+0x84>)
 81049fe:	2007      	movs	r0, #7
 8104a00:	4798      	blx	r3
	return 0;
 8104a02:	2300      	movs	r3, #0
}
 8104a04:	4618      	mov	r0, r3
 8104a06:	3708      	adds	r7, #8
 8104a08:	46bd      	mov	sp, r7
 8104a0a:	bd80      	pop	{r7, pc}
 8104a0c:	10000280 	.word	0x10000280
 8104a10:	10000278 	.word	0x10000278
 8104a14:	08108214 	.word	0x08108214

08104a18 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8104a18:	b580      	push	{r7, lr}
 8104a1a:	b084      	sub	sp, #16
 8104a1c:	af00      	add	r7, sp, #0
 8104a1e:	6078      	str	r0, [r7, #4]
 8104a20:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8104a22:	4b13      	ldr	r3, [pc, #76]	@ (8104a70 <metal_bus_find+0x58>)
 8104a24:	689b      	ldr	r3, [r3, #8]
 8104a26:	60fb      	str	r3, [r7, #12]
 8104a28:	e017      	b.n	8104a5a <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8104a2a:	68fb      	ldr	r3, [r7, #12]
 8104a2c:	3b24      	subs	r3, #36	@ 0x24
 8104a2e:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8104a30:	68bb      	ldr	r3, [r7, #8]
 8104a32:	681b      	ldr	r3, [r3, #0]
 8104a34:	6879      	ldr	r1, [r7, #4]
 8104a36:	4618      	mov	r0, r3
 8104a38:	f7fb fc52 	bl	81002e0 <strcmp>
 8104a3c:	4603      	mov	r3, r0
 8104a3e:	2b00      	cmp	r3, #0
 8104a40:	d107      	bne.n	8104a52 <metal_bus_find+0x3a>
			continue;
		if (result)
 8104a42:	683b      	ldr	r3, [r7, #0]
 8104a44:	2b00      	cmp	r3, #0
 8104a46:	d002      	beq.n	8104a4e <metal_bus_find+0x36>
			*result = bus;
 8104a48:	683b      	ldr	r3, [r7, #0]
 8104a4a:	68ba      	ldr	r2, [r7, #8]
 8104a4c:	601a      	str	r2, [r3, #0]
		return 0;
 8104a4e:	2300      	movs	r3, #0
 8104a50:	e009      	b.n	8104a66 <metal_bus_find+0x4e>
			continue;
 8104a52:	bf00      	nop
	metal_list_for_each(&_metal.common.bus_list, node) {
 8104a54:	68fb      	ldr	r3, [r7, #12]
 8104a56:	681b      	ldr	r3, [r3, #0]
 8104a58:	60fb      	str	r3, [r7, #12]
 8104a5a:	68fb      	ldr	r3, [r7, #12]
 8104a5c:	4a05      	ldr	r2, [pc, #20]	@ (8104a74 <metal_bus_find+0x5c>)
 8104a5e:	4293      	cmp	r3, r2
 8104a60:	d1e3      	bne.n	8104a2a <metal_bus_find+0x12>
	}
	return -ENOENT;
 8104a62:	f06f 0301 	mvn.w	r3, #1
}
 8104a66:	4618      	mov	r0, r3
 8104a68:	3710      	adds	r7, #16
 8104a6a:	46bd      	mov	sp, r7
 8104a6c:	bd80      	pop	{r7, pc}
 8104a6e:	bf00      	nop
 8104a70:	10000278 	.word	0x10000278
 8104a74:	10000280 	.word	0x10000280

08104a78 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8104a78:	b580      	push	{r7, lr}
 8104a7a:	b086      	sub	sp, #24
 8104a7c:	af00      	add	r7, sp, #0
 8104a7e:	60f8      	str	r0, [r7, #12]
 8104a80:	60b9      	str	r1, [r7, #8]
 8104a82:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8104a84:	68fb      	ldr	r3, [r7, #12]
 8104a86:	2b00      	cmp	r3, #0
 8104a88:	d00d      	beq.n	8104aa6 <metal_device_open+0x2e>
 8104a8a:	68fb      	ldr	r3, [r7, #12]
 8104a8c:	781b      	ldrb	r3, [r3, #0]
 8104a8e:	2b00      	cmp	r3, #0
 8104a90:	d009      	beq.n	8104aa6 <metal_device_open+0x2e>
 8104a92:	68bb      	ldr	r3, [r7, #8]
 8104a94:	2b00      	cmp	r3, #0
 8104a96:	d006      	beq.n	8104aa6 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8104a98:	68bb      	ldr	r3, [r7, #8]
 8104a9a:	781b      	ldrb	r3, [r3, #0]
 8104a9c:	2b00      	cmp	r3, #0
 8104a9e:	d002      	beq.n	8104aa6 <metal_device_open+0x2e>
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	2b00      	cmp	r3, #0
 8104aa4:	d102      	bne.n	8104aac <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8104aa6:	f06f 0315 	mvn.w	r3, #21
 8104aaa:	e01f      	b.n	8104aec <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8104aac:	f107 0310 	add.w	r3, r7, #16
 8104ab0:	4619      	mov	r1, r3
 8104ab2:	68f8      	ldr	r0, [r7, #12]
 8104ab4:	f7ff ffb0 	bl	8104a18 <metal_bus_find>
 8104ab8:	6178      	str	r0, [r7, #20]
	if (error)
 8104aba:	697b      	ldr	r3, [r7, #20]
 8104abc:	2b00      	cmp	r3, #0
 8104abe:	d001      	beq.n	8104ac4 <metal_device_open+0x4c>
		return error;
 8104ac0:	697b      	ldr	r3, [r7, #20]
 8104ac2:	e013      	b.n	8104aec <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8104ac4:	693b      	ldr	r3, [r7, #16]
 8104ac6:	689b      	ldr	r3, [r3, #8]
 8104ac8:	2b00      	cmp	r3, #0
 8104aca:	d102      	bne.n	8104ad2 <metal_device_open+0x5a>
		return -ENODEV;
 8104acc:	f06f 0312 	mvn.w	r3, #18
 8104ad0:	e00c      	b.n	8104aec <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8104ad2:	693b      	ldr	r3, [r7, #16]
 8104ad4:	689b      	ldr	r3, [r3, #8]
 8104ad6:	6938      	ldr	r0, [r7, #16]
 8104ad8:	687a      	ldr	r2, [r7, #4]
 8104ada:	68b9      	ldr	r1, [r7, #8]
 8104adc:	4798      	blx	r3
 8104ade:	6178      	str	r0, [r7, #20]
	if (error)
 8104ae0:	697b      	ldr	r3, [r7, #20]
 8104ae2:	2b00      	cmp	r3, #0
 8104ae4:	d001      	beq.n	8104aea <metal_device_open+0x72>
		return error;
 8104ae6:	697b      	ldr	r3, [r7, #20]
 8104ae8:	e000      	b.n	8104aec <metal_device_open+0x74>

	return 0;
 8104aea:	2300      	movs	r3, #0
}
 8104aec:	4618      	mov	r0, r3
 8104aee:	3718      	adds	r7, #24
 8104af0:	46bd      	mov	sp, r7
 8104af2:	bd80      	pop	{r7, pc}

08104af4 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8104af4:	b580      	push	{r7, lr}
 8104af6:	b082      	sub	sp, #8
 8104af8:	af00      	add	r7, sp, #0
 8104afa:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8104afc:	687b      	ldr	r3, [r7, #4]
 8104afe:	681b      	ldr	r3, [r3, #0]
 8104b00:	2b00      	cmp	r3, #0
 8104b02:	d008      	beq.n	8104b16 <metal_register_generic_device+0x22>
 8104b04:	687b      	ldr	r3, [r7, #4]
 8104b06:	681b      	ldr	r3, [r3, #0]
 8104b08:	781b      	ldrb	r3, [r3, #0]
 8104b0a:	2b00      	cmp	r3, #0
 8104b0c:	d003      	beq.n	8104b16 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8104b0e:	687b      	ldr	r3, [r7, #4]
 8104b10:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8104b12:	2b02      	cmp	r3, #2
 8104b14:	d902      	bls.n	8104b1c <metal_register_generic_device+0x28>
		return -EINVAL;
 8104b16:	f06f 0315 	mvn.w	r3, #21
 8104b1a:	e009      	b.n	8104b30 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8104b1c:	687b      	ldr	r3, [r7, #4]
 8104b1e:	4a06      	ldr	r2, [pc, #24]	@ (8104b38 <metal_register_generic_device+0x44>)
 8104b20:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8104b22:	687b      	ldr	r3, [r7, #4]
 8104b24:	336c      	adds	r3, #108	@ 0x6c
 8104b26:	4619      	mov	r1, r3
 8104b28:	4804      	ldr	r0, [pc, #16]	@ (8104b3c <metal_register_generic_device+0x48>)
 8104b2a:	f7ff fef0 	bl	810490e <metal_list_add_tail>
			    &device->node);
	return 0;
 8104b2e:	2300      	movs	r3, #0
}
 8104b30:	4618      	mov	r0, r3
 8104b32:	3708      	adds	r7, #8
 8104b34:	46bd      	mov	sp, r7
 8104b36:	bd80      	pop	{r7, pc}
 8104b38:	10000010 	.word	0x10000010
 8104b3c:	10000290 	.word	0x10000290

08104b40 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8104b40:	b580      	push	{r7, lr}
 8104b42:	b086      	sub	sp, #24
 8104b44:	af00      	add	r7, sp, #0
 8104b46:	60f8      	str	r0, [r7, #12]
 8104b48:	60b9      	str	r1, [r7, #8]
 8104b4a:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8104b4c:	4b12      	ldr	r3, [pc, #72]	@ (8104b98 <metal_generic_dev_open+0x58>)
 8104b4e:	699b      	ldr	r3, [r3, #24]
 8104b50:	617b      	str	r3, [r7, #20]
 8104b52:	e017      	b.n	8104b84 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8104b54:	697b      	ldr	r3, [r7, #20]
 8104b56:	3b6c      	subs	r3, #108	@ 0x6c
 8104b58:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8104b5a:	693b      	ldr	r3, [r7, #16]
 8104b5c:	681b      	ldr	r3, [r3, #0]
 8104b5e:	68b9      	ldr	r1, [r7, #8]
 8104b60:	4618      	mov	r0, r3
 8104b62:	f7fb fbbd 	bl	81002e0 <strcmp>
 8104b66:	4603      	mov	r3, r0
 8104b68:	2b00      	cmp	r3, #0
 8104b6a:	d107      	bne.n	8104b7c <metal_generic_dev_open+0x3c>
			continue;
		*device = dev;
 8104b6c:	687b      	ldr	r3, [r7, #4]
 8104b6e:	693a      	ldr	r2, [r7, #16]
 8104b70:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8104b72:	6938      	ldr	r0, [r7, #16]
 8104b74:	f000 f890 	bl	8104c98 <metal_generic_dev_sys_open>
 8104b78:	4603      	mov	r3, r0
 8104b7a:	e009      	b.n	8104b90 <metal_generic_dev_open+0x50>
			continue;
 8104b7c:	bf00      	nop
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8104b7e:	697b      	ldr	r3, [r7, #20]
 8104b80:	681b      	ldr	r3, [r3, #0]
 8104b82:	617b      	str	r3, [r7, #20]
 8104b84:	697b      	ldr	r3, [r7, #20]
 8104b86:	4a05      	ldr	r2, [pc, #20]	@ (8104b9c <metal_generic_dev_open+0x5c>)
 8104b88:	4293      	cmp	r3, r2
 8104b8a:	d1e3      	bne.n	8104b54 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8104b8c:	f06f 0312 	mvn.w	r3, #18
}
 8104b90:	4618      	mov	r0, r3
 8104b92:	3718      	adds	r7, #24
 8104b94:	46bd      	mov	sp, r7
 8104b96:	bd80      	pop	{r7, pc}
 8104b98:	10000278 	.word	0x10000278
 8104b9c:	10000290 	.word	0x10000290

08104ba0 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8104ba0:	b580      	push	{r7, lr}
 8104ba2:	b086      	sub	sp, #24
 8104ba4:	af00      	add	r7, sp, #0
 8104ba6:	60f8      	str	r0, [r7, #12]
 8104ba8:	60b9      	str	r1, [r7, #8]
 8104baa:	607a      	str	r2, [r7, #4]
 8104bac:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8104bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104bb0:	683b      	ldr	r3, [r7, #0]
 8104bb2:	429a      	cmp	r2, r3
 8104bb4:	d009      	beq.n	8104bca <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8104bb6:	6a3a      	ldr	r2, [r7, #32]
 8104bb8:	4613      	mov	r3, r2
 8104bba:	005b      	lsls	r3, r3, #1
 8104bbc:	4413      	add	r3, r2
 8104bbe:	009b      	lsls	r3, r3, #2
 8104bc0:	461a      	mov	r2, r3
 8104bc2:	6839      	ldr	r1, [r7, #0]
 8104bc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8104bc6:	f002 fc2e 	bl	8107426 <memcpy>
	for (i = 0; i < nents_in; i++) {
 8104bca:	2300      	movs	r3, #0
 8104bcc:	617b      	str	r3, [r7, #20]
 8104bce:	e02f      	b.n	8104c30 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8104bd0:	687b      	ldr	r3, [r7, #4]
 8104bd2:	2b02      	cmp	r3, #2
 8104bd4:	d114      	bne.n	8104c00 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8104bd6:	697a      	ldr	r2, [r7, #20]
 8104bd8:	4613      	mov	r3, r2
 8104bda:	005b      	lsls	r3, r3, #1
 8104bdc:	4413      	add	r3, r2
 8104bde:	009b      	lsls	r3, r3, #2
 8104be0:	461a      	mov	r2, r3
 8104be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104be4:	4413      	add	r3, r2
 8104be6:	6818      	ldr	r0, [r3, #0]
 8104be8:	697a      	ldr	r2, [r7, #20]
 8104bea:	4613      	mov	r3, r2
 8104bec:	005b      	lsls	r3, r3, #1
 8104bee:	4413      	add	r3, r2
 8104bf0:	009b      	lsls	r3, r3, #2
 8104bf2:	461a      	mov	r2, r3
 8104bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104bf6:	4413      	add	r3, r2
 8104bf8:	689b      	ldr	r3, [r3, #8]
 8104bfa:	4619      	mov	r1, r3
 8104bfc:	f7ff feae 	bl	810495c <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8104c00:	697a      	ldr	r2, [r7, #20]
 8104c02:	4613      	mov	r3, r2
 8104c04:	005b      	lsls	r3, r3, #1
 8104c06:	4413      	add	r3, r2
 8104c08:	009b      	lsls	r3, r3, #2
 8104c0a:	461a      	mov	r2, r3
 8104c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104c0e:	4413      	add	r3, r2
 8104c10:	6818      	ldr	r0, [r3, #0]
 8104c12:	697a      	ldr	r2, [r7, #20]
 8104c14:	4613      	mov	r3, r2
 8104c16:	005b      	lsls	r3, r3, #1
 8104c18:	4413      	add	r3, r2
 8104c1a:	009b      	lsls	r3, r3, #2
 8104c1c:	461a      	mov	r2, r3
 8104c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104c20:	4413      	add	r3, r2
 8104c22:	689b      	ldr	r3, [r3, #8]
 8104c24:	4619      	mov	r1, r3
 8104c26:	f7ff fea6 	bl	8104976 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8104c2a:	697b      	ldr	r3, [r7, #20]
 8104c2c:	3301      	adds	r3, #1
 8104c2e:	617b      	str	r3, [r7, #20]
 8104c30:	697a      	ldr	r2, [r7, #20]
 8104c32:	6a3b      	ldr	r3, [r7, #32]
 8104c34:	429a      	cmp	r2, r3
 8104c36:	dbcb      	blt.n	8104bd0 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8104c38:	6a3b      	ldr	r3, [r7, #32]
}
 8104c3a:	4618      	mov	r0, r3
 8104c3c:	3718      	adds	r7, #24
 8104c3e:	46bd      	mov	sp, r7
 8104c40:	bd80      	pop	{r7, pc}

08104c42 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8104c42:	b580      	push	{r7, lr}
 8104c44:	b086      	sub	sp, #24
 8104c46:	af00      	add	r7, sp, #0
 8104c48:	60f8      	str	r0, [r7, #12]
 8104c4a:	60b9      	str	r1, [r7, #8]
 8104c4c:	607a      	str	r2, [r7, #4]
 8104c4e:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8104c50:	2300      	movs	r3, #0
 8104c52:	617b      	str	r3, [r7, #20]
 8104c54:	e017      	b.n	8104c86 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8104c56:	697a      	ldr	r2, [r7, #20]
 8104c58:	4613      	mov	r3, r2
 8104c5a:	005b      	lsls	r3, r3, #1
 8104c5c:	4413      	add	r3, r2
 8104c5e:	009b      	lsls	r3, r3, #2
 8104c60:	461a      	mov	r2, r3
 8104c62:	683b      	ldr	r3, [r7, #0]
 8104c64:	4413      	add	r3, r2
 8104c66:	6818      	ldr	r0, [r3, #0]
 8104c68:	697a      	ldr	r2, [r7, #20]
 8104c6a:	4613      	mov	r3, r2
 8104c6c:	005b      	lsls	r3, r3, #1
 8104c6e:	4413      	add	r3, r2
 8104c70:	009b      	lsls	r3, r3, #2
 8104c72:	461a      	mov	r2, r3
 8104c74:	683b      	ldr	r3, [r7, #0]
 8104c76:	4413      	add	r3, r2
 8104c78:	689b      	ldr	r3, [r3, #8]
 8104c7a:	4619      	mov	r1, r3
 8104c7c:	f7ff fe7b 	bl	8104976 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8104c80:	697b      	ldr	r3, [r7, #20]
 8104c82:	3301      	adds	r3, #1
 8104c84:	617b      	str	r3, [r7, #20]
 8104c86:	697a      	ldr	r2, [r7, #20]
 8104c88:	6a3b      	ldr	r3, [r7, #32]
 8104c8a:	429a      	cmp	r2, r3
 8104c8c:	dbe3      	blt.n	8104c56 <metal_generic_dev_dma_unmap+0x14>
	}
}
 8104c8e:	bf00      	nop
 8104c90:	bf00      	nop
 8104c92:	3718      	adds	r7, #24
 8104c94:	46bd      	mov	sp, r7
 8104c96:	bd80      	pop	{r7, pc}

08104c98 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8104c98:	b580      	push	{r7, lr}
 8104c9a:	b084      	sub	sp, #16
 8104c9c:	af00      	add	r7, sp, #0
 8104c9e:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8104ca0:	2300      	movs	r3, #0
 8104ca2:	60fb      	str	r3, [r7, #12]
 8104ca4:	e013      	b.n	8104cce <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8104ca6:	68fa      	ldr	r2, [r7, #12]
 8104ca8:	4613      	mov	r3, r2
 8104caa:	005b      	lsls	r3, r3, #1
 8104cac:	4413      	add	r3, r2
 8104cae:	011b      	lsls	r3, r3, #4
 8104cb0:	3308      	adds	r3, #8
 8104cb2:	687a      	ldr	r2, [r7, #4]
 8104cb4:	4413      	add	r3, r2
 8104cb6:	3304      	adds	r3, #4
 8104cb8:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8104cba:	68bb      	ldr	r3, [r7, #8]
 8104cbc:	689b      	ldr	r3, [r3, #8]
 8104cbe:	2b00      	cmp	r3, #0
 8104cc0:	d00b      	beq.n	8104cda <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8104cc2:	68b8      	ldr	r0, [r7, #8]
 8104cc4:	f000 f81e 	bl	8104d04 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8104cc8:	68fb      	ldr	r3, [r7, #12]
 8104cca:	3301      	adds	r3, #1
 8104ccc:	60fb      	str	r3, [r7, #12]
 8104cce:	687b      	ldr	r3, [r7, #4]
 8104cd0:	689b      	ldr	r3, [r3, #8]
 8104cd2:	68fa      	ldr	r2, [r7, #12]
 8104cd4:	429a      	cmp	r2, r3
 8104cd6:	d3e6      	bcc.n	8104ca6 <metal_generic_dev_sys_open+0xe>
 8104cd8:	e000      	b.n	8104cdc <metal_generic_dev_sys_open+0x44>
			break;
 8104cda:	bf00      	nop
	}

	return 0;
 8104cdc:	2300      	movs	r3, #0
}
 8104cde:	4618      	mov	r0, r3
 8104ce0:	3710      	adds	r7, #16
 8104ce2:	46bd      	mov	sp, r7
 8104ce4:	bd80      	pop	{r7, pc}
	...

08104ce8 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8104ce8:	b580      	push	{r7, lr}
 8104cea:	b082      	sub	sp, #8
 8104cec:	af00      	add	r7, sp, #0
 8104cee:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8104cf0:	4803      	ldr	r0, [pc, #12]	@ (8104d00 <metal_sys_init+0x18>)
 8104cf2:	f7ff fe4d 	bl	8104990 <metal_bus_register>
	return 0;
 8104cf6:	2300      	movs	r3, #0
}
 8104cf8:	4618      	mov	r0, r3
 8104cfa:	3708      	adds	r7, #8
 8104cfc:	46bd      	mov	sp, r7
 8104cfe:	bd80      	pop	{r7, pc}
 8104d00:	10000010 	.word	0x10000010

08104d04 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8104d04:	b580      	push	{r7, lr}
 8104d06:	b086      	sub	sp, #24
 8104d08:	af00      	add	r7, sp, #0
 8104d0a:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8104d0c:	687b      	ldr	r3, [r7, #4]
 8104d0e:	681b      	ldr	r3, [r3, #0]
 8104d10:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8104d12:	687b      	ldr	r3, [r7, #4]
 8104d14:	689b      	ldr	r3, [r3, #8]
 8104d16:	613b      	str	r3, [r7, #16]
	if (psize) {
 8104d18:	693b      	ldr	r3, [r7, #16]
 8104d1a:	2b00      	cmp	r3, #0
 8104d1c:	d02c      	beq.n	8104d78 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8104d1e:	687b      	ldr	r3, [r7, #4]
 8104d20:	68db      	ldr	r3, [r3, #12]
 8104d22:	693a      	ldr	r2, [r7, #16]
 8104d24:	fa22 f303 	lsr.w	r3, r2, r3
 8104d28:	2b00      	cmp	r3, #0
 8104d2a:	d005      	beq.n	8104d38 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	68db      	ldr	r3, [r3, #12]
 8104d30:	2201      	movs	r2, #1
 8104d32:	fa02 f303 	lsl.w	r3, r2, r3
 8104d36:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8104d38:	2300      	movs	r3, #0
 8104d3a:	617b      	str	r3, [r7, #20]
 8104d3c:	e013      	b.n	8104d66 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8104d3e:	687b      	ldr	r3, [r7, #4]
 8104d40:	685a      	ldr	r2, [r3, #4]
 8104d42:	697b      	ldr	r3, [r7, #20]
 8104d44:	009b      	lsls	r3, r3, #2
 8104d46:	4413      	add	r3, r2
 8104d48:	6819      	ldr	r1, [r3, #0]
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	695b      	ldr	r3, [r3, #20]
 8104d4e:	693a      	ldr	r2, [r7, #16]
 8104d50:	68f8      	ldr	r0, [r7, #12]
 8104d52:	f001 fbc7 	bl	81064e4 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8104d56:	693b      	ldr	r3, [r7, #16]
 8104d58:	009b      	lsls	r3, r3, #2
 8104d5a:	68fa      	ldr	r2, [r7, #12]
 8104d5c:	4413      	add	r3, r2
 8104d5e:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8104d60:	697b      	ldr	r3, [r7, #20]
 8104d62:	3301      	adds	r3, #1
 8104d64:	617b      	str	r3, [r7, #20]
 8104d66:	687b      	ldr	r3, [r7, #4]
 8104d68:	689a      	ldr	r2, [r3, #8]
 8104d6a:	687b      	ldr	r3, [r7, #4]
 8104d6c:	68db      	ldr	r3, [r3, #12]
 8104d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8104d72:	697a      	ldr	r2, [r7, #20]
 8104d74:	429a      	cmp	r2, r3
 8104d76:	d9e2      	bls.n	8104d3e <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8104d78:	bf00      	nop
 8104d7a:	3718      	adds	r7, #24
 8104d7c:	46bd      	mov	sp, r7
 8104d7e:	bd80      	pop	{r7, pc}

08104d80 <metal_list_init>:
{
 8104d80:	b480      	push	{r7}
 8104d82:	b083      	sub	sp, #12
 8104d84:	af00      	add	r7, sp, #0
 8104d86:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8104d88:	687b      	ldr	r3, [r7, #4]
 8104d8a:	687a      	ldr	r2, [r7, #4]
 8104d8c:	605a      	str	r2, [r3, #4]
 8104d8e:	687b      	ldr	r3, [r7, #4]
 8104d90:	685a      	ldr	r2, [r3, #4]
 8104d92:	687b      	ldr	r3, [r7, #4]
 8104d94:	601a      	str	r2, [r3, #0]
}
 8104d96:	bf00      	nop
 8104d98:	370c      	adds	r7, #12
 8104d9a:	46bd      	mov	sp, r7
 8104d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104da0:	4770      	bx	lr
	...

08104da4 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8104da4:	b580      	push	{r7, lr}
 8104da6:	b084      	sub	sp, #16
 8104da8:	af00      	add	r7, sp, #0
 8104daa:	6078      	str	r0, [r7, #4]
	int error = 0;
 8104dac:	2300      	movs	r3, #0
 8104dae:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8104db0:	2220      	movs	r2, #32
 8104db2:	2100      	movs	r1, #0
 8104db4:	4810      	ldr	r0, [pc, #64]	@ (8104df8 <metal_init+0x54>)
 8104db6:	f002 fa86 	bl	81072c6 <memset>

	_metal.common.log_handler   = params->log_handler;
 8104dba:	687b      	ldr	r3, [r7, #4]
 8104dbc:	681b      	ldr	r3, [r3, #0]
 8104dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8104df8 <metal_init+0x54>)
 8104dc0:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8104dc2:	687b      	ldr	r3, [r7, #4]
 8104dc4:	791a      	ldrb	r2, [r3, #4]
 8104dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8104df8 <metal_init+0x54>)
 8104dc8:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8104dca:	480c      	ldr	r0, [pc, #48]	@ (8104dfc <metal_init+0x58>)
 8104dcc:	f7ff ffd8 	bl	8104d80 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8104dd0:	480b      	ldr	r0, [pc, #44]	@ (8104e00 <metal_init+0x5c>)
 8104dd2:	f7ff ffd5 	bl	8104d80 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8104dd6:	480b      	ldr	r0, [pc, #44]	@ (8104e04 <metal_init+0x60>)
 8104dd8:	f7ff ffd2 	bl	8104d80 <metal_list_init>

	error = metal_sys_init(params);
 8104ddc:	6878      	ldr	r0, [r7, #4]
 8104dde:	f7ff ff83 	bl	8104ce8 <metal_sys_init>
 8104de2:	60f8      	str	r0, [r7, #12]
	if (error)
 8104de4:	68fb      	ldr	r3, [r7, #12]
 8104de6:	2b00      	cmp	r3, #0
 8104de8:	d001      	beq.n	8104dee <metal_init+0x4a>
		return error;
 8104dea:	68fb      	ldr	r3, [r7, #12]
 8104dec:	e000      	b.n	8104df0 <metal_init+0x4c>

	return error;
 8104dee:	68fb      	ldr	r3, [r7, #12]
}
 8104df0:	4618      	mov	r0, r3
 8104df2:	3710      	adds	r7, #16
 8104df4:	46bd      	mov	sp, r7
 8104df6:	bd80      	pop	{r7, pc}
 8104df8:	10000278 	.word	0x10000278
 8104dfc:	10000280 	.word	0x10000280
 8104e00:	10000288 	.word	0x10000288
 8104e04:	10000290 	.word	0x10000290

08104e08 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8104e08:	b480      	push	{r7}
 8104e0a:	b083      	sub	sp, #12
 8104e0c:	af00      	add	r7, sp, #0
 8104e0e:	6078      	str	r0, [r7, #4]
 8104e10:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8104e12:	687b      	ldr	r3, [r7, #4]
 8104e14:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8104e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104e1a:	d009      	beq.n	8104e30 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8104e1c:	687b      	ldr	r3, [r7, #4]
 8104e1e:	689b      	ldr	r3, [r3, #8]
 8104e20:	683a      	ldr	r2, [r7, #0]
 8104e22:	429a      	cmp	r2, r3
 8104e24:	d804      	bhi.n	8104e30 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8104e26:	687b      	ldr	r3, [r7, #4]
 8104e28:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8104e2a:	683b      	ldr	r3, [r7, #0]
 8104e2c:	4413      	add	r3, r2
 8104e2e:	e000      	b.n	8104e32 <metal_io_virt+0x2a>
 8104e30:	2300      	movs	r3, #0
}
 8104e32:	4618      	mov	r0, r3
 8104e34:	370c      	adds	r7, #12
 8104e36:	46bd      	mov	sp, r7
 8104e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e3c:	4770      	bx	lr

08104e3e <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8104e3e:	b5b0      	push	{r4, r5, r7, lr}
 8104e40:	b08a      	sub	sp, #40	@ 0x28
 8104e42:	af00      	add	r7, sp, #0
 8104e44:	60f8      	str	r0, [r7, #12]
 8104e46:	60b9      	str	r1, [r7, #8]
 8104e48:	607a      	str	r2, [r7, #4]
 8104e4a:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8104e4c:	f107 0310 	add.w	r3, r7, #16
 8104e50:	2200      	movs	r2, #0
 8104e52:	601a      	str	r2, [r3, #0]
 8104e54:	605a      	str	r2, [r3, #4]
 8104e56:	609a      	str	r2, [r3, #8]
 8104e58:	60da      	str	r2, [r3, #12]
 8104e5a:	611a      	str	r2, [r3, #16]
 8104e5c:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8104e5e:	68fb      	ldr	r3, [r7, #12]
 8104e60:	68ba      	ldr	r2, [r7, #8]
 8104e62:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8104e64:	68fb      	ldr	r3, [r7, #12]
 8104e66:	687a      	ldr	r2, [r7, #4]
 8104e68:	605a      	str	r2, [r3, #4]
	io->size = size;
 8104e6a:	68fb      	ldr	r3, [r7, #12]
 8104e6c:	683a      	ldr	r2, [r7, #0]
 8104e6e:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8104e70:	68fb      	ldr	r3, [r7, #12]
 8104e72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8104e74:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8104e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e78:	2b1f      	cmp	r3, #31
 8104e7a:	d904      	bls.n	8104e86 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8104e7c:	68fb      	ldr	r3, [r7, #12]
 8104e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8104e82:	611a      	str	r2, [r3, #16]
 8104e84:	e006      	b.n	8104e94 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8104e86:	2201      	movs	r2, #1
 8104e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8104e8e:	1e5a      	subs	r2, r3, #1
 8104e90:	68fb      	ldr	r3, [r7, #12]
 8104e92:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8104e94:	68fb      	ldr	r3, [r7, #12]
 8104e96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8104e98:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8104e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104e9c:	2b00      	cmp	r3, #0
 8104e9e:	d00b      	beq.n	8104eb8 <metal_io_init+0x7a>
 8104ea0:	68fb      	ldr	r3, [r7, #12]
 8104ea2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8104ea4:	f103 0418 	add.w	r4, r3, #24
 8104ea8:	4615      	mov	r5, r2
 8104eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104eae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8104eb2:	e884 0003 	stmia.w	r4, {r0, r1}
 8104eb6:	e00a      	b.n	8104ece <metal_io_init+0x90>
 8104eb8:	68fb      	ldr	r3, [r7, #12]
 8104eba:	f103 0418 	add.w	r4, r3, #24
 8104ebe:	f107 0510 	add.w	r5, r7, #16
 8104ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104ec6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8104eca:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8104ece:	68f8      	ldr	r0, [r7, #12]
 8104ed0:	f7ff ff18 	bl	8104d04 <metal_sys_io_mem_map>
}
 8104ed4:	bf00      	nop
 8104ed6:	3728      	adds	r7, #40	@ 0x28
 8104ed8:	46bd      	mov	sp, r7
 8104eda:	bdb0      	pop	{r4, r5, r7, pc}

08104edc <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8104edc:	b590      	push	{r4, r7, lr}
 8104ede:	b08b      	sub	sp, #44	@ 0x2c
 8104ee0:	af02      	add	r7, sp, #8
 8104ee2:	60f8      	str	r0, [r7, #12]
 8104ee4:	60b9      	str	r1, [r7, #8]
 8104ee6:	607a      	str	r2, [r7, #4]
 8104ee8:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8104eea:	68b9      	ldr	r1, [r7, #8]
 8104eec:	68f8      	ldr	r0, [r7, #12]
 8104eee:	f7ff ff8b 	bl	8104e08 <metal_io_virt>
 8104ef2:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8104ef4:	687b      	ldr	r3, [r7, #4]
 8104ef6:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8104ef8:	68fb      	ldr	r3, [r7, #12]
 8104efa:	689b      	ldr	r3, [r3, #8]
 8104efc:	68ba      	ldr	r2, [r7, #8]
 8104efe:	429a      	cmp	r2, r3
 8104f00:	d902      	bls.n	8104f08 <metal_io_block_read+0x2c>
		return -ERANGE;
 8104f02:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8104f06:	e05c      	b.n	8104fc2 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8104f08:	683a      	ldr	r2, [r7, #0]
 8104f0a:	68bb      	ldr	r3, [r7, #8]
 8104f0c:	441a      	add	r2, r3
 8104f0e:	68fb      	ldr	r3, [r7, #12]
 8104f10:	689b      	ldr	r3, [r3, #8]
 8104f12:	429a      	cmp	r2, r3
 8104f14:	d904      	bls.n	8104f20 <metal_io_block_read+0x44>
		len = io->size - offset;
 8104f16:	68fb      	ldr	r3, [r7, #12]
 8104f18:	689a      	ldr	r2, [r3, #8]
 8104f1a:	68bb      	ldr	r3, [r7, #8]
 8104f1c:	1ad3      	subs	r3, r2, r3
 8104f1e:	603b      	str	r3, [r7, #0]
	retlen = len;
 8104f20:	683b      	ldr	r3, [r7, #0]
 8104f22:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8104f24:	68fb      	ldr	r3, [r7, #12]
 8104f26:	6a1b      	ldr	r3, [r3, #32]
 8104f28:	2b00      	cmp	r3, #0
 8104f2a:	d00a      	beq.n	8104f42 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8104f2c:	68fb      	ldr	r3, [r7, #12]
 8104f2e:	6a1c      	ldr	r4, [r3, #32]
 8104f30:	683b      	ldr	r3, [r7, #0]
 8104f32:	9300      	str	r3, [sp, #0]
 8104f34:	2305      	movs	r3, #5
 8104f36:	687a      	ldr	r2, [r7, #4]
 8104f38:	68b9      	ldr	r1, [r7, #8]
 8104f3a:	68f8      	ldr	r0, [r7, #12]
 8104f3c:	47a0      	blx	r4
 8104f3e:	6178      	str	r0, [r7, #20]
 8104f40:	e03e      	b.n	8104fc0 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8104f42:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8104f46:	e00c      	b.n	8104f62 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8104f48:	69fb      	ldr	r3, [r7, #28]
 8104f4a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8104f4c:	69bb      	ldr	r3, [r7, #24]
 8104f4e:	701a      	strb	r2, [r3, #0]
			dest++;
 8104f50:	69bb      	ldr	r3, [r7, #24]
 8104f52:	3301      	adds	r3, #1
 8104f54:	61bb      	str	r3, [r7, #24]
			ptr++;
 8104f56:	69fb      	ldr	r3, [r7, #28]
 8104f58:	3301      	adds	r3, #1
 8104f5a:	61fb      	str	r3, [r7, #28]
			len--;
 8104f5c:	683b      	ldr	r3, [r7, #0]
 8104f5e:	3b01      	subs	r3, #1
 8104f60:	603b      	str	r3, [r7, #0]
		while ( len && (
 8104f62:	683b      	ldr	r3, [r7, #0]
 8104f64:	2b00      	cmp	r3, #0
 8104f66:	d017      	beq.n	8104f98 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8104f68:	69bb      	ldr	r3, [r7, #24]
 8104f6a:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8104f6e:	2b00      	cmp	r3, #0
 8104f70:	d1ea      	bne.n	8104f48 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8104f72:	69fb      	ldr	r3, [r7, #28]
 8104f74:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8104f78:	2b00      	cmp	r3, #0
 8104f7a:	d1e5      	bne.n	8104f48 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8104f7c:	e00c      	b.n	8104f98 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8104f7e:	69fb      	ldr	r3, [r7, #28]
 8104f80:	681a      	ldr	r2, [r3, #0]
 8104f82:	69bb      	ldr	r3, [r7, #24]
 8104f84:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8104f86:	69bb      	ldr	r3, [r7, #24]
 8104f88:	3304      	adds	r3, #4
 8104f8a:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8104f8c:	69fb      	ldr	r3, [r7, #28]
 8104f8e:	3304      	adds	r3, #4
 8104f90:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8104f92:	683b      	ldr	r3, [r7, #0]
 8104f94:	3b04      	subs	r3, #4
 8104f96:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8104f98:	683b      	ldr	r3, [r7, #0]
 8104f9a:	2b03      	cmp	r3, #3
 8104f9c:	dcef      	bgt.n	8104f7e <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8104f9e:	e00c      	b.n	8104fba <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8104fa0:	69fb      	ldr	r3, [r7, #28]
 8104fa2:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8104fa4:	69bb      	ldr	r3, [r7, #24]
 8104fa6:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8104fa8:	69bb      	ldr	r3, [r7, #24]
 8104faa:	3301      	adds	r3, #1
 8104fac:	61bb      	str	r3, [r7, #24]
 8104fae:	69fb      	ldr	r3, [r7, #28]
 8104fb0:	3301      	adds	r3, #1
 8104fb2:	61fb      	str	r3, [r7, #28]
 8104fb4:	683b      	ldr	r3, [r7, #0]
 8104fb6:	3b01      	subs	r3, #1
 8104fb8:	603b      	str	r3, [r7, #0]
 8104fba:	683b      	ldr	r3, [r7, #0]
 8104fbc:	2b00      	cmp	r3, #0
 8104fbe:	d1ef      	bne.n	8104fa0 <metal_io_block_read+0xc4>
	}
	return retlen;
 8104fc0:	697b      	ldr	r3, [r7, #20]
}
 8104fc2:	4618      	mov	r0, r3
 8104fc4:	3724      	adds	r7, #36	@ 0x24
 8104fc6:	46bd      	mov	sp, r7
 8104fc8:	bd90      	pop	{r4, r7, pc}

08104fca <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8104fca:	b590      	push	{r4, r7, lr}
 8104fcc:	b08b      	sub	sp, #44	@ 0x2c
 8104fce:	af02      	add	r7, sp, #8
 8104fd0:	60f8      	str	r0, [r7, #12]
 8104fd2:	60b9      	str	r1, [r7, #8]
 8104fd4:	607a      	str	r2, [r7, #4]
 8104fd6:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8104fd8:	68b9      	ldr	r1, [r7, #8]
 8104fda:	68f8      	ldr	r0, [r7, #12]
 8104fdc:	f7ff ff14 	bl	8104e08 <metal_io_virt>
 8104fe0:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8104fe2:	687b      	ldr	r3, [r7, #4]
 8104fe4:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8104fe6:	68fb      	ldr	r3, [r7, #12]
 8104fe8:	689b      	ldr	r3, [r3, #8]
 8104fea:	68ba      	ldr	r2, [r7, #8]
 8104fec:	429a      	cmp	r2, r3
 8104fee:	d902      	bls.n	8104ff6 <metal_io_block_write+0x2c>
		return -ERANGE;
 8104ff0:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8104ff4:	e05b      	b.n	81050ae <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8104ff6:	683a      	ldr	r2, [r7, #0]
 8104ff8:	68bb      	ldr	r3, [r7, #8]
 8104ffa:	441a      	add	r2, r3
 8104ffc:	68fb      	ldr	r3, [r7, #12]
 8104ffe:	689b      	ldr	r3, [r3, #8]
 8105000:	429a      	cmp	r2, r3
 8105002:	d904      	bls.n	810500e <metal_io_block_write+0x44>
		len = io->size - offset;
 8105004:	68fb      	ldr	r3, [r7, #12]
 8105006:	689a      	ldr	r2, [r3, #8]
 8105008:	68bb      	ldr	r3, [r7, #8]
 810500a:	1ad3      	subs	r3, r2, r3
 810500c:	603b      	str	r3, [r7, #0]
	retlen = len;
 810500e:	683b      	ldr	r3, [r7, #0]
 8105010:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8105012:	68fb      	ldr	r3, [r7, #12]
 8105014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105016:	2b00      	cmp	r3, #0
 8105018:	d017      	beq.n	810504a <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 810501a:	68fb      	ldr	r3, [r7, #12]
 810501c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 810501e:	683b      	ldr	r3, [r7, #0]
 8105020:	9300      	str	r3, [sp, #0]
 8105022:	2305      	movs	r3, #5
 8105024:	687a      	ldr	r2, [r7, #4]
 8105026:	68b9      	ldr	r1, [r7, #8]
 8105028:	68f8      	ldr	r0, [r7, #12]
 810502a:	47a0      	blx	r4
 810502c:	6178      	str	r0, [r7, #20]
 810502e:	e03d      	b.n	81050ac <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8105030:	69bb      	ldr	r3, [r7, #24]
 8105032:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8105034:	69fb      	ldr	r3, [r7, #28]
 8105036:	701a      	strb	r2, [r3, #0]
			ptr++;
 8105038:	69fb      	ldr	r3, [r7, #28]
 810503a:	3301      	adds	r3, #1
 810503c:	61fb      	str	r3, [r7, #28]
			source++;
 810503e:	69bb      	ldr	r3, [r7, #24]
 8105040:	3301      	adds	r3, #1
 8105042:	61bb      	str	r3, [r7, #24]
			len--;
 8105044:	683b      	ldr	r3, [r7, #0]
 8105046:	3b01      	subs	r3, #1
 8105048:	603b      	str	r3, [r7, #0]
		while ( len && (
 810504a:	683b      	ldr	r3, [r7, #0]
 810504c:	2b00      	cmp	r3, #0
 810504e:	d017      	beq.n	8105080 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8105050:	69fb      	ldr	r3, [r7, #28]
 8105052:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8105056:	2b00      	cmp	r3, #0
 8105058:	d1ea      	bne.n	8105030 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 810505a:	69bb      	ldr	r3, [r7, #24]
 810505c:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8105060:	2b00      	cmp	r3, #0
 8105062:	d1e5      	bne.n	8105030 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8105064:	e00c      	b.n	8105080 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8105066:	69bb      	ldr	r3, [r7, #24]
 8105068:	681a      	ldr	r2, [r3, #0]
 810506a:	69fb      	ldr	r3, [r7, #28]
 810506c:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 810506e:	69fb      	ldr	r3, [r7, #28]
 8105070:	3304      	adds	r3, #4
 8105072:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8105074:	69bb      	ldr	r3, [r7, #24]
 8105076:	3304      	adds	r3, #4
 8105078:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 810507a:	683b      	ldr	r3, [r7, #0]
 810507c:	3b04      	subs	r3, #4
 810507e:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8105080:	683b      	ldr	r3, [r7, #0]
 8105082:	2b03      	cmp	r3, #3
 8105084:	dcef      	bgt.n	8105066 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8105086:	e00c      	b.n	81050a2 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8105088:	69bb      	ldr	r3, [r7, #24]
 810508a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 810508c:	69fb      	ldr	r3, [r7, #28]
 810508e:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8105090:	69fb      	ldr	r3, [r7, #28]
 8105092:	3301      	adds	r3, #1
 8105094:	61fb      	str	r3, [r7, #28]
 8105096:	69bb      	ldr	r3, [r7, #24]
 8105098:	3301      	adds	r3, #1
 810509a:	61bb      	str	r3, [r7, #24]
 810509c:	683b      	ldr	r3, [r7, #0]
 810509e:	3b01      	subs	r3, #1
 81050a0:	603b      	str	r3, [r7, #0]
 81050a2:	683b      	ldr	r3, [r7, #0]
 81050a4:	2b00      	cmp	r3, #0
 81050a6:	d1ef      	bne.n	8105088 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 81050a8:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 81050ac:	697b      	ldr	r3, [r7, #20]
}
 81050ae:	4618      	mov	r0, r3
 81050b0:	3724      	adds	r7, #36	@ 0x24
 81050b2:	46bd      	mov	sp, r7
 81050b4:	bd90      	pop	{r4, r7, pc}

081050b6 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 81050b6:	b40e      	push	{r1, r2, r3}
 81050b8:	b480      	push	{r7}
 81050ba:	b082      	sub	sp, #8
 81050bc:	af00      	add	r7, sp, #0
 81050be:	4603      	mov	r3, r0
 81050c0:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 81050c2:	bf00      	nop
 81050c4:	3708      	adds	r7, #8
 81050c6:	46bd      	mov	sp, r7
 81050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050cc:	b003      	add	sp, #12
 81050ce:	4770      	bx	lr

081050d0 <metal_io_virt>:
{
 81050d0:	b480      	push	{r7}
 81050d2:	b083      	sub	sp, #12
 81050d4:	af00      	add	r7, sp, #0
 81050d6:	6078      	str	r0, [r7, #4]
 81050d8:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81050da:	687b      	ldr	r3, [r7, #4]
 81050dc:	681b      	ldr	r3, [r3, #0]
		: NULL);
 81050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 81050e2:	d009      	beq.n	81050f8 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81050e4:	687b      	ldr	r3, [r7, #4]
 81050e6:	689b      	ldr	r3, [r3, #8]
 81050e8:	683a      	ldr	r2, [r7, #0]
 81050ea:	429a      	cmp	r2, r3
 81050ec:	d804      	bhi.n	81050f8 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 81050ee:	687b      	ldr	r3, [r7, #4]
 81050f0:	681a      	ldr	r2, [r3, #0]
		: NULL);
 81050f2:	683b      	ldr	r3, [r7, #0]
 81050f4:	4413      	add	r3, r2
 81050f6:	e000      	b.n	81050fa <metal_io_virt+0x2a>
 81050f8:	2300      	movs	r3, #0
}
 81050fa:	4618      	mov	r0, r3
 81050fc:	370c      	adds	r7, #12
 81050fe:	46bd      	mov	sp, r7
 8105100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105104:	4770      	bx	lr

08105106 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8105106:	b480      	push	{r7}
 8105108:	b085      	sub	sp, #20
 810510a:	af00      	add	r7, sp, #0
 810510c:	6078      	str	r0, [r7, #4]
 810510e:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8105110:	687b      	ldr	r3, [r7, #4]
 8105112:	681b      	ldr	r3, [r3, #0]
 8105114:	683a      	ldr	r2, [r7, #0]
 8105116:	1ad3      	subs	r3, r2, r3
 8105118:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 810511a:	687b      	ldr	r3, [r7, #4]
 810511c:	689b      	ldr	r3, [r3, #8]
 810511e:	68fa      	ldr	r2, [r7, #12]
 8105120:	429a      	cmp	r2, r3
 8105122:	d201      	bcs.n	8105128 <metal_io_virt_to_offset+0x22>
 8105124:	68fb      	ldr	r3, [r7, #12]
 8105126:	e001      	b.n	810512c <metal_io_virt_to_offset+0x26>
 8105128:	f04f 33ff 	mov.w	r3, #4294967295
}
 810512c:	4618      	mov	r0, r3
 810512e:	3714      	adds	r7, #20
 8105130:	46bd      	mov	sp, r7
 8105132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105136:	4770      	bx	lr

08105138 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8105138:	b5b0      	push	{r4, r5, r7, lr}
 810513a:	b08c      	sub	sp, #48	@ 0x30
 810513c:	af00      	add	r7, sp, #0
 810513e:	60f8      	str	r0, [r7, #12]
 8105140:	60b9      	str	r1, [r7, #8]
 8105142:	603b      	str	r3, [r7, #0]
 8105144:	4613      	mov	r3, r2
 8105146:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8105148:	68b9      	ldr	r1, [r7, #8]
 810514a:	68f8      	ldr	r0, [r7, #12]
 810514c:	f7ff ffc0 	bl	81050d0 <metal_io_virt>
 8105150:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
 8105152:	68fb      	ldr	r3, [r7, #12]
 8105154:	699b      	ldr	r3, [r3, #24]
 8105156:	2b00      	cmp	r3, #0
 8105158:	d009      	beq.n	810516e <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 810515a:	68fb      	ldr	r3, [r7, #12]
 810515c:	699c      	ldr	r4, [r3, #24]
 810515e:	79fa      	ldrb	r2, [r7, #7]
 8105160:	683b      	ldr	r3, [r7, #0]
 8105162:	68b9      	ldr	r1, [r7, #8]
 8105164:	68f8      	ldr	r0, [r7, #12]
 8105166:	47a0      	blx	r4
 8105168:	4604      	mov	r4, r0
 810516a:	460d      	mov	r5, r1
 810516c:	e059      	b.n	8105222 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 810516e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105170:	2b00      	cmp	r3, #0
 8105172:	d012      	beq.n	810519a <metal_io_read+0x62>
 8105174:	683b      	ldr	r3, [r7, #0]
 8105176:	2b01      	cmp	r3, #1
 8105178:	d10f      	bne.n	810519a <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 810517a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810517c:	62bb      	str	r3, [r7, #40]	@ 0x28
 810517e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105180:	f3bf 8f5b 	dmb	ish
 8105184:	781b      	ldrb	r3, [r3, #0]
 8105186:	f3bf 8f5b 	dmb	ish
 810518a:	b2db      	uxtb	r3, r3
 810518c:	76fb      	strb	r3, [r7, #27]
 810518e:	7efb      	ldrb	r3, [r7, #27]
 8105190:	b2db      	uxtb	r3, r3
 8105192:	2200      	movs	r2, #0
 8105194:	461c      	mov	r4, r3
 8105196:	4615      	mov	r5, r2
 8105198:	e043      	b.n	8105222 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 810519a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810519c:	2b00      	cmp	r3, #0
 810519e:	d012      	beq.n	81051c6 <metal_io_read+0x8e>
 81051a0:	683b      	ldr	r3, [r7, #0]
 81051a2:	2b02      	cmp	r3, #2
 81051a4:	d10f      	bne.n	81051c6 <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 81051a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81051a8:	627b      	str	r3, [r7, #36]	@ 0x24
 81051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81051ac:	f3bf 8f5b 	dmb	ish
 81051b0:	881b      	ldrh	r3, [r3, #0]
 81051b2:	f3bf 8f5b 	dmb	ish
 81051b6:	b29b      	uxth	r3, r3
 81051b8:	833b      	strh	r3, [r7, #24]
 81051ba:	8b3b      	ldrh	r3, [r7, #24]
 81051bc:	b29b      	uxth	r3, r3
 81051be:	2200      	movs	r2, #0
 81051c0:	461c      	mov	r4, r3
 81051c2:	4615      	mov	r5, r2
 81051c4:	e02d      	b.n	8105222 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 81051c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81051c8:	2b00      	cmp	r3, #0
 81051ca:	d010      	beq.n	81051ee <metal_io_read+0xb6>
 81051cc:	683b      	ldr	r3, [r7, #0]
 81051ce:	2b04      	cmp	r3, #4
 81051d0:	d10d      	bne.n	81051ee <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 81051d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81051d4:	623b      	str	r3, [r7, #32]
 81051d6:	6a3b      	ldr	r3, [r7, #32]
 81051d8:	f3bf 8f5b 	dmb	ish
 81051dc:	681b      	ldr	r3, [r3, #0]
 81051de:	f3bf 8f5b 	dmb	ish
 81051e2:	617b      	str	r3, [r7, #20]
 81051e4:	697b      	ldr	r3, [r7, #20]
 81051e6:	2200      	movs	r2, #0
 81051e8:	461c      	mov	r4, r3
 81051ea:	4615      	mov	r5, r2
 81051ec:	e019      	b.n	8105222 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 81051ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81051f0:	2b00      	cmp	r3, #0
 81051f2:	d010      	beq.n	8105216 <metal_io_read+0xde>
 81051f4:	683b      	ldr	r3, [r7, #0]
 81051f6:	2b04      	cmp	r3, #4
 81051f8:	d10d      	bne.n	8105216 <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 81051fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81051fc:	61fb      	str	r3, [r7, #28]
 81051fe:	69fb      	ldr	r3, [r7, #28]
 8105200:	f3bf 8f5b 	dmb	ish
 8105204:	681b      	ldr	r3, [r3, #0]
 8105206:	f3bf 8f5b 	dmb	ish
 810520a:	613b      	str	r3, [r7, #16]
 810520c:	693b      	ldr	r3, [r7, #16]
 810520e:	2200      	movs	r2, #0
 8105210:	461c      	mov	r4, r3
 8105212:	4615      	mov	r5, r2
 8105214:	e005      	b.n	8105222 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8105216:	4b06      	ldr	r3, [pc, #24]	@ (8105230 <metal_io_read+0xf8>)
 8105218:	4a06      	ldr	r2, [pc, #24]	@ (8105234 <metal_io_read+0xfc>)
 810521a:	21f0      	movs	r1, #240	@ 0xf0
 810521c:	4806      	ldr	r0, [pc, #24]	@ (8105238 <metal_io_read+0x100>)
 810521e:	f001 fe3f 	bl	8106ea0 <__assert_func>
	return 0; /* quiet compiler */
}
 8105222:	4622      	mov	r2, r4
 8105224:	462b      	mov	r3, r5
 8105226:	4610      	mov	r0, r2
 8105228:	4619      	mov	r1, r3
 810522a:	3730      	adds	r7, #48	@ 0x30
 810522c:	46bd      	mov	sp, r7
 810522e:	bdb0      	pop	{r4, r5, r7, pc}
 8105230:	081082e0 	.word	0x081082e0
 8105234:	08108490 	.word	0x08108490
 8105238:	081082e4 	.word	0x081082e4

0810523c <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 810523c:	b580      	push	{r7, lr}
 810523e:	b082      	sub	sp, #8
 8105240:	af00      	add	r7, sp, #0
 8105242:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8105244:	6878      	ldr	r0, [r7, #4]
 8105246:	f001 fe49 	bl	8106edc <malloc>
 810524a:	4603      	mov	r3, r0
}
 810524c:	4618      	mov	r0, r3
 810524e:	3708      	adds	r7, #8
 8105250:	46bd      	mov	sp, r7
 8105252:	bd80      	pop	{r7, pc}

08105254 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8105254:	b580      	push	{r7, lr}
 8105256:	b082      	sub	sp, #8
 8105258:	af00      	add	r7, sp, #0
 810525a:	6078      	str	r0, [r7, #4]
	free(ptr);
 810525c:	6878      	ldr	r0, [r7, #4]
 810525e:	f001 fe45 	bl	8106eec <free>
}
 8105262:	bf00      	nop
 8105264:	3708      	adds	r7, #8
 8105266:	46bd      	mov	sp, r7
 8105268:	bd80      	pop	{r7, pc}

0810526a <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 810526a:	b580      	push	{r7, lr}
 810526c:	b084      	sub	sp, #16
 810526e:	af00      	add	r7, sp, #0
 8105270:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8105272:	687b      	ldr	r3, [r7, #4]
 8105274:	3307      	adds	r3, #7
 8105276:	00db      	lsls	r3, r3, #3
 8105278:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 810527a:	68f8      	ldr	r0, [r7, #12]
 810527c:	f7ff ffde 	bl	810523c <metal_allocate_memory>
 8105280:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 8105282:	68bb      	ldr	r3, [r7, #8]
 8105284:	2b00      	cmp	r3, #0
 8105286:	d004      	beq.n	8105292 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8105288:	68fa      	ldr	r2, [r7, #12]
 810528a:	2100      	movs	r1, #0
 810528c:	68b8      	ldr	r0, [r7, #8]
 810528e:	f002 f81a 	bl	81072c6 <memset>
	}

	return vqs;
 8105292:	68bb      	ldr	r3, [r7, #8]
}
 8105294:	4618      	mov	r0, r3
 8105296:	3710      	adds	r7, #16
 8105298:	46bd      	mov	sp, r7
 810529a:	bd80      	pop	{r7, pc}

0810529c <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 810529c:	b580      	push	{r7, lr}
 810529e:	b086      	sub	sp, #24
 81052a0:	af00      	add	r7, sp, #0
 81052a2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 81052a4:	687b      	ldr	r3, [r7, #4]
 81052a6:	891b      	ldrh	r3, [r3, #8]
 81052a8:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 81052aa:	687b      	ldr	r3, [r7, #4]
 81052ac:	681b      	ldr	r3, [r3, #0]
 81052ae:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81052b0:	693b      	ldr	r3, [r7, #16]
 81052b2:	3b18      	subs	r3, #24
 81052b4:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 81052b6:	693b      	ldr	r3, [r7, #16]
 81052b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81052ba:	697a      	ldr	r2, [r7, #20]
 81052bc:	429a      	cmp	r2, r3
 81052be:	d905      	bls.n	81052cc <rproc_virtio_virtqueue_notify+0x30>
 81052c0:	4b0d      	ldr	r3, [pc, #52]	@ (81052f8 <rproc_virtio_virtqueue_notify+0x5c>)
 81052c2:	4a0e      	ldr	r2, [pc, #56]	@ (81052fc <rproc_virtio_virtqueue_notify+0x60>)
 81052c4:	2133      	movs	r1, #51	@ 0x33
 81052c6:	480e      	ldr	r0, [pc, #56]	@ (8105300 <rproc_virtio_virtqueue_notify+0x64>)
 81052c8:	f001 fdea 	bl	8106ea0 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 81052cc:	693b      	ldr	r3, [r7, #16]
 81052ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 81052d0:	697a      	ldr	r2, [r7, #20]
 81052d2:	4613      	mov	r3, r2
 81052d4:	005b      	lsls	r3, r3, #1
 81052d6:	4413      	add	r3, r2
 81052d8:	00db      	lsls	r3, r3, #3
 81052da:	440b      	add	r3, r1
 81052dc:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 81052de:	68fb      	ldr	r3, [r7, #12]
 81052e0:	691b      	ldr	r3, [r3, #16]
 81052e2:	68fa      	ldr	r2, [r7, #12]
 81052e4:	6810      	ldr	r0, [r2, #0]
 81052e6:	68ba      	ldr	r2, [r7, #8]
 81052e8:	6912      	ldr	r2, [r2, #16]
 81052ea:	4611      	mov	r1, r2
 81052ec:	4798      	blx	r3
}
 81052ee:	bf00      	nop
 81052f0:	3718      	adds	r7, #24
 81052f2:	46bd      	mov	sp, r7
 81052f4:	bd80      	pop	{r7, pc}
 81052f6:	bf00      	nop
 81052f8:	0810832c 	.word	0x0810832c
 81052fc:	08108470 	.word	0x08108470
 8105300:	08108348 	.word	0x08108348

08105304 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8105304:	b580      	push	{r7, lr}
 8105306:	b086      	sub	sp, #24
 8105308:	af00      	add	r7, sp, #0
 810530a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 810530c:	687b      	ldr	r3, [r7, #4]
 810530e:	3b18      	subs	r3, #24
 8105310:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8105312:	697b      	ldr	r3, [r7, #20]
 8105314:	689b      	ldr	r3, [r3, #8]
 8105316:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8105318:	697b      	ldr	r3, [r7, #20]
 810531a:	68db      	ldr	r3, [r3, #12]
 810531c:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 810531e:	693b      	ldr	r3, [r7, #16]
 8105320:	3318      	adds	r3, #24
 8105322:	4619      	mov	r1, r3
 8105324:	68f8      	ldr	r0, [r7, #12]
 8105326:	f7ff feee 	bl	8105106 <metal_io_virt_to_offset>
 810532a:	4601      	mov	r1, r0
 810532c:	2301      	movs	r3, #1
 810532e:	2205      	movs	r2, #5
 8105330:	68f8      	ldr	r0, [r7, #12]
 8105332:	f7ff ff01 	bl	8105138 <metal_io_read>
 8105336:	4602      	mov	r2, r0
 8105338:	460b      	mov	r3, r1
 810533a:	4613      	mov	r3, r2
 810533c:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 810533e:	7afb      	ldrb	r3, [r7, #11]
}
 8105340:	4618      	mov	r0, r3
 8105342:	3718      	adds	r7, #24
 8105344:	46bd      	mov	sp, r7
 8105346:	bd80      	pop	{r7, pc}

08105348 <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8105348:	b580      	push	{r7, lr}
 810534a:	b086      	sub	sp, #24
 810534c:	af00      	add	r7, sp, #0
 810534e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	3b18      	subs	r3, #24
 8105354:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8105356:	697b      	ldr	r3, [r7, #20]
 8105358:	689b      	ldr	r3, [r3, #8]
 810535a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 810535c:	697b      	ldr	r3, [r7, #20]
 810535e:	68db      	ldr	r3, [r3, #12]
 8105360:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8105362:	693b      	ldr	r3, [r7, #16]
 8105364:	330c      	adds	r3, #12
 8105366:	4619      	mov	r1, r3
 8105368:	68f8      	ldr	r0, [r7, #12]
 810536a:	f7ff fecc 	bl	8105106 <metal_io_virt_to_offset>
 810536e:	4601      	mov	r1, r0
 8105370:	2304      	movs	r3, #4
 8105372:	2205      	movs	r2, #5
 8105374:	68f8      	ldr	r0, [r7, #12]
 8105376:	f7ff fedf 	bl	8105138 <metal_io_read>
 810537a:	4602      	mov	r2, r0
 810537c:	460b      	mov	r3, r1
 810537e:	4613      	mov	r3, r2
 8105380:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8105382:	68bb      	ldr	r3, [r7, #8]
}
 8105384:	4618      	mov	r0, r3
 8105386:	3718      	adds	r7, #24
 8105388:	46bd      	mov	sp, r7
 810538a:	bd80      	pop	{r7, pc}

0810538c <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 810538c:	b480      	push	{r7}
 810538e:	b083      	sub	sp, #12
 8105390:	af00      	add	r7, sp, #0
 8105392:	6078      	str	r0, [r7, #4]
 8105394:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8105396:	2300      	movs	r3, #0
}
 8105398:	4618      	mov	r0, r3
 810539a:	370c      	adds	r7, #12
 810539c:	46bd      	mov	sp, r7
 810539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053a2:	4770      	bx	lr

081053a4 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 81053a4:	b480      	push	{r7}
 81053a6:	b085      	sub	sp, #20
 81053a8:	af00      	add	r7, sp, #0
 81053aa:	60f8      	str	r0, [r7, #12]
 81053ac:	60b9      	str	r1, [r7, #8]
 81053ae:	607a      	str	r2, [r7, #4]
 81053b0:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 81053b2:	bf00      	nop
 81053b4:	3714      	adds	r7, #20
 81053b6:	46bd      	mov	sp, r7
 81053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053bc:	4770      	bx	lr
	...

081053c0 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 81053c0:	b580      	push	{r7, lr}
 81053c2:	b08e      	sub	sp, #56	@ 0x38
 81053c4:	af00      	add	r7, sp, #0
 81053c6:	60f8      	str	r0, [r7, #12]
 81053c8:	60b9      	str	r1, [r7, #8]
 81053ca:	607a      	str	r2, [r7, #4]
 81053cc:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 81053ce:	687b      	ldr	r3, [r7, #4]
 81053d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 81053d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81053d4:	7e5b      	ldrb	r3, [r3, #25]
 81053d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 81053d8:	2050      	movs	r0, #80	@ 0x50
 81053da:	f7ff ff2f 	bl	810523c <metal_allocate_memory>
 81053de:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
 81053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81053e2:	2b00      	cmp	r3, #0
 81053e4:	d101      	bne.n	81053ea <rproc_virtio_create_vdev+0x2a>
		return NULL;
 81053e6:	2300      	movs	r3, #0
 81053e8:	e092      	b.n	8105510 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 81053ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81053ec:	4613      	mov	r3, r2
 81053ee:	005b      	lsls	r3, r3, #1
 81053f0:	4413      	add	r3, r2
 81053f2:	00db      	lsls	r3, r3, #3
 81053f4:	4618      	mov	r0, r3
 81053f6:	f7ff ff21 	bl	810523c <metal_allocate_memory>
 81053fa:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 81053fc:	6a3b      	ldr	r3, [r7, #32]
 81053fe:	2b00      	cmp	r3, #0
 8105400:	f000 8081 	beq.w	8105506 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8105404:	2250      	movs	r2, #80	@ 0x50
 8105406:	2100      	movs	r1, #0
 8105408:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810540a:	f001 ff5c 	bl	81072c6 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 810540e:	2218      	movs	r2, #24
 8105410:	2100      	movs	r1, #0
 8105412:	6a38      	ldr	r0, [r7, #32]
 8105414:	f001 ff57 	bl	81072c6 <memset>
	vdev = &rpvdev->vdev;
 8105418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810541a:	3318      	adds	r3, #24
 810541c:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 810541e:	2300      	movs	r3, #0
 8105420:	637b      	str	r3, [r7, #52]	@ 0x34
 8105422:	e025      	b.n	8105470 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8105424:	2300      	movs	r3, #0
 8105426:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8105428:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810542a:	4613      	mov	r3, r2
 810542c:	009b      	lsls	r3, r3, #2
 810542e:	4413      	add	r3, r2
 8105430:	009b      	lsls	r3, r3, #2
 8105432:	3318      	adds	r3, #24
 8105434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105436:	4413      	add	r3, r2
 8105438:	3304      	adds	r3, #4
 810543a:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 810543c:	68fb      	ldr	r3, [r7, #12]
 810543e:	2b00      	cmp	r3, #0
 8105440:	d102      	bne.n	8105448 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8105442:	69bb      	ldr	r3, [r7, #24]
 8105444:	689b      	ldr	r3, [r3, #8]
 8105446:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8105448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810544a:	f7ff ff0e 	bl	810526a <virtqueue_allocate>
 810544e:	6178      	str	r0, [r7, #20]
		if (!vq)
 8105450:	697b      	ldr	r3, [r7, #20]
 8105452:	2b00      	cmp	r3, #0
 8105454:	d031      	beq.n	81054ba <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 8105456:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8105458:	4613      	mov	r3, r2
 810545a:	005b      	lsls	r3, r3, #1
 810545c:	4413      	add	r3, r2
 810545e:	00db      	lsls	r3, r3, #3
 8105460:	461a      	mov	r2, r3
 8105462:	6a3b      	ldr	r3, [r7, #32]
 8105464:	4413      	add	r3, r2
 8105466:	697a      	ldr	r2, [r7, #20]
 8105468:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 810546a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810546c:	3301      	adds	r3, #1
 810546e:	637b      	str	r3, [r7, #52]	@ 0x34
 8105470:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8105472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105474:	429a      	cmp	r2, r3
 8105476:	d3d5      	bcc.n	8105424 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8105478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810547a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810547c:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 810547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105480:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8105482:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8105484:	69fb      	ldr	r3, [r7, #28]
 8105486:	6a3a      	ldr	r2, [r7, #32]
 8105488:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 810548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810548c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810548e:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8105490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105492:	683a      	ldr	r2, [r7, #0]
 8105494:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 8105496:	69fb      	ldr	r3, [r7, #28]
 8105498:	68ba      	ldr	r2, [r7, #8]
 810549a:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 810549c:	69fb      	ldr	r3, [r7, #28]
 810549e:	68fa      	ldr	r2, [r7, #12]
 81054a0:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 81054a2:	69fb      	ldr	r3, [r7, #28]
 81054a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81054a6:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 81054a8:	69fb      	ldr	r3, [r7, #28]
 81054aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81054ac:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 81054ae:	69fb      	ldr	r3, [r7, #28]
 81054b0:	4a19      	ldr	r2, [pc, #100]	@ (8105518 <rproc_virtio_create_vdev+0x158>)
 81054b2:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 81054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81054b6:	3318      	adds	r3, #24
 81054b8:	e02a      	b.n	8105510 <rproc_virtio_create_vdev+0x150>
			goto err1;
 81054ba:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 81054bc:	2300      	movs	r3, #0
 81054be:	637b      	str	r3, [r7, #52]	@ 0x34
 81054c0:	e019      	b.n	81054f6 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 81054c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81054c4:	4613      	mov	r3, r2
 81054c6:	005b      	lsls	r3, r3, #1
 81054c8:	4413      	add	r3, r2
 81054ca:	00db      	lsls	r3, r3, #3
 81054cc:	461a      	mov	r2, r3
 81054ce:	6a3b      	ldr	r3, [r7, #32]
 81054d0:	4413      	add	r3, r2
 81054d2:	681b      	ldr	r3, [r3, #0]
 81054d4:	2b00      	cmp	r3, #0
 81054d6:	d00b      	beq.n	81054f0 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 81054d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81054da:	4613      	mov	r3, r2
 81054dc:	005b      	lsls	r3, r3, #1
 81054de:	4413      	add	r3, r2
 81054e0:	00db      	lsls	r3, r3, #3
 81054e2:	461a      	mov	r2, r3
 81054e4:	6a3b      	ldr	r3, [r7, #32]
 81054e6:	4413      	add	r3, r2
 81054e8:	681b      	ldr	r3, [r3, #0]
 81054ea:	4618      	mov	r0, r3
 81054ec:	f7ff feb2 	bl	8105254 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 81054f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81054f2:	3301      	adds	r3, #1
 81054f4:	637b      	str	r3, [r7, #52]	@ 0x34
 81054f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81054f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81054fa:	429a      	cmp	r2, r3
 81054fc:	d3e1      	bcc.n	81054c2 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 81054fe:	6a38      	ldr	r0, [r7, #32]
 8105500:	f7ff fea8 	bl	8105254 <metal_free_memory>
 8105504:	e000      	b.n	8105508 <rproc_virtio_create_vdev+0x148>
		goto err0;
 8105506:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8105508:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810550a:	f7ff fea3 	bl	8105254 <metal_free_memory>
	return NULL;
 810550e:	2300      	movs	r3, #0
}
 8105510:	4618      	mov	r0, r3
 8105512:	3738      	adds	r7, #56	@ 0x38
 8105514:	46bd      	mov	sp, r7
 8105516:	bd80      	pop	{r7, pc}
 8105518:	0810844c 	.word	0x0810844c

0810551c <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 810551c:	b480      	push	{r7}
 810551e:	b087      	sub	sp, #28
 8105520:	af00      	add	r7, sp, #0
 8105522:	60f8      	str	r0, [r7, #12]
 8105524:	60b9      	str	r1, [r7, #8]
 8105526:	607a      	str	r2, [r7, #4]
 8105528:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 810552a:	68fb      	ldr	r3, [r7, #12]
 810552c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810552e:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8105530:	68ba      	ldr	r2, [r7, #8]
 8105532:	697b      	ldr	r3, [r7, #20]
 8105534:	429a      	cmp	r2, r3
 8105536:	d302      	bcc.n	810553e <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8105538:	f06f 0301 	mvn.w	r3, #1
 810553c:	e019      	b.n	8105572 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 810553e:	68fb      	ldr	r3, [r7, #12]
 8105540:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8105542:	68ba      	ldr	r2, [r7, #8]
 8105544:	4613      	mov	r3, r2
 8105546:	005b      	lsls	r3, r3, #1
 8105548:	4413      	add	r3, r2
 810554a:	00db      	lsls	r3, r3, #3
 810554c:	440b      	add	r3, r1
 810554e:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8105550:	693b      	ldr	r3, [r7, #16]
 8105552:	6a3a      	ldr	r2, [r7, #32]
 8105554:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 8105556:	693b      	ldr	r3, [r7, #16]
 8105558:	687a      	ldr	r2, [r7, #4]
 810555a:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 810555c:	693b      	ldr	r3, [r7, #16]
 810555e:	683a      	ldr	r2, [r7, #0]
 8105560:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8105562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105564:	b29a      	uxth	r2, r3
 8105566:	693b      	ldr	r3, [r7, #16]
 8105568:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 810556a:	693b      	ldr	r3, [r7, #16]
 810556c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810556e:	609a      	str	r2, [r3, #8]

	return 0;
 8105570:	2300      	movs	r3, #0
}
 8105572:	4618      	mov	r0, r3
 8105574:	371c      	adds	r7, #28
 8105576:	46bd      	mov	sp, r7
 8105578:	f85d 7b04 	ldr.w	r7, [sp], #4
 810557c:	4770      	bx	lr

0810557e <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 810557e:	b580      	push	{r7, lr}
 8105580:	b086      	sub	sp, #24
 8105582:	af00      	add	r7, sp, #0
 8105584:	6078      	str	r0, [r7, #4]
 8105586:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8105588:	687b      	ldr	r3, [r7, #4]
 810558a:	2b00      	cmp	r3, #0
 810558c:	d102      	bne.n	8105594 <rproc_virtio_notified+0x16>
		return -EINVAL;
 810558e:	f06f 0315 	mvn.w	r3, #21
 8105592:	e02c      	b.n	81055ee <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8105594:	687b      	ldr	r3, [r7, #4]
 8105596:	681b      	ldr	r3, [r3, #0]
 8105598:	683a      	ldr	r2, [r7, #0]
 810559a:	429a      	cmp	r2, r3
 810559c:	d101      	bne.n	81055a2 <rproc_virtio_notified+0x24>
		return 0;
 810559e:	2300      	movs	r3, #0
 81055a0:	e025      	b.n	81055ee <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81055a6:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 81055a8:	2300      	movs	r3, #0
 81055aa:	617b      	str	r3, [r7, #20]
 81055ac:	e01a      	b.n	81055e4 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 81055ae:	687b      	ldr	r3, [r7, #4]
 81055b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 81055b2:	697a      	ldr	r2, [r7, #20]
 81055b4:	4613      	mov	r3, r2
 81055b6:	005b      	lsls	r3, r3, #1
 81055b8:	4413      	add	r3, r2
 81055ba:	00db      	lsls	r3, r3, #3
 81055bc:	440b      	add	r3, r1
 81055be:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 81055c0:	68fb      	ldr	r3, [r7, #12]
 81055c2:	691b      	ldr	r3, [r3, #16]
 81055c4:	683a      	ldr	r2, [r7, #0]
 81055c6:	429a      	cmp	r2, r3
 81055c8:	d003      	beq.n	81055d2 <rproc_virtio_notified+0x54>
 81055ca:	683b      	ldr	r3, [r7, #0]
 81055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81055d0:	d105      	bne.n	81055de <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 81055d2:	68fb      	ldr	r3, [r7, #12]
 81055d4:	681b      	ldr	r3, [r3, #0]
 81055d6:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 81055d8:	68b8      	ldr	r0, [r7, #8]
 81055da:	f001 fa1b 	bl	8106a14 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 81055de:	697b      	ldr	r3, [r7, #20]
 81055e0:	3301      	adds	r3, #1
 81055e2:	617b      	str	r3, [r7, #20]
 81055e4:	697a      	ldr	r2, [r7, #20]
 81055e6:	693b      	ldr	r3, [r7, #16]
 81055e8:	429a      	cmp	r2, r3
 81055ea:	d3e0      	bcc.n	81055ae <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 81055ec:	2300      	movs	r3, #0
}
 81055ee:	4618      	mov	r0, r3
 81055f0:	3718      	adds	r7, #24
 81055f2:	46bd      	mov	sp, r7
 81055f4:	bd80      	pop	{r7, pc}

081055f6 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 81055f6:	b580      	push	{r7, lr}
 81055f8:	b084      	sub	sp, #16
 81055fa:	af00      	add	r7, sp, #0
 81055fc:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 81055fe:	687b      	ldr	r3, [r7, #4]
 8105600:	699b      	ldr	r3, [r3, #24]
 8105602:	2b00      	cmp	r3, #0
 8105604:	d00a      	beq.n	810561c <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 8105606:	6878      	ldr	r0, [r7, #4]
 8105608:	f7ff fe7c 	bl	8105304 <rproc_virtio_get_status>
 810560c:	4603      	mov	r3, r0
 810560e:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8105610:	7bfb      	ldrb	r3, [r7, #15]
 8105612:	f003 0304 	and.w	r3, r3, #4
 8105616:	2b00      	cmp	r3, #0
 8105618:	d102      	bne.n	8105620 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 810561a:	e7f4      	b.n	8105606 <rproc_virtio_wait_remote_ready+0x10>
		return;
 810561c:	bf00      	nop
 810561e:	e000      	b.n	8105622 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8105620:	bf00      	nop
	}
}
 8105622:	3710      	adds	r7, #16
 8105624:	46bd      	mov	sp, r7
 8105626:	bd80      	pop	{r7, pc}

08105628 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8105628:	b480      	push	{r7}
 810562a:	b083      	sub	sp, #12
 810562c:	af00      	add	r7, sp, #0
 810562e:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8105630:	bf00      	nop
 8105632:	687b      	ldr	r3, [r7, #4]
 8105634:	2201      	movs	r2, #1
 8105636:	4611      	mov	r1, r2
 8105638:	f3bf 8f5b 	dmb	ish
 810563c:	e8d3 2f4f 	ldrexb	r2, [r3]
 8105640:	e8c3 1f40 	strexb	r0, r1, [r3]
 8105644:	2800      	cmp	r0, #0
 8105646:	d1f9      	bne.n	810563c <__metal_mutex_acquire+0x14>
 8105648:	f3bf 8f5b 	dmb	ish
 810564c:	b2d3      	uxtb	r3, r2
 810564e:	2b00      	cmp	r3, #0
 8105650:	d1ef      	bne.n	8105632 <__metal_mutex_acquire+0xa>
		;
	}
}
 8105652:	bf00      	nop
 8105654:	bf00      	nop
 8105656:	370c      	adds	r7, #12
 8105658:	46bd      	mov	sp, r7
 810565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810565e:	4770      	bx	lr

08105660 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8105660:	b480      	push	{r7}
 8105662:	b083      	sub	sp, #12
 8105664:	af00      	add	r7, sp, #0
 8105666:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8105668:	687b      	ldr	r3, [r7, #4]
 810566a:	f3bf 8f5b 	dmb	ish
 810566e:	2200      	movs	r2, #0
 8105670:	701a      	strb	r2, [r3, #0]
 8105672:	f3bf 8f5b 	dmb	ish
}
 8105676:	bf00      	nop
 8105678:	370c      	adds	r7, #12
 810567a:	46bd      	mov	sp, r7
 810567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105680:	4770      	bx	lr

08105682 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8105682:	b580      	push	{r7, lr}
 8105684:	b082      	sub	sp, #8
 8105686:	af00      	add	r7, sp, #0
 8105688:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 810568a:	6878      	ldr	r0, [r7, #4]
 810568c:	f7ff ffcc 	bl	8105628 <__metal_mutex_acquire>
}
 8105690:	bf00      	nop
 8105692:	3708      	adds	r7, #8
 8105694:	46bd      	mov	sp, r7
 8105696:	bd80      	pop	{r7, pc}

08105698 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8105698:	b580      	push	{r7, lr}
 810569a:	b082      	sub	sp, #8
 810569c:	af00      	add	r7, sp, #0
 810569e:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 81056a0:	6878      	ldr	r0, [r7, #4]
 81056a2:	f7ff ffdd 	bl	8105660 <__metal_mutex_release>
}
 81056a6:	bf00      	nop
 81056a8:	3708      	adds	r7, #8
 81056aa:	46bd      	mov	sp, r7
 81056ac:	bd80      	pop	{r7, pc}

081056ae <metal_list_add_before>:
{
 81056ae:	b480      	push	{r7}
 81056b0:	b083      	sub	sp, #12
 81056b2:	af00      	add	r7, sp, #0
 81056b4:	6078      	str	r0, [r7, #4]
 81056b6:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 81056b8:	687b      	ldr	r3, [r7, #4]
 81056ba:	685a      	ldr	r2, [r3, #4]
 81056bc:	683b      	ldr	r3, [r7, #0]
 81056be:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 81056c0:	683b      	ldr	r3, [r7, #0]
 81056c2:	687a      	ldr	r2, [r7, #4]
 81056c4:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 81056c6:	683b      	ldr	r3, [r7, #0]
 81056c8:	681b      	ldr	r3, [r3, #0]
 81056ca:	683a      	ldr	r2, [r7, #0]
 81056cc:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 81056ce:	683b      	ldr	r3, [r7, #0]
 81056d0:	685b      	ldr	r3, [r3, #4]
 81056d2:	683a      	ldr	r2, [r7, #0]
 81056d4:	601a      	str	r2, [r3, #0]
}
 81056d6:	bf00      	nop
 81056d8:	370c      	adds	r7, #12
 81056da:	46bd      	mov	sp, r7
 81056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056e0:	4770      	bx	lr

081056e2 <metal_list_add_tail>:
{
 81056e2:	b580      	push	{r7, lr}
 81056e4:	b082      	sub	sp, #8
 81056e6:	af00      	add	r7, sp, #0
 81056e8:	6078      	str	r0, [r7, #4]
 81056ea:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 81056ec:	6839      	ldr	r1, [r7, #0]
 81056ee:	6878      	ldr	r0, [r7, #4]
 81056f0:	f7ff ffdd 	bl	81056ae <metal_list_add_before>
}
 81056f4:	bf00      	nop
 81056f6:	3708      	adds	r7, #8
 81056f8:	46bd      	mov	sp, r7
 81056fa:	bd80      	pop	{r7, pc}

081056fc <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 81056fc:	b480      	push	{r7}
 81056fe:	b083      	sub	sp, #12
 8105700:	af00      	add	r7, sp, #0
 8105702:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8105704:	687b      	ldr	r3, [r7, #4]
 8105706:	681b      	ldr	r3, [r3, #0]
 8105708:	687a      	ldr	r2, [r7, #4]
 810570a:	6852      	ldr	r2, [r2, #4]
 810570c:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	685b      	ldr	r3, [r3, #4]
 8105712:	687a      	ldr	r2, [r7, #4]
 8105714:	6812      	ldr	r2, [r2, #0]
 8105716:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	687a      	ldr	r2, [r7, #4]
 810571c:	605a      	str	r2, [r3, #4]
 810571e:	687b      	ldr	r3, [r7, #4]
 8105720:	685a      	ldr	r2, [r3, #4]
 8105722:	687b      	ldr	r3, [r7, #4]
 8105724:	601a      	str	r2, [r3, #0]
}
 8105726:	bf00      	nop
 8105728:	370c      	adds	r7, #12
 810572a:	46bd      	mov	sp, r7
 810572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105730:	4770      	bx	lr

08105732 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8105732:	b480      	push	{r7}
 8105734:	b083      	sub	sp, #12
 8105736:	af00      	add	r7, sp, #0
 8105738:	6078      	str	r0, [r7, #4]
 810573a:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 810573c:	683b      	ldr	r3, [r7, #0]
 810573e:	095b      	lsrs	r3, r3, #5
 8105740:	009a      	lsls	r2, r3, #2
 8105742:	6879      	ldr	r1, [r7, #4]
 8105744:	440a      	add	r2, r1
 8105746:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105748:	683a      	ldr	r2, [r7, #0]
 810574a:	f002 021f 	and.w	r2, r2, #31
 810574e:	2001      	movs	r0, #1
 8105750:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8105754:	009b      	lsls	r3, r3, #2
 8105756:	6878      	ldr	r0, [r7, #4]
 8105758:	4403      	add	r3, r0
 810575a:	430a      	orrs	r2, r1
 810575c:	601a      	str	r2, [r3, #0]
}
 810575e:	bf00      	nop
 8105760:	370c      	adds	r7, #12
 8105762:	46bd      	mov	sp, r7
 8105764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105768:	4770      	bx	lr

0810576a <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 810576a:	b480      	push	{r7}
 810576c:	b083      	sub	sp, #12
 810576e:	af00      	add	r7, sp, #0
 8105770:	6078      	str	r0, [r7, #4]
 8105772:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8105774:	683b      	ldr	r3, [r7, #0]
 8105776:	095b      	lsrs	r3, r3, #5
 8105778:	009b      	lsls	r3, r3, #2
 810577a:	687a      	ldr	r2, [r7, #4]
 810577c:	4413      	add	r3, r2
 810577e:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105780:	683b      	ldr	r3, [r7, #0]
 8105782:	f003 031f 	and.w	r3, r3, #31
 8105786:	2101      	movs	r1, #1
 8105788:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 810578c:	4013      	ands	r3, r2
}
 810578e:	4618      	mov	r0, r3
 8105790:	370c      	adds	r7, #12
 8105792:	46bd      	mov	sp, r7
 8105794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105798:	4770      	bx	lr

0810579a <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 810579a:	b480      	push	{r7}
 810579c:	b083      	sub	sp, #12
 810579e:	af00      	add	r7, sp, #0
 81057a0:	6078      	str	r0, [r7, #4]
 81057a2:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 81057a4:	683b      	ldr	r3, [r7, #0]
 81057a6:	095b      	lsrs	r3, r3, #5
 81057a8:	009a      	lsls	r2, r3, #2
 81057aa:	6879      	ldr	r1, [r7, #4]
 81057ac:	440a      	add	r2, r1
 81057ae:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 81057b0:	683a      	ldr	r2, [r7, #0]
 81057b2:	f002 021f 	and.w	r2, r2, #31
 81057b6:	2001      	movs	r0, #1
 81057b8:	fa00 f202 	lsl.w	r2, r0, r2
 81057bc:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 81057be:	009b      	lsls	r3, r3, #2
 81057c0:	6878      	ldr	r0, [r7, #4]
 81057c2:	4403      	add	r3, r0
 81057c4:	400a      	ands	r2, r1
 81057c6:	601a      	str	r2, [r3, #0]
}
 81057c8:	bf00      	nop
 81057ca:	370c      	adds	r7, #12
 81057cc:	46bd      	mov	sp, r7
 81057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057d2:	4770      	bx	lr

081057d4 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 81057d4:	b580      	push	{r7, lr}
 81057d6:	b082      	sub	sp, #8
 81057d8:	af00      	add	r7, sp, #0
 81057da:	6078      	str	r0, [r7, #4]
 81057dc:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 81057de:	6839      	ldr	r1, [r7, #0]
 81057e0:	6878      	ldr	r0, [r7, #4]
 81057e2:	f7ff ffc2 	bl	810576a <metal_bitmap_is_bit_set>
 81057e6:	4603      	mov	r3, r0
 81057e8:	2b00      	cmp	r3, #0
 81057ea:	bf0c      	ite	eq
 81057ec:	2301      	moveq	r3, #1
 81057ee:	2300      	movne	r3, #0
 81057f0:	b2db      	uxtb	r3, r3
}
 81057f2:	4618      	mov	r0, r3
 81057f4:	3708      	adds	r7, #8
 81057f6:	46bd      	mov	sp, r7
 81057f8:	bd80      	pop	{r7, pc}

081057fa <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 81057fa:	b580      	push	{r7, lr}
 81057fc:	b086      	sub	sp, #24
 81057fe:	af00      	add	r7, sp, #0
 8105800:	60f8      	str	r0, [r7, #12]
 8105802:	60b9      	str	r1, [r7, #8]
 8105804:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8105806:	68bb      	ldr	r3, [r7, #8]
 8105808:	617b      	str	r3, [r7, #20]
 810580a:	e002      	b.n	8105812 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 810580c:	697b      	ldr	r3, [r7, #20]
 810580e:	3301      	adds	r3, #1
 8105810:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8105812:	697a      	ldr	r2, [r7, #20]
 8105814:	687b      	ldr	r3, [r7, #4]
 8105816:	429a      	cmp	r2, r3
 8105818:	d207      	bcs.n	810582a <metal_bitmap_next_clear_bit+0x30>
 810581a:	697b      	ldr	r3, [r7, #20]
 810581c:	4619      	mov	r1, r3
 810581e:	68f8      	ldr	r0, [r7, #12]
 8105820:	f7ff ffd8 	bl	81057d4 <metal_bitmap_is_bit_clear>
 8105824:	4603      	mov	r3, r0
 8105826:	2b00      	cmp	r3, #0
 8105828:	d0f0      	beq.n	810580c <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 810582a:	697b      	ldr	r3, [r7, #20]
}
 810582c:	4618      	mov	r0, r3
 810582e:	3718      	adds	r7, #24
 8105830:	46bd      	mov	sp, r7
 8105832:	bd80      	pop	{r7, pc}

08105834 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8105834:	b580      	push	{r7, lr}
 8105836:	b084      	sub	sp, #16
 8105838:	af00      	add	r7, sp, #0
 810583a:	60f8      	str	r0, [r7, #12]
 810583c:	60b9      	str	r1, [r7, #8]
 810583e:	607a      	str	r2, [r7, #4]
 8105840:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8105842:	68fb      	ldr	r3, [r7, #12]
 8105844:	2220      	movs	r2, #32
 8105846:	68b9      	ldr	r1, [r7, #8]
 8105848:	4618      	mov	r0, r3
 810584a:	f001 fd56 	bl	81072fa <strncpy>
	ept->addr = src;
 810584e:	68fb      	ldr	r3, [r7, #12]
 8105850:	687a      	ldr	r2, [r7, #4]
 8105852:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8105854:	68fb      	ldr	r3, [r7, #12]
 8105856:	683a      	ldr	r2, [r7, #0]
 8105858:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 810585a:	68fb      	ldr	r3, [r7, #12]
 810585c:	69ba      	ldr	r2, [r7, #24]
 810585e:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8105860:	68fb      	ldr	r3, [r7, #12]
 8105862:	69fa      	ldr	r2, [r7, #28]
 8105864:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8105866:	bf00      	nop
 8105868:	3710      	adds	r7, #16
 810586a:	46bd      	mov	sp, r7
 810586c:	bd80      	pop	{r7, pc}

0810586e <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 810586e:	b580      	push	{r7, lr}
 8105870:	b084      	sub	sp, #16
 8105872:	af00      	add	r7, sp, #0
 8105874:	6078      	str	r0, [r7, #4]
 8105876:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8105878:	f04f 33ff 	mov.w	r3, #4294967295
 810587c:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 810587e:	683b      	ldr	r3, [r7, #0]
 8105880:	461a      	mov	r2, r3
 8105882:	2100      	movs	r1, #0
 8105884:	6878      	ldr	r0, [r7, #4]
 8105886:	f7ff ffb8 	bl	81057fa <metal_bitmap_next_clear_bit>
 810588a:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 810588c:	683b      	ldr	r3, [r7, #0]
 810588e:	68ba      	ldr	r2, [r7, #8]
 8105890:	429a      	cmp	r2, r3
 8105892:	d206      	bcs.n	81058a2 <rpmsg_get_address+0x34>
		addr = nextbit;
 8105894:	68bb      	ldr	r3, [r7, #8]
 8105896:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8105898:	68bb      	ldr	r3, [r7, #8]
 810589a:	4619      	mov	r1, r3
 810589c:	6878      	ldr	r0, [r7, #4]
 810589e:	f7ff ff48 	bl	8105732 <metal_bitmap_set_bit>
	}

	return addr;
 81058a2:	68fb      	ldr	r3, [r7, #12]
}
 81058a4:	4618      	mov	r0, r3
 81058a6:	3710      	adds	r7, #16
 81058a8:	46bd      	mov	sp, r7
 81058aa:	bd80      	pop	{r7, pc}

081058ac <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 81058ac:	b580      	push	{r7, lr}
 81058ae:	b084      	sub	sp, #16
 81058b0:	af00      	add	r7, sp, #0
 81058b2:	60f8      	str	r0, [r7, #12]
 81058b4:	60b9      	str	r1, [r7, #8]
 81058b6:	607a      	str	r2, [r7, #4]
	if (addr < size)
 81058b8:	687a      	ldr	r2, [r7, #4]
 81058ba:	68bb      	ldr	r3, [r7, #8]
 81058bc:	429a      	cmp	r2, r3
 81058be:	da03      	bge.n	81058c8 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 81058c0:	6879      	ldr	r1, [r7, #4]
 81058c2:	68f8      	ldr	r0, [r7, #12]
 81058c4:	f7ff ff69 	bl	810579a <metal_bitmap_clear_bit>
}
 81058c8:	bf00      	nop
 81058ca:	3710      	adds	r7, #16
 81058cc:	46bd      	mov	sp, r7
 81058ce:	bd80      	pop	{r7, pc}

081058d0 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 81058d0:	b580      	push	{r7, lr}
 81058d2:	b084      	sub	sp, #16
 81058d4:	af00      	add	r7, sp, #0
 81058d6:	60f8      	str	r0, [r7, #12]
 81058d8:	60b9      	str	r1, [r7, #8]
 81058da:	607a      	str	r2, [r7, #4]
	if (addr < size)
 81058dc:	687a      	ldr	r2, [r7, #4]
 81058de:	68bb      	ldr	r3, [r7, #8]
 81058e0:	429a      	cmp	r2, r3
 81058e2:	da05      	bge.n	81058f0 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 81058e4:	6879      	ldr	r1, [r7, #4]
 81058e6:	68f8      	ldr	r0, [r7, #12]
 81058e8:	f7ff ff3f 	bl	810576a <metal_bitmap_is_bit_set>
 81058ec:	4603      	mov	r3, r0
 81058ee:	e000      	b.n	81058f2 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 81058f0:	4b02      	ldr	r3, [pc, #8]	@ (81058fc <rpmsg_is_address_set+0x2c>)
}
 81058f2:	4618      	mov	r0, r3
 81058f4:	3710      	adds	r7, #16
 81058f6:	46bd      	mov	sp, r7
 81058f8:	bd80      	pop	{r7, pc}
 81058fa:	bf00      	nop
 81058fc:	fffff82d 	.word	0xfffff82d

08105900 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8105900:	b580      	push	{r7, lr}
 8105902:	b084      	sub	sp, #16
 8105904:	af00      	add	r7, sp, #0
 8105906:	60f8      	str	r0, [r7, #12]
 8105908:	60b9      	str	r1, [r7, #8]
 810590a:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 810590c:	687a      	ldr	r2, [r7, #4]
 810590e:	68bb      	ldr	r3, [r7, #8]
 8105910:	429a      	cmp	r2, r3
 8105912:	da05      	bge.n	8105920 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8105914:	6879      	ldr	r1, [r7, #4]
 8105916:	68f8      	ldr	r0, [r7, #12]
 8105918:	f7ff ff0b 	bl	8105732 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 810591c:	2300      	movs	r3, #0
 810591e:	e000      	b.n	8105922 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8105920:	4b02      	ldr	r3, [pc, #8]	@ (810592c <rpmsg_set_address+0x2c>)
	}
}
 8105922:	4618      	mov	r0, r3
 8105924:	3710      	adds	r7, #16
 8105926:	46bd      	mov	sp, r7
 8105928:	bd80      	pop	{r7, pc}
 810592a:	bf00      	nop
 810592c:	fffff82d 	.word	0xfffff82d

08105930 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8105930:	b590      	push	{r4, r7, lr}
 8105932:	b089      	sub	sp, #36	@ 0x24
 8105934:	af02      	add	r7, sp, #8
 8105936:	60f8      	str	r0, [r7, #12]
 8105938:	60b9      	str	r1, [r7, #8]
 810593a:	607a      	str	r2, [r7, #4]
 810593c:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 810593e:	68fb      	ldr	r3, [r7, #12]
 8105940:	2b00      	cmp	r3, #0
 8105942:	d00a      	beq.n	810595a <rpmsg_send_offchannel_raw+0x2a>
 8105944:	68fb      	ldr	r3, [r7, #12]
 8105946:	6a1b      	ldr	r3, [r3, #32]
 8105948:	2b00      	cmp	r3, #0
 810594a:	d006      	beq.n	810595a <rpmsg_send_offchannel_raw+0x2a>
 810594c:	683b      	ldr	r3, [r7, #0]
 810594e:	2b00      	cmp	r3, #0
 8105950:	d003      	beq.n	810595a <rpmsg_send_offchannel_raw+0x2a>
 8105952:	687b      	ldr	r3, [r7, #4]
 8105954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105958:	d101      	bne.n	810595e <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 810595a:	4b0d      	ldr	r3, [pc, #52]	@ (8105990 <rpmsg_send_offchannel_raw+0x60>)
 810595c:	e014      	b.n	8105988 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 810595e:	68fb      	ldr	r3, [r7, #12]
 8105960:	6a1b      	ldr	r3, [r3, #32]
 8105962:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8105964:	697b      	ldr	r3, [r7, #20]
 8105966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105968:	2b00      	cmp	r3, #0
 810596a:	d00c      	beq.n	8105986 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 810596c:	697b      	ldr	r3, [r7, #20]
 810596e:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8105970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105972:	9301      	str	r3, [sp, #4]
 8105974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105976:	9300      	str	r3, [sp, #0]
 8105978:	683b      	ldr	r3, [r7, #0]
 810597a:	687a      	ldr	r2, [r7, #4]
 810597c:	68b9      	ldr	r1, [r7, #8]
 810597e:	6978      	ldr	r0, [r7, #20]
 8105980:	47a0      	blx	r4
 8105982:	4603      	mov	r3, r0
 8105984:	e000      	b.n	8105988 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8105986:	4b02      	ldr	r3, [pc, #8]	@ (8105990 <rpmsg_send_offchannel_raw+0x60>)
}
 8105988:	4618      	mov	r0, r3
 810598a:	371c      	adds	r7, #28
 810598c:	46bd      	mov	sp, r7
 810598e:	bd90      	pop	{r4, r7, pc}
 8105990:	fffff82d 	.word	0xfffff82d

08105994 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8105994:	b580      	push	{r7, lr}
 8105996:	b090      	sub	sp, #64	@ 0x40
 8105998:	af02      	add	r7, sp, #8
 810599a:	6078      	str	r0, [r7, #4]
 810599c:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 810599e:	683b      	ldr	r3, [r7, #0]
 81059a0:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
 81059a2:	687b      	ldr	r3, [r7, #4]
 81059a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81059a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 81059a8:	6879      	ldr	r1, [r7, #4]
 81059aa:	f107 030c 	add.w	r3, r7, #12
 81059ae:	2220      	movs	r2, #32
 81059b0:	4618      	mov	r0, r3
 81059b2:	f001 fca2 	bl	81072fa <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 81059b6:	687b      	ldr	r3, [r7, #4]
 81059b8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 81059ba:	f107 030c 	add.w	r3, r7, #12
 81059be:	2201      	movs	r2, #1
 81059c0:	9201      	str	r2, [sp, #4]
 81059c2:	2228      	movs	r2, #40	@ 0x28
 81059c4:	9200      	str	r2, [sp, #0]
 81059c6:	2235      	movs	r2, #53	@ 0x35
 81059c8:	6878      	ldr	r0, [r7, #4]
 81059ca:	f7ff ffb1 	bl	8105930 <rpmsg_send_offchannel_raw>
 81059ce:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 81059d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81059d2:	2b00      	cmp	r3, #0
 81059d4:	da01      	bge.n	81059da <rpmsg_send_ns_message+0x46>
		return ret;
 81059d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81059d8:	e000      	b.n	81059dc <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 81059da:	2300      	movs	r3, #0
}
 81059dc:	4618      	mov	r0, r3
 81059de:	3738      	adds	r7, #56	@ 0x38
 81059e0:	46bd      	mov	sp, r7
 81059e2:	bd80      	pop	{r7, pc}

081059e4 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 81059e4:	b580      	push	{r7, lr}
 81059e6:	b088      	sub	sp, #32
 81059e8:	af00      	add	r7, sp, #0
 81059ea:	60f8      	str	r0, [r7, #12]
 81059ec:	60b9      	str	r1, [r7, #8]
 81059ee:	607a      	str	r2, [r7, #4]
 81059f0:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 81059f2:	68fb      	ldr	r3, [r7, #12]
 81059f4:	681b      	ldr	r3, [r3, #0]
 81059f6:	61fb      	str	r3, [r7, #28]
 81059f8:	e04b      	b.n	8105a92 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 81059fa:	2300      	movs	r3, #0
 81059fc:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 81059fe:	69fb      	ldr	r3, [r7, #28]
 8105a00:	3b34      	subs	r3, #52	@ 0x34
 8105a02:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105a0a:	d006      	beq.n	8105a1a <rpmsg_get_endpoint+0x36>
 8105a0c:	697b      	ldr	r3, [r7, #20]
 8105a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105a10:	687a      	ldr	r2, [r7, #4]
 8105a12:	429a      	cmp	r2, r3
 8105a14:	d101      	bne.n	8105a1a <rpmsg_get_endpoint+0x36>
			return ept;
 8105a16:	697b      	ldr	r3, [r7, #20]
 8105a18:	e040      	b.n	8105a9c <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8105a1a:	697b      	ldr	r3, [r7, #20]
 8105a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105a1e:	687a      	ldr	r2, [r7, #4]
 8105a20:	429a      	cmp	r2, r3
 8105a22:	d106      	bne.n	8105a32 <rpmsg_get_endpoint+0x4e>
 8105a24:	697b      	ldr	r3, [r7, #20]
 8105a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105a28:	683a      	ldr	r2, [r7, #0]
 8105a2a:	429a      	cmp	r2, r3
 8105a2c:	d101      	bne.n	8105a32 <rpmsg_get_endpoint+0x4e>
			return ept;
 8105a2e:	697b      	ldr	r3, [r7, #20]
 8105a30:	e034      	b.n	8105a9c <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8105a32:	68bb      	ldr	r3, [r7, #8]
 8105a34:	2b00      	cmp	r3, #0
 8105a36:	d00c      	beq.n	8105a52 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8105a38:	697b      	ldr	r3, [r7, #20]
 8105a3a:	2220      	movs	r2, #32
 8105a3c:	68b9      	ldr	r1, [r7, #8]
 8105a3e:	4618      	mov	r0, r3
 8105a40:	f001 fc49 	bl	81072d6 <strncmp>
 8105a44:	4603      	mov	r3, r0
 8105a46:	2b00      	cmp	r3, #0
 8105a48:	bf0c      	ite	eq
 8105a4a:	2301      	moveq	r3, #1
 8105a4c:	2300      	movne	r3, #0
 8105a4e:	b2db      	uxtb	r3, r3
 8105a50:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8105a52:	68bb      	ldr	r3, [r7, #8]
 8105a54:	2b00      	cmp	r3, #0
 8105a56:	d018      	beq.n	8105a8a <rpmsg_get_endpoint+0xa6>
 8105a58:	69bb      	ldr	r3, [r7, #24]
 8105a5a:	2b00      	cmp	r3, #0
 8105a5c:	d015      	beq.n	8105a8a <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8105a5e:	683b      	ldr	r3, [r7, #0]
 8105a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105a64:	d006      	beq.n	8105a74 <rpmsg_get_endpoint+0x90>
 8105a66:	697b      	ldr	r3, [r7, #20]
 8105a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105a6a:	683a      	ldr	r2, [r7, #0]
 8105a6c:	429a      	cmp	r2, r3
 8105a6e:	d101      	bne.n	8105a74 <rpmsg_get_endpoint+0x90>
			return ept;
 8105a70:	697b      	ldr	r3, [r7, #20]
 8105a72:	e013      	b.n	8105a9c <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105a7a:	d107      	bne.n	8105a8c <rpmsg_get_endpoint+0xa8>
 8105a7c:	697b      	ldr	r3, [r7, #20]
 8105a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105a84:	d102      	bne.n	8105a8c <rpmsg_get_endpoint+0xa8>
			return ept;
 8105a86:	697b      	ldr	r3, [r7, #20]
 8105a88:	e008      	b.n	8105a9c <rpmsg_get_endpoint+0xb8>
			continue;
 8105a8a:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8105a8c:	69fb      	ldr	r3, [r7, #28]
 8105a8e:	681b      	ldr	r3, [r3, #0]
 8105a90:	61fb      	str	r3, [r7, #28]
 8105a92:	68fb      	ldr	r3, [r7, #12]
 8105a94:	69fa      	ldr	r2, [r7, #28]
 8105a96:	429a      	cmp	r2, r3
 8105a98:	d1af      	bne.n	81059fa <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8105a9a:	2300      	movs	r3, #0
}
 8105a9c:	4618      	mov	r0, r3
 8105a9e:	3720      	adds	r7, #32
 8105aa0:	46bd      	mov	sp, r7
 8105aa2:	bd80      	pop	{r7, pc}

08105aa4 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8105aa4:	b580      	push	{r7, lr}
 8105aa6:	b084      	sub	sp, #16
 8105aa8:	af00      	add	r7, sp, #0
 8105aaa:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8105aac:	687b      	ldr	r3, [r7, #4]
 8105aae:	2b00      	cmp	r3, #0
 8105ab0:	d016      	beq.n	8105ae0 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8105ab2:	687b      	ldr	r3, [r7, #4]
 8105ab4:	6a1b      	ldr	r3, [r3, #32]
 8105ab6:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105ac0:	d008      	beq.n	8105ad4 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105ac2:	68fb      	ldr	r3, [r7, #12]
 8105ac4:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
 8105ac8:	687b      	ldr	r3, [r7, #4]
 8105aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105acc:	461a      	mov	r2, r3
 8105ace:	2180      	movs	r1, #128	@ 0x80
 8105ad0:	f7ff feec 	bl	81058ac <rpmsg_release_address>
	metal_list_del(&ept->node);
 8105ad4:	687b      	ldr	r3, [r7, #4]
 8105ad6:	3334      	adds	r3, #52	@ 0x34
 8105ad8:	4618      	mov	r0, r3
 8105ada:	f7ff fe0f 	bl	81056fc <metal_list_del>
 8105ade:	e000      	b.n	8105ae2 <rpmsg_unregister_endpoint+0x3e>
		return;
 8105ae0:	bf00      	nop
}
 8105ae2:	3710      	adds	r7, #16
 8105ae4:	46bd      	mov	sp, r7
 8105ae6:	bd80      	pop	{r7, pc}

08105ae8 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8105ae8:	b580      	push	{r7, lr}
 8105aea:	b082      	sub	sp, #8
 8105aec:	af00      	add	r7, sp, #0
 8105aee:	6078      	str	r0, [r7, #4]
 8105af0:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8105af2:	683b      	ldr	r3, [r7, #0]
 8105af4:	687a      	ldr	r2, [r7, #4]
 8105af6:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8105af8:	687a      	ldr	r2, [r7, #4]
 8105afa:	683b      	ldr	r3, [r7, #0]
 8105afc:	3334      	adds	r3, #52	@ 0x34
 8105afe:	4619      	mov	r1, r3
 8105b00:	4610      	mov	r0, r2
 8105b02:	f7ff fdee 	bl	81056e2 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8105b06:	2300      	movs	r3, #0
}
 8105b08:	4618      	mov	r0, r3
 8105b0a:	3708      	adds	r7, #8
 8105b0c:	46bd      	mov	sp, r7
 8105b0e:	bd80      	pop	{r7, pc}

08105b10 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8105b10:	b580      	push	{r7, lr}
 8105b12:	b088      	sub	sp, #32
 8105b14:	af02      	add	r7, sp, #8
 8105b16:	60f8      	str	r0, [r7, #12]
 8105b18:	60b9      	str	r1, [r7, #8]
 8105b1a:	607a      	str	r2, [r7, #4]
 8105b1c:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8105b1e:	683b      	ldr	r3, [r7, #0]
 8105b20:	613b      	str	r3, [r7, #16]

	if (!ept)
 8105b22:	68fb      	ldr	r3, [r7, #12]
 8105b24:	2b00      	cmp	r3, #0
 8105b26:	d101      	bne.n	8105b2c <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8105b28:	4b37      	ldr	r3, [pc, #220]	@ (8105c08 <rpmsg_create_ept+0xf8>)
 8105b2a:	e068      	b.n	8105bfe <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8105b2c:	68bb      	ldr	r3, [r7, #8]
 8105b2e:	3358      	adds	r3, #88	@ 0x58
 8105b30:	4618      	mov	r0, r3
 8105b32:	f7ff fda6 	bl	8105682 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8105b36:	683b      	ldr	r3, [r7, #0]
 8105b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105b3c:	d018      	beq.n	8105b70 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8105b3e:	68bb      	ldr	r3, [r7, #8]
 8105b40:	3348      	adds	r3, #72	@ 0x48
 8105b42:	683a      	ldr	r2, [r7, #0]
 8105b44:	2180      	movs	r1, #128	@ 0x80
 8105b46:	4618      	mov	r0, r3
 8105b48:	f7ff fec2 	bl	81058d0 <rpmsg_is_address_set>
 8105b4c:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8105b4e:	697b      	ldr	r3, [r7, #20]
 8105b50:	2b00      	cmp	r3, #0
 8105b52:	d107      	bne.n	8105b64 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105b54:	68bb      	ldr	r3, [r7, #8]
 8105b56:	3348      	adds	r3, #72	@ 0x48
 8105b58:	683a      	ldr	r2, [r7, #0]
 8105b5a:	2180      	movs	r1, #128	@ 0x80
 8105b5c:	4618      	mov	r0, r3
 8105b5e:	f7ff fecf 	bl	8105900 <rpmsg_set_address>
 8105b62:	e00c      	b.n	8105b7e <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8105b64:	697b      	ldr	r3, [r7, #20]
 8105b66:	2b00      	cmp	r3, #0
 8105b68:	dd40      	ble.n	8105bec <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8105b6a:	2300      	movs	r3, #0
 8105b6c:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8105b6e:	e040      	b.n	8105bf2 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8105b70:	68bb      	ldr	r3, [r7, #8]
 8105b72:	3348      	adds	r3, #72	@ 0x48
 8105b74:	2180      	movs	r1, #128	@ 0x80
 8105b76:	4618      	mov	r0, r3
 8105b78:	f7ff fe79 	bl	810586e <rpmsg_get_address>
 8105b7c:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8105b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105b80:	9301      	str	r3, [sp, #4]
 8105b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105b84:	9300      	str	r3, [sp, #0]
 8105b86:	6a3b      	ldr	r3, [r7, #32]
 8105b88:	693a      	ldr	r2, [r7, #16]
 8105b8a:	6879      	ldr	r1, [r7, #4]
 8105b8c:	68f8      	ldr	r0, [r7, #12]
 8105b8e:	f7ff fe51 	bl	8105834 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8105b92:	68f9      	ldr	r1, [r7, #12]
 8105b94:	68b8      	ldr	r0, [r7, #8]
 8105b96:	f7ff ffa7 	bl	8105ae8 <rpmsg_register_endpoint>
 8105b9a:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8105b9c:	697b      	ldr	r3, [r7, #20]
 8105b9e:	2b00      	cmp	r3, #0
 8105ba0:	da06      	bge.n	8105bb0 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8105ba2:	68bb      	ldr	r3, [r7, #8]
 8105ba4:	3348      	adds	r3, #72	@ 0x48
 8105ba6:	693a      	ldr	r2, [r7, #16]
 8105ba8:	2180      	movs	r1, #128	@ 0x80
 8105baa:	4618      	mov	r0, r3
 8105bac:	f7ff fe7e 	bl	81058ac <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8105bb0:	697b      	ldr	r3, [r7, #20]
 8105bb2:	2b00      	cmp	r3, #0
 8105bb4:	d11c      	bne.n	8105bf0 <rpmsg_create_ept+0xe0>
 8105bb6:	68fb      	ldr	r3, [r7, #12]
 8105bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105bbe:	d117      	bne.n	8105bf0 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8105bc0:	68bb      	ldr	r3, [r7, #8]
 8105bc2:	3358      	adds	r3, #88	@ 0x58
 8105bc4:	4618      	mov	r0, r3
 8105bc6:	f7ff fd67 	bl	8105698 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8105bca:	2100      	movs	r1, #0
 8105bcc:	68f8      	ldr	r0, [r7, #12]
 8105bce:	f7ff fee1 	bl	8105994 <rpmsg_send_ns_message>
 8105bd2:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8105bd4:	68bb      	ldr	r3, [r7, #8]
 8105bd6:	3358      	adds	r3, #88	@ 0x58
 8105bd8:	4618      	mov	r0, r3
 8105bda:	f7ff fd52 	bl	8105682 <metal_mutex_acquire>
		if (status)
 8105bde:	697b      	ldr	r3, [r7, #20]
 8105be0:	2b00      	cmp	r3, #0
 8105be2:	d005      	beq.n	8105bf0 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8105be4:	68f8      	ldr	r0, [r7, #12]
 8105be6:	f7ff ff5d 	bl	8105aa4 <rpmsg_unregister_endpoint>
 8105bea:	e002      	b.n	8105bf2 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8105bec:	bf00      	nop
 8105bee:	e000      	b.n	8105bf2 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8105bf0:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8105bf2:	68bb      	ldr	r3, [r7, #8]
 8105bf4:	3358      	adds	r3, #88	@ 0x58
 8105bf6:	4618      	mov	r0, r3
 8105bf8:	f7ff fd4e 	bl	8105698 <metal_mutex_release>
	return status;
 8105bfc:	697b      	ldr	r3, [r7, #20]
}
 8105bfe:	4618      	mov	r0, r3
 8105c00:	3718      	adds	r7, #24
 8105c02:	46bd      	mov	sp, r7
 8105c04:	bd80      	pop	{r7, pc}
 8105c06:	bf00      	nop
 8105c08:	fffff82d 	.word	0xfffff82d

08105c0c <__metal_cache_invalidate>:
{
 8105c0c:	b580      	push	{r7, lr}
 8105c0e:	b082      	sub	sp, #8
 8105c10:	af00      	add	r7, sp, #0
 8105c12:	6078      	str	r0, [r7, #4]
 8105c14:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8105c16:	6839      	ldr	r1, [r7, #0]
 8105c18:	6878      	ldr	r0, [r7, #4]
 8105c1a:	f000 fc58 	bl	81064ce <metal_machine_cache_invalidate>
}
 8105c1e:	bf00      	nop
 8105c20:	3708      	adds	r7, #8
 8105c22:	46bd      	mov	sp, r7
 8105c24:	bd80      	pop	{r7, pc}

08105c26 <metal_cache_invalidate>:
{
 8105c26:	b580      	push	{r7, lr}
 8105c28:	b082      	sub	sp, #8
 8105c2a:	af00      	add	r7, sp, #0
 8105c2c:	6078      	str	r0, [r7, #4]
 8105c2e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8105c30:	6839      	ldr	r1, [r7, #0]
 8105c32:	6878      	ldr	r0, [r7, #4]
 8105c34:	f7ff ffea 	bl	8105c0c <__metal_cache_invalidate>
}
 8105c38:	bf00      	nop
 8105c3a:	3708      	adds	r7, #8
 8105c3c:	46bd      	mov	sp, r7
 8105c3e:	bd80      	pop	{r7, pc}

08105c40 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8105c40:	b480      	push	{r7}
 8105c42:	b083      	sub	sp, #12
 8105c44:	af00      	add	r7, sp, #0
 8105c46:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8105c48:	2300      	movs	r3, #0
}
 8105c4a:	4618      	mov	r0, r3
 8105c4c:	370c      	adds	r7, #12
 8105c4e:	46bd      	mov	sp, r7
 8105c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c54:	4770      	bx	lr

08105c56 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8105c56:	b580      	push	{r7, lr}
 8105c58:	b082      	sub	sp, #8
 8105c5a:	af00      	add	r7, sp, #0
 8105c5c:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8105c5e:	6878      	ldr	r0, [r7, #4]
 8105c60:	f7ff ffee 	bl	8105c40 <__metal_sleep_usec>
 8105c64:	4603      	mov	r3, r0
}
 8105c66:	4618      	mov	r0, r3
 8105c68:	3708      	adds	r7, #8
 8105c6a:	46bd      	mov	sp, r7
 8105c6c:	bd80      	pop	{r7, pc}

08105c6e <metal_list_init>:
{
 8105c6e:	b480      	push	{r7}
 8105c70:	b083      	sub	sp, #12
 8105c72:	af00      	add	r7, sp, #0
 8105c74:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8105c76:	687b      	ldr	r3, [r7, #4]
 8105c78:	687a      	ldr	r2, [r7, #4]
 8105c7a:	605a      	str	r2, [r3, #4]
 8105c7c:	687b      	ldr	r3, [r7, #4]
 8105c7e:	685a      	ldr	r2, [r3, #4]
 8105c80:	687b      	ldr	r3, [r7, #4]
 8105c82:	601a      	str	r2, [r3, #0]
}
 8105c84:	bf00      	nop
 8105c86:	370c      	adds	r7, #12
 8105c88:	46bd      	mov	sp, r7
 8105c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c8e:	4770      	bx	lr

08105c90 <metal_io_virt_to_offset>:
{
 8105c90:	b480      	push	{r7}
 8105c92:	b085      	sub	sp, #20
 8105c94:	af00      	add	r7, sp, #0
 8105c96:	6078      	str	r0, [r7, #4]
 8105c98:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8105c9a:	687b      	ldr	r3, [r7, #4]
 8105c9c:	681b      	ldr	r3, [r3, #0]
 8105c9e:	683a      	ldr	r2, [r7, #0]
 8105ca0:	1ad3      	subs	r3, r2, r3
 8105ca2:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8105ca4:	687b      	ldr	r3, [r7, #4]
 8105ca6:	689b      	ldr	r3, [r3, #8]
 8105ca8:	68fa      	ldr	r2, [r7, #12]
 8105caa:	429a      	cmp	r2, r3
 8105cac:	d201      	bcs.n	8105cb2 <metal_io_virt_to_offset+0x22>
 8105cae:	68fb      	ldr	r3, [r7, #12]
 8105cb0:	e001      	b.n	8105cb6 <metal_io_virt_to_offset+0x26>
 8105cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8105cb6:	4618      	mov	r0, r3
 8105cb8:	3714      	adds	r7, #20
 8105cba:	46bd      	mov	sp, r7
 8105cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cc0:	4770      	bx	lr

08105cc2 <__metal_mutex_init>:
{
 8105cc2:	b480      	push	{r7}
 8105cc4:	b085      	sub	sp, #20
 8105cc6:	af00      	add	r7, sp, #0
 8105cc8:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8105cca:	687b      	ldr	r3, [r7, #4]
 8105ccc:	60fb      	str	r3, [r7, #12]
 8105cce:	2300      	movs	r3, #0
 8105cd0:	60bb      	str	r3, [r7, #8]
 8105cd2:	68bb      	ldr	r3, [r7, #8]
 8105cd4:	461a      	mov	r2, r3
 8105cd6:	68fb      	ldr	r3, [r7, #12]
 8105cd8:	f3bf 8f5b 	dmb	ish
 8105cdc:	601a      	str	r2, [r3, #0]
 8105cde:	f3bf 8f5b 	dmb	ish
}
 8105ce2:	bf00      	nop
 8105ce4:	3714      	adds	r7, #20
 8105ce6:	46bd      	mov	sp, r7
 8105ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cec:	4770      	bx	lr

08105cee <__metal_mutex_acquire>:
{
 8105cee:	b480      	push	{r7}
 8105cf0:	b083      	sub	sp, #12
 8105cf2:	af00      	add	r7, sp, #0
 8105cf4:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8105cf6:	bf00      	nop
 8105cf8:	687b      	ldr	r3, [r7, #4]
 8105cfa:	2201      	movs	r2, #1
 8105cfc:	4611      	mov	r1, r2
 8105cfe:	f3bf 8f5b 	dmb	ish
 8105d02:	e8d3 2f4f 	ldrexb	r2, [r3]
 8105d06:	e8c3 1f40 	strexb	r0, r1, [r3]
 8105d0a:	2800      	cmp	r0, #0
 8105d0c:	d1f9      	bne.n	8105d02 <__metal_mutex_acquire+0x14>
 8105d0e:	f3bf 8f5b 	dmb	ish
 8105d12:	b2d3      	uxtb	r3, r2
 8105d14:	2b00      	cmp	r3, #0
 8105d16:	d1ef      	bne.n	8105cf8 <__metal_mutex_acquire+0xa>
}
 8105d18:	bf00      	nop
 8105d1a:	bf00      	nop
 8105d1c:	370c      	adds	r7, #12
 8105d1e:	46bd      	mov	sp, r7
 8105d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d24:	4770      	bx	lr

08105d26 <__metal_mutex_release>:
{
 8105d26:	b480      	push	{r7}
 8105d28:	b083      	sub	sp, #12
 8105d2a:	af00      	add	r7, sp, #0
 8105d2c:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8105d2e:	687b      	ldr	r3, [r7, #4]
 8105d30:	f3bf 8f5b 	dmb	ish
 8105d34:	2200      	movs	r2, #0
 8105d36:	701a      	strb	r2, [r3, #0]
 8105d38:	f3bf 8f5b 	dmb	ish
}
 8105d3c:	bf00      	nop
 8105d3e:	370c      	adds	r7, #12
 8105d40:	46bd      	mov	sp, r7
 8105d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d46:	4770      	bx	lr

08105d48 <metal_mutex_init>:
{
 8105d48:	b580      	push	{r7, lr}
 8105d4a:	b082      	sub	sp, #8
 8105d4c:	af00      	add	r7, sp, #0
 8105d4e:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8105d50:	6878      	ldr	r0, [r7, #4]
 8105d52:	f7ff ffb6 	bl	8105cc2 <__metal_mutex_init>
}
 8105d56:	bf00      	nop
 8105d58:	3708      	adds	r7, #8
 8105d5a:	46bd      	mov	sp, r7
 8105d5c:	bd80      	pop	{r7, pc}

08105d5e <metal_mutex_acquire>:
{
 8105d5e:	b580      	push	{r7, lr}
 8105d60:	b082      	sub	sp, #8
 8105d62:	af00      	add	r7, sp, #0
 8105d64:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8105d66:	6878      	ldr	r0, [r7, #4]
 8105d68:	f7ff ffc1 	bl	8105cee <__metal_mutex_acquire>
}
 8105d6c:	bf00      	nop
 8105d6e:	3708      	adds	r7, #8
 8105d70:	46bd      	mov	sp, r7
 8105d72:	bd80      	pop	{r7, pc}

08105d74 <metal_mutex_release>:
{
 8105d74:	b580      	push	{r7, lr}
 8105d76:	b082      	sub	sp, #8
 8105d78:	af00      	add	r7, sp, #0
 8105d7a:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8105d7c:	6878      	ldr	r0, [r7, #4]
 8105d7e:	f7ff ffd2 	bl	8105d26 <__metal_mutex_release>
}
 8105d82:	bf00      	nop
 8105d84:	3708      	adds	r7, #8
 8105d86:	46bd      	mov	sp, r7
 8105d88:	bd80      	pop	{r7, pc}

08105d8a <rpmsg_init_ept>:
{
 8105d8a:	b580      	push	{r7, lr}
 8105d8c:	b084      	sub	sp, #16
 8105d8e:	af00      	add	r7, sp, #0
 8105d90:	60f8      	str	r0, [r7, #12]
 8105d92:	60b9      	str	r1, [r7, #8]
 8105d94:	607a      	str	r2, [r7, #4]
 8105d96:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8105d98:	68fb      	ldr	r3, [r7, #12]
 8105d9a:	2220      	movs	r2, #32
 8105d9c:	68b9      	ldr	r1, [r7, #8]
 8105d9e:	4618      	mov	r0, r3
 8105da0:	f001 faab 	bl	81072fa <strncpy>
	ept->addr = src;
 8105da4:	68fb      	ldr	r3, [r7, #12]
 8105da6:	687a      	ldr	r2, [r7, #4]
 8105da8:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8105daa:	68fb      	ldr	r3, [r7, #12]
 8105dac:	683a      	ldr	r2, [r7, #0]
 8105dae:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8105db0:	68fb      	ldr	r3, [r7, #12]
 8105db2:	69ba      	ldr	r2, [r7, #24]
 8105db4:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8105db6:	68fb      	ldr	r3, [r7, #12]
 8105db8:	69fa      	ldr	r2, [r7, #28]
 8105dba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8105dbc:	bf00      	nop
 8105dbe:	3710      	adds	r7, #16
 8105dc0:	46bd      	mov	sp, r7
 8105dc2:	bd80      	pop	{r7, pc}

08105dc4 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8105dc4:	b480      	push	{r7}
 8105dc6:	b083      	sub	sp, #12
 8105dc8:	af00      	add	r7, sp, #0
 8105dca:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105dd0:	699b      	ldr	r3, [r3, #24]
}
 8105dd2:	4618      	mov	r0, r3
 8105dd4:	370c      	adds	r7, #12
 8105dd6:	46bd      	mov	sp, r7
 8105dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ddc:	4770      	bx	lr

08105dde <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8105dde:	b580      	push	{r7, lr}
 8105de0:	b082      	sub	sp, #8
 8105de2:	af00      	add	r7, sp, #0
 8105de4:	6078      	str	r0, [r7, #4]
 8105de6:	460b      	mov	r3, r1
 8105de8:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8105dea:	687b      	ldr	r3, [r7, #4]
 8105dec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105dee:	6a1b      	ldr	r3, [r3, #32]
 8105df0:	685b      	ldr	r3, [r3, #4]
 8105df2:	687a      	ldr	r2, [r7, #4]
 8105df4:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8105df6:	78f9      	ldrb	r1, [r7, #3]
 8105df8:	4610      	mov	r0, r2
 8105dfa:	4798      	blx	r3
}
 8105dfc:	bf00      	nop
 8105dfe:	3708      	adds	r7, #8
 8105e00:	46bd      	mov	sp, r7
 8105e02:	bd80      	pop	{r7, pc}

08105e04 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8105e04:	b580      	push	{r7, lr}
 8105e06:	b082      	sub	sp, #8
 8105e08:	af00      	add	r7, sp, #0
 8105e0a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8105e0c:	687b      	ldr	r3, [r7, #4]
 8105e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105e10:	6a1b      	ldr	r3, [r3, #32]
 8105e12:	681b      	ldr	r3, [r3, #0]
 8105e14:	687a      	ldr	r2, [r7, #4]
 8105e16:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8105e18:	4610      	mov	r0, r2
 8105e1a:	4798      	blx	r3
 8105e1c:	4603      	mov	r3, r0
}
 8105e1e:	4618      	mov	r0, r3
 8105e20:	3708      	adds	r7, #8
 8105e22:	46bd      	mov	sp, r7
 8105e24:	bd80      	pop	{r7, pc}

08105e26 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8105e26:	b580      	push	{r7, lr}
 8105e28:	b082      	sub	sp, #8
 8105e2a:	af00      	add	r7, sp, #0
 8105e2c:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8105e2e:	687b      	ldr	r3, [r7, #4]
 8105e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105e32:	6a1b      	ldr	r3, [r3, #32]
 8105e34:	689b      	ldr	r3, [r3, #8]
 8105e36:	687a      	ldr	r2, [r7, #4]
 8105e38:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8105e3a:	4610      	mov	r0, r2
 8105e3c:	4798      	blx	r3
 8105e3e:	4603      	mov	r3, r0
}
 8105e40:	4618      	mov	r0, r3
 8105e42:	3708      	adds	r7, #8
 8105e44:	46bd      	mov	sp, r7
 8105e46:	bd80      	pop	{r7, pc}

08105e48 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8105e48:	b580      	push	{r7, lr}
 8105e4a:	b086      	sub	sp, #24
 8105e4c:	af02      	add	r7, sp, #8
 8105e4e:	60f8      	str	r0, [r7, #12]
 8105e50:	60b9      	str	r1, [r7, #8]
 8105e52:	607a      	str	r2, [r7, #4]
 8105e54:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8105e56:	68fb      	ldr	r3, [r7, #12]
 8105e58:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8105e5a:	68b9      	ldr	r1, [r7, #8]
 8105e5c:	69bb      	ldr	r3, [r7, #24]
 8105e5e:	9300      	str	r3, [sp, #0]
 8105e60:	683b      	ldr	r3, [r7, #0]
 8105e62:	687a      	ldr	r2, [r7, #4]
 8105e64:	f000 fb4c 	bl	8106500 <virtio_create_virtqueues>
 8105e68:	4603      	mov	r3, r0
					callbacks);
}
 8105e6a:	4618      	mov	r0, r3
 8105e6c:	3710      	adds	r7, #16
 8105e6e:	46bd      	mov	sp, r7
 8105e70:	bd80      	pop	{r7, pc}

08105e72 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8105e72:	b580      	push	{r7, lr}
 8105e74:	b082      	sub	sp, #8
 8105e76:	af00      	add	r7, sp, #0
 8105e78:	6078      	str	r0, [r7, #4]
 8105e7a:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8105e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8105e80:	683a      	ldr	r2, [r7, #0]
 8105e82:	2100      	movs	r1, #0
 8105e84:	6878      	ldr	r0, [r7, #4]
 8105e86:	f7ff fdad 	bl	81059e4 <rpmsg_get_endpoint>
 8105e8a:	4603      	mov	r3, r0
}
 8105e8c:	4618      	mov	r0, r3
 8105e8e:	3708      	adds	r7, #8
 8105e90:	46bd      	mov	sp, r7
 8105e92:	bd80      	pop	{r7, pc}

08105e94 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8105e94:	b480      	push	{r7}
 8105e96:	b085      	sub	sp, #20
 8105e98:	af00      	add	r7, sp, #0
 8105e9a:	60f8      	str	r0, [r7, #12]
 8105e9c:	60b9      	str	r1, [r7, #8]
 8105e9e:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8105ea0:	68fb      	ldr	r3, [r7, #12]
 8105ea2:	2b00      	cmp	r3, #0
 8105ea4:	d01d      	beq.n	8105ee2 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8105ea6:	68fb      	ldr	r3, [r7, #12]
 8105ea8:	68ba      	ldr	r2, [r7, #8]
 8105eaa:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8105eac:	687b      	ldr	r3, [r7, #4]
 8105eae:	f003 0303 	and.w	r3, r3, #3
 8105eb2:	2b00      	cmp	r3, #0
 8105eb4:	d004      	beq.n	8105ec0 <rpmsg_virtio_init_shm_pool+0x2c>
 8105eb6:	687b      	ldr	r3, [r7, #4]
 8105eb8:	f023 0303 	bic.w	r3, r3, #3
 8105ebc:	3304      	adds	r3, #4
 8105ebe:	e000      	b.n	8105ec2 <rpmsg_virtio_init_shm_pool+0x2e>
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	68fa      	ldr	r2, [r7, #12]
 8105ec4:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8105ec6:	687b      	ldr	r3, [r7, #4]
 8105ec8:	f003 0303 	and.w	r3, r3, #3
 8105ecc:	2b00      	cmp	r3, #0
 8105ece:	d004      	beq.n	8105eda <rpmsg_virtio_init_shm_pool+0x46>
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	f023 0303 	bic.w	r3, r3, #3
 8105ed6:	3304      	adds	r3, #4
 8105ed8:	e000      	b.n	8105edc <rpmsg_virtio_init_shm_pool+0x48>
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	68fa      	ldr	r2, [r7, #12]
 8105ede:	6053      	str	r3, [r2, #4]
 8105ee0:	e000      	b.n	8105ee4 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8105ee2:	bf00      	nop
}
 8105ee4:	3714      	adds	r7, #20
 8105ee6:	46bd      	mov	sp, r7
 8105ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105eec:	4770      	bx	lr

08105eee <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8105eee:	b580      	push	{r7, lr}
 8105ef0:	b086      	sub	sp, #24
 8105ef2:	af00      	add	r7, sp, #0
 8105ef4:	60f8      	str	r0, [r7, #12]
 8105ef6:	60b9      	str	r1, [r7, #8]
 8105ef8:	607a      	str	r2, [r7, #4]
 8105efa:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8105efc:	68f8      	ldr	r0, [r7, #12]
 8105efe:	f7ff ff61 	bl	8105dc4 <rpmsg_virtio_get_role>
 8105f02:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8105f04:	697b      	ldr	r3, [r7, #20]
 8105f06:	2b01      	cmp	r3, #1
 8105f08:	d106      	bne.n	8105f18 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 8105f0a:	68fb      	ldr	r3, [r7, #12]
 8105f0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105f0e:	8879      	ldrh	r1, [r7, #2]
 8105f10:	687a      	ldr	r2, [r7, #4]
 8105f12:	4618      	mov	r0, r3
 8105f14:	f000 fc9e 	bl	8106854 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8105f18:	bf00      	nop
 8105f1a:	3718      	adds	r7, #24
 8105f1c:	46bd      	mov	sp, r7
 8105f1e:	bd80      	pop	{r7, pc}

08105f20 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8105f20:	b580      	push	{r7, lr}
 8105f22:	b086      	sub	sp, #24
 8105f24:	af00      	add	r7, sp, #0
 8105f26:	60f8      	str	r0, [r7, #12]
 8105f28:	60b9      	str	r1, [r7, #8]
 8105f2a:	607a      	str	r2, [r7, #4]
 8105f2c:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8105f2e:	68f8      	ldr	r0, [r7, #12]
 8105f30:	f7ff ff48 	bl	8105dc4 <rpmsg_virtio_get_role>
 8105f34:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8105f36:	697b      	ldr	r3, [r7, #20]
 8105f38:	2b01      	cmp	r3, #1
 8105f3a:	d108      	bne.n	8105f4e <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 8105f3c:	68fb      	ldr	r3, [r7, #12]
 8105f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105f40:	8879      	ldrh	r1, [r7, #2]
 8105f42:	687a      	ldr	r2, [r7, #4]
 8105f44:	4618      	mov	r0, r3
 8105f46:	f000 fc85 	bl	8106854 <virtqueue_add_consumed_buffer>
 8105f4a:	4603      	mov	r3, r0
 8105f4c:	e000      	b.n	8105f50 <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8105f4e:	2300      	movs	r3, #0
}
 8105f50:	4618      	mov	r0, r3
 8105f52:	3718      	adds	r7, #24
 8105f54:	46bd      	mov	sp, r7
 8105f56:	bd80      	pop	{r7, pc}

08105f58 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8105f58:	b580      	push	{r7, lr}
 8105f5a:	b086      	sub	sp, #24
 8105f5c:	af00      	add	r7, sp, #0
 8105f5e:	60f8      	str	r0, [r7, #12]
 8105f60:	60b9      	str	r1, [r7, #8]
 8105f62:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8105f64:	68f8      	ldr	r0, [r7, #12]
 8105f66:	f7ff ff2d 	bl	8105dc4 <rpmsg_virtio_get_role>
 8105f6a:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8105f6c:	2300      	movs	r3, #0
 8105f6e:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8105f70:	693b      	ldr	r3, [r7, #16]
 8105f72:	2b01      	cmp	r3, #1
 8105f74:	d107      	bne.n	8105f86 <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 8105f76:	68fb      	ldr	r3, [r7, #12]
 8105f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105f7a:	68ba      	ldr	r2, [r7, #8]
 8105f7c:	6879      	ldr	r1, [r7, #4]
 8105f7e:	4618      	mov	r0, r3
 8105f80:	f000 fc22 	bl	81067c8 <virtqueue_get_available_buffer>
 8105f84:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8105f86:	697b      	ldr	r3, [r7, #20]
}
 8105f88:	4618      	mov	r0, r3
 8105f8a:	3718      	adds	r7, #24
 8105f8c:	46bd      	mov	sp, r7
 8105f8e:	bd80      	pop	{r7, pc}

08105f90 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8105f90:	b580      	push	{r7, lr}
 8105f92:	b086      	sub	sp, #24
 8105f94:	af00      	add	r7, sp, #0
 8105f96:	60f8      	str	r0, [r7, #12]
 8105f98:	60b9      	str	r1, [r7, #8]
 8105f9a:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8105f9c:	68f8      	ldr	r0, [r7, #12]
 8105f9e:	f7ff ff11 	bl	8105dc4 <rpmsg_virtio_get_role>
 8105fa2:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8105fa4:	2300      	movs	r3, #0
 8105fa6:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8105fa8:	693b      	ldr	r3, [r7, #16]
 8105faa:	2b01      	cmp	r3, #1
 8105fac:	d107      	bne.n	8105fbe <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 8105fae:	68fb      	ldr	r3, [r7, #12]
 8105fb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105fb2:	68ba      	ldr	r2, [r7, #8]
 8105fb4:	6879      	ldr	r1, [r7, #4]
 8105fb6:	4618      	mov	r0, r3
 8105fb8:	f000 fc06 	bl	81067c8 <virtqueue_get_available_buffer>
 8105fbc:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8105fbe:	697b      	ldr	r3, [r7, #20]
 8105fc0:	2b00      	cmp	r3, #0
 8105fc2:	d005      	beq.n	8105fd0 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8105fc4:	68bb      	ldr	r3, [r7, #8]
 8105fc6:	681b      	ldr	r3, [r3, #0]
 8105fc8:	4619      	mov	r1, r3
 8105fca:	6978      	ldr	r0, [r7, #20]
 8105fcc:	f7ff fe2b 	bl	8105c26 <metal_cache_invalidate>
	}

	return data;
 8105fd0:	697b      	ldr	r3, [r7, #20]
}
 8105fd2:	4618      	mov	r0, r3
 8105fd4:	3718      	adds	r7, #24
 8105fd6:	46bd      	mov	sp, r7
 8105fd8:	bd80      	pop	{r7, pc}

08105fda <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 8105fda:	b580      	push	{r7, lr}
 8105fdc:	b084      	sub	sp, #16
 8105fde:	af00      	add	r7, sp, #0
 8105fe0:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 8105fe2:	6878      	ldr	r0, [r7, #4]
 8105fe4:	f7ff ff0e 	bl	8105e04 <rpmsg_virtio_get_status>
 8105fe8:	4603      	mov	r3, r0
 8105fea:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 8105fec:	7bfb      	ldrb	r3, [r7, #15]
 8105fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105ff2:	2b00      	cmp	r3, #0
 8105ff4:	d004      	beq.n	8106000 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 8105ff6:	2100      	movs	r1, #0
 8105ff8:	6878      	ldr	r0, [r7, #4]
 8105ffa:	f7ff fef0 	bl	8105dde <rpmsg_virtio_set_status>
 8105ffe:	e7f0      	b.n	8105fe2 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 8106000:	7bfb      	ldrb	r3, [r7, #15]
 8106002:	f003 0304 	and.w	r3, r3, #4
 8106006:	2b00      	cmp	r3, #0
 8106008:	d0eb      	beq.n	8105fe2 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 810600a:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 810600c:	4618      	mov	r0, r3
 810600e:	3710      	adds	r7, #16
 8106010:	46bd      	mov	sp, r7
 8106012:	bd80      	pop	{r7, pc}

08106014 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8106014:	b580      	push	{r7, lr}
 8106016:	b084      	sub	sp, #16
 8106018:	af00      	add	r7, sp, #0
 810601a:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 810601c:	6878      	ldr	r0, [r7, #4]
 810601e:	f7ff fed1 	bl	8105dc4 <rpmsg_virtio_get_role>
 8106022:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8106024:	2300      	movs	r3, #0
 8106026:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8106028:	68bb      	ldr	r3, [r7, #8]
 810602a:	2b01      	cmp	r3, #1
 810602c:	d107      	bne.n	810603e <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 810602e:	687b      	ldr	r3, [r7, #4]
 8106030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106032:	4618      	mov	r0, r3
 8106034:	f000 fc88 	bl	8106948 <virtqueue_get_desc_size>
 8106038:	4603      	mov	r3, r0
 810603a:	3b10      	subs	r3, #16
		length =
 810603c:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 810603e:	68fb      	ldr	r3, [r7, #12]
}
 8106040:	4618      	mov	r0, r3
 8106042:	3710      	adds	r7, #16
 8106044:	46bd      	mov	sp, r7
 8106046:	bd80      	pop	{r7, pc}

08106048 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8106048:	b580      	push	{r7, lr}
 810604a:	b090      	sub	sp, #64	@ 0x40
 810604c:	af00      	add	r7, sp, #0
 810604e:	60f8      	str	r0, [r7, #12]
 8106050:	60b9      	str	r1, [r7, #8]
 8106052:	607a      	str	r2, [r7, #4]
 8106054:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8106056:	2300      	movs	r3, #0
 8106058:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned short idx;
	int tick_count = 0;
 810605a:	2300      	movs	r3, #0
 810605c:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 810605e:	68fb      	ldr	r3, [r7, #12]
 8106060:	637b      	str	r3, [r7, #52]	@ 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8106062:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8106064:	f7ff fece 	bl	8105e04 <rpmsg_virtio_get_status>
 8106068:	4603      	mov	r3, r0
 810606a:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 810606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810606e:	f003 0304 	and.w	r3, r3, #4
 8106072:	2b00      	cmp	r3, #0
 8106074:	d101      	bne.n	810607a <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8106076:	4b46      	ldr	r3, [pc, #280]	@ (8106190 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8106078:	e086      	b.n	8106188 <rpmsg_virtio_send_offchannel_raw+0x140>
	}

	if (wait)
 810607a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810607c:	2b00      	cmp	r3, #0
 810607e:	d003      	beq.n	8106088 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8106080:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8106084:	63bb      	str	r3, [r7, #56]	@ 0x38
 8106086:	e001      	b.n	810608c <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8106088:	2300      	movs	r3, #0
 810608a:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 810608c:	68fb      	ldr	r3, [r7, #12]
 810608e:	3358      	adds	r3, #88	@ 0x58
 8106090:	4618      	mov	r0, r3
 8106092:	f7ff fe64 	bl	8105d5e <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8106096:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8106098:	f7ff ffbc 	bl	8106014 <_rpmsg_virtio_get_buffer_size>
 810609c:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (size <= avail_size)
 810609e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81060a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81060a2:	429a      	cmp	r2, r3
 81060a4:	dc08      	bgt.n	81060b8 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 81060a6:	f107 0216 	add.w	r2, r7, #22
 81060aa:	f107 0310 	add.w	r3, r7, #16
 81060ae:	4619      	mov	r1, r3
 81060b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 81060b2:	f7ff ff51 	bl	8105f58 <rpmsg_virtio_get_tx_buffer>
 81060b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 81060b8:	68fb      	ldr	r3, [r7, #12]
 81060ba:	3358      	adds	r3, #88	@ 0x58
 81060bc:	4618      	mov	r0, r3
 81060be:	f7ff fe59 	bl	8105d74 <metal_mutex_release>
		if (buffer || !tick_count)
 81060c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81060c4:	2b00      	cmp	r3, #0
 81060c6:	d10e      	bne.n	81060e6 <rpmsg_virtio_send_offchannel_raw+0x9e>
 81060c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81060ca:	2b00      	cmp	r3, #0
 81060cc:	d00b      	beq.n	81060e6 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 81060ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81060d0:	2b00      	cmp	r3, #0
 81060d2:	d001      	beq.n	81060d8 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 81060d4:	4b2f      	ldr	r3, [pc, #188]	@ (8106194 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 81060d6:	e057      	b.n	8106188 <rpmsg_virtio_send_offchannel_raw+0x140>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 81060d8:	200a      	movs	r0, #10
 81060da:	f7ff fdbc 	bl	8105c56 <metal_sleep_usec>
		tick_count--;
 81060de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81060e0:	3b01      	subs	r3, #1
 81060e2:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
 81060e4:	e7d2      	b.n	810608c <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 81060e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81060e8:	2b00      	cmp	r3, #0
 81060ea:	d101      	bne.n	81060f0 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 81060ec:	4b2a      	ldr	r3, [pc, #168]	@ (8106198 <rpmsg_virtio_send_offchannel_raw+0x150>)
 81060ee:	e04b      	b.n	8106188 <rpmsg_virtio_send_offchannel_raw+0x140>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 81060f0:	687b      	ldr	r3, [r7, #4]
 81060f2:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 81060f4:	68bb      	ldr	r3, [r7, #8]
 81060f6:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 81060f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81060fa:	b29b      	uxth	r3, r3
 81060fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
	rp_hdr.reserved = 0;
 81060fe:	2300      	movs	r3, #0
 8106100:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8106102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106106:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8106108:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810610a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810610c:	f7ff fdc0 	bl	8105c90 <metal_io_virt_to_offset>
 8106110:	4601      	mov	r1, r0
 8106112:	f107 0218 	add.w	r2, r7, #24
 8106116:	2310      	movs	r3, #16
 8106118:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810611a:	f7fe ff56 	bl	8104fca <metal_io_block_write>
 810611e:	6338      	str	r0, [r7, #48]	@ 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8106120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106122:	2b10      	cmp	r3, #16
 8106124:	d001      	beq.n	810612a <rpmsg_virtio_send_offchannel_raw+0xe2>
 8106126:	bf00      	nop
 8106128:	e7fd      	b.n	8106126 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 810612a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810612c:	3310      	adds	r3, #16
 810612e:	4619      	mov	r1, r3
 8106130:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8106132:	f7ff fdad 	bl	8105c90 <metal_io_virt_to_offset>
 8106136:	4601      	mov	r1, r0
 8106138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810613a:	683a      	ldr	r2, [r7, #0]
 810613c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810613e:	f7fe ff44 	bl	8104fca <metal_io_block_write>
 8106142:	6338      	str	r0, [r7, #48]	@ 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8106144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8106148:	429a      	cmp	r2, r3
 810614a:	d001      	beq.n	8106150 <rpmsg_virtio_send_offchannel_raw+0x108>
 810614c:	bf00      	nop
 810614e:	e7fd      	b.n	810614c <rpmsg_virtio_send_offchannel_raw+0x104>
	metal_mutex_acquire(&rdev->lock);
 8106150:	68fb      	ldr	r3, [r7, #12]
 8106152:	3358      	adds	r3, #88	@ 0x58
 8106154:	4618      	mov	r0, r3
 8106156:	f7ff fe02 	bl	8105d5e <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 810615a:	693a      	ldr	r2, [r7, #16]
 810615c:	8afb      	ldrh	r3, [r7, #22]
 810615e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8106160:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8106162:	f7ff fedd 	bl	8105f20 <rpmsg_virtio_enqueue_buffer>
 8106166:	6338      	str	r0, [r7, #48]	@ 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8106168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810616a:	2b00      	cmp	r3, #0
 810616c:	d001      	beq.n	8106172 <rpmsg_virtio_send_offchannel_raw+0x12a>
 810616e:	bf00      	nop
 8106170:	e7fd      	b.n	810616e <rpmsg_virtio_send_offchannel_raw+0x126>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8106172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106176:	4618      	mov	r0, r3
 8106178:	f000 fbd0 	bl	810691c <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 810617c:	68fb      	ldr	r3, [r7, #12]
 810617e:	3358      	adds	r3, #88	@ 0x58
 8106180:	4618      	mov	r0, r3
 8106182:	f7ff fdf7 	bl	8105d74 <metal_mutex_release>

	return size;
 8106186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8106188:	4618      	mov	r0, r3
 810618a:	3740      	adds	r7, #64	@ 0x40
 810618c:	46bd      	mov	sp, r7
 810618e:	bd80      	pop	{r7, pc}
 8106190:	fffff82c 	.word	0xfffff82c
 8106194:	fffff82b 	.word	0xfffff82b
 8106198:	fffff82e 	.word	0xfffff82e

0810619c <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 810619c:	b480      	push	{r7}
 810619e:	b083      	sub	sp, #12
 81061a0:	af00      	add	r7, sp, #0
 81061a2:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 81061a4:	bf00      	nop
 81061a6:	370c      	adds	r7, #12
 81061a8:	46bd      	mov	sp, r7
 81061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061ae:	4770      	bx	lr

081061b0 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 81061b0:	b590      	push	{r4, r7, lr}
 81061b2:	b08d      	sub	sp, #52	@ 0x34
 81061b4:	af02      	add	r7, sp, #8
 81061b6:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 81061b8:	687b      	ldr	r3, [r7, #4]
 81061ba:	681b      	ldr	r3, [r3, #0]
 81061bc:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 81061be:	6a3b      	ldr	r3, [r7, #32]
 81061c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81061c2:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 81061c4:	69fb      	ldr	r3, [r7, #28]
 81061c6:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 81061c8:	69bb      	ldr	r3, [r7, #24]
 81061ca:	3358      	adds	r3, #88	@ 0x58
 81061cc:	4618      	mov	r0, r3
 81061ce:	f7ff fdc6 	bl	8105d5e <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 81061d2:	f107 020a 	add.w	r2, r7, #10
 81061d6:	f107 030c 	add.w	r3, r7, #12
 81061da:	4619      	mov	r1, r3
 81061dc:	69f8      	ldr	r0, [r7, #28]
 81061de:	f7ff fed7 	bl	8105f90 <rpmsg_virtio_get_rx_buffer>
 81061e2:	6278      	str	r0, [r7, #36]	@ 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 81061e4:	69bb      	ldr	r3, [r7, #24]
 81061e6:	3358      	adds	r3, #88	@ 0x58
 81061e8:	4618      	mov	r0, r3
 81061ea:	f7ff fdc3 	bl	8105d74 <metal_mutex_release>

	while (rp_hdr) {
 81061ee:	e04d      	b.n	810628c <rpmsg_virtio_rx_callback+0xdc>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 81061f0:	69bb      	ldr	r3, [r7, #24]
 81061f2:	3358      	adds	r3, #88	@ 0x58
 81061f4:	4618      	mov	r0, r3
 81061f6:	f7ff fdb2 	bl	8105d5e <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 81061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81061fc:	685b      	ldr	r3, [r3, #4]
 81061fe:	4619      	mov	r1, r3
 8106200:	69b8      	ldr	r0, [r7, #24]
 8106202:	f7ff fe36 	bl	8105e72 <rpmsg_get_ept_from_addr>
 8106206:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8106208:	69bb      	ldr	r3, [r7, #24]
 810620a:	3358      	adds	r3, #88	@ 0x58
 810620c:	4618      	mov	r0, r3
 810620e:	f7ff fdb1 	bl	8105d74 <metal_mutex_release>

		if (!ept)
 8106212:	697b      	ldr	r3, [r7, #20]
 8106214:	2b00      	cmp	r3, #0
 8106216:	d03d      	beq.n	8106294 <rpmsg_virtio_rx_callback+0xe4>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8106218:	697b      	ldr	r3, [r7, #20]
 810621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810621c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106220:	d103      	bne.n	810622a <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 8106222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106224:	681a      	ldr	r2, [r3, #0]
 8106226:	697b      	ldr	r3, [r7, #20]
 8106228:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 810622a:	697b      	ldr	r3, [r7, #20]
 810622c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 810622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106230:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8106234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106236:	899b      	ldrh	r3, [r3, #12]
 8106238:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 810623a:	4618      	mov	r0, r3
 810623c:	697b      	ldr	r3, [r7, #20]
 810623e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8106240:	697b      	ldr	r3, [r7, #20]
 8106242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106244:	9300      	str	r3, [sp, #0]
 8106246:	4613      	mov	r3, r2
 8106248:	4602      	mov	r2, r0
 810624a:	6978      	ldr	r0, [r7, #20]
 810624c:	47a0      	blx	r4
 810624e:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8106250:	693b      	ldr	r3, [r7, #16]
 8106252:	2b00      	cmp	r3, #0
 8106254:	d001      	beq.n	810625a <rpmsg_virtio_rx_callback+0xaa>
 8106256:	bf00      	nop
 8106258:	e7fd      	b.n	8106256 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 810625a:	69bb      	ldr	r3, [r7, #24]
 810625c:	3358      	adds	r3, #88	@ 0x58
 810625e:	4618      	mov	r0, r3
 8106260:	f7ff fd7d 	bl	8105d5e <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 8106264:	68fa      	ldr	r2, [r7, #12]
 8106266:	897b      	ldrh	r3, [r7, #10]
 8106268:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810626a:	69f8      	ldr	r0, [r7, #28]
 810626c:	f7ff fe3f 	bl	8105eee <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8106270:	f107 020a 	add.w	r2, r7, #10
 8106274:	f107 030c 	add.w	r3, r7, #12
 8106278:	4619      	mov	r1, r3
 810627a:	69f8      	ldr	r0, [r7, #28]
 810627c:	f7ff fe88 	bl	8105f90 <rpmsg_virtio_get_rx_buffer>
 8106280:	6278      	str	r0, [r7, #36]	@ 0x24
		metal_mutex_release(&rdev->lock);
 8106282:	69bb      	ldr	r3, [r7, #24]
 8106284:	3358      	adds	r3, #88	@ 0x58
 8106286:	4618      	mov	r0, r3
 8106288:	f7ff fd74 	bl	8105d74 <metal_mutex_release>
	while (rp_hdr) {
 810628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810628e:	2b00      	cmp	r3, #0
 8106290:	d1ae      	bne.n	81061f0 <rpmsg_virtio_rx_callback+0x40>
 8106292:	e000      	b.n	8106296 <rpmsg_virtio_rx_callback+0xe6>
			return;
 8106294:	bf00      	nop
	}
}
 8106296:	372c      	adds	r7, #44	@ 0x2c
 8106298:	46bd      	mov	sp, r7
 810629a:	bd90      	pop	{r4, r7, pc}

0810629c <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 810629c:	b580      	push	{r7, lr}
 810629e:	b092      	sub	sp, #72	@ 0x48
 81062a0:	af00      	add	r7, sp, #0
 81062a2:	60f8      	str	r0, [r7, #12]
 81062a4:	60b9      	str	r1, [r7, #8]
 81062a6:	607a      	str	r2, [r7, #4]
 81062a8:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 81062aa:	68fb      	ldr	r3, [r7, #12]
 81062ac:	6a1b      	ldr	r3, [r3, #32]
 81062ae:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 81062b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81062b2:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 81062b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81062b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81062b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 81062ba:	68bb      	ldr	r3, [r7, #8]
 81062bc:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
 81062be:	687b      	ldr	r3, [r7, #4]
 81062c0:	2b28      	cmp	r3, #40	@ 0x28
 81062c2:	d001      	beq.n	81062c8 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 81062c4:	2300      	movs	r3, #0
 81062c6:	e057      	b.n	8106378 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 81062c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
 81062ca:	4619      	mov	r1, r3
 81062cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 81062ce:	f7ff fcdf 	bl	8105c90 <metal_io_virt_to_offset>
 81062d2:	4601      	mov	r1, r0
 81062d4:	f107 0210 	add.w	r2, r7, #16
 81062d8:	2320      	movs	r3, #32
 81062da:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 81062dc:	f7fe fdfe 	bl	8104edc <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 81062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81062e2:	6a1b      	ldr	r3, [r3, #32]
 81062e4:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 81062e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81062e8:	3358      	adds	r3, #88	@ 0x58
 81062ea:	4618      	mov	r0, r3
 81062ec:	f7ff fd37 	bl	8105d5e <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 81062f0:	f107 0110 	add.w	r1, r7, #16
 81062f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81062f6:	f04f 32ff 	mov.w	r2, #4294967295
 81062fa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 81062fc:	f7ff fb72 	bl	81059e4 <rpmsg_get_endpoint>
 8106300:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8106302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106306:	f003 0301 	and.w	r3, r3, #1
 810630a:	2b00      	cmp	r3, #0
 810630c:	d017      	beq.n	810633e <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 810630e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106310:	2b00      	cmp	r3, #0
 8106312:	d003      	beq.n	810631c <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8106314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106316:	f04f 32ff 	mov.w	r2, #4294967295
 810631a:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
 810631c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810631e:	3358      	adds	r3, #88	@ 0x58
 8106320:	4618      	mov	r0, r3
 8106322:	f7ff fd27 	bl	8105d74 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8106326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106328:	2b00      	cmp	r3, #0
 810632a:	d024      	beq.n	8106376 <rpmsg_virtio_ns_callback+0xda>
 810632c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810632e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106330:	2b00      	cmp	r3, #0
 8106332:	d020      	beq.n	8106376 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8106334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106338:	68f8      	ldr	r0, [r7, #12]
 810633a:	4798      	blx	r3
 810633c:	e01b      	b.n	8106376 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 810633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106340:	2b00      	cmp	r3, #0
 8106342:	d110      	bne.n	8106366 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8106344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8106346:	3358      	adds	r3, #88	@ 0x58
 8106348:	4618      	mov	r0, r3
 810634a:	f7ff fd13 	bl	8105d74 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 810634e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8106350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106352:	2b00      	cmp	r3, #0
 8106354:	d00f      	beq.n	8106376 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8106356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8106358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810635a:	f107 0110 	add.w	r1, r7, #16
 810635e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8106360:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8106362:	4798      	blx	r3
 8106364:	e007      	b.n	8106376 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8106366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106368:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810636a:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
 810636c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810636e:	3358      	adds	r3, #88	@ 0x58
 8106370:	4618      	mov	r0, r3
 8106372:	f7ff fcff 	bl	8105d74 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8106376:	2300      	movs	r3, #0
}
 8106378:	4618      	mov	r0, r3
 810637a:	3748      	adds	r7, #72	@ 0x48
 810637c:	46bd      	mov	sp, r7
 810637e:	bd80      	pop	{r7, pc}

08106380 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8106380:	b580      	push	{r7, lr}
 8106382:	b090      	sub	sp, #64	@ 0x40
 8106384:	af02      	add	r7, sp, #8
 8106386:	60f8      	str	r0, [r7, #12]
 8106388:	60b9      	str	r1, [r7, #8]
 810638a:	607a      	str	r2, [r7, #4]
 810638c:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 810638e:	68fb      	ldr	r3, [r7, #12]
 8106390:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
 8106392:	2264      	movs	r2, #100	@ 0x64
 8106394:	2100      	movs	r1, #0
 8106396:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106398:	f000 ff95 	bl	81072c6 <memset>
	metal_mutex_init(&rdev->lock);
 810639c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810639e:	3358      	adds	r3, #88	@ 0x58
 81063a0:	4618      	mov	r0, r3
 81063a2:	f7ff fcd1 	bl	8105d48 <metal_mutex_init>
	rvdev->vdev = vdev;
 81063a6:	68fb      	ldr	r3, [r7, #12]
 81063a8:	68ba      	ldr	r2, [r7, #8]
 81063aa:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 81063ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81063ae:	687a      	ldr	r2, [r7, #4]
 81063b0:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
 81063b2:	68bb      	ldr	r3, [r7, #8]
 81063b4:	68fa      	ldr	r2, [r7, #12]
 81063b6:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 81063b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81063ba:	4a38      	ldr	r2, [pc, #224]	@ (810649c <rpmsg_init_vdev+0x11c>)
 81063bc:	661a      	str	r2, [r3, #96]	@ 0x60
	role = rpmsg_virtio_get_role(rvdev);
 81063be:	68f8      	ldr	r0, [r7, #12]
 81063c0:	f7ff fd00 	bl	8105dc4 <rpmsg_virtio_get_role>
 81063c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 81063c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81063c8:	2b01      	cmp	r3, #1
 81063ca:	d112      	bne.n	81063f2 <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 81063cc:	4b34      	ldr	r3, [pc, #208]	@ (81064a0 <rpmsg_init_vdev+0x120>)
 81063ce:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 81063d0:	4b34      	ldr	r3, [pc, #208]	@ (81064a4 <rpmsg_init_vdev+0x124>)
 81063d2:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 81063d4:	4b34      	ldr	r3, [pc, #208]	@ (81064a8 <rpmsg_init_vdev+0x128>)
 81063d6:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 81063d8:	4b34      	ldr	r3, [pc, #208]	@ (81064ac <rpmsg_init_vdev+0x12c>)
 81063da:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 81063dc:	68bb      	ldr	r3, [r7, #8]
 81063de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81063e0:	3318      	adds	r3, #24
 81063e2:	681a      	ldr	r2, [r3, #0]
 81063e4:	68fb      	ldr	r3, [r7, #12]
 81063e6:	669a      	str	r2, [r3, #104]	@ 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 81063e8:	68bb      	ldr	r3, [r7, #8]
 81063ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81063ec:	681a      	ldr	r2, [r3, #0]
 81063ee:	68fb      	ldr	r3, [r7, #12]
 81063f0:	66da      	str	r2, [r3, #108]	@ 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 81063f2:	68fb      	ldr	r3, [r7, #12]
 81063f4:	683a      	ldr	r2, [r7, #0]
 81063f6:	671a      	str	r2, [r3, #112]	@ 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81063f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81063fa:	2b01      	cmp	r3, #1
 81063fc:	d102      	bne.n	8106404 <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 81063fe:	68f8      	ldr	r0, [r7, #12]
 8106400:	f7ff fdeb 	bl	8105fda <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8106404:	f107 0218 	add.w	r2, r7, #24
 8106408:	f107 0310 	add.w	r3, r7, #16
 810640c:	9300      	str	r3, [sp, #0]
 810640e:	4613      	mov	r3, r2
 8106410:	2202      	movs	r2, #2
 8106412:	2100      	movs	r1, #0
 8106414:	68f8      	ldr	r0, [r7, #12]
 8106416:	f7ff fd17 	bl	8105e48 <rpmsg_virtio_create_virtqueues>
 810641a:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 810641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810641e:	2b00      	cmp	r3, #0
 8106420:	d001      	beq.n	8106426 <rpmsg_init_vdev+0xa6>
		return status;
 8106422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106424:	e035      	b.n	8106492 <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8106426:	2300      	movs	r3, #0
 8106428:	637b      	str	r3, [r7, #52]	@ 0x34
 810642a:	e00f      	b.n	810644c <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 810642c:	68bb      	ldr	r3, [r7, #8]
 810642e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8106430:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8106432:	4613      	mov	r3, r2
 8106434:	005b      	lsls	r3, r3, #1
 8106436:	4413      	add	r3, r2
 8106438:	00db      	lsls	r3, r3, #3
 810643a:	440b      	add	r3, r1
 810643c:	681b      	ldr	r3, [r3, #0]
 810643e:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 8106440:	6a3b      	ldr	r3, [r7, #32]
 8106442:	683a      	ldr	r2, [r7, #0]
 8106444:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8106446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106448:	3301      	adds	r3, #1
 810644a:	637b      	str	r3, [r7, #52]	@ 0x34
 810644c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810644e:	2b01      	cmp	r3, #1
 8106450:	d9ec      	bls.n	810642c <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8106452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106454:	4618      	mov	r0, r3
 8106456:	f7ff fc0a 	bl	8105c6e <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 810645a:	68f8      	ldr	r0, [r7, #12]
 810645c:	f7ff fce3 	bl	8105e26 <rpmsg_virtio_get_features>
 8106460:	6278      	str	r0, [r7, #36]	@ 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8106462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106464:	f003 0301 	and.w	r3, r3, #1
 8106468:	2b00      	cmp	r3, #0
 810646a:	d011      	beq.n	8106490 <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 810646c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810646e:	f103 0008 	add.w	r0, r3, #8
 8106472:	2300      	movs	r3, #0
 8106474:	9301      	str	r3, [sp, #4]
 8106476:	4b0e      	ldr	r3, [pc, #56]	@ (81064b0 <rpmsg_init_vdev+0x130>)
 8106478:	9300      	str	r3, [sp, #0]
 810647a:	2335      	movs	r3, #53	@ 0x35
 810647c:	2235      	movs	r2, #53	@ 0x35
 810647e:	490d      	ldr	r1, [pc, #52]	@ (81064b4 <rpmsg_init_vdev+0x134>)
 8106480:	f7ff fc83 	bl	8105d8a <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8106484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106486:	3308      	adds	r3, #8
 8106488:	4619      	mov	r1, r3
 810648a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810648c:	f7ff fb2c 	bl	8105ae8 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8106490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8106492:	4618      	mov	r0, r3
 8106494:	3738      	adds	r7, #56	@ 0x38
 8106496:	46bd      	mov	sp, r7
 8106498:	bd80      	pop	{r7, pc}
 810649a:	bf00      	nop
 810649c:	08106049 	.word	0x08106049
 81064a0:	081083e0 	.word	0x081083e0
 81064a4:	081083e8 	.word	0x081083e8
 81064a8:	0810619d 	.word	0x0810619d
 81064ac:	081061b1 	.word	0x081061b1
 81064b0:	0810629d 	.word	0x0810629d
 81064b4:	081083f0 	.word	0x081083f0

081064b8 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 81064b8:	b480      	push	{r7}
 81064ba:	b083      	sub	sp, #12
 81064bc:	af00      	add	r7, sp, #0
 81064be:	6078      	str	r0, [r7, #4]
 81064c0:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 81064c2:	bf00      	nop
 81064c4:	370c      	adds	r7, #12
 81064c6:	46bd      	mov	sp, r7
 81064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064cc:	4770      	bx	lr

081064ce <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 81064ce:	b480      	push	{r7}
 81064d0:	b083      	sub	sp, #12
 81064d2:	af00      	add	r7, sp, #0
 81064d4:	6078      	str	r0, [r7, #4]
 81064d6:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 81064d8:	bf00      	nop
 81064da:	370c      	adds	r7, #12
 81064dc:	46bd      	mov	sp, r7
 81064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064e2:	4770      	bx	lr

081064e4 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 81064e4:	b480      	push	{r7}
 81064e6:	b085      	sub	sp, #20
 81064e8:	af00      	add	r7, sp, #0
 81064ea:	60f8      	str	r0, [r7, #12]
 81064ec:	60b9      	str	r1, [r7, #8]
 81064ee:	607a      	str	r2, [r7, #4]
 81064f0:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 81064f2:	68fb      	ldr	r3, [r7, #12]
}
 81064f4:	4618      	mov	r0, r3
 81064f6:	3714      	adds	r7, #20
 81064f8:	46bd      	mov	sp, r7
 81064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064fe:	4770      	bx	lr

08106500 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8106500:	b590      	push	{r4, r7, lr}
 8106502:	b08f      	sub	sp, #60	@ 0x3c
 8106504:	af04      	add	r7, sp, #16
 8106506:	60f8      	str	r0, [r7, #12]
 8106508:	60b9      	str	r1, [r7, #8]
 810650a:	607a      	str	r2, [r7, #4]
 810650c:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 810650e:	68fb      	ldr	r3, [r7, #12]
 8106510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106512:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 8106514:	687a      	ldr	r2, [r7, #4]
 8106516:	6a3b      	ldr	r3, [r7, #32]
 8106518:	429a      	cmp	r2, r3
 810651a:	d902      	bls.n	8106522 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 810651c:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8106520:	e036      	b.n	8106590 <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8106522:	2300      	movs	r3, #0
 8106524:	627b      	str	r3, [r7, #36]	@ 0x24
 8106526:	e02e      	b.n	8106586 <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 8106528:	68fb      	ldr	r3, [r7, #12]
 810652a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 810652c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810652e:	4613      	mov	r3, r2
 8106530:	005b      	lsls	r3, r3, #1
 8106532:	4413      	add	r3, r2
 8106534:	00db      	lsls	r3, r3, #3
 8106536:	440b      	add	r3, r1
 8106538:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 810653a:	69fb      	ldr	r3, [r7, #28]
 810653c:	3304      	adds	r3, #4
 810653e:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8106540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106542:	b298      	uxth	r0, r3
 8106544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106546:	009b      	lsls	r3, r3, #2
 8106548:	683a      	ldr	r2, [r7, #0]
 810654a:	4413      	add	r3, r2
 810654c:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 810654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106550:	009b      	lsls	r3, r3, #2
 8106552:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8106554:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8106556:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8106558:	68fa      	ldr	r2, [r7, #12]
 810655a:	6a12      	ldr	r2, [r2, #32]
 810655c:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 810655e:	69f9      	ldr	r1, [r7, #28]
 8106560:	6809      	ldr	r1, [r1, #0]
 8106562:	9102      	str	r1, [sp, #8]
 8106564:	9201      	str	r2, [sp, #4]
 8106566:	9300      	str	r3, [sp, #0]
 8106568:	69bb      	ldr	r3, [r7, #24]
 810656a:	4622      	mov	r2, r4
 810656c:	4601      	mov	r1, r0
 810656e:	68f8      	ldr	r0, [r7, #12]
 8106570:	f000 f8f6 	bl	8106760 <virtqueue_create>
 8106574:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8106576:	697b      	ldr	r3, [r7, #20]
 8106578:	2b00      	cmp	r3, #0
 810657a:	d001      	beq.n	8106580 <virtio_create_virtqueues+0x80>
			return ret;
 810657c:	697b      	ldr	r3, [r7, #20]
 810657e:	e007      	b.n	8106590 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 8106580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106582:	3301      	adds	r3, #1
 8106584:	627b      	str	r3, [r7, #36]	@ 0x24
 8106586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8106588:	687b      	ldr	r3, [r7, #4]
 810658a:	429a      	cmp	r2, r3
 810658c:	d3cc      	bcc.n	8106528 <virtio_create_virtqueues+0x28>
	}
	return 0;
 810658e:	2300      	movs	r3, #0
}
 8106590:	4618      	mov	r0, r3
 8106592:	372c      	adds	r7, #44	@ 0x2c
 8106594:	46bd      	mov	sp, r7
 8106596:	bd90      	pop	{r4, r7, pc}

08106598 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8106598:	b480      	push	{r7}
 810659a:	b085      	sub	sp, #20
 810659c:	af00      	add	r7, sp, #0
 810659e:	60f8      	str	r0, [r7, #12]
 81065a0:	60b9      	str	r1, [r7, #8]
 81065a2:	607a      	str	r2, [r7, #4]
 81065a4:	603b      	str	r3, [r7, #0]
	vr->num = num;
 81065a6:	68fb      	ldr	r3, [r7, #12]
 81065a8:	68ba      	ldr	r2, [r7, #8]
 81065aa:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 81065ac:	68fb      	ldr	r3, [r7, #12]
 81065ae:	687a      	ldr	r2, [r7, #4]
 81065b0:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 81065b2:	68bb      	ldr	r3, [r7, #8]
 81065b4:	011b      	lsls	r3, r3, #4
 81065b6:	687a      	ldr	r2, [r7, #4]
 81065b8:	441a      	add	r2, r3
 81065ba:	68fb      	ldr	r3, [r7, #12]
 81065bc:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 81065be:	68fb      	ldr	r3, [r7, #12]
 81065c0:	689a      	ldr	r2, [r3, #8]
 81065c2:	68bb      	ldr	r3, [r7, #8]
 81065c4:	005b      	lsls	r3, r3, #1
 81065c6:	4413      	add	r3, r2
 81065c8:	3304      	adds	r3, #4
 81065ca:	461a      	mov	r2, r3
 81065cc:	683b      	ldr	r3, [r7, #0]
 81065ce:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 81065d0:	1c5a      	adds	r2, r3, #1
 81065d2:	683b      	ldr	r3, [r7, #0]
 81065d4:	425b      	negs	r3, r3
 81065d6:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 81065d8:	461a      	mov	r2, r3
 81065da:	68fb      	ldr	r3, [r7, #12]
 81065dc:	60da      	str	r2, [r3, #12]
}
 81065de:	bf00      	nop
 81065e0:	3714      	adds	r7, #20
 81065e2:	46bd      	mov	sp, r7
 81065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065e8:	4770      	bx	lr

081065ea <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 81065ea:	b480      	push	{r7}
 81065ec:	b083      	sub	sp, #12
 81065ee:	af00      	add	r7, sp, #0
 81065f0:	4603      	mov	r3, r0
 81065f2:	80fb      	strh	r3, [r7, #6]
 81065f4:	460b      	mov	r3, r1
 81065f6:	80bb      	strh	r3, [r7, #4]
 81065f8:	4613      	mov	r3, r2
 81065fa:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 81065fc:	88ba      	ldrh	r2, [r7, #4]
 81065fe:	88fb      	ldrh	r3, [r7, #6]
 8106600:	1ad3      	subs	r3, r2, r3
 8106602:	b29b      	uxth	r3, r3
 8106604:	3b01      	subs	r3, #1
 8106606:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8106608:	88b9      	ldrh	r1, [r7, #4]
 810660a:	887b      	ldrh	r3, [r7, #2]
 810660c:	1acb      	subs	r3, r1, r3
 810660e:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8106610:	429a      	cmp	r2, r3
 8106612:	bf34      	ite	cc
 8106614:	2301      	movcc	r3, #1
 8106616:	2300      	movcs	r3, #0
 8106618:	b2db      	uxtb	r3, r3
}
 810661a:	4618      	mov	r0, r3
 810661c:	370c      	adds	r7, #12
 810661e:	46bd      	mov	sp, r7
 8106620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106624:	4770      	bx	lr

08106626 <metal_io_virt>:
{
 8106626:	b480      	push	{r7}
 8106628:	b083      	sub	sp, #12
 810662a:	af00      	add	r7, sp, #0
 810662c:	6078      	str	r0, [r7, #4]
 810662e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8106630:	687b      	ldr	r3, [r7, #4]
 8106632:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8106634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106638:	d009      	beq.n	810664e <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810663a:	687b      	ldr	r3, [r7, #4]
 810663c:	689b      	ldr	r3, [r3, #8]
 810663e:	683a      	ldr	r2, [r7, #0]
 8106640:	429a      	cmp	r2, r3
 8106642:	d804      	bhi.n	810664e <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8106644:	687b      	ldr	r3, [r7, #4]
 8106646:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8106648:	683b      	ldr	r3, [r7, #0]
 810664a:	4413      	add	r3, r2
 810664c:	e000      	b.n	8106650 <metal_io_virt+0x2a>
 810664e:	2300      	movs	r3, #0
}
 8106650:	4618      	mov	r0, r3
 8106652:	370c      	adds	r7, #12
 8106654:	46bd      	mov	sp, r7
 8106656:	f85d 7b04 	ldr.w	r7, [sp], #4
 810665a:	4770      	bx	lr

0810665c <metal_io_phys>:
{
 810665c:	b480      	push	{r7}
 810665e:	b085      	sub	sp, #20
 8106660:	af00      	add	r7, sp, #0
 8106662:	6078      	str	r0, [r7, #4]
 8106664:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8106666:	687b      	ldr	r3, [r7, #4]
 8106668:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 810666a:	2b1f      	cmp	r3, #31
 810666c:	d805      	bhi.n	810667a <metal_io_phys+0x1e>
 810666e:	687b      	ldr	r3, [r7, #4]
 8106670:	68db      	ldr	r3, [r3, #12]
 8106672:	683a      	ldr	r2, [r7, #0]
 8106674:	fa22 f303 	lsr.w	r3, r2, r3
 8106678:	e000      	b.n	810667c <metal_io_phys+0x20>
 810667a:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 810667c:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 810667e:	687b      	ldr	r3, [r7, #4]
 8106680:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8106682:	2b00      	cmp	r3, #0
 8106684:	d010      	beq.n	81066a8 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8106686:	687b      	ldr	r3, [r7, #4]
 8106688:	689b      	ldr	r3, [r3, #8]
 810668a:	683a      	ldr	r2, [r7, #0]
 810668c:	429a      	cmp	r2, r3
 810668e:	d80b      	bhi.n	81066a8 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8106690:	687b      	ldr	r3, [r7, #4]
 8106692:	685a      	ldr	r2, [r3, #4]
 8106694:	68fb      	ldr	r3, [r7, #12]
 8106696:	009b      	lsls	r3, r3, #2
 8106698:	4413      	add	r3, r2
 810669a:	681a      	ldr	r2, [r3, #0]
 810669c:	687b      	ldr	r3, [r7, #4]
 810669e:	6919      	ldr	r1, [r3, #16]
 81066a0:	683b      	ldr	r3, [r7, #0]
 81066a2:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 81066a4:	4413      	add	r3, r2
 81066a6:	e001      	b.n	81066ac <metal_io_phys+0x50>
 81066a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 81066ac:	4618      	mov	r0, r3
 81066ae:	3714      	adds	r7, #20
 81066b0:	46bd      	mov	sp, r7
 81066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066b6:	4770      	bx	lr

081066b8 <metal_io_phys_to_offset>:
{
 81066b8:	b580      	push	{r7, lr}
 81066ba:	b084      	sub	sp, #16
 81066bc:	af00      	add	r7, sp, #0
 81066be:	6078      	str	r0, [r7, #4]
 81066c0:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 81066c2:	687b      	ldr	r3, [r7, #4]
 81066c4:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 81066c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81066ca:	d105      	bne.n	81066d8 <metal_io_phys_to_offset+0x20>
 81066cc:	687b      	ldr	r3, [r7, #4]
 81066ce:	685b      	ldr	r3, [r3, #4]
 81066d0:	681b      	ldr	r3, [r3, #0]
 81066d2:	683a      	ldr	r2, [r7, #0]
 81066d4:	1ad3      	subs	r3, r2, r3
 81066d6:	e003      	b.n	81066e0 <metal_io_phys_to_offset+0x28>
 81066d8:	687b      	ldr	r3, [r7, #4]
 81066da:	691a      	ldr	r2, [r3, #16]
 81066dc:	683b      	ldr	r3, [r7, #0]
 81066de:	4013      	ands	r3, r2
	unsigned long offset =
 81066e0:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 81066e2:	68f9      	ldr	r1, [r7, #12]
 81066e4:	6878      	ldr	r0, [r7, #4]
 81066e6:	f7ff ffb9 	bl	810665c <metal_io_phys>
 81066ea:	4602      	mov	r2, r0
 81066ec:	683b      	ldr	r3, [r7, #0]
 81066ee:	4293      	cmp	r3, r2
 81066f0:	d101      	bne.n	81066f6 <metal_io_phys_to_offset+0x3e>
			return offset;
 81066f2:	68fb      	ldr	r3, [r7, #12]
 81066f4:	e00c      	b.n	8106710 <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 81066f6:	687b      	ldr	r3, [r7, #4]
 81066f8:	691a      	ldr	r2, [r3, #16]
 81066fa:	68fb      	ldr	r3, [r7, #12]
 81066fc:	4413      	add	r3, r2
 81066fe:	3301      	adds	r3, #1
 8106700:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 8106702:	687b      	ldr	r3, [r7, #4]
 8106704:	689b      	ldr	r3, [r3, #8]
 8106706:	68fa      	ldr	r2, [r7, #12]
 8106708:	429a      	cmp	r2, r3
 810670a:	d3ea      	bcc.n	81066e2 <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 810670c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8106710:	4618      	mov	r0, r3
 8106712:	3710      	adds	r7, #16
 8106714:	46bd      	mov	sp, r7
 8106716:	bd80      	pop	{r7, pc}

08106718 <metal_io_phys_to_virt>:
{
 8106718:	b580      	push	{r7, lr}
 810671a:	b082      	sub	sp, #8
 810671c:	af00      	add	r7, sp, #0
 810671e:	6078      	str	r0, [r7, #4]
 8106720:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 8106722:	6839      	ldr	r1, [r7, #0]
 8106724:	6878      	ldr	r0, [r7, #4]
 8106726:	f7ff ffc7 	bl	81066b8 <metal_io_phys_to_offset>
 810672a:	4603      	mov	r3, r0
 810672c:	4619      	mov	r1, r3
 810672e:	6878      	ldr	r0, [r7, #4]
 8106730:	f7ff ff79 	bl	8106626 <metal_io_virt>
 8106734:	4603      	mov	r3, r0
}
 8106736:	4618      	mov	r0, r3
 8106738:	3708      	adds	r7, #8
 810673a:	46bd      	mov	sp, r7
 810673c:	bd80      	pop	{r7, pc}

0810673e <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 810673e:	b580      	push	{r7, lr}
 8106740:	b084      	sub	sp, #16
 8106742:	af00      	add	r7, sp, #0
 8106744:	6078      	str	r0, [r7, #4]
 8106746:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810674c:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 810674e:	6839      	ldr	r1, [r7, #0]
 8106750:	68f8      	ldr	r0, [r7, #12]
 8106752:	f7ff ffe1 	bl	8106718 <metal_io_phys_to_virt>
 8106756:	4603      	mov	r3, r0
}
 8106758:	4618      	mov	r0, r3
 810675a:	3710      	adds	r7, #16
 810675c:	46bd      	mov	sp, r7
 810675e:	bd80      	pop	{r7, pc}

08106760 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8106760:	b580      	push	{r7, lr}
 8106762:	b086      	sub	sp, #24
 8106764:	af00      	add	r7, sp, #0
 8106766:	60f8      	str	r0, [r7, #12]
 8106768:	607a      	str	r2, [r7, #4]
 810676a:	603b      	str	r3, [r7, #0]
 810676c:	460b      	mov	r3, r1
 810676e:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8106770:	2300      	movs	r3, #0
 8106772:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8106774:	697b      	ldr	r3, [r7, #20]
 8106776:	2b00      	cmp	r3, #0
 8106778:	d121      	bne.n	81067be <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 810677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810677c:	68fa      	ldr	r2, [r7, #12]
 810677e:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8106780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106782:	687a      	ldr	r2, [r7, #4]
 8106784:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8106786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106788:	897a      	ldrh	r2, [r7, #10]
 810678a:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 810678c:	683b      	ldr	r3, [r7, #0]
 810678e:	891a      	ldrh	r2, [r3, #8]
 8106790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106792:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8106794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106796:	895a      	ldrh	r2, [r3, #10]
 8106798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810679a:	851a      	strh	r2, [r3, #40]	@ 0x28
		vq->callback = callback;
 810679c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810679e:	6a3a      	ldr	r2, [r7, #32]
 81067a0:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 81067a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81067a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81067a6:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 81067a8:	683b      	ldr	r3, [r7, #0]
 81067aa:	6819      	ldr	r1, [r3, #0]
 81067ac:	683b      	ldr	r3, [r7, #0]
 81067ae:	685b      	ldr	r3, [r3, #4]
 81067b0:	461a      	mov	r2, r3
 81067b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81067b4:	f000 f8fb 	bl	81069ae <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 81067b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81067ba:	f000 f885 	bl	81068c8 <virtqueue_disable_cb>
	}

	return (status);
 81067be:	697b      	ldr	r3, [r7, #20]
}
 81067c0:	4618      	mov	r0, r3
 81067c2:	3718      	adds	r7, #24
 81067c4:	46bd      	mov	sp, r7
 81067c6:	bd80      	pop	{r7, pc}

081067c8 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 81067c8:	b580      	push	{r7, lr}
 81067ca:	b086      	sub	sp, #24
 81067cc:	af00      	add	r7, sp, #0
 81067ce:	60f8      	str	r0, [r7, #12]
 81067d0:	60b9      	str	r1, [r7, #8]
 81067d2:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 81067d4:	2300      	movs	r3, #0
 81067d6:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 81067d8:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 81067dc:	68fb      	ldr	r3, [r7, #12]
 81067de:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 81067e0:	68fb      	ldr	r3, [r7, #12]
 81067e2:	6a1b      	ldr	r3, [r3, #32]
 81067e4:	885b      	ldrh	r3, [r3, #2]
 81067e6:	429a      	cmp	r2, r3
 81067e8:	d101      	bne.n	81067ee <virtqueue_get_available_buffer+0x26>
		return NULL;
 81067ea:	2300      	movs	r3, #0
 81067ec:	e02e      	b.n	810684c <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 81067ee:	68fb      	ldr	r3, [r7, #12]
 81067f0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 81067f2:	1c5a      	adds	r2, r3, #1
 81067f4:	b291      	uxth	r1, r2
 81067f6:	68fa      	ldr	r2, [r7, #12]
 81067f8:	8691      	strh	r1, [r2, #52]	@ 0x34
 81067fa:	b21a      	sxth	r2, r3
 81067fc:	68fb      	ldr	r3, [r7, #12]
 81067fe:	895b      	ldrh	r3, [r3, #10]
 8106800:	3b01      	subs	r3, #1
 8106802:	b29b      	uxth	r3, r3
 8106804:	b21b      	sxth	r3, r3
 8106806:	4013      	ands	r3, r2
 8106808:	b21b      	sxth	r3, r3
 810680a:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 810680c:	68fb      	ldr	r3, [r7, #12]
 810680e:	6a1a      	ldr	r2, [r3, #32]
 8106810:	8afb      	ldrh	r3, [r7, #22]
 8106812:	005b      	lsls	r3, r3, #1
 8106814:	4413      	add	r3, r2
 8106816:	889a      	ldrh	r2, [r3, #4]
 8106818:	68bb      	ldr	r3, [r7, #8]
 810681a:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 810681c:	68fb      	ldr	r3, [r7, #12]
 810681e:	69da      	ldr	r2, [r3, #28]
 8106820:	68bb      	ldr	r3, [r7, #8]
 8106822:	881b      	ldrh	r3, [r3, #0]
 8106824:	011b      	lsls	r3, r3, #4
 8106826:	4413      	add	r3, r2
 8106828:	e9d3 2300 	ldrd	r2, r3, [r3]
 810682c:	4613      	mov	r3, r2
 810682e:	4619      	mov	r1, r3
 8106830:	68f8      	ldr	r0, [r7, #12]
 8106832:	f7ff ff84 	bl	810673e <virtqueue_phys_to_virt>
 8106836:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 8106838:	68fb      	ldr	r3, [r7, #12]
 810683a:	69da      	ldr	r2, [r3, #28]
 810683c:	68bb      	ldr	r3, [r7, #8]
 810683e:	881b      	ldrh	r3, [r3, #0]
 8106840:	011b      	lsls	r3, r3, #4
 8106842:	4413      	add	r3, r2
 8106844:	689a      	ldr	r2, [r3, #8]
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 810684a:	693b      	ldr	r3, [r7, #16]
}
 810684c:	4618      	mov	r0, r3
 810684e:	3718      	adds	r7, #24
 8106850:	46bd      	mov	sp, r7
 8106852:	bd80      	pop	{r7, pc}

08106854 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 8106854:	b480      	push	{r7}
 8106856:	b087      	sub	sp, #28
 8106858:	af00      	add	r7, sp, #0
 810685a:	60f8      	str	r0, [r7, #12]
 810685c:	460b      	mov	r3, r1
 810685e:	607a      	str	r2, [r7, #4]
 8106860:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 8106862:	2300      	movs	r3, #0
 8106864:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 8106866:	68fb      	ldr	r3, [r7, #12]
 8106868:	895b      	ldrh	r3, [r3, #10]
 810686a:	897a      	ldrh	r2, [r7, #10]
 810686c:	429a      	cmp	r2, r3
 810686e:	d901      	bls.n	8106874 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 8106870:	4b14      	ldr	r3, [pc, #80]	@ (81068c4 <virtqueue_add_consumed_buffer+0x70>)
 8106872:	e021      	b.n	81068b8 <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 8106874:	68fb      	ldr	r3, [r7, #12]
 8106876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106878:	885b      	ldrh	r3, [r3, #2]
 810687a:	b21a      	sxth	r2, r3
 810687c:	68fb      	ldr	r3, [r7, #12]
 810687e:	895b      	ldrh	r3, [r3, #10]
 8106880:	3b01      	subs	r3, #1
 8106882:	b29b      	uxth	r3, r3
 8106884:	b21b      	sxth	r3, r3
 8106886:	4013      	ands	r3, r2
 8106888:	b21b      	sxth	r3, r3
 810688a:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 810688c:	68fb      	ldr	r3, [r7, #12]
 810688e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8106890:	8a7b      	ldrh	r3, [r7, #18]
 8106892:	00db      	lsls	r3, r3, #3
 8106894:	4413      	add	r3, r2
 8106896:	3304      	adds	r3, #4
 8106898:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 810689a:	897a      	ldrh	r2, [r7, #10]
 810689c:	697b      	ldr	r3, [r7, #20]
 810689e:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 81068a0:	697b      	ldr	r3, [r7, #20]
 81068a2:	687a      	ldr	r2, [r7, #4]
 81068a4:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 81068a6:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 81068aa:	68fb      	ldr	r3, [r7, #12]
 81068ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81068ae:	885a      	ldrh	r2, [r3, #2]
 81068b0:	3201      	adds	r2, #1
 81068b2:	b292      	uxth	r2, r2
 81068b4:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 81068b6:	2300      	movs	r3, #0
}
 81068b8:	4618      	mov	r0, r3
 81068ba:	371c      	adds	r7, #28
 81068bc:	46bd      	mov	sp, r7
 81068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068c2:	4770      	bx	lr
 81068c4:	fffff441 	.word	0xfffff441

081068c8 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 81068c8:	b480      	push	{r7}
 81068ca:	b083      	sub	sp, #12
 81068cc:	af00      	add	r7, sp, #0
 81068ce:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 81068d0:	687b      	ldr	r3, [r7, #4]
 81068d2:	68db      	ldr	r3, [r3, #12]
 81068d4:	f003 0302 	and.w	r3, r3, #2
 81068d8:	2b00      	cmp	r3, #0
 81068da:	d010      	beq.n	81068fe <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 81068e0:	687b      	ldr	r3, [r7, #4]
 81068e2:	895b      	ldrh	r3, [r3, #10]
 81068e4:	1ad3      	subs	r3, r2, r3
 81068e6:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 81068e8:	687b      	ldr	r3, [r7, #4]
 81068ea:	6a1a      	ldr	r2, [r3, #32]
 81068ec:	687b      	ldr	r3, [r7, #4]
 81068ee:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 81068f0:	3901      	subs	r1, #1
 81068f2:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 81068f4:	005b      	lsls	r3, r3, #1
 81068f6:	4413      	add	r3, r2
 81068f8:	460a      	mov	r2, r1
 81068fa:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 81068fc:	e008      	b.n	8106910 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 81068fe:	687b      	ldr	r3, [r7, #4]
 8106900:	6a1b      	ldr	r3, [r3, #32]
 8106902:	881a      	ldrh	r2, [r3, #0]
 8106904:	687b      	ldr	r3, [r7, #4]
 8106906:	6a1b      	ldr	r3, [r3, #32]
 8106908:	f042 0201 	orr.w	r2, r2, #1
 810690c:	b292      	uxth	r2, r2
 810690e:	801a      	strh	r2, [r3, #0]
}
 8106910:	bf00      	nop
 8106912:	370c      	adds	r7, #12
 8106914:	46bd      	mov	sp, r7
 8106916:	f85d 7b04 	ldr.w	r7, [sp], #4
 810691a:	4770      	bx	lr

0810691c <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 810691c:	b580      	push	{r7, lr}
 810691e:	b082      	sub	sp, #8
 8106920:	af00      	add	r7, sp, #0
 8106922:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8106924:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8106928:	6878      	ldr	r0, [r7, #4]
 810692a:	f000 f885 	bl	8106a38 <vq_ring_must_notify_host>
 810692e:	4603      	mov	r3, r0
 8106930:	2b00      	cmp	r3, #0
 8106932:	d002      	beq.n	810693a <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8106934:	6878      	ldr	r0, [r7, #4]
 8106936:	f000 f8b5 	bl	8106aa4 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 810693a:	687b      	ldr	r3, [r7, #4]
 810693c:	2200      	movs	r2, #0
 810693e:	855a      	strh	r2, [r3, #42]	@ 0x2a

	VQUEUE_IDLE(vq);
}
 8106940:	bf00      	nop
 8106942:	3708      	adds	r7, #8
 8106944:	46bd      	mov	sp, r7
 8106946:	bd80      	pop	{r7, pc}

08106948 <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 8106948:	b480      	push	{r7}
 810694a:	b085      	sub	sp, #20
 810694c:	af00      	add	r7, sp, #0
 810694e:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 8106950:	2300      	movs	r3, #0
 8106952:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 8106954:	2300      	movs	r3, #0
 8106956:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 8106958:	2300      	movs	r3, #0
 810695a:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 810695c:	687b      	ldr	r3, [r7, #4]
 810695e:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8106960:	687b      	ldr	r3, [r7, #4]
 8106962:	6a1b      	ldr	r3, [r3, #32]
 8106964:	885b      	ldrh	r3, [r3, #2]
 8106966:	429a      	cmp	r2, r3
 8106968:	d101      	bne.n	810696e <virtqueue_get_desc_size+0x26>
		return 0;
 810696a:	2300      	movs	r3, #0
 810696c:	e019      	b.n	81069a2 <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 810696e:	687b      	ldr	r3, [r7, #4]
 8106970:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8106972:	b21a      	sxth	r2, r3
 8106974:	687b      	ldr	r3, [r7, #4]
 8106976:	895b      	ldrh	r3, [r3, #10]
 8106978:	3b01      	subs	r3, #1
 810697a:	b29b      	uxth	r3, r3
 810697c:	b21b      	sxth	r3, r3
 810697e:	4013      	ands	r3, r2
 8106980:	b21b      	sxth	r3, r3
 8106982:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 8106984:	687b      	ldr	r3, [r7, #4]
 8106986:	6a1a      	ldr	r2, [r3, #32]
 8106988:	89fb      	ldrh	r3, [r7, #14]
 810698a:	005b      	lsls	r3, r3, #1
 810698c:	4413      	add	r3, r2
 810698e:	889b      	ldrh	r3, [r3, #4]
 8106990:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 8106992:	687b      	ldr	r3, [r7, #4]
 8106994:	69da      	ldr	r2, [r3, #28]
 8106996:	89bb      	ldrh	r3, [r7, #12]
 8106998:	011b      	lsls	r3, r3, #4
 810699a:	4413      	add	r3, r2
 810699c:	689b      	ldr	r3, [r3, #8]
 810699e:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 81069a0:	68bb      	ldr	r3, [r7, #8]
}
 81069a2:	4618      	mov	r0, r3
 81069a4:	3714      	adds	r7, #20
 81069a6:	46bd      	mov	sp, r7
 81069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069ac:	4770      	bx	lr

081069ae <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 81069ae:	b580      	push	{r7, lr}
 81069b0:	b088      	sub	sp, #32
 81069b2:	af00      	add	r7, sp, #0
 81069b4:	60f8      	str	r0, [r7, #12]
 81069b6:	60b9      	str	r1, [r7, #8]
 81069b8:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 81069ba:	68fb      	ldr	r3, [r7, #12]
 81069bc:	895b      	ldrh	r3, [r3, #10]
 81069be:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 81069c0:	68fb      	ldr	r3, [r7, #12]
 81069c2:	3318      	adds	r3, #24
 81069c4:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 81069c6:	69b9      	ldr	r1, [r7, #24]
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	68ba      	ldr	r2, [r7, #8]
 81069cc:	6978      	ldr	r0, [r7, #20]
 81069ce:	f7ff fde3 	bl	8106598 <vring_init>

	for (i = 0; i < size - 1; i++)
 81069d2:	2300      	movs	r3, #0
 81069d4:	61fb      	str	r3, [r7, #28]
 81069d6:	e00c      	b.n	81069f2 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 81069d8:	69fb      	ldr	r3, [r7, #28]
 81069da:	b29a      	uxth	r2, r3
 81069dc:	697b      	ldr	r3, [r7, #20]
 81069de:	6859      	ldr	r1, [r3, #4]
 81069e0:	69fb      	ldr	r3, [r7, #28]
 81069e2:	011b      	lsls	r3, r3, #4
 81069e4:	440b      	add	r3, r1
 81069e6:	3201      	adds	r2, #1
 81069e8:	b292      	uxth	r2, r2
 81069ea:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 81069ec:	69fb      	ldr	r3, [r7, #28]
 81069ee:	3301      	adds	r3, #1
 81069f0:	61fb      	str	r3, [r7, #28]
 81069f2:	69bb      	ldr	r3, [r7, #24]
 81069f4:	3b01      	subs	r3, #1
 81069f6:	69fa      	ldr	r2, [r7, #28]
 81069f8:	429a      	cmp	r2, r3
 81069fa:	dbed      	blt.n	81069d8 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 81069fc:	697b      	ldr	r3, [r7, #20]
 81069fe:	685a      	ldr	r2, [r3, #4]
 8106a00:	69fb      	ldr	r3, [r7, #28]
 8106a02:	011b      	lsls	r3, r3, #4
 8106a04:	4413      	add	r3, r2
 8106a06:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8106a0a:	81da      	strh	r2, [r3, #14]
}
 8106a0c:	bf00      	nop
 8106a0e:	3720      	adds	r7, #32
 8106a10:	46bd      	mov	sp, r7
 8106a12:	bd80      	pop	{r7, pc}

08106a14 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8106a14:	b580      	push	{r7, lr}
 8106a16:	b082      	sub	sp, #8
 8106a18:	af00      	add	r7, sp, #0
 8106a1a:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8106a1c:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	691b      	ldr	r3, [r3, #16]
 8106a24:	2b00      	cmp	r3, #0
 8106a26:	d003      	beq.n	8106a30 <virtqueue_notification+0x1c>
		vq->callback(vq);
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	691b      	ldr	r3, [r3, #16]
 8106a2c:	6878      	ldr	r0, [r7, #4]
 8106a2e:	4798      	blx	r3
}
 8106a30:	bf00      	nop
 8106a32:	3708      	adds	r7, #8
 8106a34:	46bd      	mov	sp, r7
 8106a36:	bd80      	pop	{r7, pc}

08106a38 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8106a38:	b580      	push	{r7, lr}
 8106a3a:	b084      	sub	sp, #16
 8106a3c:	af00      	add	r7, sp, #0
 8106a3e:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8106a40:	687b      	ldr	r3, [r7, #4]
 8106a42:	68db      	ldr	r3, [r3, #12]
 8106a44:	f003 0302 	and.w	r3, r3, #2
 8106a48:	2b00      	cmp	r3, #0
 8106a4a:	d01d      	beq.n	8106a88 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8106a4c:	687b      	ldr	r3, [r7, #4]
 8106a4e:	6a1b      	ldr	r3, [r3, #32]
 8106a50:	885b      	ldrh	r3, [r3, #2]
 8106a52:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8106a54:	687b      	ldr	r3, [r7, #4]
 8106a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8106a58:	89fa      	ldrh	r2, [r7, #14]
 8106a5a:	1ad3      	subs	r3, r2, r3
 8106a5c:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8106a5e:	687b      	ldr	r3, [r7, #4]
 8106a60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8106a62:	687b      	ldr	r3, [r7, #4]
 8106a64:	699b      	ldr	r3, [r3, #24]
 8106a66:	00db      	lsls	r3, r3, #3
 8106a68:	4413      	add	r3, r2
 8106a6a:	685b      	ldr	r3, [r3, #4]
 8106a6c:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8106a6e:	89ba      	ldrh	r2, [r7, #12]
 8106a70:	89f9      	ldrh	r1, [r7, #14]
 8106a72:	897b      	ldrh	r3, [r7, #10]
 8106a74:	4618      	mov	r0, r3
 8106a76:	f7ff fdb8 	bl	81065ea <vring_need_event>
 8106a7a:	4603      	mov	r3, r0
 8106a7c:	2b00      	cmp	r3, #0
 8106a7e:	bf14      	ite	ne
 8106a80:	2301      	movne	r3, #1
 8106a82:	2300      	moveq	r3, #0
 8106a84:	b2db      	uxtb	r3, r3
 8106a86:	e009      	b.n	8106a9c <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8106a88:	687b      	ldr	r3, [r7, #4]
 8106a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106a8c:	881b      	ldrh	r3, [r3, #0]
 8106a8e:	f003 0301 	and.w	r3, r3, #1
 8106a92:	2b00      	cmp	r3, #0
 8106a94:	bf0c      	ite	eq
 8106a96:	2301      	moveq	r3, #1
 8106a98:	2300      	movne	r3, #0
 8106a9a:	b2db      	uxtb	r3, r3
}
 8106a9c:	4618      	mov	r0, r3
 8106a9e:	3710      	adds	r7, #16
 8106aa0:	46bd      	mov	sp, r7
 8106aa2:	bd80      	pop	{r7, pc}

08106aa4 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8106aa4:	b580      	push	{r7, lr}
 8106aa6:	b082      	sub	sp, #8
 8106aa8:	af00      	add	r7, sp, #0
 8106aaa:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8106aac:	687b      	ldr	r3, [r7, #4]
 8106aae:	695b      	ldr	r3, [r3, #20]
 8106ab0:	2b00      	cmp	r3, #0
 8106ab2:	d003      	beq.n	8106abc <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8106ab4:	687b      	ldr	r3, [r7, #4]
 8106ab6:	695b      	ldr	r3, [r3, #20]
 8106ab8:	6878      	ldr	r0, [r7, #4]
 8106aba:	4798      	blx	r3
}
 8106abc:	bf00      	nop
 8106abe:	3708      	adds	r7, #8
 8106ac0:	46bd      	mov	sp, r7
 8106ac2:	bd80      	pop	{r7, pc}

08106ac4 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8106ac4:	b580      	push	{r7, lr}
 8106ac6:	b082      	sub	sp, #8
 8106ac8:	af00      	add	r7, sp, #0
 8106aca:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8106acc:	4b04      	ldr	r3, [pc, #16]	@ (8106ae0 <HAL_HSEM_FreeCallback+0x1c>)
 8106ace:	2201      	movs	r2, #1
 8106ad0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8106ad2:	2001      	movs	r0, #1
 8106ad4:	f7fa fcd0 	bl	8101478 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8106ad8:	bf00      	nop
 8106ada:	3708      	adds	r7, #8
 8106adc:	46bd      	mov	sp, r7
 8106ade:	bd80      	pop	{r7, pc}
 8106ae0:	10000298 	.word	0x10000298

08106ae4 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8106ae4:	b580      	push	{r7, lr}
 8106ae6:	b082      	sub	sp, #8
 8106ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8106aea:	4b0b      	ldr	r3, [pc, #44]	@ (8106b18 <MAILBOX_Init+0x34>)
 8106aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8106af0:	4a09      	ldr	r2, [pc, #36]	@ (8106b18 <MAILBOX_Init+0x34>)
 8106af2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8106af6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8106afa:	4b07      	ldr	r3, [pc, #28]	@ (8106b18 <MAILBOX_Init+0x34>)
 8106afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8106b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106b04:	607b      	str	r3, [r7, #4]
 8106b06:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8106b08:	2001      	movs	r0, #1
 8106b0a:	f7fa fcb5 	bl	8101478 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8106b0e:	2300      	movs	r3, #0
}
 8106b10:	4618      	mov	r0, r3
 8106b12:	3708      	adds	r7, #8
 8106b14:	46bd      	mov	sp, r7
 8106b16:	bd80      	pop	{r7, pc}
 8106b18:	58024400 	.word	0x58024400

08106b1c <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8106b1c:	b580      	push	{r7, lr}
 8106b1e:	b082      	sub	sp, #8
 8106b20:	af00      	add	r7, sp, #0
 8106b22:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8106b24:	4b09      	ldr	r3, [pc, #36]	@ (8106b4c <MAILBOX_Poll+0x30>)
 8106b26:	681b      	ldr	r3, [r3, #0]
 8106b28:	2b01      	cmp	r3, #1
 8106b2a:	d108      	bne.n	8106b3e <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 8106b2c:	2101      	movs	r1, #1
 8106b2e:	6878      	ldr	r0, [r7, #4]
 8106b30:	f7fe fd25 	bl	810557e <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8106b34:	4b05      	ldr	r3, [pc, #20]	@ (8106b4c <MAILBOX_Poll+0x30>)
 8106b36:	2200      	movs	r2, #0
 8106b38:	601a      	str	r2, [r3, #0]
    return 0;
 8106b3a:	2300      	movs	r3, #0
 8106b3c:	e001      	b.n	8106b42 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8106b3e:	f06f 030a 	mvn.w	r3, #10
}
 8106b42:	4618      	mov	r0, r3
 8106b44:	3708      	adds	r7, #8
 8106b46:	46bd      	mov	sp, r7
 8106b48:	bd80      	pop	{r7, pc}
 8106b4a:	bf00      	nop
 8106b4c:	10000298 	.word	0x10000298

08106b50 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8106b50:	b580      	push	{r7, lr}
 8106b52:	b082      	sub	sp, #8
 8106b54:	af00      	add	r7, sp, #0
 8106b56:	6078      	str	r0, [r7, #4]
 8106b58:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 8106b5a:	2001      	movs	r0, #1
 8106b5c:	f7fa fc5e 	bl	810141c <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 8106b60:	2100      	movs	r1, #0
 8106b62:	2001      	movs	r0, #1
 8106b64:	f7fa fc74 	bl	8101450 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8106b68:	2300      	movs	r3, #0
}
 8106b6a:	4618      	mov	r0, r3
 8106b6c:	3708      	adds	r7, #8
 8106b6e:	46bd      	mov	sp, r7
 8106b70:	bd80      	pop	{r7, pc}

08106b72 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8106b72:	b480      	push	{r7}
 8106b74:	b083      	sub	sp, #12
 8106b76:	af00      	add	r7, sp, #0
 8106b78:	6078      	str	r0, [r7, #4]
 8106b7a:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8106b7c:	687b      	ldr	r3, [r7, #4]
 8106b7e:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8106b80:	683a      	ldr	r2, [r7, #0]
 8106b82:	429a      	cmp	r2, r3
 8106b84:	d209      	bcs.n	8106b9a <metal_device_io_region+0x28>
 8106b86:	683a      	ldr	r2, [r7, #0]
 8106b88:	4613      	mov	r3, r2
 8106b8a:	005b      	lsls	r3, r3, #1
 8106b8c:	4413      	add	r3, r2
 8106b8e:	011b      	lsls	r3, r3, #4
 8106b90:	3308      	adds	r3, #8
 8106b92:	687a      	ldr	r2, [r7, #4]
 8106b94:	4413      	add	r3, r2
 8106b96:	3304      	adds	r3, #4
 8106b98:	e000      	b.n	8106b9c <metal_device_io_region+0x2a>
 8106b9a:	2300      	movs	r3, #0
}
 8106b9c:	4618      	mov	r0, r3
 8106b9e:	370c      	adds	r7, #12
 8106ba0:	46bd      	mov	sp, r7
 8106ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ba6:	4770      	bx	lr

08106ba8 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8106ba8:	b590      	push	{r4, r7, lr}
 8106baa:	b08d      	sub	sp, #52	@ 0x34
 8106bac:	af04      	add	r7, sp, #16
 8106bae:	6078      	str	r0, [r7, #4]
  int status = 0;
 8106bb0:	2300      	movs	r3, #0
 8106bb2:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8106bb4:	2300      	movs	r3, #0
 8106bb6:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8106bb8:	4a41      	ldr	r2, [pc, #260]	@ (8106cc0 <OPENAMP_shmem_init+0x118>)
 8106bba:	f107 0310 	add.w	r3, r7, #16
 8106bbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8106bc2:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8106bc6:	2300      	movs	r3, #0
 8106bc8:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8106bca:	2300      	movs	r3, #0
 8106bcc:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8106bce:	f107 0310 	add.w	r3, r7, #16
 8106bd2:	4618      	mov	r0, r3
 8106bd4:	f7fe f8e6 	bl	8104da4 <metal_init>

  status = metal_register_generic_device(&shm_device);
 8106bd8:	483a      	ldr	r0, [pc, #232]	@ (8106cc4 <OPENAMP_shmem_init+0x11c>)
 8106bda:	f7fd ff8b 	bl	8104af4 <metal_register_generic_device>
 8106bde:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8106be0:	69fb      	ldr	r3, [r7, #28]
 8106be2:	2b00      	cmp	r3, #0
 8106be4:	d001      	beq.n	8106bea <OPENAMP_shmem_init+0x42>
    return status;
 8106be6:	69fb      	ldr	r3, [r7, #28]
 8106be8:	e066      	b.n	8106cb8 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8106bea:	f107 0318 	add.w	r3, r7, #24
 8106bee:	461a      	mov	r2, r3
 8106bf0:	4935      	ldr	r1, [pc, #212]	@ (8106cc8 <OPENAMP_shmem_init+0x120>)
 8106bf2:	4836      	ldr	r0, [pc, #216]	@ (8106ccc <OPENAMP_shmem_init+0x124>)
 8106bf4:	f7fd ff40 	bl	8104a78 <metal_device_open>
 8106bf8:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8106bfa:	69fb      	ldr	r3, [r7, #28]
 8106bfc:	2b00      	cmp	r3, #0
 8106bfe:	d001      	beq.n	8106c04 <OPENAMP_shmem_init+0x5c>
    return status;
 8106c00:	69fb      	ldr	r3, [r7, #28]
 8106c02:	e059      	b.n	8106cb8 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8106c04:	4a32      	ldr	r2, [pc, #200]	@ (8106cd0 <OPENAMP_shmem_init+0x128>)
 8106c06:	4b33      	ldr	r3, [pc, #204]	@ (8106cd4 <OPENAMP_shmem_init+0x12c>)
 8106c08:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8106c0a:	69bb      	ldr	r3, [r7, #24]
 8106c0c:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8106c10:	4a31      	ldr	r2, [pc, #196]	@ (8106cd8 <OPENAMP_shmem_init+0x130>)
 8106c12:	4b2f      	ldr	r3, [pc, #188]	@ (8106cd0 <OPENAMP_shmem_init+0x128>)
 8106c14:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8106c16:	461a      	mov	r2, r3
 8106c18:	2300      	movs	r3, #0
 8106c1a:	9302      	str	r3, [sp, #8]
 8106c1c:	2300      	movs	r3, #0
 8106c1e:	9301      	str	r3, [sp, #4]
 8106c20:	f04f 33ff 	mov.w	r3, #4294967295
 8106c24:	9300      	str	r3, [sp, #0]
 8106c26:	4613      	mov	r3, r2
 8106c28:	4a2a      	ldr	r2, [pc, #168]	@ (8106cd4 <OPENAMP_shmem_init+0x12c>)
 8106c2a:	4929      	ldr	r1, [pc, #164]	@ (8106cd0 <OPENAMP_shmem_init+0x128>)
 8106c2c:	f7fe f907 	bl	8104e3e <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8106c30:	69bb      	ldr	r3, [r7, #24]
 8106c32:	2100      	movs	r1, #0
 8106c34:	4618      	mov	r0, r3
 8106c36:	f7ff ff9c 	bl	8106b72 <metal_device_io_region>
 8106c3a:	4603      	mov	r3, r0
 8106c3c:	4a27      	ldr	r2, [pc, #156]	@ (8106cdc <OPENAMP_shmem_init+0x134>)
 8106c3e:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8106c40:	4b26      	ldr	r3, [pc, #152]	@ (8106cdc <OPENAMP_shmem_init+0x134>)
 8106c42:	681b      	ldr	r3, [r3, #0]
 8106c44:	2b00      	cmp	r3, #0
 8106c46:	d102      	bne.n	8106c4e <OPENAMP_shmem_init+0xa6>
    return -1;
 8106c48:	f04f 33ff 	mov.w	r3, #4294967295
 8106c4c:	e034      	b.n	8106cb8 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8106c4e:	f107 0208 	add.w	r2, r7, #8
 8106c52:	f107 030c 	add.w	r3, r7, #12
 8106c56:	4619      	mov	r1, r3
 8106c58:	6878      	ldr	r0, [r7, #4]
 8106c5a:	f000 f905 	bl	8106e68 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8106c5e:	68fb      	ldr	r3, [r7, #12]
 8106c60:	4a1f      	ldr	r2, [pc, #124]	@ (8106ce0 <OPENAMP_shmem_init+0x138>)
 8106c62:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8106c64:	4b1e      	ldr	r3, [pc, #120]	@ (8106ce0 <OPENAMP_shmem_init+0x138>)
 8106c66:	681b      	ldr	r3, [r3, #0]
 8106c68:	2b00      	cmp	r3, #0
 8106c6a:	d102      	bne.n	8106c72 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8106c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8106c70:	e022      	b.n	8106cb8 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8106c72:	69bb      	ldr	r3, [r7, #24]
 8106c74:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8106c78:	4b19      	ldr	r3, [pc, #100]	@ (8106ce0 <OPENAMP_shmem_init+0x138>)
 8106c7a:	6819      	ldr	r1, [r3, #0]
 8106c7c:	4b18      	ldr	r3, [pc, #96]	@ (8106ce0 <OPENAMP_shmem_init+0x138>)
 8106c7e:	681a      	ldr	r2, [r3, #0]
 8106c80:	68bb      	ldr	r3, [r7, #8]
 8106c82:	461c      	mov	r4, r3
 8106c84:	2300      	movs	r3, #0
 8106c86:	9302      	str	r3, [sp, #8]
 8106c88:	2300      	movs	r3, #0
 8106c8a:	9301      	str	r3, [sp, #4]
 8106c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8106c90:	9300      	str	r3, [sp, #0]
 8106c92:	4623      	mov	r3, r4
 8106c94:	f7fe f8d3 	bl	8104e3e <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8106c98:	69bb      	ldr	r3, [r7, #24]
 8106c9a:	2101      	movs	r1, #1
 8106c9c:	4618      	mov	r0, r3
 8106c9e:	f7ff ff68 	bl	8106b72 <metal_device_io_region>
 8106ca2:	4603      	mov	r3, r0
 8106ca4:	4a0f      	ldr	r2, [pc, #60]	@ (8106ce4 <OPENAMP_shmem_init+0x13c>)
 8106ca6:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8106ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8106ce4 <OPENAMP_shmem_init+0x13c>)
 8106caa:	681b      	ldr	r3, [r3, #0]
 8106cac:	2b00      	cmp	r3, #0
 8106cae:	d102      	bne.n	8106cb6 <OPENAMP_shmem_init+0x10e>
    return -1;
 8106cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8106cb4:	e000      	b.n	8106cb8 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 8106cb6:	2300      	movs	r3, #0
}
 8106cb8:	4618      	mov	r0, r3
 8106cba:	3724      	adds	r7, #36	@ 0x24
 8106cbc:	46bd      	mov	sp, r7
 8106cbe:	bd90      	pop	{r4, r7, pc}
 8106cc0:	08108408 	.word	0x08108408
 8106cc4:	1000003c 	.word	0x1000003c
 8106cc8:	081083f4 	.word	0x081083f4
 8106ccc:	08108400 	.word	0x08108400
 8106cd0:	38000400 	.word	0x38000400
 8106cd4:	1000032c 	.word	0x1000032c
 8106cd8:	38010000 	.word	0x38010000
 8106cdc:	1000029c 	.word	0x1000029c
 8106ce0:	100002a4 	.word	0x100002a4
 8106ce4:	100002a0 	.word	0x100002a0

08106ce8 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8106ce8:	b590      	push	{r4, r7, lr}
 8106cea:	b08b      	sub	sp, #44	@ 0x2c
 8106cec:	af04      	add	r7, sp, #16
 8106cee:	6078      	str	r0, [r7, #4]
 8106cf0:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 8106cf2:	2300      	movs	r3, #0
 8106cf4:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8106cf6:	2300      	movs	r3, #0
 8106cf8:	613b      	str	r3, [r7, #16]
  int status = 0;
 8106cfa:	2300      	movs	r3, #0
 8106cfc:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 8106cfe:	f7ff fef1 	bl	8106ae4 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 8106d02:	6878      	ldr	r0, [r7, #4]
 8106d04:	f7ff ff50 	bl	8106ba8 <OPENAMP_shmem_init>
 8106d08:	60f8      	str	r0, [r7, #12]
  if(status)
 8106d0a:	68fb      	ldr	r3, [r7, #12]
 8106d0c:	2b00      	cmp	r3, #0
 8106d0e:	d001      	beq.n	8106d14 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8106d10:	68fb      	ldr	r3, [r7, #12]
 8106d12:	e06a      	b.n	8106dea <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8106d14:	6878      	ldr	r0, [r7, #4]
 8106d16:	4b37      	ldr	r3, [pc, #220]	@ (8106df4 <MX_OPENAMP_Init+0x10c>)
 8106d18:	681b      	ldr	r3, [r3, #0]
 8106d1a:	f103 0218 	add.w	r2, r3, #24
 8106d1e:	4b36      	ldr	r3, [pc, #216]	@ (8106df8 <MX_OPENAMP_Init+0x110>)
 8106d20:	681b      	ldr	r3, [r3, #0]
 8106d22:	2100      	movs	r1, #0
 8106d24:	9102      	str	r1, [sp, #8]
 8106d26:	4935      	ldr	r1, [pc, #212]	@ (8106dfc <MX_OPENAMP_Init+0x114>)
 8106d28:	9101      	str	r1, [sp, #4]
 8106d2a:	2100      	movs	r1, #0
 8106d2c:	9100      	str	r1, [sp, #0]
 8106d2e:	21ff      	movs	r1, #255	@ 0xff
 8106d30:	f7fe fb46 	bl	81053c0 <rproc_virtio_create_vdev>
 8106d34:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 8106d36:	693b      	ldr	r3, [r7, #16]
 8106d38:	2b00      	cmp	r3, #0
 8106d3a:	d102      	bne.n	8106d42 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 8106d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8106d40:	e053      	b.n	8106dea <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 8106d42:	6938      	ldr	r0, [r7, #16]
 8106d44:	f7fe fc57 	bl	81055f6 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8106d48:	4b2a      	ldr	r3, [pc, #168]	@ (8106df4 <MX_OPENAMP_Init+0x10c>)
 8106d4a:	681b      	ldr	r3, [r3, #0]
 8106d4c:	3334      	adds	r3, #52	@ 0x34
 8106d4e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8106d50:	697b      	ldr	r3, [r7, #20]
 8106d52:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8106d54:	697b      	ldr	r3, [r7, #20]
 8106d56:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8106d58:	461c      	mov	r4, r3
 8106d5a:	4b29      	ldr	r3, [pc, #164]	@ (8106e00 <MX_OPENAMP_Init+0x118>)
 8106d5c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8106d5e:	697a      	ldr	r2, [r7, #20]
 8106d60:	6892      	ldr	r2, [r2, #8]
 8106d62:	6979      	ldr	r1, [r7, #20]
 8106d64:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8106d66:	9102      	str	r1, [sp, #8]
 8106d68:	9201      	str	r2, [sp, #4]
 8106d6a:	9300      	str	r3, [sp, #0]
 8106d6c:	4623      	mov	r3, r4
 8106d6e:	4602      	mov	r2, r0
 8106d70:	2100      	movs	r1, #0
 8106d72:	6938      	ldr	r0, [r7, #16]
 8106d74:	f7fe fbd2 	bl	810551c <rproc_virtio_init_vring>
 8106d78:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8106d7a:	68fb      	ldr	r3, [r7, #12]
 8106d7c:	2b00      	cmp	r3, #0
 8106d7e:	d001      	beq.n	8106d84 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8106d80:	68fb      	ldr	r3, [r7, #12]
 8106d82:	e032      	b.n	8106dea <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8106d84:	4b1b      	ldr	r3, [pc, #108]	@ (8106df4 <MX_OPENAMP_Init+0x10c>)
 8106d86:	681b      	ldr	r3, [r3, #0]
 8106d88:	3348      	adds	r3, #72	@ 0x48
 8106d8a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8106d8c:	697b      	ldr	r3, [r7, #20]
 8106d8e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8106d90:	697b      	ldr	r3, [r7, #20]
 8106d92:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8106d94:	461c      	mov	r4, r3
 8106d96:	4b1a      	ldr	r3, [pc, #104]	@ (8106e00 <MX_OPENAMP_Init+0x118>)
 8106d98:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8106d9a:	697a      	ldr	r2, [r7, #20]
 8106d9c:	6892      	ldr	r2, [r2, #8]
 8106d9e:	6979      	ldr	r1, [r7, #20]
 8106da0:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8106da2:	9102      	str	r1, [sp, #8]
 8106da4:	9201      	str	r2, [sp, #4]
 8106da6:	9300      	str	r3, [sp, #0]
 8106da8:	4623      	mov	r3, r4
 8106daa:	4602      	mov	r2, r0
 8106dac:	2101      	movs	r1, #1
 8106dae:	6938      	ldr	r0, [r7, #16]
 8106db0:	f7fe fbb4 	bl	810551c <rproc_virtio_init_vring>
 8106db4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8106db6:	68fb      	ldr	r3, [r7, #12]
 8106db8:	2b00      	cmp	r3, #0
 8106dba:	d001      	beq.n	8106dc0 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8106dbc:	68fb      	ldr	r3, [r7, #12]
 8106dbe:	e014      	b.n	8106dea <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8106dc0:	4b10      	ldr	r3, [pc, #64]	@ (8106e04 <MX_OPENAMP_Init+0x11c>)
 8106dc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8106dc6:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8106dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8106e08 <MX_OPENAMP_Init+0x120>)
 8106dca:	4b0e      	ldr	r3, [pc, #56]	@ (8106e04 <MX_OPENAMP_Init+0x11c>)
 8106dcc:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8106dce:	461a      	mov	r2, r3
 8106dd0:	480e      	ldr	r0, [pc, #56]	@ (8106e0c <MX_OPENAMP_Init+0x124>)
 8106dd2:	f7ff f85f 	bl	8105e94 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 8106dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8106e00 <MX_OPENAMP_Init+0x118>)
 8106dd8:	681b      	ldr	r3, [r3, #0]
 8106dda:	4a0c      	ldr	r2, [pc, #48]	@ (8106e0c <MX_OPENAMP_Init+0x124>)
 8106ddc:	9200      	str	r2, [sp, #0]
 8106dde:	683a      	ldr	r2, [r7, #0]
 8106de0:	6939      	ldr	r1, [r7, #16]
 8106de2:	480b      	ldr	r0, [pc, #44]	@ (8106e10 <MX_OPENAMP_Init+0x128>)
 8106de4:	f7ff facc 	bl	8106380 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8106de8:	2300      	movs	r3, #0
}
 8106dea:	4618      	mov	r0, r3
 8106dec:	371c      	adds	r7, #28
 8106dee:	46bd      	mov	sp, r7
 8106df0:	bd90      	pop	{r4, r7, pc}
 8106df2:	bf00      	nop
 8106df4:	100002a4 	.word	0x100002a4
 8106df8:	100002a0 	.word	0x100002a0
 8106dfc:	08106b51 	.word	0x08106b51
 8106e00:	1000029c 	.word	0x1000029c
 8106e04:	38000400 	.word	0x38000400
 8106e08:	38010000 	.word	0x38010000
 8106e0c:	100002a8 	.word	0x100002a8
 8106e10:	100002b4 	.word	0x100002b4

08106e14 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8106e14:	b580      	push	{r7, lr}
 8106e16:	b08a      	sub	sp, #40	@ 0x28
 8106e18:	af04      	add	r7, sp, #16
 8106e1a:	60f8      	str	r0, [r7, #12]
 8106e1c:	60b9      	str	r1, [r7, #8]
 8106e1e:	607a      	str	r2, [r7, #4]
 8106e20:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8106e22:	2300      	movs	r3, #0
 8106e24:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8106e26:	6a3b      	ldr	r3, [r7, #32]
 8106e28:	9302      	str	r3, [sp, #8]
 8106e2a:	683b      	ldr	r3, [r7, #0]
 8106e2c:	9301      	str	r3, [sp, #4]
 8106e2e:	687b      	ldr	r3, [r7, #4]
 8106e30:	9300      	str	r3, [sp, #0]
 8106e32:	f04f 33ff 	mov.w	r3, #4294967295
 8106e36:	68ba      	ldr	r2, [r7, #8]
 8106e38:	4904      	ldr	r1, [pc, #16]	@ (8106e4c <OPENAMP_create_endpoint+0x38>)
 8106e3a:	68f8      	ldr	r0, [r7, #12]
 8106e3c:	f7fe fe68 	bl	8105b10 <rpmsg_create_ept>
 8106e40:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 8106e42:	697b      	ldr	r3, [r7, #20]
}
 8106e44:	4618      	mov	r0, r3
 8106e46:	3718      	adds	r7, #24
 8106e48:	46bd      	mov	sp, r7
 8106e4a:	bd80      	pop	{r7, pc}
 8106e4c:	100002b4 	.word	0x100002b4

08106e50 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8106e50:	b580      	push	{r7, lr}
 8106e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8106e54:	4b03      	ldr	r3, [pc, #12]	@ (8106e64 <OPENAMP_check_for_message+0x14>)
 8106e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106e58:	4618      	mov	r0, r3
 8106e5a:	f7ff fe5f 	bl	8106b1c <MAILBOX_Poll>
}
 8106e5e:	bf00      	nop
 8106e60:	bd80      	pop	{r7, pc}
 8106e62:	bf00      	nop
 8106e64:	100002b4 	.word	0x100002b4

08106e68 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8106e68:	b480      	push	{r7}
 8106e6a:	b085      	sub	sp, #20
 8106e6c:	af00      	add	r7, sp, #0
 8106e6e:	60f8      	str	r0, [r7, #12]
 8106e70:	60b9      	str	r1, [r7, #8]
 8106e72:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 8106e74:	bf00      	nop
 8106e76:	4b08      	ldr	r3, [pc, #32]	@ (8106e98 <resource_table_init+0x30>)
 8106e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106e7a:	4a08      	ldr	r2, [pc, #32]	@ (8106e9c <resource_table_init+0x34>)
 8106e7c:	4293      	cmp	r3, r2
 8106e7e:	d1fa      	bne.n	8106e76 <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8106e80:	687b      	ldr	r3, [r7, #4]
 8106e82:	228c      	movs	r2, #140	@ 0x8c
 8106e84:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8106e86:	68bb      	ldr	r3, [r7, #8]
 8106e88:	4a03      	ldr	r2, [pc, #12]	@ (8106e98 <resource_table_init+0x30>)
 8106e8a:	601a      	str	r2, [r3, #0]
}
 8106e8c:	bf00      	nop
 8106e8e:	3714      	adds	r7, #20
 8106e90:	46bd      	mov	sp, r7
 8106e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e96:	4770      	bx	lr
 8106e98:	38000000 	.word	0x38000000
 8106e9c:	38000400 	.word	0x38000400

08106ea0 <__assert_func>:
 8106ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8106ea2:	4614      	mov	r4, r2
 8106ea4:	461a      	mov	r2, r3
 8106ea6:	4b09      	ldr	r3, [pc, #36]	@ (8106ecc <__assert_func+0x2c>)
 8106ea8:	681b      	ldr	r3, [r3, #0]
 8106eaa:	4605      	mov	r5, r0
 8106eac:	68d8      	ldr	r0, [r3, #12]
 8106eae:	b954      	cbnz	r4, 8106ec6 <__assert_func+0x26>
 8106eb0:	4b07      	ldr	r3, [pc, #28]	@ (8106ed0 <__assert_func+0x30>)
 8106eb2:	461c      	mov	r4, r3
 8106eb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8106eb8:	9100      	str	r1, [sp, #0]
 8106eba:	462b      	mov	r3, r5
 8106ebc:	4905      	ldr	r1, [pc, #20]	@ (8106ed4 <__assert_func+0x34>)
 8106ebe:	f000 f96f 	bl	81071a0 <fiprintf>
 8106ec2:	f000 fabe 	bl	8107442 <abort>
 8106ec6:	4b04      	ldr	r3, [pc, #16]	@ (8106ed8 <__assert_func+0x38>)
 8106ec8:	e7f4      	b.n	8106eb4 <__assert_func+0x14>
 8106eca:	bf00      	nop
 8106ecc:	100000c4 	.word	0x100000c4
 8106ed0:	081084d9 	.word	0x081084d9
 8106ed4:	081084ab 	.word	0x081084ab
 8106ed8:	0810849e 	.word	0x0810849e

08106edc <malloc>:
 8106edc:	4b02      	ldr	r3, [pc, #8]	@ (8106ee8 <malloc+0xc>)
 8106ede:	4601      	mov	r1, r0
 8106ee0:	6818      	ldr	r0, [r3, #0]
 8106ee2:	f000 b82d 	b.w	8106f40 <_malloc_r>
 8106ee6:	bf00      	nop
 8106ee8:	100000c4 	.word	0x100000c4

08106eec <free>:
 8106eec:	4b02      	ldr	r3, [pc, #8]	@ (8106ef8 <free+0xc>)
 8106eee:	4601      	mov	r1, r0
 8106ef0:	6818      	ldr	r0, [r3, #0]
 8106ef2:	f000 baad 	b.w	8107450 <_free_r>
 8106ef6:	bf00      	nop
 8106ef8:	100000c4 	.word	0x100000c4

08106efc <sbrk_aligned>:
 8106efc:	b570      	push	{r4, r5, r6, lr}
 8106efe:	4e0f      	ldr	r6, [pc, #60]	@ (8106f3c <sbrk_aligned+0x40>)
 8106f00:	460c      	mov	r4, r1
 8106f02:	6831      	ldr	r1, [r6, #0]
 8106f04:	4605      	mov	r5, r0
 8106f06:	b911      	cbnz	r1, 8106f0e <sbrk_aligned+0x12>
 8106f08:	f000 fa3e 	bl	8107388 <_sbrk_r>
 8106f0c:	6030      	str	r0, [r6, #0]
 8106f0e:	4621      	mov	r1, r4
 8106f10:	4628      	mov	r0, r5
 8106f12:	f000 fa39 	bl	8107388 <_sbrk_r>
 8106f16:	1c43      	adds	r3, r0, #1
 8106f18:	d103      	bne.n	8106f22 <sbrk_aligned+0x26>
 8106f1a:	f04f 34ff 	mov.w	r4, #4294967295
 8106f1e:	4620      	mov	r0, r4
 8106f20:	bd70      	pop	{r4, r5, r6, pc}
 8106f22:	1cc4      	adds	r4, r0, #3
 8106f24:	f024 0403 	bic.w	r4, r4, #3
 8106f28:	42a0      	cmp	r0, r4
 8106f2a:	d0f8      	beq.n	8106f1e <sbrk_aligned+0x22>
 8106f2c:	1a21      	subs	r1, r4, r0
 8106f2e:	4628      	mov	r0, r5
 8106f30:	f000 fa2a 	bl	8107388 <_sbrk_r>
 8106f34:	3001      	adds	r0, #1
 8106f36:	d1f2      	bne.n	8106f1e <sbrk_aligned+0x22>
 8106f38:	e7ef      	b.n	8106f1a <sbrk_aligned+0x1e>
 8106f3a:	bf00      	nop
 8106f3c:	10000330 	.word	0x10000330

08106f40 <_malloc_r>:
 8106f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106f44:	1ccd      	adds	r5, r1, #3
 8106f46:	f025 0503 	bic.w	r5, r5, #3
 8106f4a:	3508      	adds	r5, #8
 8106f4c:	2d0c      	cmp	r5, #12
 8106f4e:	bf38      	it	cc
 8106f50:	250c      	movcc	r5, #12
 8106f52:	2d00      	cmp	r5, #0
 8106f54:	4606      	mov	r6, r0
 8106f56:	db01      	blt.n	8106f5c <_malloc_r+0x1c>
 8106f58:	42a9      	cmp	r1, r5
 8106f5a:	d904      	bls.n	8106f66 <_malloc_r+0x26>
 8106f5c:	230c      	movs	r3, #12
 8106f5e:	6033      	str	r3, [r6, #0]
 8106f60:	2000      	movs	r0, #0
 8106f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8106f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810703c <_malloc_r+0xfc>
 8106f6a:	f000 f869 	bl	8107040 <__malloc_lock>
 8106f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8106f72:	461c      	mov	r4, r3
 8106f74:	bb44      	cbnz	r4, 8106fc8 <_malloc_r+0x88>
 8106f76:	4629      	mov	r1, r5
 8106f78:	4630      	mov	r0, r6
 8106f7a:	f7ff ffbf 	bl	8106efc <sbrk_aligned>
 8106f7e:	1c43      	adds	r3, r0, #1
 8106f80:	4604      	mov	r4, r0
 8106f82:	d158      	bne.n	8107036 <_malloc_r+0xf6>
 8106f84:	f8d8 4000 	ldr.w	r4, [r8]
 8106f88:	4627      	mov	r7, r4
 8106f8a:	2f00      	cmp	r7, #0
 8106f8c:	d143      	bne.n	8107016 <_malloc_r+0xd6>
 8106f8e:	2c00      	cmp	r4, #0
 8106f90:	d04b      	beq.n	810702a <_malloc_r+0xea>
 8106f92:	6823      	ldr	r3, [r4, #0]
 8106f94:	4639      	mov	r1, r7
 8106f96:	4630      	mov	r0, r6
 8106f98:	eb04 0903 	add.w	r9, r4, r3
 8106f9c:	f000 f9f4 	bl	8107388 <_sbrk_r>
 8106fa0:	4581      	cmp	r9, r0
 8106fa2:	d142      	bne.n	810702a <_malloc_r+0xea>
 8106fa4:	6821      	ldr	r1, [r4, #0]
 8106fa6:	1a6d      	subs	r5, r5, r1
 8106fa8:	4629      	mov	r1, r5
 8106faa:	4630      	mov	r0, r6
 8106fac:	f7ff ffa6 	bl	8106efc <sbrk_aligned>
 8106fb0:	3001      	adds	r0, #1
 8106fb2:	d03a      	beq.n	810702a <_malloc_r+0xea>
 8106fb4:	6823      	ldr	r3, [r4, #0]
 8106fb6:	442b      	add	r3, r5
 8106fb8:	6023      	str	r3, [r4, #0]
 8106fba:	f8d8 3000 	ldr.w	r3, [r8]
 8106fbe:	685a      	ldr	r2, [r3, #4]
 8106fc0:	bb62      	cbnz	r2, 810701c <_malloc_r+0xdc>
 8106fc2:	f8c8 7000 	str.w	r7, [r8]
 8106fc6:	e00f      	b.n	8106fe8 <_malloc_r+0xa8>
 8106fc8:	6822      	ldr	r2, [r4, #0]
 8106fca:	1b52      	subs	r2, r2, r5
 8106fcc:	d420      	bmi.n	8107010 <_malloc_r+0xd0>
 8106fce:	2a0b      	cmp	r2, #11
 8106fd0:	d917      	bls.n	8107002 <_malloc_r+0xc2>
 8106fd2:	1961      	adds	r1, r4, r5
 8106fd4:	42a3      	cmp	r3, r4
 8106fd6:	6025      	str	r5, [r4, #0]
 8106fd8:	bf18      	it	ne
 8106fda:	6059      	strne	r1, [r3, #4]
 8106fdc:	6863      	ldr	r3, [r4, #4]
 8106fde:	bf08      	it	eq
 8106fe0:	f8c8 1000 	streq.w	r1, [r8]
 8106fe4:	5162      	str	r2, [r4, r5]
 8106fe6:	604b      	str	r3, [r1, #4]
 8106fe8:	4630      	mov	r0, r6
 8106fea:	f000 f82f 	bl	810704c <__malloc_unlock>
 8106fee:	f104 000b 	add.w	r0, r4, #11
 8106ff2:	1d23      	adds	r3, r4, #4
 8106ff4:	f020 0007 	bic.w	r0, r0, #7
 8106ff8:	1ac2      	subs	r2, r0, r3
 8106ffa:	bf1c      	itt	ne
 8106ffc:	1a1b      	subne	r3, r3, r0
 8106ffe:	50a3      	strne	r3, [r4, r2]
 8107000:	e7af      	b.n	8106f62 <_malloc_r+0x22>
 8107002:	6862      	ldr	r2, [r4, #4]
 8107004:	42a3      	cmp	r3, r4
 8107006:	bf0c      	ite	eq
 8107008:	f8c8 2000 	streq.w	r2, [r8]
 810700c:	605a      	strne	r2, [r3, #4]
 810700e:	e7eb      	b.n	8106fe8 <_malloc_r+0xa8>
 8107010:	4623      	mov	r3, r4
 8107012:	6864      	ldr	r4, [r4, #4]
 8107014:	e7ae      	b.n	8106f74 <_malloc_r+0x34>
 8107016:	463c      	mov	r4, r7
 8107018:	687f      	ldr	r7, [r7, #4]
 810701a:	e7b6      	b.n	8106f8a <_malloc_r+0x4a>
 810701c:	461a      	mov	r2, r3
 810701e:	685b      	ldr	r3, [r3, #4]
 8107020:	42a3      	cmp	r3, r4
 8107022:	d1fb      	bne.n	810701c <_malloc_r+0xdc>
 8107024:	2300      	movs	r3, #0
 8107026:	6053      	str	r3, [r2, #4]
 8107028:	e7de      	b.n	8106fe8 <_malloc_r+0xa8>
 810702a:	230c      	movs	r3, #12
 810702c:	6033      	str	r3, [r6, #0]
 810702e:	4630      	mov	r0, r6
 8107030:	f000 f80c 	bl	810704c <__malloc_unlock>
 8107034:	e794      	b.n	8106f60 <_malloc_r+0x20>
 8107036:	6005      	str	r5, [r0, #0]
 8107038:	e7d6      	b.n	8106fe8 <_malloc_r+0xa8>
 810703a:	bf00      	nop
 810703c:	10000334 	.word	0x10000334

08107040 <__malloc_lock>:
 8107040:	4801      	ldr	r0, [pc, #4]	@ (8107048 <__malloc_lock+0x8>)
 8107042:	f000 b9ee 	b.w	8107422 <__retarget_lock_acquire_recursive>
 8107046:	bf00      	nop
 8107048:	10000478 	.word	0x10000478

0810704c <__malloc_unlock>:
 810704c:	4801      	ldr	r0, [pc, #4]	@ (8107054 <__malloc_unlock+0x8>)
 810704e:	f000 b9e9 	b.w	8107424 <__retarget_lock_release_recursive>
 8107052:	bf00      	nop
 8107054:	10000478 	.word	0x10000478

08107058 <std>:
 8107058:	2300      	movs	r3, #0
 810705a:	b510      	push	{r4, lr}
 810705c:	4604      	mov	r4, r0
 810705e:	e9c0 3300 	strd	r3, r3, [r0]
 8107062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8107066:	6083      	str	r3, [r0, #8]
 8107068:	8181      	strh	r1, [r0, #12]
 810706a:	6643      	str	r3, [r0, #100]	@ 0x64
 810706c:	81c2      	strh	r2, [r0, #14]
 810706e:	6183      	str	r3, [r0, #24]
 8107070:	4619      	mov	r1, r3
 8107072:	2208      	movs	r2, #8
 8107074:	305c      	adds	r0, #92	@ 0x5c
 8107076:	f000 f926 	bl	81072c6 <memset>
 810707a:	4b0d      	ldr	r3, [pc, #52]	@ (81070b0 <std+0x58>)
 810707c:	6263      	str	r3, [r4, #36]	@ 0x24
 810707e:	4b0d      	ldr	r3, [pc, #52]	@ (81070b4 <std+0x5c>)
 8107080:	62a3      	str	r3, [r4, #40]	@ 0x28
 8107082:	4b0d      	ldr	r3, [pc, #52]	@ (81070b8 <std+0x60>)
 8107084:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8107086:	4b0d      	ldr	r3, [pc, #52]	@ (81070bc <std+0x64>)
 8107088:	6323      	str	r3, [r4, #48]	@ 0x30
 810708a:	4b0d      	ldr	r3, [pc, #52]	@ (81070c0 <std+0x68>)
 810708c:	6224      	str	r4, [r4, #32]
 810708e:	429c      	cmp	r4, r3
 8107090:	d006      	beq.n	81070a0 <std+0x48>
 8107092:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8107096:	4294      	cmp	r4, r2
 8107098:	d002      	beq.n	81070a0 <std+0x48>
 810709a:	33d0      	adds	r3, #208	@ 0xd0
 810709c:	429c      	cmp	r4, r3
 810709e:	d105      	bne.n	81070ac <std+0x54>
 81070a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 81070a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81070a8:	f000 b9ba 	b.w	8107420 <__retarget_lock_init_recursive>
 81070ac:	bd10      	pop	{r4, pc}
 81070ae:	bf00      	nop
 81070b0:	08107241 	.word	0x08107241
 81070b4:	08107263 	.word	0x08107263
 81070b8:	0810729b 	.word	0x0810729b
 81070bc:	081072bf 	.word	0x081072bf
 81070c0:	10000338 	.word	0x10000338

081070c4 <stdio_exit_handler>:
 81070c4:	4a02      	ldr	r2, [pc, #8]	@ (81070d0 <stdio_exit_handler+0xc>)
 81070c6:	4903      	ldr	r1, [pc, #12]	@ (81070d4 <stdio_exit_handler+0x10>)
 81070c8:	4803      	ldr	r0, [pc, #12]	@ (81070d8 <stdio_exit_handler+0x14>)
 81070ca:	f000 b87b 	b.w	81071c4 <_fwalk_sglue>
 81070ce:	bf00      	nop
 81070d0:	100000b8 	.word	0x100000b8
 81070d4:	08107e3d 	.word	0x08107e3d
 81070d8:	100000c8 	.word	0x100000c8

081070dc <cleanup_stdio>:
 81070dc:	6841      	ldr	r1, [r0, #4]
 81070de:	4b0c      	ldr	r3, [pc, #48]	@ (8107110 <cleanup_stdio+0x34>)
 81070e0:	4299      	cmp	r1, r3
 81070e2:	b510      	push	{r4, lr}
 81070e4:	4604      	mov	r4, r0
 81070e6:	d001      	beq.n	81070ec <cleanup_stdio+0x10>
 81070e8:	f000 fea8 	bl	8107e3c <_fflush_r>
 81070ec:	68a1      	ldr	r1, [r4, #8]
 81070ee:	4b09      	ldr	r3, [pc, #36]	@ (8107114 <cleanup_stdio+0x38>)
 81070f0:	4299      	cmp	r1, r3
 81070f2:	d002      	beq.n	81070fa <cleanup_stdio+0x1e>
 81070f4:	4620      	mov	r0, r4
 81070f6:	f000 fea1 	bl	8107e3c <_fflush_r>
 81070fa:	68e1      	ldr	r1, [r4, #12]
 81070fc:	4b06      	ldr	r3, [pc, #24]	@ (8107118 <cleanup_stdio+0x3c>)
 81070fe:	4299      	cmp	r1, r3
 8107100:	d004      	beq.n	810710c <cleanup_stdio+0x30>
 8107102:	4620      	mov	r0, r4
 8107104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107108:	f000 be98 	b.w	8107e3c <_fflush_r>
 810710c:	bd10      	pop	{r4, pc}
 810710e:	bf00      	nop
 8107110:	10000338 	.word	0x10000338
 8107114:	100003a0 	.word	0x100003a0
 8107118:	10000408 	.word	0x10000408

0810711c <global_stdio_init.part.0>:
 810711c:	b510      	push	{r4, lr}
 810711e:	4b0b      	ldr	r3, [pc, #44]	@ (810714c <global_stdio_init.part.0+0x30>)
 8107120:	4c0b      	ldr	r4, [pc, #44]	@ (8107150 <global_stdio_init.part.0+0x34>)
 8107122:	4a0c      	ldr	r2, [pc, #48]	@ (8107154 <global_stdio_init.part.0+0x38>)
 8107124:	601a      	str	r2, [r3, #0]
 8107126:	4620      	mov	r0, r4
 8107128:	2200      	movs	r2, #0
 810712a:	2104      	movs	r1, #4
 810712c:	f7ff ff94 	bl	8107058 <std>
 8107130:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8107134:	2201      	movs	r2, #1
 8107136:	2109      	movs	r1, #9
 8107138:	f7ff ff8e 	bl	8107058 <std>
 810713c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8107140:	2202      	movs	r2, #2
 8107142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107146:	2112      	movs	r1, #18
 8107148:	f7ff bf86 	b.w	8107058 <std>
 810714c:	10000470 	.word	0x10000470
 8107150:	10000338 	.word	0x10000338
 8107154:	081070c5 	.word	0x081070c5

08107158 <__sfp_lock_acquire>:
 8107158:	4801      	ldr	r0, [pc, #4]	@ (8107160 <__sfp_lock_acquire+0x8>)
 810715a:	f000 b962 	b.w	8107422 <__retarget_lock_acquire_recursive>
 810715e:	bf00      	nop
 8107160:	10000479 	.word	0x10000479

08107164 <__sfp_lock_release>:
 8107164:	4801      	ldr	r0, [pc, #4]	@ (810716c <__sfp_lock_release+0x8>)
 8107166:	f000 b95d 	b.w	8107424 <__retarget_lock_release_recursive>
 810716a:	bf00      	nop
 810716c:	10000479 	.word	0x10000479

08107170 <__sinit>:
 8107170:	b510      	push	{r4, lr}
 8107172:	4604      	mov	r4, r0
 8107174:	f7ff fff0 	bl	8107158 <__sfp_lock_acquire>
 8107178:	6a23      	ldr	r3, [r4, #32]
 810717a:	b11b      	cbz	r3, 8107184 <__sinit+0x14>
 810717c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107180:	f7ff bff0 	b.w	8107164 <__sfp_lock_release>
 8107184:	4b04      	ldr	r3, [pc, #16]	@ (8107198 <__sinit+0x28>)
 8107186:	6223      	str	r3, [r4, #32]
 8107188:	4b04      	ldr	r3, [pc, #16]	@ (810719c <__sinit+0x2c>)
 810718a:	681b      	ldr	r3, [r3, #0]
 810718c:	2b00      	cmp	r3, #0
 810718e:	d1f5      	bne.n	810717c <__sinit+0xc>
 8107190:	f7ff ffc4 	bl	810711c <global_stdio_init.part.0>
 8107194:	e7f2      	b.n	810717c <__sinit+0xc>
 8107196:	bf00      	nop
 8107198:	081070dd 	.word	0x081070dd
 810719c:	10000470 	.word	0x10000470

081071a0 <fiprintf>:
 81071a0:	b40e      	push	{r1, r2, r3}
 81071a2:	b503      	push	{r0, r1, lr}
 81071a4:	4601      	mov	r1, r0
 81071a6:	ab03      	add	r3, sp, #12
 81071a8:	4805      	ldr	r0, [pc, #20]	@ (81071c0 <fiprintf+0x20>)
 81071aa:	f853 2b04 	ldr.w	r2, [r3], #4
 81071ae:	6800      	ldr	r0, [r0, #0]
 81071b0:	9301      	str	r3, [sp, #4]
 81071b2:	f000 fb19 	bl	81077e8 <_vfiprintf_r>
 81071b6:	b002      	add	sp, #8
 81071b8:	f85d eb04 	ldr.w	lr, [sp], #4
 81071bc:	b003      	add	sp, #12
 81071be:	4770      	bx	lr
 81071c0:	100000c4 	.word	0x100000c4

081071c4 <_fwalk_sglue>:
 81071c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81071c8:	4607      	mov	r7, r0
 81071ca:	4688      	mov	r8, r1
 81071cc:	4614      	mov	r4, r2
 81071ce:	2600      	movs	r6, #0
 81071d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 81071d4:	f1b9 0901 	subs.w	r9, r9, #1
 81071d8:	d505      	bpl.n	81071e6 <_fwalk_sglue+0x22>
 81071da:	6824      	ldr	r4, [r4, #0]
 81071dc:	2c00      	cmp	r4, #0
 81071de:	d1f7      	bne.n	81071d0 <_fwalk_sglue+0xc>
 81071e0:	4630      	mov	r0, r6
 81071e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81071e6:	89ab      	ldrh	r3, [r5, #12]
 81071e8:	2b01      	cmp	r3, #1
 81071ea:	d907      	bls.n	81071fc <_fwalk_sglue+0x38>
 81071ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81071f0:	3301      	adds	r3, #1
 81071f2:	d003      	beq.n	81071fc <_fwalk_sglue+0x38>
 81071f4:	4629      	mov	r1, r5
 81071f6:	4638      	mov	r0, r7
 81071f8:	47c0      	blx	r8
 81071fa:	4306      	orrs	r6, r0
 81071fc:	3568      	adds	r5, #104	@ 0x68
 81071fe:	e7e9      	b.n	81071d4 <_fwalk_sglue+0x10>

08107200 <siprintf>:
 8107200:	b40e      	push	{r1, r2, r3}
 8107202:	b500      	push	{lr}
 8107204:	b09c      	sub	sp, #112	@ 0x70
 8107206:	ab1d      	add	r3, sp, #116	@ 0x74
 8107208:	9002      	str	r0, [sp, #8]
 810720a:	9006      	str	r0, [sp, #24]
 810720c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8107210:	4809      	ldr	r0, [pc, #36]	@ (8107238 <siprintf+0x38>)
 8107212:	9107      	str	r1, [sp, #28]
 8107214:	9104      	str	r1, [sp, #16]
 8107216:	4909      	ldr	r1, [pc, #36]	@ (810723c <siprintf+0x3c>)
 8107218:	f853 2b04 	ldr.w	r2, [r3], #4
 810721c:	9105      	str	r1, [sp, #20]
 810721e:	6800      	ldr	r0, [r0, #0]
 8107220:	9301      	str	r3, [sp, #4]
 8107222:	a902      	add	r1, sp, #8
 8107224:	f000 f9ba 	bl	810759c <_svfiprintf_r>
 8107228:	9b02      	ldr	r3, [sp, #8]
 810722a:	2200      	movs	r2, #0
 810722c:	701a      	strb	r2, [r3, #0]
 810722e:	b01c      	add	sp, #112	@ 0x70
 8107230:	f85d eb04 	ldr.w	lr, [sp], #4
 8107234:	b003      	add	sp, #12
 8107236:	4770      	bx	lr
 8107238:	100000c4 	.word	0x100000c4
 810723c:	ffff0208 	.word	0xffff0208

08107240 <__sread>:
 8107240:	b510      	push	{r4, lr}
 8107242:	460c      	mov	r4, r1
 8107244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107248:	f000 f88c 	bl	8107364 <_read_r>
 810724c:	2800      	cmp	r0, #0
 810724e:	bfab      	itete	ge
 8107250:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8107252:	89a3      	ldrhlt	r3, [r4, #12]
 8107254:	181b      	addge	r3, r3, r0
 8107256:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810725a:	bfac      	ite	ge
 810725c:	6563      	strge	r3, [r4, #84]	@ 0x54
 810725e:	81a3      	strhlt	r3, [r4, #12]
 8107260:	bd10      	pop	{r4, pc}

08107262 <__swrite>:
 8107262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107266:	461f      	mov	r7, r3
 8107268:	898b      	ldrh	r3, [r1, #12]
 810726a:	05db      	lsls	r3, r3, #23
 810726c:	4605      	mov	r5, r0
 810726e:	460c      	mov	r4, r1
 8107270:	4616      	mov	r6, r2
 8107272:	d505      	bpl.n	8107280 <__swrite+0x1e>
 8107274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107278:	2302      	movs	r3, #2
 810727a:	2200      	movs	r2, #0
 810727c:	f000 f860 	bl	8107340 <_lseek_r>
 8107280:	89a3      	ldrh	r3, [r4, #12]
 8107282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8107286:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810728a:	81a3      	strh	r3, [r4, #12]
 810728c:	4632      	mov	r2, r6
 810728e:	463b      	mov	r3, r7
 8107290:	4628      	mov	r0, r5
 8107292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107296:	f000 b887 	b.w	81073a8 <_write_r>

0810729a <__sseek>:
 810729a:	b510      	push	{r4, lr}
 810729c:	460c      	mov	r4, r1
 810729e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81072a2:	f000 f84d 	bl	8107340 <_lseek_r>
 81072a6:	1c43      	adds	r3, r0, #1
 81072a8:	89a3      	ldrh	r3, [r4, #12]
 81072aa:	bf15      	itete	ne
 81072ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 81072ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 81072b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 81072b6:	81a3      	strheq	r3, [r4, #12]
 81072b8:	bf18      	it	ne
 81072ba:	81a3      	strhne	r3, [r4, #12]
 81072bc:	bd10      	pop	{r4, pc}

081072be <__sclose>:
 81072be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81072c2:	f000 b82d 	b.w	8107320 <_close_r>

081072c6 <memset>:
 81072c6:	4402      	add	r2, r0
 81072c8:	4603      	mov	r3, r0
 81072ca:	4293      	cmp	r3, r2
 81072cc:	d100      	bne.n	81072d0 <memset+0xa>
 81072ce:	4770      	bx	lr
 81072d0:	f803 1b01 	strb.w	r1, [r3], #1
 81072d4:	e7f9      	b.n	81072ca <memset+0x4>

081072d6 <strncmp>:
 81072d6:	b510      	push	{r4, lr}
 81072d8:	b16a      	cbz	r2, 81072f6 <strncmp+0x20>
 81072da:	3901      	subs	r1, #1
 81072dc:	1884      	adds	r4, r0, r2
 81072de:	f810 2b01 	ldrb.w	r2, [r0], #1
 81072e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 81072e6:	429a      	cmp	r2, r3
 81072e8:	d103      	bne.n	81072f2 <strncmp+0x1c>
 81072ea:	42a0      	cmp	r0, r4
 81072ec:	d001      	beq.n	81072f2 <strncmp+0x1c>
 81072ee:	2a00      	cmp	r2, #0
 81072f0:	d1f5      	bne.n	81072de <strncmp+0x8>
 81072f2:	1ad0      	subs	r0, r2, r3
 81072f4:	bd10      	pop	{r4, pc}
 81072f6:	4610      	mov	r0, r2
 81072f8:	e7fc      	b.n	81072f4 <strncmp+0x1e>

081072fa <strncpy>:
 81072fa:	b510      	push	{r4, lr}
 81072fc:	3901      	subs	r1, #1
 81072fe:	4603      	mov	r3, r0
 8107300:	b132      	cbz	r2, 8107310 <strncpy+0x16>
 8107302:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8107306:	f803 4b01 	strb.w	r4, [r3], #1
 810730a:	3a01      	subs	r2, #1
 810730c:	2c00      	cmp	r4, #0
 810730e:	d1f7      	bne.n	8107300 <strncpy+0x6>
 8107310:	441a      	add	r2, r3
 8107312:	2100      	movs	r1, #0
 8107314:	4293      	cmp	r3, r2
 8107316:	d100      	bne.n	810731a <strncpy+0x20>
 8107318:	bd10      	pop	{r4, pc}
 810731a:	f803 1b01 	strb.w	r1, [r3], #1
 810731e:	e7f9      	b.n	8107314 <strncpy+0x1a>

08107320 <_close_r>:
 8107320:	b538      	push	{r3, r4, r5, lr}
 8107322:	4d06      	ldr	r5, [pc, #24]	@ (810733c <_close_r+0x1c>)
 8107324:	2300      	movs	r3, #0
 8107326:	4604      	mov	r4, r0
 8107328:	4608      	mov	r0, r1
 810732a:	602b      	str	r3, [r5, #0]
 810732c:	f7f9 fb89 	bl	8100a42 <_close>
 8107330:	1c43      	adds	r3, r0, #1
 8107332:	d102      	bne.n	810733a <_close_r+0x1a>
 8107334:	682b      	ldr	r3, [r5, #0]
 8107336:	b103      	cbz	r3, 810733a <_close_r+0x1a>
 8107338:	6023      	str	r3, [r4, #0]
 810733a:	bd38      	pop	{r3, r4, r5, pc}
 810733c:	10000474 	.word	0x10000474

08107340 <_lseek_r>:
 8107340:	b538      	push	{r3, r4, r5, lr}
 8107342:	4d07      	ldr	r5, [pc, #28]	@ (8107360 <_lseek_r+0x20>)
 8107344:	4604      	mov	r4, r0
 8107346:	4608      	mov	r0, r1
 8107348:	4611      	mov	r1, r2
 810734a:	2200      	movs	r2, #0
 810734c:	602a      	str	r2, [r5, #0]
 810734e:	461a      	mov	r2, r3
 8107350:	f7f9 fb9e 	bl	8100a90 <_lseek>
 8107354:	1c43      	adds	r3, r0, #1
 8107356:	d102      	bne.n	810735e <_lseek_r+0x1e>
 8107358:	682b      	ldr	r3, [r5, #0]
 810735a:	b103      	cbz	r3, 810735e <_lseek_r+0x1e>
 810735c:	6023      	str	r3, [r4, #0]
 810735e:	bd38      	pop	{r3, r4, r5, pc}
 8107360:	10000474 	.word	0x10000474

08107364 <_read_r>:
 8107364:	b538      	push	{r3, r4, r5, lr}
 8107366:	4d07      	ldr	r5, [pc, #28]	@ (8107384 <_read_r+0x20>)
 8107368:	4604      	mov	r4, r0
 810736a:	4608      	mov	r0, r1
 810736c:	4611      	mov	r1, r2
 810736e:	2200      	movs	r2, #0
 8107370:	602a      	str	r2, [r5, #0]
 8107372:	461a      	mov	r2, r3
 8107374:	f7f9 fb2c 	bl	81009d0 <_read>
 8107378:	1c43      	adds	r3, r0, #1
 810737a:	d102      	bne.n	8107382 <_read_r+0x1e>
 810737c:	682b      	ldr	r3, [r5, #0]
 810737e:	b103      	cbz	r3, 8107382 <_read_r+0x1e>
 8107380:	6023      	str	r3, [r4, #0]
 8107382:	bd38      	pop	{r3, r4, r5, pc}
 8107384:	10000474 	.word	0x10000474

08107388 <_sbrk_r>:
 8107388:	b538      	push	{r3, r4, r5, lr}
 810738a:	4d06      	ldr	r5, [pc, #24]	@ (81073a4 <_sbrk_r+0x1c>)
 810738c:	2300      	movs	r3, #0
 810738e:	4604      	mov	r4, r0
 8107390:	4608      	mov	r0, r1
 8107392:	602b      	str	r3, [r5, #0]
 8107394:	f7f9 fb8a 	bl	8100aac <_sbrk>
 8107398:	1c43      	adds	r3, r0, #1
 810739a:	d102      	bne.n	81073a2 <_sbrk_r+0x1a>
 810739c:	682b      	ldr	r3, [r5, #0]
 810739e:	b103      	cbz	r3, 81073a2 <_sbrk_r+0x1a>
 81073a0:	6023      	str	r3, [r4, #0]
 81073a2:	bd38      	pop	{r3, r4, r5, pc}
 81073a4:	10000474 	.word	0x10000474

081073a8 <_write_r>:
 81073a8:	b538      	push	{r3, r4, r5, lr}
 81073aa:	4d07      	ldr	r5, [pc, #28]	@ (81073c8 <_write_r+0x20>)
 81073ac:	4604      	mov	r4, r0
 81073ae:	4608      	mov	r0, r1
 81073b0:	4611      	mov	r1, r2
 81073b2:	2200      	movs	r2, #0
 81073b4:	602a      	str	r2, [r5, #0]
 81073b6:	461a      	mov	r2, r3
 81073b8:	f7f9 fb27 	bl	8100a0a <_write>
 81073bc:	1c43      	adds	r3, r0, #1
 81073be:	d102      	bne.n	81073c6 <_write_r+0x1e>
 81073c0:	682b      	ldr	r3, [r5, #0]
 81073c2:	b103      	cbz	r3, 81073c6 <_write_r+0x1e>
 81073c4:	6023      	str	r3, [r4, #0]
 81073c6:	bd38      	pop	{r3, r4, r5, pc}
 81073c8:	10000474 	.word	0x10000474

081073cc <__errno>:
 81073cc:	4b01      	ldr	r3, [pc, #4]	@ (81073d4 <__errno+0x8>)
 81073ce:	6818      	ldr	r0, [r3, #0]
 81073d0:	4770      	bx	lr
 81073d2:	bf00      	nop
 81073d4:	100000c4 	.word	0x100000c4

081073d8 <__libc_init_array>:
 81073d8:	b570      	push	{r4, r5, r6, lr}
 81073da:	4d0d      	ldr	r5, [pc, #52]	@ (8107410 <__libc_init_array+0x38>)
 81073dc:	4c0d      	ldr	r4, [pc, #52]	@ (8107414 <__libc_init_array+0x3c>)
 81073de:	1b64      	subs	r4, r4, r5
 81073e0:	10a4      	asrs	r4, r4, #2
 81073e2:	2600      	movs	r6, #0
 81073e4:	42a6      	cmp	r6, r4
 81073e6:	d109      	bne.n	81073fc <__libc_init_array+0x24>
 81073e8:	4d0b      	ldr	r5, [pc, #44]	@ (8107418 <__libc_init_array+0x40>)
 81073ea:	4c0c      	ldr	r4, [pc, #48]	@ (810741c <__libc_init_array+0x44>)
 81073ec:	f000 fefa 	bl	81081e4 <_init>
 81073f0:	1b64      	subs	r4, r4, r5
 81073f2:	10a4      	asrs	r4, r4, #2
 81073f4:	2600      	movs	r6, #0
 81073f6:	42a6      	cmp	r6, r4
 81073f8:	d105      	bne.n	8107406 <__libc_init_array+0x2e>
 81073fa:	bd70      	pop	{r4, r5, r6, pc}
 81073fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8107400:	4798      	blx	r3
 8107402:	3601      	adds	r6, #1
 8107404:	e7ee      	b.n	81073e4 <__libc_init_array+0xc>
 8107406:	f855 3b04 	ldr.w	r3, [r5], #4
 810740a:	4798      	blx	r3
 810740c:	3601      	adds	r6, #1
 810740e:	e7f2      	b.n	81073f6 <__libc_init_array+0x1e>
 8107410:	08108518 	.word	0x08108518
 8107414:	08108518 	.word	0x08108518
 8107418:	08108518 	.word	0x08108518
 810741c:	0810851c 	.word	0x0810851c

08107420 <__retarget_lock_init_recursive>:
 8107420:	4770      	bx	lr

08107422 <__retarget_lock_acquire_recursive>:
 8107422:	4770      	bx	lr

08107424 <__retarget_lock_release_recursive>:
 8107424:	4770      	bx	lr

08107426 <memcpy>:
 8107426:	440a      	add	r2, r1
 8107428:	4291      	cmp	r1, r2
 810742a:	f100 33ff 	add.w	r3, r0, #4294967295
 810742e:	d100      	bne.n	8107432 <memcpy+0xc>
 8107430:	4770      	bx	lr
 8107432:	b510      	push	{r4, lr}
 8107434:	f811 4b01 	ldrb.w	r4, [r1], #1
 8107438:	f803 4f01 	strb.w	r4, [r3, #1]!
 810743c:	4291      	cmp	r1, r2
 810743e:	d1f9      	bne.n	8107434 <memcpy+0xe>
 8107440:	bd10      	pop	{r4, pc}

08107442 <abort>:
 8107442:	b508      	push	{r3, lr}
 8107444:	2006      	movs	r0, #6
 8107446:	f000 fdf7 	bl	8108038 <raise>
 810744a:	2001      	movs	r0, #1
 810744c:	f7f9 fab5 	bl	81009ba <_exit>

08107450 <_free_r>:
 8107450:	b538      	push	{r3, r4, r5, lr}
 8107452:	4605      	mov	r5, r0
 8107454:	2900      	cmp	r1, #0
 8107456:	d041      	beq.n	81074dc <_free_r+0x8c>
 8107458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810745c:	1f0c      	subs	r4, r1, #4
 810745e:	2b00      	cmp	r3, #0
 8107460:	bfb8      	it	lt
 8107462:	18e4      	addlt	r4, r4, r3
 8107464:	f7ff fdec 	bl	8107040 <__malloc_lock>
 8107468:	4a1d      	ldr	r2, [pc, #116]	@ (81074e0 <_free_r+0x90>)
 810746a:	6813      	ldr	r3, [r2, #0]
 810746c:	b933      	cbnz	r3, 810747c <_free_r+0x2c>
 810746e:	6063      	str	r3, [r4, #4]
 8107470:	6014      	str	r4, [r2, #0]
 8107472:	4628      	mov	r0, r5
 8107474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8107478:	f7ff bde8 	b.w	810704c <__malloc_unlock>
 810747c:	42a3      	cmp	r3, r4
 810747e:	d908      	bls.n	8107492 <_free_r+0x42>
 8107480:	6820      	ldr	r0, [r4, #0]
 8107482:	1821      	adds	r1, r4, r0
 8107484:	428b      	cmp	r3, r1
 8107486:	bf01      	itttt	eq
 8107488:	6819      	ldreq	r1, [r3, #0]
 810748a:	685b      	ldreq	r3, [r3, #4]
 810748c:	1809      	addeq	r1, r1, r0
 810748e:	6021      	streq	r1, [r4, #0]
 8107490:	e7ed      	b.n	810746e <_free_r+0x1e>
 8107492:	461a      	mov	r2, r3
 8107494:	685b      	ldr	r3, [r3, #4]
 8107496:	b10b      	cbz	r3, 810749c <_free_r+0x4c>
 8107498:	42a3      	cmp	r3, r4
 810749a:	d9fa      	bls.n	8107492 <_free_r+0x42>
 810749c:	6811      	ldr	r1, [r2, #0]
 810749e:	1850      	adds	r0, r2, r1
 81074a0:	42a0      	cmp	r0, r4
 81074a2:	d10b      	bne.n	81074bc <_free_r+0x6c>
 81074a4:	6820      	ldr	r0, [r4, #0]
 81074a6:	4401      	add	r1, r0
 81074a8:	1850      	adds	r0, r2, r1
 81074aa:	4283      	cmp	r3, r0
 81074ac:	6011      	str	r1, [r2, #0]
 81074ae:	d1e0      	bne.n	8107472 <_free_r+0x22>
 81074b0:	6818      	ldr	r0, [r3, #0]
 81074b2:	685b      	ldr	r3, [r3, #4]
 81074b4:	6053      	str	r3, [r2, #4]
 81074b6:	4408      	add	r0, r1
 81074b8:	6010      	str	r0, [r2, #0]
 81074ba:	e7da      	b.n	8107472 <_free_r+0x22>
 81074bc:	d902      	bls.n	81074c4 <_free_r+0x74>
 81074be:	230c      	movs	r3, #12
 81074c0:	602b      	str	r3, [r5, #0]
 81074c2:	e7d6      	b.n	8107472 <_free_r+0x22>
 81074c4:	6820      	ldr	r0, [r4, #0]
 81074c6:	1821      	adds	r1, r4, r0
 81074c8:	428b      	cmp	r3, r1
 81074ca:	bf04      	itt	eq
 81074cc:	6819      	ldreq	r1, [r3, #0]
 81074ce:	685b      	ldreq	r3, [r3, #4]
 81074d0:	6063      	str	r3, [r4, #4]
 81074d2:	bf04      	itt	eq
 81074d4:	1809      	addeq	r1, r1, r0
 81074d6:	6021      	streq	r1, [r4, #0]
 81074d8:	6054      	str	r4, [r2, #4]
 81074da:	e7ca      	b.n	8107472 <_free_r+0x22>
 81074dc:	bd38      	pop	{r3, r4, r5, pc}
 81074de:	bf00      	nop
 81074e0:	10000334 	.word	0x10000334

081074e4 <__ssputs_r>:
 81074e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81074e8:	688e      	ldr	r6, [r1, #8]
 81074ea:	461f      	mov	r7, r3
 81074ec:	42be      	cmp	r6, r7
 81074ee:	680b      	ldr	r3, [r1, #0]
 81074f0:	4682      	mov	sl, r0
 81074f2:	460c      	mov	r4, r1
 81074f4:	4690      	mov	r8, r2
 81074f6:	d82d      	bhi.n	8107554 <__ssputs_r+0x70>
 81074f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 81074fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8107500:	d026      	beq.n	8107550 <__ssputs_r+0x6c>
 8107502:	6965      	ldr	r5, [r4, #20]
 8107504:	6909      	ldr	r1, [r1, #16]
 8107506:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810750a:	eba3 0901 	sub.w	r9, r3, r1
 810750e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8107512:	1c7b      	adds	r3, r7, #1
 8107514:	444b      	add	r3, r9
 8107516:	106d      	asrs	r5, r5, #1
 8107518:	429d      	cmp	r5, r3
 810751a:	bf38      	it	cc
 810751c:	461d      	movcc	r5, r3
 810751e:	0553      	lsls	r3, r2, #21
 8107520:	d527      	bpl.n	8107572 <__ssputs_r+0x8e>
 8107522:	4629      	mov	r1, r5
 8107524:	f7ff fd0c 	bl	8106f40 <_malloc_r>
 8107528:	4606      	mov	r6, r0
 810752a:	b360      	cbz	r0, 8107586 <__ssputs_r+0xa2>
 810752c:	6921      	ldr	r1, [r4, #16]
 810752e:	464a      	mov	r2, r9
 8107530:	f7ff ff79 	bl	8107426 <memcpy>
 8107534:	89a3      	ldrh	r3, [r4, #12]
 8107536:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 810753a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810753e:	81a3      	strh	r3, [r4, #12]
 8107540:	6126      	str	r6, [r4, #16]
 8107542:	6165      	str	r5, [r4, #20]
 8107544:	444e      	add	r6, r9
 8107546:	eba5 0509 	sub.w	r5, r5, r9
 810754a:	6026      	str	r6, [r4, #0]
 810754c:	60a5      	str	r5, [r4, #8]
 810754e:	463e      	mov	r6, r7
 8107550:	42be      	cmp	r6, r7
 8107552:	d900      	bls.n	8107556 <__ssputs_r+0x72>
 8107554:	463e      	mov	r6, r7
 8107556:	6820      	ldr	r0, [r4, #0]
 8107558:	4632      	mov	r2, r6
 810755a:	4641      	mov	r1, r8
 810755c:	f000 fd2a 	bl	8107fb4 <memmove>
 8107560:	68a3      	ldr	r3, [r4, #8]
 8107562:	1b9b      	subs	r3, r3, r6
 8107564:	60a3      	str	r3, [r4, #8]
 8107566:	6823      	ldr	r3, [r4, #0]
 8107568:	4433      	add	r3, r6
 810756a:	6023      	str	r3, [r4, #0]
 810756c:	2000      	movs	r0, #0
 810756e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107572:	462a      	mov	r2, r5
 8107574:	f000 fd7c 	bl	8108070 <_realloc_r>
 8107578:	4606      	mov	r6, r0
 810757a:	2800      	cmp	r0, #0
 810757c:	d1e0      	bne.n	8107540 <__ssputs_r+0x5c>
 810757e:	6921      	ldr	r1, [r4, #16]
 8107580:	4650      	mov	r0, sl
 8107582:	f7ff ff65 	bl	8107450 <_free_r>
 8107586:	230c      	movs	r3, #12
 8107588:	f8ca 3000 	str.w	r3, [sl]
 810758c:	89a3      	ldrh	r3, [r4, #12]
 810758e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8107592:	81a3      	strh	r3, [r4, #12]
 8107594:	f04f 30ff 	mov.w	r0, #4294967295
 8107598:	e7e9      	b.n	810756e <__ssputs_r+0x8a>
	...

0810759c <_svfiprintf_r>:
 810759c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81075a0:	4698      	mov	r8, r3
 81075a2:	898b      	ldrh	r3, [r1, #12]
 81075a4:	061b      	lsls	r3, r3, #24
 81075a6:	b09d      	sub	sp, #116	@ 0x74
 81075a8:	4607      	mov	r7, r0
 81075aa:	460d      	mov	r5, r1
 81075ac:	4614      	mov	r4, r2
 81075ae:	d510      	bpl.n	81075d2 <_svfiprintf_r+0x36>
 81075b0:	690b      	ldr	r3, [r1, #16]
 81075b2:	b973      	cbnz	r3, 81075d2 <_svfiprintf_r+0x36>
 81075b4:	2140      	movs	r1, #64	@ 0x40
 81075b6:	f7ff fcc3 	bl	8106f40 <_malloc_r>
 81075ba:	6028      	str	r0, [r5, #0]
 81075bc:	6128      	str	r0, [r5, #16]
 81075be:	b930      	cbnz	r0, 81075ce <_svfiprintf_r+0x32>
 81075c0:	230c      	movs	r3, #12
 81075c2:	603b      	str	r3, [r7, #0]
 81075c4:	f04f 30ff 	mov.w	r0, #4294967295
 81075c8:	b01d      	add	sp, #116	@ 0x74
 81075ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81075ce:	2340      	movs	r3, #64	@ 0x40
 81075d0:	616b      	str	r3, [r5, #20]
 81075d2:	2300      	movs	r3, #0
 81075d4:	9309      	str	r3, [sp, #36]	@ 0x24
 81075d6:	2320      	movs	r3, #32
 81075d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 81075dc:	f8cd 800c 	str.w	r8, [sp, #12]
 81075e0:	2330      	movs	r3, #48	@ 0x30
 81075e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8107780 <_svfiprintf_r+0x1e4>
 81075e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 81075ea:	f04f 0901 	mov.w	r9, #1
 81075ee:	4623      	mov	r3, r4
 81075f0:	469a      	mov	sl, r3
 81075f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81075f6:	b10a      	cbz	r2, 81075fc <_svfiprintf_r+0x60>
 81075f8:	2a25      	cmp	r2, #37	@ 0x25
 81075fa:	d1f9      	bne.n	81075f0 <_svfiprintf_r+0x54>
 81075fc:	ebba 0b04 	subs.w	fp, sl, r4
 8107600:	d00b      	beq.n	810761a <_svfiprintf_r+0x7e>
 8107602:	465b      	mov	r3, fp
 8107604:	4622      	mov	r2, r4
 8107606:	4629      	mov	r1, r5
 8107608:	4638      	mov	r0, r7
 810760a:	f7ff ff6b 	bl	81074e4 <__ssputs_r>
 810760e:	3001      	adds	r0, #1
 8107610:	f000 80a7 	beq.w	8107762 <_svfiprintf_r+0x1c6>
 8107614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8107616:	445a      	add	r2, fp
 8107618:	9209      	str	r2, [sp, #36]	@ 0x24
 810761a:	f89a 3000 	ldrb.w	r3, [sl]
 810761e:	2b00      	cmp	r3, #0
 8107620:	f000 809f 	beq.w	8107762 <_svfiprintf_r+0x1c6>
 8107624:	2300      	movs	r3, #0
 8107626:	f04f 32ff 	mov.w	r2, #4294967295
 810762a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810762e:	f10a 0a01 	add.w	sl, sl, #1
 8107632:	9304      	str	r3, [sp, #16]
 8107634:	9307      	str	r3, [sp, #28]
 8107636:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810763a:	931a      	str	r3, [sp, #104]	@ 0x68
 810763c:	4654      	mov	r4, sl
 810763e:	2205      	movs	r2, #5
 8107640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107644:	484e      	ldr	r0, [pc, #312]	@ (8107780 <_svfiprintf_r+0x1e4>)
 8107646:	f7f8 fe63 	bl	8100310 <memchr>
 810764a:	9a04      	ldr	r2, [sp, #16]
 810764c:	b9d8      	cbnz	r0, 8107686 <_svfiprintf_r+0xea>
 810764e:	06d0      	lsls	r0, r2, #27
 8107650:	bf44      	itt	mi
 8107652:	2320      	movmi	r3, #32
 8107654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8107658:	0711      	lsls	r1, r2, #28
 810765a:	bf44      	itt	mi
 810765c:	232b      	movmi	r3, #43	@ 0x2b
 810765e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8107662:	f89a 3000 	ldrb.w	r3, [sl]
 8107666:	2b2a      	cmp	r3, #42	@ 0x2a
 8107668:	d015      	beq.n	8107696 <_svfiprintf_r+0xfa>
 810766a:	9a07      	ldr	r2, [sp, #28]
 810766c:	4654      	mov	r4, sl
 810766e:	2000      	movs	r0, #0
 8107670:	f04f 0c0a 	mov.w	ip, #10
 8107674:	4621      	mov	r1, r4
 8107676:	f811 3b01 	ldrb.w	r3, [r1], #1
 810767a:	3b30      	subs	r3, #48	@ 0x30
 810767c:	2b09      	cmp	r3, #9
 810767e:	d94b      	bls.n	8107718 <_svfiprintf_r+0x17c>
 8107680:	b1b0      	cbz	r0, 81076b0 <_svfiprintf_r+0x114>
 8107682:	9207      	str	r2, [sp, #28]
 8107684:	e014      	b.n	81076b0 <_svfiprintf_r+0x114>
 8107686:	eba0 0308 	sub.w	r3, r0, r8
 810768a:	fa09 f303 	lsl.w	r3, r9, r3
 810768e:	4313      	orrs	r3, r2
 8107690:	9304      	str	r3, [sp, #16]
 8107692:	46a2      	mov	sl, r4
 8107694:	e7d2      	b.n	810763c <_svfiprintf_r+0xa0>
 8107696:	9b03      	ldr	r3, [sp, #12]
 8107698:	1d19      	adds	r1, r3, #4
 810769a:	681b      	ldr	r3, [r3, #0]
 810769c:	9103      	str	r1, [sp, #12]
 810769e:	2b00      	cmp	r3, #0
 81076a0:	bfbb      	ittet	lt
 81076a2:	425b      	neglt	r3, r3
 81076a4:	f042 0202 	orrlt.w	r2, r2, #2
 81076a8:	9307      	strge	r3, [sp, #28]
 81076aa:	9307      	strlt	r3, [sp, #28]
 81076ac:	bfb8      	it	lt
 81076ae:	9204      	strlt	r2, [sp, #16]
 81076b0:	7823      	ldrb	r3, [r4, #0]
 81076b2:	2b2e      	cmp	r3, #46	@ 0x2e
 81076b4:	d10a      	bne.n	81076cc <_svfiprintf_r+0x130>
 81076b6:	7863      	ldrb	r3, [r4, #1]
 81076b8:	2b2a      	cmp	r3, #42	@ 0x2a
 81076ba:	d132      	bne.n	8107722 <_svfiprintf_r+0x186>
 81076bc:	9b03      	ldr	r3, [sp, #12]
 81076be:	1d1a      	adds	r2, r3, #4
 81076c0:	681b      	ldr	r3, [r3, #0]
 81076c2:	9203      	str	r2, [sp, #12]
 81076c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 81076c8:	3402      	adds	r4, #2
 81076ca:	9305      	str	r3, [sp, #20]
 81076cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8107790 <_svfiprintf_r+0x1f4>
 81076d0:	7821      	ldrb	r1, [r4, #0]
 81076d2:	2203      	movs	r2, #3
 81076d4:	4650      	mov	r0, sl
 81076d6:	f7f8 fe1b 	bl	8100310 <memchr>
 81076da:	b138      	cbz	r0, 81076ec <_svfiprintf_r+0x150>
 81076dc:	9b04      	ldr	r3, [sp, #16]
 81076de:	eba0 000a 	sub.w	r0, r0, sl
 81076e2:	2240      	movs	r2, #64	@ 0x40
 81076e4:	4082      	lsls	r2, r0
 81076e6:	4313      	orrs	r3, r2
 81076e8:	3401      	adds	r4, #1
 81076ea:	9304      	str	r3, [sp, #16]
 81076ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 81076f0:	4824      	ldr	r0, [pc, #144]	@ (8107784 <_svfiprintf_r+0x1e8>)
 81076f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 81076f6:	2206      	movs	r2, #6
 81076f8:	f7f8 fe0a 	bl	8100310 <memchr>
 81076fc:	2800      	cmp	r0, #0
 81076fe:	d036      	beq.n	810776e <_svfiprintf_r+0x1d2>
 8107700:	4b21      	ldr	r3, [pc, #132]	@ (8107788 <_svfiprintf_r+0x1ec>)
 8107702:	bb1b      	cbnz	r3, 810774c <_svfiprintf_r+0x1b0>
 8107704:	9b03      	ldr	r3, [sp, #12]
 8107706:	3307      	adds	r3, #7
 8107708:	f023 0307 	bic.w	r3, r3, #7
 810770c:	3308      	adds	r3, #8
 810770e:	9303      	str	r3, [sp, #12]
 8107710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107712:	4433      	add	r3, r6
 8107714:	9309      	str	r3, [sp, #36]	@ 0x24
 8107716:	e76a      	b.n	81075ee <_svfiprintf_r+0x52>
 8107718:	fb0c 3202 	mla	r2, ip, r2, r3
 810771c:	460c      	mov	r4, r1
 810771e:	2001      	movs	r0, #1
 8107720:	e7a8      	b.n	8107674 <_svfiprintf_r+0xd8>
 8107722:	2300      	movs	r3, #0
 8107724:	3401      	adds	r4, #1
 8107726:	9305      	str	r3, [sp, #20]
 8107728:	4619      	mov	r1, r3
 810772a:	f04f 0c0a 	mov.w	ip, #10
 810772e:	4620      	mov	r0, r4
 8107730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8107734:	3a30      	subs	r2, #48	@ 0x30
 8107736:	2a09      	cmp	r2, #9
 8107738:	d903      	bls.n	8107742 <_svfiprintf_r+0x1a6>
 810773a:	2b00      	cmp	r3, #0
 810773c:	d0c6      	beq.n	81076cc <_svfiprintf_r+0x130>
 810773e:	9105      	str	r1, [sp, #20]
 8107740:	e7c4      	b.n	81076cc <_svfiprintf_r+0x130>
 8107742:	fb0c 2101 	mla	r1, ip, r1, r2
 8107746:	4604      	mov	r4, r0
 8107748:	2301      	movs	r3, #1
 810774a:	e7f0      	b.n	810772e <_svfiprintf_r+0x192>
 810774c:	ab03      	add	r3, sp, #12
 810774e:	9300      	str	r3, [sp, #0]
 8107750:	462a      	mov	r2, r5
 8107752:	4b0e      	ldr	r3, [pc, #56]	@ (810778c <_svfiprintf_r+0x1f0>)
 8107754:	a904      	add	r1, sp, #16
 8107756:	4638      	mov	r0, r7
 8107758:	f3af 8000 	nop.w
 810775c:	1c42      	adds	r2, r0, #1
 810775e:	4606      	mov	r6, r0
 8107760:	d1d6      	bne.n	8107710 <_svfiprintf_r+0x174>
 8107762:	89ab      	ldrh	r3, [r5, #12]
 8107764:	065b      	lsls	r3, r3, #25
 8107766:	f53f af2d 	bmi.w	81075c4 <_svfiprintf_r+0x28>
 810776a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810776c:	e72c      	b.n	81075c8 <_svfiprintf_r+0x2c>
 810776e:	ab03      	add	r3, sp, #12
 8107770:	9300      	str	r3, [sp, #0]
 8107772:	462a      	mov	r2, r5
 8107774:	4b05      	ldr	r3, [pc, #20]	@ (810778c <_svfiprintf_r+0x1f0>)
 8107776:	a904      	add	r1, sp, #16
 8107778:	4638      	mov	r0, r7
 810777a:	f000 f9bb 	bl	8107af4 <_printf_i>
 810777e:	e7ed      	b.n	810775c <_svfiprintf_r+0x1c0>
 8107780:	081084da 	.word	0x081084da
 8107784:	081084e4 	.word	0x081084e4
 8107788:	00000000 	.word	0x00000000
 810778c:	081074e5 	.word	0x081074e5
 8107790:	081084e0 	.word	0x081084e0

08107794 <__sfputc_r>:
 8107794:	6893      	ldr	r3, [r2, #8]
 8107796:	3b01      	subs	r3, #1
 8107798:	2b00      	cmp	r3, #0
 810779a:	b410      	push	{r4}
 810779c:	6093      	str	r3, [r2, #8]
 810779e:	da08      	bge.n	81077b2 <__sfputc_r+0x1e>
 81077a0:	6994      	ldr	r4, [r2, #24]
 81077a2:	42a3      	cmp	r3, r4
 81077a4:	db01      	blt.n	81077aa <__sfputc_r+0x16>
 81077a6:	290a      	cmp	r1, #10
 81077a8:	d103      	bne.n	81077b2 <__sfputc_r+0x1e>
 81077aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 81077ae:	f000 bb6d 	b.w	8107e8c <__swbuf_r>
 81077b2:	6813      	ldr	r3, [r2, #0]
 81077b4:	1c58      	adds	r0, r3, #1
 81077b6:	6010      	str	r0, [r2, #0]
 81077b8:	7019      	strb	r1, [r3, #0]
 81077ba:	4608      	mov	r0, r1
 81077bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 81077c0:	4770      	bx	lr

081077c2 <__sfputs_r>:
 81077c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81077c4:	4606      	mov	r6, r0
 81077c6:	460f      	mov	r7, r1
 81077c8:	4614      	mov	r4, r2
 81077ca:	18d5      	adds	r5, r2, r3
 81077cc:	42ac      	cmp	r4, r5
 81077ce:	d101      	bne.n	81077d4 <__sfputs_r+0x12>
 81077d0:	2000      	movs	r0, #0
 81077d2:	e007      	b.n	81077e4 <__sfputs_r+0x22>
 81077d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 81077d8:	463a      	mov	r2, r7
 81077da:	4630      	mov	r0, r6
 81077dc:	f7ff ffda 	bl	8107794 <__sfputc_r>
 81077e0:	1c43      	adds	r3, r0, #1
 81077e2:	d1f3      	bne.n	81077cc <__sfputs_r+0xa>
 81077e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

081077e8 <_vfiprintf_r>:
 81077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81077ec:	460d      	mov	r5, r1
 81077ee:	b09d      	sub	sp, #116	@ 0x74
 81077f0:	4614      	mov	r4, r2
 81077f2:	4698      	mov	r8, r3
 81077f4:	4606      	mov	r6, r0
 81077f6:	b118      	cbz	r0, 8107800 <_vfiprintf_r+0x18>
 81077f8:	6a03      	ldr	r3, [r0, #32]
 81077fa:	b90b      	cbnz	r3, 8107800 <_vfiprintf_r+0x18>
 81077fc:	f7ff fcb8 	bl	8107170 <__sinit>
 8107800:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8107802:	07d9      	lsls	r1, r3, #31
 8107804:	d405      	bmi.n	8107812 <_vfiprintf_r+0x2a>
 8107806:	89ab      	ldrh	r3, [r5, #12]
 8107808:	059a      	lsls	r2, r3, #22
 810780a:	d402      	bmi.n	8107812 <_vfiprintf_r+0x2a>
 810780c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810780e:	f7ff fe08 	bl	8107422 <__retarget_lock_acquire_recursive>
 8107812:	89ab      	ldrh	r3, [r5, #12]
 8107814:	071b      	lsls	r3, r3, #28
 8107816:	d501      	bpl.n	810781c <_vfiprintf_r+0x34>
 8107818:	692b      	ldr	r3, [r5, #16]
 810781a:	b99b      	cbnz	r3, 8107844 <_vfiprintf_r+0x5c>
 810781c:	4629      	mov	r1, r5
 810781e:	4630      	mov	r0, r6
 8107820:	f000 fb72 	bl	8107f08 <__swsetup_r>
 8107824:	b170      	cbz	r0, 8107844 <_vfiprintf_r+0x5c>
 8107826:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8107828:	07dc      	lsls	r4, r3, #31
 810782a:	d504      	bpl.n	8107836 <_vfiprintf_r+0x4e>
 810782c:	f04f 30ff 	mov.w	r0, #4294967295
 8107830:	b01d      	add	sp, #116	@ 0x74
 8107832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107836:	89ab      	ldrh	r3, [r5, #12]
 8107838:	0598      	lsls	r0, r3, #22
 810783a:	d4f7      	bmi.n	810782c <_vfiprintf_r+0x44>
 810783c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810783e:	f7ff fdf1 	bl	8107424 <__retarget_lock_release_recursive>
 8107842:	e7f3      	b.n	810782c <_vfiprintf_r+0x44>
 8107844:	2300      	movs	r3, #0
 8107846:	9309      	str	r3, [sp, #36]	@ 0x24
 8107848:	2320      	movs	r3, #32
 810784a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810784e:	f8cd 800c 	str.w	r8, [sp, #12]
 8107852:	2330      	movs	r3, #48	@ 0x30
 8107854:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8107a04 <_vfiprintf_r+0x21c>
 8107858:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810785c:	f04f 0901 	mov.w	r9, #1
 8107860:	4623      	mov	r3, r4
 8107862:	469a      	mov	sl, r3
 8107864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8107868:	b10a      	cbz	r2, 810786e <_vfiprintf_r+0x86>
 810786a:	2a25      	cmp	r2, #37	@ 0x25
 810786c:	d1f9      	bne.n	8107862 <_vfiprintf_r+0x7a>
 810786e:	ebba 0b04 	subs.w	fp, sl, r4
 8107872:	d00b      	beq.n	810788c <_vfiprintf_r+0xa4>
 8107874:	465b      	mov	r3, fp
 8107876:	4622      	mov	r2, r4
 8107878:	4629      	mov	r1, r5
 810787a:	4630      	mov	r0, r6
 810787c:	f7ff ffa1 	bl	81077c2 <__sfputs_r>
 8107880:	3001      	adds	r0, #1
 8107882:	f000 80a7 	beq.w	81079d4 <_vfiprintf_r+0x1ec>
 8107886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8107888:	445a      	add	r2, fp
 810788a:	9209      	str	r2, [sp, #36]	@ 0x24
 810788c:	f89a 3000 	ldrb.w	r3, [sl]
 8107890:	2b00      	cmp	r3, #0
 8107892:	f000 809f 	beq.w	81079d4 <_vfiprintf_r+0x1ec>
 8107896:	2300      	movs	r3, #0
 8107898:	f04f 32ff 	mov.w	r2, #4294967295
 810789c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81078a0:	f10a 0a01 	add.w	sl, sl, #1
 81078a4:	9304      	str	r3, [sp, #16]
 81078a6:	9307      	str	r3, [sp, #28]
 81078a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 81078ac:	931a      	str	r3, [sp, #104]	@ 0x68
 81078ae:	4654      	mov	r4, sl
 81078b0:	2205      	movs	r2, #5
 81078b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 81078b6:	4853      	ldr	r0, [pc, #332]	@ (8107a04 <_vfiprintf_r+0x21c>)
 81078b8:	f7f8 fd2a 	bl	8100310 <memchr>
 81078bc:	9a04      	ldr	r2, [sp, #16]
 81078be:	b9d8      	cbnz	r0, 81078f8 <_vfiprintf_r+0x110>
 81078c0:	06d1      	lsls	r1, r2, #27
 81078c2:	bf44      	itt	mi
 81078c4:	2320      	movmi	r3, #32
 81078c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81078ca:	0713      	lsls	r3, r2, #28
 81078cc:	bf44      	itt	mi
 81078ce:	232b      	movmi	r3, #43	@ 0x2b
 81078d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81078d4:	f89a 3000 	ldrb.w	r3, [sl]
 81078d8:	2b2a      	cmp	r3, #42	@ 0x2a
 81078da:	d015      	beq.n	8107908 <_vfiprintf_r+0x120>
 81078dc:	9a07      	ldr	r2, [sp, #28]
 81078de:	4654      	mov	r4, sl
 81078e0:	2000      	movs	r0, #0
 81078e2:	f04f 0c0a 	mov.w	ip, #10
 81078e6:	4621      	mov	r1, r4
 81078e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 81078ec:	3b30      	subs	r3, #48	@ 0x30
 81078ee:	2b09      	cmp	r3, #9
 81078f0:	d94b      	bls.n	810798a <_vfiprintf_r+0x1a2>
 81078f2:	b1b0      	cbz	r0, 8107922 <_vfiprintf_r+0x13a>
 81078f4:	9207      	str	r2, [sp, #28]
 81078f6:	e014      	b.n	8107922 <_vfiprintf_r+0x13a>
 81078f8:	eba0 0308 	sub.w	r3, r0, r8
 81078fc:	fa09 f303 	lsl.w	r3, r9, r3
 8107900:	4313      	orrs	r3, r2
 8107902:	9304      	str	r3, [sp, #16]
 8107904:	46a2      	mov	sl, r4
 8107906:	e7d2      	b.n	81078ae <_vfiprintf_r+0xc6>
 8107908:	9b03      	ldr	r3, [sp, #12]
 810790a:	1d19      	adds	r1, r3, #4
 810790c:	681b      	ldr	r3, [r3, #0]
 810790e:	9103      	str	r1, [sp, #12]
 8107910:	2b00      	cmp	r3, #0
 8107912:	bfbb      	ittet	lt
 8107914:	425b      	neglt	r3, r3
 8107916:	f042 0202 	orrlt.w	r2, r2, #2
 810791a:	9307      	strge	r3, [sp, #28]
 810791c:	9307      	strlt	r3, [sp, #28]
 810791e:	bfb8      	it	lt
 8107920:	9204      	strlt	r2, [sp, #16]
 8107922:	7823      	ldrb	r3, [r4, #0]
 8107924:	2b2e      	cmp	r3, #46	@ 0x2e
 8107926:	d10a      	bne.n	810793e <_vfiprintf_r+0x156>
 8107928:	7863      	ldrb	r3, [r4, #1]
 810792a:	2b2a      	cmp	r3, #42	@ 0x2a
 810792c:	d132      	bne.n	8107994 <_vfiprintf_r+0x1ac>
 810792e:	9b03      	ldr	r3, [sp, #12]
 8107930:	1d1a      	adds	r2, r3, #4
 8107932:	681b      	ldr	r3, [r3, #0]
 8107934:	9203      	str	r2, [sp, #12]
 8107936:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810793a:	3402      	adds	r4, #2
 810793c:	9305      	str	r3, [sp, #20]
 810793e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8107a14 <_vfiprintf_r+0x22c>
 8107942:	7821      	ldrb	r1, [r4, #0]
 8107944:	2203      	movs	r2, #3
 8107946:	4650      	mov	r0, sl
 8107948:	f7f8 fce2 	bl	8100310 <memchr>
 810794c:	b138      	cbz	r0, 810795e <_vfiprintf_r+0x176>
 810794e:	9b04      	ldr	r3, [sp, #16]
 8107950:	eba0 000a 	sub.w	r0, r0, sl
 8107954:	2240      	movs	r2, #64	@ 0x40
 8107956:	4082      	lsls	r2, r0
 8107958:	4313      	orrs	r3, r2
 810795a:	3401      	adds	r4, #1
 810795c:	9304      	str	r3, [sp, #16]
 810795e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107962:	4829      	ldr	r0, [pc, #164]	@ (8107a08 <_vfiprintf_r+0x220>)
 8107964:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8107968:	2206      	movs	r2, #6
 810796a:	f7f8 fcd1 	bl	8100310 <memchr>
 810796e:	2800      	cmp	r0, #0
 8107970:	d03f      	beq.n	81079f2 <_vfiprintf_r+0x20a>
 8107972:	4b26      	ldr	r3, [pc, #152]	@ (8107a0c <_vfiprintf_r+0x224>)
 8107974:	bb1b      	cbnz	r3, 81079be <_vfiprintf_r+0x1d6>
 8107976:	9b03      	ldr	r3, [sp, #12]
 8107978:	3307      	adds	r3, #7
 810797a:	f023 0307 	bic.w	r3, r3, #7
 810797e:	3308      	adds	r3, #8
 8107980:	9303      	str	r3, [sp, #12]
 8107982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107984:	443b      	add	r3, r7
 8107986:	9309      	str	r3, [sp, #36]	@ 0x24
 8107988:	e76a      	b.n	8107860 <_vfiprintf_r+0x78>
 810798a:	fb0c 3202 	mla	r2, ip, r2, r3
 810798e:	460c      	mov	r4, r1
 8107990:	2001      	movs	r0, #1
 8107992:	e7a8      	b.n	81078e6 <_vfiprintf_r+0xfe>
 8107994:	2300      	movs	r3, #0
 8107996:	3401      	adds	r4, #1
 8107998:	9305      	str	r3, [sp, #20]
 810799a:	4619      	mov	r1, r3
 810799c:	f04f 0c0a 	mov.w	ip, #10
 81079a0:	4620      	mov	r0, r4
 81079a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 81079a6:	3a30      	subs	r2, #48	@ 0x30
 81079a8:	2a09      	cmp	r2, #9
 81079aa:	d903      	bls.n	81079b4 <_vfiprintf_r+0x1cc>
 81079ac:	2b00      	cmp	r3, #0
 81079ae:	d0c6      	beq.n	810793e <_vfiprintf_r+0x156>
 81079b0:	9105      	str	r1, [sp, #20]
 81079b2:	e7c4      	b.n	810793e <_vfiprintf_r+0x156>
 81079b4:	fb0c 2101 	mla	r1, ip, r1, r2
 81079b8:	4604      	mov	r4, r0
 81079ba:	2301      	movs	r3, #1
 81079bc:	e7f0      	b.n	81079a0 <_vfiprintf_r+0x1b8>
 81079be:	ab03      	add	r3, sp, #12
 81079c0:	9300      	str	r3, [sp, #0]
 81079c2:	462a      	mov	r2, r5
 81079c4:	4b12      	ldr	r3, [pc, #72]	@ (8107a10 <_vfiprintf_r+0x228>)
 81079c6:	a904      	add	r1, sp, #16
 81079c8:	4630      	mov	r0, r6
 81079ca:	f3af 8000 	nop.w
 81079ce:	4607      	mov	r7, r0
 81079d0:	1c78      	adds	r0, r7, #1
 81079d2:	d1d6      	bne.n	8107982 <_vfiprintf_r+0x19a>
 81079d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 81079d6:	07d9      	lsls	r1, r3, #31
 81079d8:	d405      	bmi.n	81079e6 <_vfiprintf_r+0x1fe>
 81079da:	89ab      	ldrh	r3, [r5, #12]
 81079dc:	059a      	lsls	r2, r3, #22
 81079de:	d402      	bmi.n	81079e6 <_vfiprintf_r+0x1fe>
 81079e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 81079e2:	f7ff fd1f 	bl	8107424 <__retarget_lock_release_recursive>
 81079e6:	89ab      	ldrh	r3, [r5, #12]
 81079e8:	065b      	lsls	r3, r3, #25
 81079ea:	f53f af1f 	bmi.w	810782c <_vfiprintf_r+0x44>
 81079ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 81079f0:	e71e      	b.n	8107830 <_vfiprintf_r+0x48>
 81079f2:	ab03      	add	r3, sp, #12
 81079f4:	9300      	str	r3, [sp, #0]
 81079f6:	462a      	mov	r2, r5
 81079f8:	4b05      	ldr	r3, [pc, #20]	@ (8107a10 <_vfiprintf_r+0x228>)
 81079fa:	a904      	add	r1, sp, #16
 81079fc:	4630      	mov	r0, r6
 81079fe:	f000 f879 	bl	8107af4 <_printf_i>
 8107a02:	e7e4      	b.n	81079ce <_vfiprintf_r+0x1e6>
 8107a04:	081084da 	.word	0x081084da
 8107a08:	081084e4 	.word	0x081084e4
 8107a0c:	00000000 	.word	0x00000000
 8107a10:	081077c3 	.word	0x081077c3
 8107a14:	081084e0 	.word	0x081084e0

08107a18 <_printf_common>:
 8107a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107a1c:	4616      	mov	r6, r2
 8107a1e:	4698      	mov	r8, r3
 8107a20:	688a      	ldr	r2, [r1, #8]
 8107a22:	690b      	ldr	r3, [r1, #16]
 8107a24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8107a28:	4293      	cmp	r3, r2
 8107a2a:	bfb8      	it	lt
 8107a2c:	4613      	movlt	r3, r2
 8107a2e:	6033      	str	r3, [r6, #0]
 8107a30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8107a34:	4607      	mov	r7, r0
 8107a36:	460c      	mov	r4, r1
 8107a38:	b10a      	cbz	r2, 8107a3e <_printf_common+0x26>
 8107a3a:	3301      	adds	r3, #1
 8107a3c:	6033      	str	r3, [r6, #0]
 8107a3e:	6823      	ldr	r3, [r4, #0]
 8107a40:	0699      	lsls	r1, r3, #26
 8107a42:	bf42      	ittt	mi
 8107a44:	6833      	ldrmi	r3, [r6, #0]
 8107a46:	3302      	addmi	r3, #2
 8107a48:	6033      	strmi	r3, [r6, #0]
 8107a4a:	6825      	ldr	r5, [r4, #0]
 8107a4c:	f015 0506 	ands.w	r5, r5, #6
 8107a50:	d106      	bne.n	8107a60 <_printf_common+0x48>
 8107a52:	f104 0a19 	add.w	sl, r4, #25
 8107a56:	68e3      	ldr	r3, [r4, #12]
 8107a58:	6832      	ldr	r2, [r6, #0]
 8107a5a:	1a9b      	subs	r3, r3, r2
 8107a5c:	42ab      	cmp	r3, r5
 8107a5e:	dc26      	bgt.n	8107aae <_printf_common+0x96>
 8107a60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8107a64:	6822      	ldr	r2, [r4, #0]
 8107a66:	3b00      	subs	r3, #0
 8107a68:	bf18      	it	ne
 8107a6a:	2301      	movne	r3, #1
 8107a6c:	0692      	lsls	r2, r2, #26
 8107a6e:	d42b      	bmi.n	8107ac8 <_printf_common+0xb0>
 8107a70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8107a74:	4641      	mov	r1, r8
 8107a76:	4638      	mov	r0, r7
 8107a78:	47c8      	blx	r9
 8107a7a:	3001      	adds	r0, #1
 8107a7c:	d01e      	beq.n	8107abc <_printf_common+0xa4>
 8107a7e:	6823      	ldr	r3, [r4, #0]
 8107a80:	6922      	ldr	r2, [r4, #16]
 8107a82:	f003 0306 	and.w	r3, r3, #6
 8107a86:	2b04      	cmp	r3, #4
 8107a88:	bf02      	ittt	eq
 8107a8a:	68e5      	ldreq	r5, [r4, #12]
 8107a8c:	6833      	ldreq	r3, [r6, #0]
 8107a8e:	1aed      	subeq	r5, r5, r3
 8107a90:	68a3      	ldr	r3, [r4, #8]
 8107a92:	bf0c      	ite	eq
 8107a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8107a98:	2500      	movne	r5, #0
 8107a9a:	4293      	cmp	r3, r2
 8107a9c:	bfc4      	itt	gt
 8107a9e:	1a9b      	subgt	r3, r3, r2
 8107aa0:	18ed      	addgt	r5, r5, r3
 8107aa2:	2600      	movs	r6, #0
 8107aa4:	341a      	adds	r4, #26
 8107aa6:	42b5      	cmp	r5, r6
 8107aa8:	d11a      	bne.n	8107ae0 <_printf_common+0xc8>
 8107aaa:	2000      	movs	r0, #0
 8107aac:	e008      	b.n	8107ac0 <_printf_common+0xa8>
 8107aae:	2301      	movs	r3, #1
 8107ab0:	4652      	mov	r2, sl
 8107ab2:	4641      	mov	r1, r8
 8107ab4:	4638      	mov	r0, r7
 8107ab6:	47c8      	blx	r9
 8107ab8:	3001      	adds	r0, #1
 8107aba:	d103      	bne.n	8107ac4 <_printf_common+0xac>
 8107abc:	f04f 30ff 	mov.w	r0, #4294967295
 8107ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107ac4:	3501      	adds	r5, #1
 8107ac6:	e7c6      	b.n	8107a56 <_printf_common+0x3e>
 8107ac8:	18e1      	adds	r1, r4, r3
 8107aca:	1c5a      	adds	r2, r3, #1
 8107acc:	2030      	movs	r0, #48	@ 0x30
 8107ace:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8107ad2:	4422      	add	r2, r4
 8107ad4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8107ad8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8107adc:	3302      	adds	r3, #2
 8107ade:	e7c7      	b.n	8107a70 <_printf_common+0x58>
 8107ae0:	2301      	movs	r3, #1
 8107ae2:	4622      	mov	r2, r4
 8107ae4:	4641      	mov	r1, r8
 8107ae6:	4638      	mov	r0, r7
 8107ae8:	47c8      	blx	r9
 8107aea:	3001      	adds	r0, #1
 8107aec:	d0e6      	beq.n	8107abc <_printf_common+0xa4>
 8107aee:	3601      	adds	r6, #1
 8107af0:	e7d9      	b.n	8107aa6 <_printf_common+0x8e>
	...

08107af4 <_printf_i>:
 8107af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107af8:	7e0f      	ldrb	r7, [r1, #24]
 8107afa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8107afc:	2f78      	cmp	r7, #120	@ 0x78
 8107afe:	4691      	mov	r9, r2
 8107b00:	4680      	mov	r8, r0
 8107b02:	460c      	mov	r4, r1
 8107b04:	469a      	mov	sl, r3
 8107b06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8107b0a:	d807      	bhi.n	8107b1c <_printf_i+0x28>
 8107b0c:	2f62      	cmp	r7, #98	@ 0x62
 8107b0e:	d80a      	bhi.n	8107b26 <_printf_i+0x32>
 8107b10:	2f00      	cmp	r7, #0
 8107b12:	f000 80d2 	beq.w	8107cba <_printf_i+0x1c6>
 8107b16:	2f58      	cmp	r7, #88	@ 0x58
 8107b18:	f000 80b9 	beq.w	8107c8e <_printf_i+0x19a>
 8107b1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8107b20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8107b24:	e03a      	b.n	8107b9c <_printf_i+0xa8>
 8107b26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8107b2a:	2b15      	cmp	r3, #21
 8107b2c:	d8f6      	bhi.n	8107b1c <_printf_i+0x28>
 8107b2e:	a101      	add	r1, pc, #4	@ (adr r1, 8107b34 <_printf_i+0x40>)
 8107b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8107b34:	08107b8d 	.word	0x08107b8d
 8107b38:	08107ba1 	.word	0x08107ba1
 8107b3c:	08107b1d 	.word	0x08107b1d
 8107b40:	08107b1d 	.word	0x08107b1d
 8107b44:	08107b1d 	.word	0x08107b1d
 8107b48:	08107b1d 	.word	0x08107b1d
 8107b4c:	08107ba1 	.word	0x08107ba1
 8107b50:	08107b1d 	.word	0x08107b1d
 8107b54:	08107b1d 	.word	0x08107b1d
 8107b58:	08107b1d 	.word	0x08107b1d
 8107b5c:	08107b1d 	.word	0x08107b1d
 8107b60:	08107ca1 	.word	0x08107ca1
 8107b64:	08107bcb 	.word	0x08107bcb
 8107b68:	08107c5b 	.word	0x08107c5b
 8107b6c:	08107b1d 	.word	0x08107b1d
 8107b70:	08107b1d 	.word	0x08107b1d
 8107b74:	08107cc3 	.word	0x08107cc3
 8107b78:	08107b1d 	.word	0x08107b1d
 8107b7c:	08107bcb 	.word	0x08107bcb
 8107b80:	08107b1d 	.word	0x08107b1d
 8107b84:	08107b1d 	.word	0x08107b1d
 8107b88:	08107c63 	.word	0x08107c63
 8107b8c:	6833      	ldr	r3, [r6, #0]
 8107b8e:	1d1a      	adds	r2, r3, #4
 8107b90:	681b      	ldr	r3, [r3, #0]
 8107b92:	6032      	str	r2, [r6, #0]
 8107b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8107b98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8107b9c:	2301      	movs	r3, #1
 8107b9e:	e09d      	b.n	8107cdc <_printf_i+0x1e8>
 8107ba0:	6833      	ldr	r3, [r6, #0]
 8107ba2:	6820      	ldr	r0, [r4, #0]
 8107ba4:	1d19      	adds	r1, r3, #4
 8107ba6:	6031      	str	r1, [r6, #0]
 8107ba8:	0606      	lsls	r6, r0, #24
 8107baa:	d501      	bpl.n	8107bb0 <_printf_i+0xbc>
 8107bac:	681d      	ldr	r5, [r3, #0]
 8107bae:	e003      	b.n	8107bb8 <_printf_i+0xc4>
 8107bb0:	0645      	lsls	r5, r0, #25
 8107bb2:	d5fb      	bpl.n	8107bac <_printf_i+0xb8>
 8107bb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8107bb8:	2d00      	cmp	r5, #0
 8107bba:	da03      	bge.n	8107bc4 <_printf_i+0xd0>
 8107bbc:	232d      	movs	r3, #45	@ 0x2d
 8107bbe:	426d      	negs	r5, r5
 8107bc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8107bc4:	4859      	ldr	r0, [pc, #356]	@ (8107d2c <_printf_i+0x238>)
 8107bc6:	230a      	movs	r3, #10
 8107bc8:	e011      	b.n	8107bee <_printf_i+0xfa>
 8107bca:	6821      	ldr	r1, [r4, #0]
 8107bcc:	6833      	ldr	r3, [r6, #0]
 8107bce:	0608      	lsls	r0, r1, #24
 8107bd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8107bd4:	d402      	bmi.n	8107bdc <_printf_i+0xe8>
 8107bd6:	0649      	lsls	r1, r1, #25
 8107bd8:	bf48      	it	mi
 8107bda:	b2ad      	uxthmi	r5, r5
 8107bdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8107bde:	4853      	ldr	r0, [pc, #332]	@ (8107d2c <_printf_i+0x238>)
 8107be0:	6033      	str	r3, [r6, #0]
 8107be2:	bf14      	ite	ne
 8107be4:	230a      	movne	r3, #10
 8107be6:	2308      	moveq	r3, #8
 8107be8:	2100      	movs	r1, #0
 8107bea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8107bee:	6866      	ldr	r6, [r4, #4]
 8107bf0:	60a6      	str	r6, [r4, #8]
 8107bf2:	2e00      	cmp	r6, #0
 8107bf4:	bfa2      	ittt	ge
 8107bf6:	6821      	ldrge	r1, [r4, #0]
 8107bf8:	f021 0104 	bicge.w	r1, r1, #4
 8107bfc:	6021      	strge	r1, [r4, #0]
 8107bfe:	b90d      	cbnz	r5, 8107c04 <_printf_i+0x110>
 8107c00:	2e00      	cmp	r6, #0
 8107c02:	d04b      	beq.n	8107c9c <_printf_i+0x1a8>
 8107c04:	4616      	mov	r6, r2
 8107c06:	fbb5 f1f3 	udiv	r1, r5, r3
 8107c0a:	fb03 5711 	mls	r7, r3, r1, r5
 8107c0e:	5dc7      	ldrb	r7, [r0, r7]
 8107c10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8107c14:	462f      	mov	r7, r5
 8107c16:	42bb      	cmp	r3, r7
 8107c18:	460d      	mov	r5, r1
 8107c1a:	d9f4      	bls.n	8107c06 <_printf_i+0x112>
 8107c1c:	2b08      	cmp	r3, #8
 8107c1e:	d10b      	bne.n	8107c38 <_printf_i+0x144>
 8107c20:	6823      	ldr	r3, [r4, #0]
 8107c22:	07df      	lsls	r7, r3, #31
 8107c24:	d508      	bpl.n	8107c38 <_printf_i+0x144>
 8107c26:	6923      	ldr	r3, [r4, #16]
 8107c28:	6861      	ldr	r1, [r4, #4]
 8107c2a:	4299      	cmp	r1, r3
 8107c2c:	bfde      	ittt	le
 8107c2e:	2330      	movle	r3, #48	@ 0x30
 8107c30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8107c34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8107c38:	1b92      	subs	r2, r2, r6
 8107c3a:	6122      	str	r2, [r4, #16]
 8107c3c:	f8cd a000 	str.w	sl, [sp]
 8107c40:	464b      	mov	r3, r9
 8107c42:	aa03      	add	r2, sp, #12
 8107c44:	4621      	mov	r1, r4
 8107c46:	4640      	mov	r0, r8
 8107c48:	f7ff fee6 	bl	8107a18 <_printf_common>
 8107c4c:	3001      	adds	r0, #1
 8107c4e:	d14a      	bne.n	8107ce6 <_printf_i+0x1f2>
 8107c50:	f04f 30ff 	mov.w	r0, #4294967295
 8107c54:	b004      	add	sp, #16
 8107c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107c5a:	6823      	ldr	r3, [r4, #0]
 8107c5c:	f043 0320 	orr.w	r3, r3, #32
 8107c60:	6023      	str	r3, [r4, #0]
 8107c62:	4833      	ldr	r0, [pc, #204]	@ (8107d30 <_printf_i+0x23c>)
 8107c64:	2778      	movs	r7, #120	@ 0x78
 8107c66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8107c6a:	6823      	ldr	r3, [r4, #0]
 8107c6c:	6831      	ldr	r1, [r6, #0]
 8107c6e:	061f      	lsls	r7, r3, #24
 8107c70:	f851 5b04 	ldr.w	r5, [r1], #4
 8107c74:	d402      	bmi.n	8107c7c <_printf_i+0x188>
 8107c76:	065f      	lsls	r7, r3, #25
 8107c78:	bf48      	it	mi
 8107c7a:	b2ad      	uxthmi	r5, r5
 8107c7c:	6031      	str	r1, [r6, #0]
 8107c7e:	07d9      	lsls	r1, r3, #31
 8107c80:	bf44      	itt	mi
 8107c82:	f043 0320 	orrmi.w	r3, r3, #32
 8107c86:	6023      	strmi	r3, [r4, #0]
 8107c88:	b11d      	cbz	r5, 8107c92 <_printf_i+0x19e>
 8107c8a:	2310      	movs	r3, #16
 8107c8c:	e7ac      	b.n	8107be8 <_printf_i+0xf4>
 8107c8e:	4827      	ldr	r0, [pc, #156]	@ (8107d2c <_printf_i+0x238>)
 8107c90:	e7e9      	b.n	8107c66 <_printf_i+0x172>
 8107c92:	6823      	ldr	r3, [r4, #0]
 8107c94:	f023 0320 	bic.w	r3, r3, #32
 8107c98:	6023      	str	r3, [r4, #0]
 8107c9a:	e7f6      	b.n	8107c8a <_printf_i+0x196>
 8107c9c:	4616      	mov	r6, r2
 8107c9e:	e7bd      	b.n	8107c1c <_printf_i+0x128>
 8107ca0:	6833      	ldr	r3, [r6, #0]
 8107ca2:	6825      	ldr	r5, [r4, #0]
 8107ca4:	6961      	ldr	r1, [r4, #20]
 8107ca6:	1d18      	adds	r0, r3, #4
 8107ca8:	6030      	str	r0, [r6, #0]
 8107caa:	062e      	lsls	r6, r5, #24
 8107cac:	681b      	ldr	r3, [r3, #0]
 8107cae:	d501      	bpl.n	8107cb4 <_printf_i+0x1c0>
 8107cb0:	6019      	str	r1, [r3, #0]
 8107cb2:	e002      	b.n	8107cba <_printf_i+0x1c6>
 8107cb4:	0668      	lsls	r0, r5, #25
 8107cb6:	d5fb      	bpl.n	8107cb0 <_printf_i+0x1bc>
 8107cb8:	8019      	strh	r1, [r3, #0]
 8107cba:	2300      	movs	r3, #0
 8107cbc:	6123      	str	r3, [r4, #16]
 8107cbe:	4616      	mov	r6, r2
 8107cc0:	e7bc      	b.n	8107c3c <_printf_i+0x148>
 8107cc2:	6833      	ldr	r3, [r6, #0]
 8107cc4:	1d1a      	adds	r2, r3, #4
 8107cc6:	6032      	str	r2, [r6, #0]
 8107cc8:	681e      	ldr	r6, [r3, #0]
 8107cca:	6862      	ldr	r2, [r4, #4]
 8107ccc:	2100      	movs	r1, #0
 8107cce:	4630      	mov	r0, r6
 8107cd0:	f7f8 fb1e 	bl	8100310 <memchr>
 8107cd4:	b108      	cbz	r0, 8107cda <_printf_i+0x1e6>
 8107cd6:	1b80      	subs	r0, r0, r6
 8107cd8:	6060      	str	r0, [r4, #4]
 8107cda:	6863      	ldr	r3, [r4, #4]
 8107cdc:	6123      	str	r3, [r4, #16]
 8107cde:	2300      	movs	r3, #0
 8107ce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8107ce4:	e7aa      	b.n	8107c3c <_printf_i+0x148>
 8107ce6:	6923      	ldr	r3, [r4, #16]
 8107ce8:	4632      	mov	r2, r6
 8107cea:	4649      	mov	r1, r9
 8107cec:	4640      	mov	r0, r8
 8107cee:	47d0      	blx	sl
 8107cf0:	3001      	adds	r0, #1
 8107cf2:	d0ad      	beq.n	8107c50 <_printf_i+0x15c>
 8107cf4:	6823      	ldr	r3, [r4, #0]
 8107cf6:	079b      	lsls	r3, r3, #30
 8107cf8:	d413      	bmi.n	8107d22 <_printf_i+0x22e>
 8107cfa:	68e0      	ldr	r0, [r4, #12]
 8107cfc:	9b03      	ldr	r3, [sp, #12]
 8107cfe:	4298      	cmp	r0, r3
 8107d00:	bfb8      	it	lt
 8107d02:	4618      	movlt	r0, r3
 8107d04:	e7a6      	b.n	8107c54 <_printf_i+0x160>
 8107d06:	2301      	movs	r3, #1
 8107d08:	4632      	mov	r2, r6
 8107d0a:	4649      	mov	r1, r9
 8107d0c:	4640      	mov	r0, r8
 8107d0e:	47d0      	blx	sl
 8107d10:	3001      	adds	r0, #1
 8107d12:	d09d      	beq.n	8107c50 <_printf_i+0x15c>
 8107d14:	3501      	adds	r5, #1
 8107d16:	68e3      	ldr	r3, [r4, #12]
 8107d18:	9903      	ldr	r1, [sp, #12]
 8107d1a:	1a5b      	subs	r3, r3, r1
 8107d1c:	42ab      	cmp	r3, r5
 8107d1e:	dcf2      	bgt.n	8107d06 <_printf_i+0x212>
 8107d20:	e7eb      	b.n	8107cfa <_printf_i+0x206>
 8107d22:	2500      	movs	r5, #0
 8107d24:	f104 0619 	add.w	r6, r4, #25
 8107d28:	e7f5      	b.n	8107d16 <_printf_i+0x222>
 8107d2a:	bf00      	nop
 8107d2c:	081084eb 	.word	0x081084eb
 8107d30:	081084fc 	.word	0x081084fc

08107d34 <__sflush_r>:
 8107d34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8107d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107d3c:	0716      	lsls	r6, r2, #28
 8107d3e:	4605      	mov	r5, r0
 8107d40:	460c      	mov	r4, r1
 8107d42:	d454      	bmi.n	8107dee <__sflush_r+0xba>
 8107d44:	684b      	ldr	r3, [r1, #4]
 8107d46:	2b00      	cmp	r3, #0
 8107d48:	dc02      	bgt.n	8107d50 <__sflush_r+0x1c>
 8107d4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8107d4c:	2b00      	cmp	r3, #0
 8107d4e:	dd48      	ble.n	8107de2 <__sflush_r+0xae>
 8107d50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8107d52:	2e00      	cmp	r6, #0
 8107d54:	d045      	beq.n	8107de2 <__sflush_r+0xae>
 8107d56:	2300      	movs	r3, #0
 8107d58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8107d5c:	682f      	ldr	r7, [r5, #0]
 8107d5e:	6a21      	ldr	r1, [r4, #32]
 8107d60:	602b      	str	r3, [r5, #0]
 8107d62:	d030      	beq.n	8107dc6 <__sflush_r+0x92>
 8107d64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8107d66:	89a3      	ldrh	r3, [r4, #12]
 8107d68:	0759      	lsls	r1, r3, #29
 8107d6a:	d505      	bpl.n	8107d78 <__sflush_r+0x44>
 8107d6c:	6863      	ldr	r3, [r4, #4]
 8107d6e:	1ad2      	subs	r2, r2, r3
 8107d70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8107d72:	b10b      	cbz	r3, 8107d78 <__sflush_r+0x44>
 8107d74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8107d76:	1ad2      	subs	r2, r2, r3
 8107d78:	2300      	movs	r3, #0
 8107d7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8107d7c:	6a21      	ldr	r1, [r4, #32]
 8107d7e:	4628      	mov	r0, r5
 8107d80:	47b0      	blx	r6
 8107d82:	1c43      	adds	r3, r0, #1
 8107d84:	89a3      	ldrh	r3, [r4, #12]
 8107d86:	d106      	bne.n	8107d96 <__sflush_r+0x62>
 8107d88:	6829      	ldr	r1, [r5, #0]
 8107d8a:	291d      	cmp	r1, #29
 8107d8c:	d82b      	bhi.n	8107de6 <__sflush_r+0xb2>
 8107d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8107e38 <__sflush_r+0x104>)
 8107d90:	410a      	asrs	r2, r1
 8107d92:	07d6      	lsls	r6, r2, #31
 8107d94:	d427      	bmi.n	8107de6 <__sflush_r+0xb2>
 8107d96:	2200      	movs	r2, #0
 8107d98:	6062      	str	r2, [r4, #4]
 8107d9a:	04d9      	lsls	r1, r3, #19
 8107d9c:	6922      	ldr	r2, [r4, #16]
 8107d9e:	6022      	str	r2, [r4, #0]
 8107da0:	d504      	bpl.n	8107dac <__sflush_r+0x78>
 8107da2:	1c42      	adds	r2, r0, #1
 8107da4:	d101      	bne.n	8107daa <__sflush_r+0x76>
 8107da6:	682b      	ldr	r3, [r5, #0]
 8107da8:	b903      	cbnz	r3, 8107dac <__sflush_r+0x78>
 8107daa:	6560      	str	r0, [r4, #84]	@ 0x54
 8107dac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8107dae:	602f      	str	r7, [r5, #0]
 8107db0:	b1b9      	cbz	r1, 8107de2 <__sflush_r+0xae>
 8107db2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8107db6:	4299      	cmp	r1, r3
 8107db8:	d002      	beq.n	8107dc0 <__sflush_r+0x8c>
 8107dba:	4628      	mov	r0, r5
 8107dbc:	f7ff fb48 	bl	8107450 <_free_r>
 8107dc0:	2300      	movs	r3, #0
 8107dc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8107dc4:	e00d      	b.n	8107de2 <__sflush_r+0xae>
 8107dc6:	2301      	movs	r3, #1
 8107dc8:	4628      	mov	r0, r5
 8107dca:	47b0      	blx	r6
 8107dcc:	4602      	mov	r2, r0
 8107dce:	1c50      	adds	r0, r2, #1
 8107dd0:	d1c9      	bne.n	8107d66 <__sflush_r+0x32>
 8107dd2:	682b      	ldr	r3, [r5, #0]
 8107dd4:	2b00      	cmp	r3, #0
 8107dd6:	d0c6      	beq.n	8107d66 <__sflush_r+0x32>
 8107dd8:	2b1d      	cmp	r3, #29
 8107dda:	d001      	beq.n	8107de0 <__sflush_r+0xac>
 8107ddc:	2b16      	cmp	r3, #22
 8107dde:	d11e      	bne.n	8107e1e <__sflush_r+0xea>
 8107de0:	602f      	str	r7, [r5, #0]
 8107de2:	2000      	movs	r0, #0
 8107de4:	e022      	b.n	8107e2c <__sflush_r+0xf8>
 8107de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8107dea:	b21b      	sxth	r3, r3
 8107dec:	e01b      	b.n	8107e26 <__sflush_r+0xf2>
 8107dee:	690f      	ldr	r7, [r1, #16]
 8107df0:	2f00      	cmp	r7, #0
 8107df2:	d0f6      	beq.n	8107de2 <__sflush_r+0xae>
 8107df4:	0793      	lsls	r3, r2, #30
 8107df6:	680e      	ldr	r6, [r1, #0]
 8107df8:	bf08      	it	eq
 8107dfa:	694b      	ldreq	r3, [r1, #20]
 8107dfc:	600f      	str	r7, [r1, #0]
 8107dfe:	bf18      	it	ne
 8107e00:	2300      	movne	r3, #0
 8107e02:	eba6 0807 	sub.w	r8, r6, r7
 8107e06:	608b      	str	r3, [r1, #8]
 8107e08:	f1b8 0f00 	cmp.w	r8, #0
 8107e0c:	dde9      	ble.n	8107de2 <__sflush_r+0xae>
 8107e0e:	6a21      	ldr	r1, [r4, #32]
 8107e10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8107e12:	4643      	mov	r3, r8
 8107e14:	463a      	mov	r2, r7
 8107e16:	4628      	mov	r0, r5
 8107e18:	47b0      	blx	r6
 8107e1a:	2800      	cmp	r0, #0
 8107e1c:	dc08      	bgt.n	8107e30 <__sflush_r+0xfc>
 8107e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107e22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8107e26:	81a3      	strh	r3, [r4, #12]
 8107e28:	f04f 30ff 	mov.w	r0, #4294967295
 8107e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8107e30:	4407      	add	r7, r0
 8107e32:	eba8 0800 	sub.w	r8, r8, r0
 8107e36:	e7e7      	b.n	8107e08 <__sflush_r+0xd4>
 8107e38:	dfbffffe 	.word	0xdfbffffe

08107e3c <_fflush_r>:
 8107e3c:	b538      	push	{r3, r4, r5, lr}
 8107e3e:	690b      	ldr	r3, [r1, #16]
 8107e40:	4605      	mov	r5, r0
 8107e42:	460c      	mov	r4, r1
 8107e44:	b913      	cbnz	r3, 8107e4c <_fflush_r+0x10>
 8107e46:	2500      	movs	r5, #0
 8107e48:	4628      	mov	r0, r5
 8107e4a:	bd38      	pop	{r3, r4, r5, pc}
 8107e4c:	b118      	cbz	r0, 8107e56 <_fflush_r+0x1a>
 8107e4e:	6a03      	ldr	r3, [r0, #32]
 8107e50:	b90b      	cbnz	r3, 8107e56 <_fflush_r+0x1a>
 8107e52:	f7ff f98d 	bl	8107170 <__sinit>
 8107e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107e5a:	2b00      	cmp	r3, #0
 8107e5c:	d0f3      	beq.n	8107e46 <_fflush_r+0xa>
 8107e5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8107e60:	07d0      	lsls	r0, r2, #31
 8107e62:	d404      	bmi.n	8107e6e <_fflush_r+0x32>
 8107e64:	0599      	lsls	r1, r3, #22
 8107e66:	d402      	bmi.n	8107e6e <_fflush_r+0x32>
 8107e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8107e6a:	f7ff fada 	bl	8107422 <__retarget_lock_acquire_recursive>
 8107e6e:	4628      	mov	r0, r5
 8107e70:	4621      	mov	r1, r4
 8107e72:	f7ff ff5f 	bl	8107d34 <__sflush_r>
 8107e76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8107e78:	07da      	lsls	r2, r3, #31
 8107e7a:	4605      	mov	r5, r0
 8107e7c:	d4e4      	bmi.n	8107e48 <_fflush_r+0xc>
 8107e7e:	89a3      	ldrh	r3, [r4, #12]
 8107e80:	059b      	lsls	r3, r3, #22
 8107e82:	d4e1      	bmi.n	8107e48 <_fflush_r+0xc>
 8107e84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8107e86:	f7ff facd 	bl	8107424 <__retarget_lock_release_recursive>
 8107e8a:	e7dd      	b.n	8107e48 <_fflush_r+0xc>

08107e8c <__swbuf_r>:
 8107e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107e8e:	460e      	mov	r6, r1
 8107e90:	4614      	mov	r4, r2
 8107e92:	4605      	mov	r5, r0
 8107e94:	b118      	cbz	r0, 8107e9e <__swbuf_r+0x12>
 8107e96:	6a03      	ldr	r3, [r0, #32]
 8107e98:	b90b      	cbnz	r3, 8107e9e <__swbuf_r+0x12>
 8107e9a:	f7ff f969 	bl	8107170 <__sinit>
 8107e9e:	69a3      	ldr	r3, [r4, #24]
 8107ea0:	60a3      	str	r3, [r4, #8]
 8107ea2:	89a3      	ldrh	r3, [r4, #12]
 8107ea4:	071a      	lsls	r2, r3, #28
 8107ea6:	d501      	bpl.n	8107eac <__swbuf_r+0x20>
 8107ea8:	6923      	ldr	r3, [r4, #16]
 8107eaa:	b943      	cbnz	r3, 8107ebe <__swbuf_r+0x32>
 8107eac:	4621      	mov	r1, r4
 8107eae:	4628      	mov	r0, r5
 8107eb0:	f000 f82a 	bl	8107f08 <__swsetup_r>
 8107eb4:	b118      	cbz	r0, 8107ebe <__swbuf_r+0x32>
 8107eb6:	f04f 37ff 	mov.w	r7, #4294967295
 8107eba:	4638      	mov	r0, r7
 8107ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107ebe:	6823      	ldr	r3, [r4, #0]
 8107ec0:	6922      	ldr	r2, [r4, #16]
 8107ec2:	1a98      	subs	r0, r3, r2
 8107ec4:	6963      	ldr	r3, [r4, #20]
 8107ec6:	b2f6      	uxtb	r6, r6
 8107ec8:	4283      	cmp	r3, r0
 8107eca:	4637      	mov	r7, r6
 8107ecc:	dc05      	bgt.n	8107eda <__swbuf_r+0x4e>
 8107ece:	4621      	mov	r1, r4
 8107ed0:	4628      	mov	r0, r5
 8107ed2:	f7ff ffb3 	bl	8107e3c <_fflush_r>
 8107ed6:	2800      	cmp	r0, #0
 8107ed8:	d1ed      	bne.n	8107eb6 <__swbuf_r+0x2a>
 8107eda:	68a3      	ldr	r3, [r4, #8]
 8107edc:	3b01      	subs	r3, #1
 8107ede:	60a3      	str	r3, [r4, #8]
 8107ee0:	6823      	ldr	r3, [r4, #0]
 8107ee2:	1c5a      	adds	r2, r3, #1
 8107ee4:	6022      	str	r2, [r4, #0]
 8107ee6:	701e      	strb	r6, [r3, #0]
 8107ee8:	6962      	ldr	r2, [r4, #20]
 8107eea:	1c43      	adds	r3, r0, #1
 8107eec:	429a      	cmp	r2, r3
 8107eee:	d004      	beq.n	8107efa <__swbuf_r+0x6e>
 8107ef0:	89a3      	ldrh	r3, [r4, #12]
 8107ef2:	07db      	lsls	r3, r3, #31
 8107ef4:	d5e1      	bpl.n	8107eba <__swbuf_r+0x2e>
 8107ef6:	2e0a      	cmp	r6, #10
 8107ef8:	d1df      	bne.n	8107eba <__swbuf_r+0x2e>
 8107efa:	4621      	mov	r1, r4
 8107efc:	4628      	mov	r0, r5
 8107efe:	f7ff ff9d 	bl	8107e3c <_fflush_r>
 8107f02:	2800      	cmp	r0, #0
 8107f04:	d0d9      	beq.n	8107eba <__swbuf_r+0x2e>
 8107f06:	e7d6      	b.n	8107eb6 <__swbuf_r+0x2a>

08107f08 <__swsetup_r>:
 8107f08:	b538      	push	{r3, r4, r5, lr}
 8107f0a:	4b29      	ldr	r3, [pc, #164]	@ (8107fb0 <__swsetup_r+0xa8>)
 8107f0c:	4605      	mov	r5, r0
 8107f0e:	6818      	ldr	r0, [r3, #0]
 8107f10:	460c      	mov	r4, r1
 8107f12:	b118      	cbz	r0, 8107f1c <__swsetup_r+0x14>
 8107f14:	6a03      	ldr	r3, [r0, #32]
 8107f16:	b90b      	cbnz	r3, 8107f1c <__swsetup_r+0x14>
 8107f18:	f7ff f92a 	bl	8107170 <__sinit>
 8107f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107f20:	0719      	lsls	r1, r3, #28
 8107f22:	d422      	bmi.n	8107f6a <__swsetup_r+0x62>
 8107f24:	06da      	lsls	r2, r3, #27
 8107f26:	d407      	bmi.n	8107f38 <__swsetup_r+0x30>
 8107f28:	2209      	movs	r2, #9
 8107f2a:	602a      	str	r2, [r5, #0]
 8107f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8107f30:	81a3      	strh	r3, [r4, #12]
 8107f32:	f04f 30ff 	mov.w	r0, #4294967295
 8107f36:	e033      	b.n	8107fa0 <__swsetup_r+0x98>
 8107f38:	0758      	lsls	r0, r3, #29
 8107f3a:	d512      	bpl.n	8107f62 <__swsetup_r+0x5a>
 8107f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8107f3e:	b141      	cbz	r1, 8107f52 <__swsetup_r+0x4a>
 8107f40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8107f44:	4299      	cmp	r1, r3
 8107f46:	d002      	beq.n	8107f4e <__swsetup_r+0x46>
 8107f48:	4628      	mov	r0, r5
 8107f4a:	f7ff fa81 	bl	8107450 <_free_r>
 8107f4e:	2300      	movs	r3, #0
 8107f50:	6363      	str	r3, [r4, #52]	@ 0x34
 8107f52:	89a3      	ldrh	r3, [r4, #12]
 8107f54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8107f58:	81a3      	strh	r3, [r4, #12]
 8107f5a:	2300      	movs	r3, #0
 8107f5c:	6063      	str	r3, [r4, #4]
 8107f5e:	6923      	ldr	r3, [r4, #16]
 8107f60:	6023      	str	r3, [r4, #0]
 8107f62:	89a3      	ldrh	r3, [r4, #12]
 8107f64:	f043 0308 	orr.w	r3, r3, #8
 8107f68:	81a3      	strh	r3, [r4, #12]
 8107f6a:	6923      	ldr	r3, [r4, #16]
 8107f6c:	b94b      	cbnz	r3, 8107f82 <__swsetup_r+0x7a>
 8107f6e:	89a3      	ldrh	r3, [r4, #12]
 8107f70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8107f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107f78:	d003      	beq.n	8107f82 <__swsetup_r+0x7a>
 8107f7a:	4621      	mov	r1, r4
 8107f7c:	4628      	mov	r0, r5
 8107f7e:	f000 f8cb 	bl	8108118 <__smakebuf_r>
 8107f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107f86:	f013 0201 	ands.w	r2, r3, #1
 8107f8a:	d00a      	beq.n	8107fa2 <__swsetup_r+0x9a>
 8107f8c:	2200      	movs	r2, #0
 8107f8e:	60a2      	str	r2, [r4, #8]
 8107f90:	6962      	ldr	r2, [r4, #20]
 8107f92:	4252      	negs	r2, r2
 8107f94:	61a2      	str	r2, [r4, #24]
 8107f96:	6922      	ldr	r2, [r4, #16]
 8107f98:	b942      	cbnz	r2, 8107fac <__swsetup_r+0xa4>
 8107f9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8107f9e:	d1c5      	bne.n	8107f2c <__swsetup_r+0x24>
 8107fa0:	bd38      	pop	{r3, r4, r5, pc}
 8107fa2:	0799      	lsls	r1, r3, #30
 8107fa4:	bf58      	it	pl
 8107fa6:	6962      	ldrpl	r2, [r4, #20]
 8107fa8:	60a2      	str	r2, [r4, #8]
 8107faa:	e7f4      	b.n	8107f96 <__swsetup_r+0x8e>
 8107fac:	2000      	movs	r0, #0
 8107fae:	e7f7      	b.n	8107fa0 <__swsetup_r+0x98>
 8107fb0:	100000c4 	.word	0x100000c4

08107fb4 <memmove>:
 8107fb4:	4288      	cmp	r0, r1
 8107fb6:	b510      	push	{r4, lr}
 8107fb8:	eb01 0402 	add.w	r4, r1, r2
 8107fbc:	d902      	bls.n	8107fc4 <memmove+0x10>
 8107fbe:	4284      	cmp	r4, r0
 8107fc0:	4623      	mov	r3, r4
 8107fc2:	d807      	bhi.n	8107fd4 <memmove+0x20>
 8107fc4:	1e43      	subs	r3, r0, #1
 8107fc6:	42a1      	cmp	r1, r4
 8107fc8:	d008      	beq.n	8107fdc <memmove+0x28>
 8107fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8107fce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8107fd2:	e7f8      	b.n	8107fc6 <memmove+0x12>
 8107fd4:	4402      	add	r2, r0
 8107fd6:	4601      	mov	r1, r0
 8107fd8:	428a      	cmp	r2, r1
 8107fda:	d100      	bne.n	8107fde <memmove+0x2a>
 8107fdc:	bd10      	pop	{r4, pc}
 8107fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8107fe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8107fe6:	e7f7      	b.n	8107fd8 <memmove+0x24>

08107fe8 <_raise_r>:
 8107fe8:	291f      	cmp	r1, #31
 8107fea:	b538      	push	{r3, r4, r5, lr}
 8107fec:	4605      	mov	r5, r0
 8107fee:	460c      	mov	r4, r1
 8107ff0:	d904      	bls.n	8107ffc <_raise_r+0x14>
 8107ff2:	2316      	movs	r3, #22
 8107ff4:	6003      	str	r3, [r0, #0]
 8107ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8107ffa:	bd38      	pop	{r3, r4, r5, pc}
 8107ffc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8107ffe:	b112      	cbz	r2, 8108006 <_raise_r+0x1e>
 8108000:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8108004:	b94b      	cbnz	r3, 810801a <_raise_r+0x32>
 8108006:	4628      	mov	r0, r5
 8108008:	f000 f830 	bl	810806c <_getpid_r>
 810800c:	4622      	mov	r2, r4
 810800e:	4601      	mov	r1, r0
 8108010:	4628      	mov	r0, r5
 8108012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8108016:	f000 b817 	b.w	8108048 <_kill_r>
 810801a:	2b01      	cmp	r3, #1
 810801c:	d00a      	beq.n	8108034 <_raise_r+0x4c>
 810801e:	1c59      	adds	r1, r3, #1
 8108020:	d103      	bne.n	810802a <_raise_r+0x42>
 8108022:	2316      	movs	r3, #22
 8108024:	6003      	str	r3, [r0, #0]
 8108026:	2001      	movs	r0, #1
 8108028:	e7e7      	b.n	8107ffa <_raise_r+0x12>
 810802a:	2100      	movs	r1, #0
 810802c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8108030:	4620      	mov	r0, r4
 8108032:	4798      	blx	r3
 8108034:	2000      	movs	r0, #0
 8108036:	e7e0      	b.n	8107ffa <_raise_r+0x12>

08108038 <raise>:
 8108038:	4b02      	ldr	r3, [pc, #8]	@ (8108044 <raise+0xc>)
 810803a:	4601      	mov	r1, r0
 810803c:	6818      	ldr	r0, [r3, #0]
 810803e:	f7ff bfd3 	b.w	8107fe8 <_raise_r>
 8108042:	bf00      	nop
 8108044:	100000c4 	.word	0x100000c4

08108048 <_kill_r>:
 8108048:	b538      	push	{r3, r4, r5, lr}
 810804a:	4d07      	ldr	r5, [pc, #28]	@ (8108068 <_kill_r+0x20>)
 810804c:	2300      	movs	r3, #0
 810804e:	4604      	mov	r4, r0
 8108050:	4608      	mov	r0, r1
 8108052:	4611      	mov	r1, r2
 8108054:	602b      	str	r3, [r5, #0]
 8108056:	f7f8 fca0 	bl	810099a <_kill>
 810805a:	1c43      	adds	r3, r0, #1
 810805c:	d102      	bne.n	8108064 <_kill_r+0x1c>
 810805e:	682b      	ldr	r3, [r5, #0]
 8108060:	b103      	cbz	r3, 8108064 <_kill_r+0x1c>
 8108062:	6023      	str	r3, [r4, #0]
 8108064:	bd38      	pop	{r3, r4, r5, pc}
 8108066:	bf00      	nop
 8108068:	10000474 	.word	0x10000474

0810806c <_getpid_r>:
 810806c:	f7f8 bc8d 	b.w	810098a <_getpid>

08108070 <_realloc_r>:
 8108070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108074:	4680      	mov	r8, r0
 8108076:	4615      	mov	r5, r2
 8108078:	460c      	mov	r4, r1
 810807a:	b921      	cbnz	r1, 8108086 <_realloc_r+0x16>
 810807c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108080:	4611      	mov	r1, r2
 8108082:	f7fe bf5d 	b.w	8106f40 <_malloc_r>
 8108086:	b92a      	cbnz	r2, 8108094 <_realloc_r+0x24>
 8108088:	f7ff f9e2 	bl	8107450 <_free_r>
 810808c:	2400      	movs	r4, #0
 810808e:	4620      	mov	r0, r4
 8108090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108094:	f000 f89e 	bl	81081d4 <_malloc_usable_size_r>
 8108098:	4285      	cmp	r5, r0
 810809a:	4606      	mov	r6, r0
 810809c:	d802      	bhi.n	81080a4 <_realloc_r+0x34>
 810809e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 81080a2:	d8f4      	bhi.n	810808e <_realloc_r+0x1e>
 81080a4:	4629      	mov	r1, r5
 81080a6:	4640      	mov	r0, r8
 81080a8:	f7fe ff4a 	bl	8106f40 <_malloc_r>
 81080ac:	4607      	mov	r7, r0
 81080ae:	2800      	cmp	r0, #0
 81080b0:	d0ec      	beq.n	810808c <_realloc_r+0x1c>
 81080b2:	42b5      	cmp	r5, r6
 81080b4:	462a      	mov	r2, r5
 81080b6:	4621      	mov	r1, r4
 81080b8:	bf28      	it	cs
 81080ba:	4632      	movcs	r2, r6
 81080bc:	f7ff f9b3 	bl	8107426 <memcpy>
 81080c0:	4621      	mov	r1, r4
 81080c2:	4640      	mov	r0, r8
 81080c4:	f7ff f9c4 	bl	8107450 <_free_r>
 81080c8:	463c      	mov	r4, r7
 81080ca:	e7e0      	b.n	810808e <_realloc_r+0x1e>

081080cc <__swhatbuf_r>:
 81080cc:	b570      	push	{r4, r5, r6, lr}
 81080ce:	460c      	mov	r4, r1
 81080d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81080d4:	2900      	cmp	r1, #0
 81080d6:	b096      	sub	sp, #88	@ 0x58
 81080d8:	4615      	mov	r5, r2
 81080da:	461e      	mov	r6, r3
 81080dc:	da0d      	bge.n	81080fa <__swhatbuf_r+0x2e>
 81080de:	89a3      	ldrh	r3, [r4, #12]
 81080e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 81080e4:	f04f 0100 	mov.w	r1, #0
 81080e8:	bf14      	ite	ne
 81080ea:	2340      	movne	r3, #64	@ 0x40
 81080ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 81080f0:	2000      	movs	r0, #0
 81080f2:	6031      	str	r1, [r6, #0]
 81080f4:	602b      	str	r3, [r5, #0]
 81080f6:	b016      	add	sp, #88	@ 0x58
 81080f8:	bd70      	pop	{r4, r5, r6, pc}
 81080fa:	466a      	mov	r2, sp
 81080fc:	f000 f848 	bl	8108190 <_fstat_r>
 8108100:	2800      	cmp	r0, #0
 8108102:	dbec      	blt.n	81080de <__swhatbuf_r+0x12>
 8108104:	9901      	ldr	r1, [sp, #4]
 8108106:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810810a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810810e:	4259      	negs	r1, r3
 8108110:	4159      	adcs	r1, r3
 8108112:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8108116:	e7eb      	b.n	81080f0 <__swhatbuf_r+0x24>

08108118 <__smakebuf_r>:
 8108118:	898b      	ldrh	r3, [r1, #12]
 810811a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810811c:	079d      	lsls	r5, r3, #30
 810811e:	4606      	mov	r6, r0
 8108120:	460c      	mov	r4, r1
 8108122:	d507      	bpl.n	8108134 <__smakebuf_r+0x1c>
 8108124:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8108128:	6023      	str	r3, [r4, #0]
 810812a:	6123      	str	r3, [r4, #16]
 810812c:	2301      	movs	r3, #1
 810812e:	6163      	str	r3, [r4, #20]
 8108130:	b003      	add	sp, #12
 8108132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8108134:	ab01      	add	r3, sp, #4
 8108136:	466a      	mov	r2, sp
 8108138:	f7ff ffc8 	bl	81080cc <__swhatbuf_r>
 810813c:	9f00      	ldr	r7, [sp, #0]
 810813e:	4605      	mov	r5, r0
 8108140:	4639      	mov	r1, r7
 8108142:	4630      	mov	r0, r6
 8108144:	f7fe fefc 	bl	8106f40 <_malloc_r>
 8108148:	b948      	cbnz	r0, 810815e <__smakebuf_r+0x46>
 810814a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810814e:	059a      	lsls	r2, r3, #22
 8108150:	d4ee      	bmi.n	8108130 <__smakebuf_r+0x18>
 8108152:	f023 0303 	bic.w	r3, r3, #3
 8108156:	f043 0302 	orr.w	r3, r3, #2
 810815a:	81a3      	strh	r3, [r4, #12]
 810815c:	e7e2      	b.n	8108124 <__smakebuf_r+0xc>
 810815e:	89a3      	ldrh	r3, [r4, #12]
 8108160:	6020      	str	r0, [r4, #0]
 8108162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8108166:	81a3      	strh	r3, [r4, #12]
 8108168:	9b01      	ldr	r3, [sp, #4]
 810816a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810816e:	b15b      	cbz	r3, 8108188 <__smakebuf_r+0x70>
 8108170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8108174:	4630      	mov	r0, r6
 8108176:	f000 f81d 	bl	81081b4 <_isatty_r>
 810817a:	b128      	cbz	r0, 8108188 <__smakebuf_r+0x70>
 810817c:	89a3      	ldrh	r3, [r4, #12]
 810817e:	f023 0303 	bic.w	r3, r3, #3
 8108182:	f043 0301 	orr.w	r3, r3, #1
 8108186:	81a3      	strh	r3, [r4, #12]
 8108188:	89a3      	ldrh	r3, [r4, #12]
 810818a:	431d      	orrs	r5, r3
 810818c:	81a5      	strh	r5, [r4, #12]
 810818e:	e7cf      	b.n	8108130 <__smakebuf_r+0x18>

08108190 <_fstat_r>:
 8108190:	b538      	push	{r3, r4, r5, lr}
 8108192:	4d07      	ldr	r5, [pc, #28]	@ (81081b0 <_fstat_r+0x20>)
 8108194:	2300      	movs	r3, #0
 8108196:	4604      	mov	r4, r0
 8108198:	4608      	mov	r0, r1
 810819a:	4611      	mov	r1, r2
 810819c:	602b      	str	r3, [r5, #0]
 810819e:	f7f8 fc5c 	bl	8100a5a <_fstat>
 81081a2:	1c43      	adds	r3, r0, #1
 81081a4:	d102      	bne.n	81081ac <_fstat_r+0x1c>
 81081a6:	682b      	ldr	r3, [r5, #0]
 81081a8:	b103      	cbz	r3, 81081ac <_fstat_r+0x1c>
 81081aa:	6023      	str	r3, [r4, #0]
 81081ac:	bd38      	pop	{r3, r4, r5, pc}
 81081ae:	bf00      	nop
 81081b0:	10000474 	.word	0x10000474

081081b4 <_isatty_r>:
 81081b4:	b538      	push	{r3, r4, r5, lr}
 81081b6:	4d06      	ldr	r5, [pc, #24]	@ (81081d0 <_isatty_r+0x1c>)
 81081b8:	2300      	movs	r3, #0
 81081ba:	4604      	mov	r4, r0
 81081bc:	4608      	mov	r0, r1
 81081be:	602b      	str	r3, [r5, #0]
 81081c0:	f7f8 fc5b 	bl	8100a7a <_isatty>
 81081c4:	1c43      	adds	r3, r0, #1
 81081c6:	d102      	bne.n	81081ce <_isatty_r+0x1a>
 81081c8:	682b      	ldr	r3, [r5, #0]
 81081ca:	b103      	cbz	r3, 81081ce <_isatty_r+0x1a>
 81081cc:	6023      	str	r3, [r4, #0]
 81081ce:	bd38      	pop	{r3, r4, r5, pc}
 81081d0:	10000474 	.word	0x10000474

081081d4 <_malloc_usable_size_r>:
 81081d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81081d8:	1f18      	subs	r0, r3, #4
 81081da:	2b00      	cmp	r3, #0
 81081dc:	bfbc      	itt	lt
 81081de:	580b      	ldrlt	r3, [r1, r0]
 81081e0:	18c0      	addlt	r0, r0, r3
 81081e2:	4770      	bx	lr

081081e4 <_init>:
 81081e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81081e6:	bf00      	nop
 81081e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81081ea:	bc08      	pop	{r3}
 81081ec:	469e      	mov	lr, r3
 81081ee:	4770      	bx	lr

081081f0 <_fini>:
 81081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81081f2:	bf00      	nop
 81081f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81081f6:	bc08      	pop	{r3}
 81081f8:	469e      	mov	lr, r3
 81081fa:	4770      	bx	lr
