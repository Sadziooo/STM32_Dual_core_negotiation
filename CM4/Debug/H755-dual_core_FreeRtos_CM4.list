
H755-dual_core_FreeRtos_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1ac  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0810c44c  0810c44c  0000d44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810c7e8  0810c7e8  0000d7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810c7f0  0810c7f0  0000d7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810c7f4  0810c7f4  0000d7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000118  10000000  0810c7f8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004d44  10000118  0810c910  0000e118  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10004e5c  0810c910  0000ee5c  2**0
                  ALLOC
  9 .openamp_section 0000008c  38000000  0810c910  0000f000  2**2
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0000e118  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002bbd9  00000000  00000000  0000e148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000064cf  00000000  00000000  00039d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002090  00000000  00000000  000401f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000018db  00000000  00000000  00042280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004215a  00000000  00000000  00043b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002fd65  00000000  00000000  00085cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0019750e  00000000  00000000  000b5a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0024cf28  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000090e0  00000000  00000000  0024cf6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007b  00000000  00000000  0025604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000118 	.word	0x10000118
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810c434 	.word	0x0810c434

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000011c 	.word	0x1000011c
 81002dc:	0810c434 	.word	0x0810c434

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr

081002f4 <strlen>:
 81002f4:	4603      	mov	r3, r0
 81002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002fa:	2a00      	cmp	r2, #0
 81002fc:	d1fb      	bne.n	81002f6 <strlen+0x2>
 81002fe:	1a18      	subs	r0, r3, r0
 8100300:	3801      	subs	r0, #1
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_uldivmod>:
 81003b0:	b953      	cbnz	r3, 81003c8 <__aeabi_uldivmod+0x18>
 81003b2:	b94a      	cbnz	r2, 81003c8 <__aeabi_uldivmod+0x18>
 81003b4:	2900      	cmp	r1, #0
 81003b6:	bf08      	it	eq
 81003b8:	2800      	cmpeq	r0, #0
 81003ba:	bf1c      	itt	ne
 81003bc:	f04f 31ff 	movne.w	r1, #4294967295
 81003c0:	f04f 30ff 	movne.w	r0, #4294967295
 81003c4:	f000 b96a 	b.w	810069c <__aeabi_idiv0>
 81003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003d0:	f000 f806 	bl	81003e0 <__udivmoddi4>
 81003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003dc:	b004      	add	sp, #16
 81003de:	4770      	bx	lr

081003e0 <__udivmoddi4>:
 81003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003e4:	9d08      	ldr	r5, [sp, #32]
 81003e6:	460c      	mov	r4, r1
 81003e8:	2b00      	cmp	r3, #0
 81003ea:	d14e      	bne.n	810048a <__udivmoddi4+0xaa>
 81003ec:	4694      	mov	ip, r2
 81003ee:	458c      	cmp	ip, r1
 81003f0:	4686      	mov	lr, r0
 81003f2:	fab2 f282 	clz	r2, r2
 81003f6:	d962      	bls.n	81004be <__udivmoddi4+0xde>
 81003f8:	b14a      	cbz	r2, 810040e <__udivmoddi4+0x2e>
 81003fa:	f1c2 0320 	rsb	r3, r2, #32
 81003fe:	4091      	lsls	r1, r2
 8100400:	fa20 f303 	lsr.w	r3, r0, r3
 8100404:	fa0c fc02 	lsl.w	ip, ip, r2
 8100408:	4319      	orrs	r1, r3
 810040a:	fa00 fe02 	lsl.w	lr, r0, r2
 810040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100412:	fa1f f68c 	uxth.w	r6, ip
 8100416:	fbb1 f4f7 	udiv	r4, r1, r7
 810041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 810041e:	fb07 1114 	mls	r1, r7, r4, r1
 8100422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100426:	fb04 f106 	mul.w	r1, r4, r6
 810042a:	4299      	cmp	r1, r3
 810042c:	d90a      	bls.n	8100444 <__udivmoddi4+0x64>
 810042e:	eb1c 0303 	adds.w	r3, ip, r3
 8100432:	f104 30ff 	add.w	r0, r4, #4294967295
 8100436:	f080 8112 	bcs.w	810065e <__udivmoddi4+0x27e>
 810043a:	4299      	cmp	r1, r3
 810043c:	f240 810f 	bls.w	810065e <__udivmoddi4+0x27e>
 8100440:	3c02      	subs	r4, #2
 8100442:	4463      	add	r3, ip
 8100444:	1a59      	subs	r1, r3, r1
 8100446:	fa1f f38e 	uxth.w	r3, lr
 810044a:	fbb1 f0f7 	udiv	r0, r1, r7
 810044e:	fb07 1110 	mls	r1, r7, r0, r1
 8100452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100456:	fb00 f606 	mul.w	r6, r0, r6
 810045a:	429e      	cmp	r6, r3
 810045c:	d90a      	bls.n	8100474 <__udivmoddi4+0x94>
 810045e:	eb1c 0303 	adds.w	r3, ip, r3
 8100462:	f100 31ff 	add.w	r1, r0, #4294967295
 8100466:	f080 80fc 	bcs.w	8100662 <__udivmoddi4+0x282>
 810046a:	429e      	cmp	r6, r3
 810046c:	f240 80f9 	bls.w	8100662 <__udivmoddi4+0x282>
 8100470:	4463      	add	r3, ip
 8100472:	3802      	subs	r0, #2
 8100474:	1b9b      	subs	r3, r3, r6
 8100476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 810047a:	2100      	movs	r1, #0
 810047c:	b11d      	cbz	r5, 8100486 <__udivmoddi4+0xa6>
 810047e:	40d3      	lsrs	r3, r2
 8100480:	2200      	movs	r2, #0
 8100482:	e9c5 3200 	strd	r3, r2, [r5]
 8100486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810048a:	428b      	cmp	r3, r1
 810048c:	d905      	bls.n	810049a <__udivmoddi4+0xba>
 810048e:	b10d      	cbz	r5, 8100494 <__udivmoddi4+0xb4>
 8100490:	e9c5 0100 	strd	r0, r1, [r5]
 8100494:	2100      	movs	r1, #0
 8100496:	4608      	mov	r0, r1
 8100498:	e7f5      	b.n	8100486 <__udivmoddi4+0xa6>
 810049a:	fab3 f183 	clz	r1, r3
 810049e:	2900      	cmp	r1, #0
 81004a0:	d146      	bne.n	8100530 <__udivmoddi4+0x150>
 81004a2:	42a3      	cmp	r3, r4
 81004a4:	d302      	bcc.n	81004ac <__udivmoddi4+0xcc>
 81004a6:	4290      	cmp	r0, r2
 81004a8:	f0c0 80f0 	bcc.w	810068c <__udivmoddi4+0x2ac>
 81004ac:	1a86      	subs	r6, r0, r2
 81004ae:	eb64 0303 	sbc.w	r3, r4, r3
 81004b2:	2001      	movs	r0, #1
 81004b4:	2d00      	cmp	r5, #0
 81004b6:	d0e6      	beq.n	8100486 <__udivmoddi4+0xa6>
 81004b8:	e9c5 6300 	strd	r6, r3, [r5]
 81004bc:	e7e3      	b.n	8100486 <__udivmoddi4+0xa6>
 81004be:	2a00      	cmp	r2, #0
 81004c0:	f040 8090 	bne.w	81005e4 <__udivmoddi4+0x204>
 81004c4:	eba1 040c 	sub.w	r4, r1, ip
 81004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81004cc:	fa1f f78c 	uxth.w	r7, ip
 81004d0:	2101      	movs	r1, #1
 81004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 81004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 81004da:	fb08 4416 	mls	r4, r8, r6, r4
 81004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 81004e2:	fb07 f006 	mul.w	r0, r7, r6
 81004e6:	4298      	cmp	r0, r3
 81004e8:	d908      	bls.n	81004fc <__udivmoddi4+0x11c>
 81004ea:	eb1c 0303 	adds.w	r3, ip, r3
 81004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 81004f2:	d202      	bcs.n	81004fa <__udivmoddi4+0x11a>
 81004f4:	4298      	cmp	r0, r3
 81004f6:	f200 80cd 	bhi.w	8100694 <__udivmoddi4+0x2b4>
 81004fa:	4626      	mov	r6, r4
 81004fc:	1a1c      	subs	r4, r3, r0
 81004fe:	fa1f f38e 	uxth.w	r3, lr
 8100502:	fbb4 f0f8 	udiv	r0, r4, r8
 8100506:	fb08 4410 	mls	r4, r8, r0, r4
 810050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810050e:	fb00 f707 	mul.w	r7, r0, r7
 8100512:	429f      	cmp	r7, r3
 8100514:	d908      	bls.n	8100528 <__udivmoddi4+0x148>
 8100516:	eb1c 0303 	adds.w	r3, ip, r3
 810051a:	f100 34ff 	add.w	r4, r0, #4294967295
 810051e:	d202      	bcs.n	8100526 <__udivmoddi4+0x146>
 8100520:	429f      	cmp	r7, r3
 8100522:	f200 80b0 	bhi.w	8100686 <__udivmoddi4+0x2a6>
 8100526:	4620      	mov	r0, r4
 8100528:	1bdb      	subs	r3, r3, r7
 810052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 810052e:	e7a5      	b.n	810047c <__udivmoddi4+0x9c>
 8100530:	f1c1 0620 	rsb	r6, r1, #32
 8100534:	408b      	lsls	r3, r1
 8100536:	fa22 f706 	lsr.w	r7, r2, r6
 810053a:	431f      	orrs	r7, r3
 810053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8100540:	fa04 f301 	lsl.w	r3, r4, r1
 8100544:	ea43 030c 	orr.w	r3, r3, ip
 8100548:	40f4      	lsrs	r4, r6
 810054a:	fa00 f801 	lsl.w	r8, r0, r1
 810054e:	0c38      	lsrs	r0, r7, #16
 8100550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100554:	fbb4 fef0 	udiv	lr, r4, r0
 8100558:	fa1f fc87 	uxth.w	ip, r7
 810055c:	fb00 441e 	mls	r4, r0, lr, r4
 8100560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100564:	fb0e f90c 	mul.w	r9, lr, ip
 8100568:	45a1      	cmp	r9, r4
 810056a:	fa02 f201 	lsl.w	r2, r2, r1
 810056e:	d90a      	bls.n	8100586 <__udivmoddi4+0x1a6>
 8100570:	193c      	adds	r4, r7, r4
 8100572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100576:	f080 8084 	bcs.w	8100682 <__udivmoddi4+0x2a2>
 810057a:	45a1      	cmp	r9, r4
 810057c:	f240 8081 	bls.w	8100682 <__udivmoddi4+0x2a2>
 8100580:	f1ae 0e02 	sub.w	lr, lr, #2
 8100584:	443c      	add	r4, r7
 8100586:	eba4 0409 	sub.w	r4, r4, r9
 810058a:	fa1f f983 	uxth.w	r9, r3
 810058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8100592:	fb00 4413 	mls	r4, r0, r3, r4
 8100596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810059a:	fb03 fc0c 	mul.w	ip, r3, ip
 810059e:	45a4      	cmp	ip, r4
 81005a0:	d907      	bls.n	81005b2 <__udivmoddi4+0x1d2>
 81005a2:	193c      	adds	r4, r7, r4
 81005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 81005a8:	d267      	bcs.n	810067a <__udivmoddi4+0x29a>
 81005aa:	45a4      	cmp	ip, r4
 81005ac:	d965      	bls.n	810067a <__udivmoddi4+0x29a>
 81005ae:	3b02      	subs	r3, #2
 81005b0:	443c      	add	r4, r7
 81005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 81005b6:	fba0 9302 	umull	r9, r3, r0, r2
 81005ba:	eba4 040c 	sub.w	r4, r4, ip
 81005be:	429c      	cmp	r4, r3
 81005c0:	46ce      	mov	lr, r9
 81005c2:	469c      	mov	ip, r3
 81005c4:	d351      	bcc.n	810066a <__udivmoddi4+0x28a>
 81005c6:	d04e      	beq.n	8100666 <__udivmoddi4+0x286>
 81005c8:	b155      	cbz	r5, 81005e0 <__udivmoddi4+0x200>
 81005ca:	ebb8 030e 	subs.w	r3, r8, lr
 81005ce:	eb64 040c 	sbc.w	r4, r4, ip
 81005d2:	fa04 f606 	lsl.w	r6, r4, r6
 81005d6:	40cb      	lsrs	r3, r1
 81005d8:	431e      	orrs	r6, r3
 81005da:	40cc      	lsrs	r4, r1
 81005dc:	e9c5 6400 	strd	r6, r4, [r5]
 81005e0:	2100      	movs	r1, #0
 81005e2:	e750      	b.n	8100486 <__udivmoddi4+0xa6>
 81005e4:	f1c2 0320 	rsb	r3, r2, #32
 81005e8:	fa20 f103 	lsr.w	r1, r0, r3
 81005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 81005f0:	fa24 f303 	lsr.w	r3, r4, r3
 81005f4:	4094      	lsls	r4, r2
 81005f6:	430c      	orrs	r4, r1
 81005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8100600:	fa1f f78c 	uxth.w	r7, ip
 8100604:	fbb3 f0f8 	udiv	r0, r3, r8
 8100608:	fb08 3110 	mls	r1, r8, r0, r3
 810060c:	0c23      	lsrs	r3, r4, #16
 810060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100612:	fb00 f107 	mul.w	r1, r0, r7
 8100616:	4299      	cmp	r1, r3
 8100618:	d908      	bls.n	810062c <__udivmoddi4+0x24c>
 810061a:	eb1c 0303 	adds.w	r3, ip, r3
 810061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8100622:	d22c      	bcs.n	810067e <__udivmoddi4+0x29e>
 8100624:	4299      	cmp	r1, r3
 8100626:	d92a      	bls.n	810067e <__udivmoddi4+0x29e>
 8100628:	3802      	subs	r0, #2
 810062a:	4463      	add	r3, ip
 810062c:	1a5b      	subs	r3, r3, r1
 810062e:	b2a4      	uxth	r4, r4
 8100630:	fbb3 f1f8 	udiv	r1, r3, r8
 8100634:	fb08 3311 	mls	r3, r8, r1, r3
 8100638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 810063c:	fb01 f307 	mul.w	r3, r1, r7
 8100640:	42a3      	cmp	r3, r4
 8100642:	d908      	bls.n	8100656 <__udivmoddi4+0x276>
 8100644:	eb1c 0404 	adds.w	r4, ip, r4
 8100648:	f101 36ff 	add.w	r6, r1, #4294967295
 810064c:	d213      	bcs.n	8100676 <__udivmoddi4+0x296>
 810064e:	42a3      	cmp	r3, r4
 8100650:	d911      	bls.n	8100676 <__udivmoddi4+0x296>
 8100652:	3902      	subs	r1, #2
 8100654:	4464      	add	r4, ip
 8100656:	1ae4      	subs	r4, r4, r3
 8100658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810065c:	e739      	b.n	81004d2 <__udivmoddi4+0xf2>
 810065e:	4604      	mov	r4, r0
 8100660:	e6f0      	b.n	8100444 <__udivmoddi4+0x64>
 8100662:	4608      	mov	r0, r1
 8100664:	e706      	b.n	8100474 <__udivmoddi4+0x94>
 8100666:	45c8      	cmp	r8, r9
 8100668:	d2ae      	bcs.n	81005c8 <__udivmoddi4+0x1e8>
 810066a:	ebb9 0e02 	subs.w	lr, r9, r2
 810066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8100672:	3801      	subs	r0, #1
 8100674:	e7a8      	b.n	81005c8 <__udivmoddi4+0x1e8>
 8100676:	4631      	mov	r1, r6
 8100678:	e7ed      	b.n	8100656 <__udivmoddi4+0x276>
 810067a:	4603      	mov	r3, r0
 810067c:	e799      	b.n	81005b2 <__udivmoddi4+0x1d2>
 810067e:	4630      	mov	r0, r6
 8100680:	e7d4      	b.n	810062c <__udivmoddi4+0x24c>
 8100682:	46d6      	mov	lr, sl
 8100684:	e77f      	b.n	8100586 <__udivmoddi4+0x1a6>
 8100686:	4463      	add	r3, ip
 8100688:	3802      	subs	r0, #2
 810068a:	e74d      	b.n	8100528 <__udivmoddi4+0x148>
 810068c:	4606      	mov	r6, r0
 810068e:	4623      	mov	r3, r4
 8100690:	4608      	mov	r0, r1
 8100692:	e70f      	b.n	81004b4 <__udivmoddi4+0xd4>
 8100694:	3e02      	subs	r6, #2
 8100696:	4463      	add	r3, ip
 8100698:	e730      	b.n	81004fc <__udivmoddi4+0x11c>
 810069a:	bf00      	nop

0810069c <__aeabi_idiv0>:
 810069c:	4770      	bx	lr
 810069e:	bf00      	nop

081006a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81006a0:	b480      	push	{r7}
 81006a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81006a4:	4b09      	ldr	r3, [pc, #36]	@ (81006cc <SystemInit+0x2c>)
 81006a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81006aa:	4a08      	ldr	r2, [pc, #32]	@ (81006cc <SystemInit+0x2c>)
 81006ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81006b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81006b4:	4b05      	ldr	r3, [pc, #20]	@ (81006cc <SystemInit+0x2c>)
 81006b6:	691b      	ldr	r3, [r3, #16]
 81006b8:	4a04      	ldr	r2, [pc, #16]	@ (81006cc <SystemInit+0x2c>)
 81006ba:	f043 0310 	orr.w	r3, r3, #16
 81006be:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81006c0:	bf00      	nop
 81006c2:	46bd      	mov	sp, r7
 81006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006c8:	4770      	bx	lr
 81006ca:	bf00      	nop
 81006cc:	e000ed00 	.word	0xe000ed00

081006d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 81006d0:	b580      	push	{r7, lr}
 81006d2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of txSem */
  txSemHandle = osSemaphoreNew(1, 1, &txSem_attributes);
 81006d4:	4a0c      	ldr	r2, [pc, #48]	@ (8100708 <MX_FREERTOS_Init+0x38>)
 81006d6:	2101      	movs	r1, #1
 81006d8:	2001      	movs	r0, #1
 81006da:	f004 fdfd 	bl	81052d8 <osSemaphoreNew>
 81006de:	4603      	mov	r3, r0
 81006e0:	4a0a      	ldr	r2, [pc, #40]	@ (810070c <MX_FREERTOS_Init+0x3c>)
 81006e2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RX_Task */
  RX_TaskHandle = osThreadNew(StartRX_Task, NULL, &RX_Task_attributes);
 81006e4:	4a0a      	ldr	r2, [pc, #40]	@ (8100710 <MX_FREERTOS_Init+0x40>)
 81006e6:	2100      	movs	r1, #0
 81006e8:	480a      	ldr	r0, [pc, #40]	@ (8100714 <MX_FREERTOS_Init+0x44>)
 81006ea:	f004 fd1b 	bl	8105124 <osThreadNew>
 81006ee:	4603      	mov	r3, r0
 81006f0:	4a09      	ldr	r2, [pc, #36]	@ (8100718 <MX_FREERTOS_Init+0x48>)
 81006f2:	6013      	str	r3, [r2, #0]

  /* creation of TX_Task */
  TX_TaskHandle = osThreadNew(Start_TX_Task, NULL, &TX_Task_attributes);
 81006f4:	4a09      	ldr	r2, [pc, #36]	@ (810071c <MX_FREERTOS_Init+0x4c>)
 81006f6:	2100      	movs	r1, #0
 81006f8:	4809      	ldr	r0, [pc, #36]	@ (8100720 <MX_FREERTOS_Init+0x50>)
 81006fa:	f004 fd13 	bl	8105124 <osThreadNew>
 81006fe:	4603      	mov	r3, r0
 8100700:	4a08      	ldr	r2, [pc, #32]	@ (8100724 <MX_FREERTOS_Init+0x54>)
 8100702:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8100704:	bf00      	nop
 8100706:	bd80      	pop	{r7, pc}
 8100708:	0810c6ec 	.word	0x0810c6ec
 810070c:	10000184 	.word	0x10000184
 8100710:	0810c6a4 	.word	0x0810c6a4
 8100714:	08100729 	.word	0x08100729
 8100718:	1000017c 	.word	0x1000017c
 810071c:	0810c6c8 	.word	0x0810c6c8
 8100720:	081007ed 	.word	0x081007ed
 8100724:	10000180 	.word	0x10000180

08100728 <StartRX_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRX_Task */
void StartRX_Task(void *argument)
{
 8100728:	b580      	push	{r7, lr}
 810072a:	b086      	sub	sp, #24
 810072c:	af02      	add	r7, sp, #8
 810072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRX_Task */

	  int32_t status = 0;
 8100730:	2300      	movs	r3, #0
 8100732:	60bb      	str	r3, [r7, #8]

	  MAILBOX_Init();
 8100734:	f00a fa9c 	bl	810ac70 <MAILBOX_Init>

	  if (MX_OPENAMP_Init(RPMSG_REMOTE, NULL) != HAL_OK) {
 8100738:	2100      	movs	r1, #0
 810073a:	2001      	movs	r0, #1
 810073c:	f00a fb9a 	bl	810ae74 <MX_OPENAMP_Init>
 8100740:	4603      	mov	r3, r0
 8100742:	2b00      	cmp	r3, #0
 8100744:	d001      	beq.n	810074a <StartRX_Task+0x22>
		  Error_Handler();
 8100746:	f000 f941 	bl	81009cc <Error_Handler>
	  }

	  status = OPENAMP_create_endpoint (&rp_endpoint, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY, rpmsg_recv_callback, NULL);
 810074a:	2300      	movs	r3, #0
 810074c:	9300      	str	r3, [sp, #0]
 810074e:	4b1f      	ldr	r3, [pc, #124]	@ (81007cc <StartRX_Task+0xa4>)
 8100750:	f04f 32ff 	mov.w	r2, #4294967295
 8100754:	491e      	ldr	r1, [pc, #120]	@ (81007d0 <StartRX_Task+0xa8>)
 8100756:	481f      	ldr	r0, [pc, #124]	@ (81007d4 <StartRX_Task+0xac>)
 8100758:	f00a fc2e 	bl	810afb8 <OPENAMP_create_endpoint>
 810075c:	60b8      	str	r0, [r7, #8]
	  if (status < 0) {
 810075e:	68bb      	ldr	r3, [r7, #8]
 8100760:	2b00      	cmp	r3, #0
 8100762:	da01      	bge.n	8100768 <StartRX_Task+0x40>
		  Error_Handler();
 8100764:	f000 f932 	bl	81009cc <Error_Handler>
	  }

	  if (osSemaphoreAcquire(txSemHandle, osWaitForever) != osOK) {
 8100768:	4b1b      	ldr	r3, [pc, #108]	@ (81007d8 <StartRX_Task+0xb0>)
 810076a:	681b      	ldr	r3, [r3, #0]
 810076c:	f04f 31ff 	mov.w	r1, #4294967295
 8100770:	4618      	mov	r0, r3
 8100772:	f004 fe3b 	bl	81053ec <osSemaphoreAcquire>
 8100776:	4603      	mov	r3, r0
 8100778:	2b00      	cmp	r3, #0
 810077a:	d001      	beq.n	8100780 <StartRX_Task+0x58>
		  Error_Handler();
 810077c:	f000 f926 	bl	81009cc <Error_Handler>
	  }

  /* Infinite loop */
  for(;;)
  {
	  OPENAMP_check_for_message();
 8100780:	f00a fc38 	bl	810aff4 <OPENAMP_check_for_message>

	  if (received_data == 10) {
 8100784:	4b15      	ldr	r3, [pc, #84]	@ (81007dc <StartRX_Task+0xb4>)
 8100786:	681b      	ldr	r3, [r3, #0]
 8100788:	2b0a      	cmp	r3, #10
 810078a:	d11b      	bne.n	81007c4 <StartRX_Task+0x9c>
		  OPENAMP_DeInit();
 810078c:	f00a fc08 	bl	810afa0 <OPENAMP_DeInit>

		  osThreadTerminate(TX_TaskHandle);
 8100790:	4b13      	ldr	r3, [pc, #76]	@ (81007e0 <StartRX_Task+0xb8>)
 8100792:	681b      	ldr	r3, [r3, #0]
 8100794:	4618      	mov	r0, r3
 8100796:	f004 fd57 	bl	8105248 <osThreadTerminate>

		  for (uint8_t i = 0; i < 10; i++) {
 810079a:	2300      	movs	r3, #0
 810079c:	73fb      	strb	r3, [r7, #15]
 810079e:	e009      	b.n	81007b4 <StartRX_Task+0x8c>
			  HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 81007a0:	2102      	movs	r1, #2
 81007a2:	4810      	ldr	r0, [pc, #64]	@ (81007e4 <StartRX_Task+0xbc>)
 81007a4:	f000 feb7 	bl	8101516 <HAL_GPIO_TogglePin>
			  osDelay(100);
 81007a8:	2064      	movs	r0, #100	@ 0x64
 81007aa:	f004 fd7a 	bl	81052a2 <osDelay>
		  for (uint8_t i = 0; i < 10; i++) {
 81007ae:	7bfb      	ldrb	r3, [r7, #15]
 81007b0:	3301      	adds	r3, #1
 81007b2:	73fb      	strb	r3, [r7, #15]
 81007b4:	7bfb      	ldrb	r3, [r7, #15]
 81007b6:	2b09      	cmp	r3, #9
 81007b8:	d9f2      	bls.n	81007a0 <StartRX_Task+0x78>
		  }

		  osThreadTerminate(RX_TaskHandle);
 81007ba:	4b0b      	ldr	r3, [pc, #44]	@ (81007e8 <StartRX_Task+0xc0>)
 81007bc:	681b      	ldr	r3, [r3, #0]
 81007be:	4618      	mov	r0, r3
 81007c0:	f004 fd42 	bl	8105248 <osThreadTerminate>
	  }

	  osDelay(10);
 81007c4:	200a      	movs	r0, #10
 81007c6:	f004 fd6c 	bl	81052a2 <osDelay>
	  OPENAMP_check_for_message();
 81007ca:	e7d9      	b.n	8100780 <StartRX_Task+0x58>
 81007cc:	08100855 	.word	0x08100855
 81007d0:	0810c464 	.word	0x0810c464
 81007d4:	1000013c 	.word	0x1000013c
 81007d8:	10000184 	.word	0x10000184
 81007dc:	10000134 	.word	0x10000134
 81007e0:	10000180 	.word	0x10000180
 81007e4:	58021000 	.word	0x58021000
 81007e8:	1000017c 	.word	0x1000017c

081007ec <Start_TX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_TX_Task */
void Start_TX_Task(void *argument)
{
 81007ec:	b580      	push	{r7, lr}
 81007ee:	b084      	sub	sp, #16
 81007f0:	af00      	add	r7, sp, #0
 81007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_TX_Task */
  /* Infinite loop */
  for(;;)
  {

		if (osSemaphoreAcquire(txSemHandle, osWaitForever) != osOK) {
 81007f4:	4b13      	ldr	r3, [pc, #76]	@ (8100844 <Start_TX_Task+0x58>)
 81007f6:	681b      	ldr	r3, [r3, #0]
 81007f8:	f04f 31ff 	mov.w	r1, #4294967295
 81007fc:	4618      	mov	r0, r3
 81007fe:	f004 fdf5 	bl	81053ec <osSemaphoreAcquire>
 8100802:	4603      	mov	r3, r0
 8100804:	2b00      	cmp	r3, #0
 8100806:	d001      	beq.n	810080c <Start_TX_Task+0x20>
		  Error_Handler();
 8100808:	f000 f8e0 	bl	81009cc <Error_Handler>
		}

		char *data =  pvPortMalloc(100);
 810080c:	2064      	movs	r0, #100	@ 0x64
 810080e:	f004 feb7 	bl	8105580 <pvPortMalloc>
 8100812:	60f8      	str	r0, [r7, #12]
//		sprintf (data, "%u\n\r", received_data);
		sprintf (data, "%s\n\r", received_data_str);
 8100814:	4b0c      	ldr	r3, [pc, #48]	@ (8100848 <Start_TX_Task+0x5c>)
 8100816:	681b      	ldr	r3, [r3, #0]
 8100818:	461a      	mov	r2, r3
 810081a:	490c      	ldr	r1, [pc, #48]	@ (810084c <Start_TX_Task+0x60>)
 810081c:	68f8      	ldr	r0, [r7, #12]
 810081e:	f00a fdc1 	bl	810b3a4 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *) data, strlen(data), 100);
 8100822:	68f8      	ldr	r0, [r7, #12]
 8100824:	f7ff fd66 	bl	81002f4 <strlen>
 8100828:	4603      	mov	r3, r0
 810082a:	b29a      	uxth	r2, r3
 810082c:	2364      	movs	r3, #100	@ 0x64
 810082e:	68f9      	ldr	r1, [r7, #12]
 8100830:	4807      	ldr	r0, [pc, #28]	@ (8100850 <Start_TX_Task+0x64>)
 8100832:	f003 fad1 	bl	8103dd8 <HAL_UART_Transmit>
		vPortFree(data);
 8100836:	68f8      	ldr	r0, [r7, #12]
 8100838:	f004 ff70 	bl	810571c <vPortFree>

		osDelay(1);
 810083c:	2001      	movs	r0, #1
 810083e:	f004 fd30 	bl	81052a2 <osDelay>
  {
 8100842:	e7d7      	b.n	81007f4 <Start_TX_Task+0x8>
 8100844:	10000184 	.word	0x10000184
 8100848:	10000138 	.word	0x10000138
 810084c:	0810c474 	.word	0x0810c474
 8100850:	100001d8 	.word	0x100001d8

08100854 <rpmsg_recv_callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

static int rpmsg_recv_callback (struct rpmsg_endpoint *ept, void *data, size_t len, uint32_t src, void *priv) {
 8100854:	b580      	push	{r7, lr}
 8100856:	b084      	sub	sp, #16
 8100858:	af00      	add	r7, sp, #0
 810085a:	60f8      	str	r0, [r7, #12]
 810085c:	60b9      	str	r1, [r7, #8]
 810085e:	607a      	str	r2, [r7, #4]
 8100860:	603b      	str	r3, [r7, #0]
//	received_data = *((unsigned int *) data);
	received_data_str = (char *) data;
 8100862:	4a09      	ldr	r2, [pc, #36]	@ (8100888 <rpmsg_recv_callback+0x34>)
 8100864:	68bb      	ldr	r3, [r7, #8]
 8100866:	6013      	str	r3, [r2, #0]

	if (osSemaphoreRelease(txSemHandle) != osOK) {
 8100868:	4b08      	ldr	r3, [pc, #32]	@ (810088c <rpmsg_recv_callback+0x38>)
 810086a:	681b      	ldr	r3, [r3, #0]
 810086c:	4618      	mov	r0, r3
 810086e:	f004 fe0f 	bl	8105490 <osSemaphoreRelease>
 8100872:	4603      	mov	r3, r0
 8100874:	2b00      	cmp	r3, #0
 8100876:	d001      	beq.n	810087c <rpmsg_recv_callback+0x28>
	  Error_Handler();
 8100878:	f000 f8a8 	bl	81009cc <Error_Handler>
	}

	return 0;
 810087c:	2300      	movs	r3, #0
}
 810087e:	4618      	mov	r0, r3
 8100880:	3710      	adds	r7, #16
 8100882:	46bd      	mov	sp, r7
 8100884:	bd80      	pop	{r7, pc}
 8100886:	bf00      	nop
 8100888:	10000138 	.word	0x10000138
 810088c:	10000184 	.word	0x10000184

08100890 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100890:	b580      	push	{r7, lr}
 8100892:	b088      	sub	sp, #32
 8100894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100896:	f107 030c 	add.w	r3, r7, #12
 810089a:	2200      	movs	r2, #0
 810089c:	601a      	str	r2, [r3, #0]
 810089e:	605a      	str	r2, [r3, #4]
 81008a0:	609a      	str	r2, [r3, #8]
 81008a2:	60da      	str	r2, [r3, #12]
 81008a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8100910 <MX_GPIO_Init+0x80>)
 81008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008ac:	4a18      	ldr	r2, [pc, #96]	@ (8100910 <MX_GPIO_Init+0x80>)
 81008ae:	f043 0308 	orr.w	r3, r3, #8
 81008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008b6:	4b16      	ldr	r3, [pc, #88]	@ (8100910 <MX_GPIO_Init+0x80>)
 81008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008bc:	f003 0308 	and.w	r3, r3, #8
 81008c0:	60bb      	str	r3, [r7, #8]
 81008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81008c4:	4b12      	ldr	r3, [pc, #72]	@ (8100910 <MX_GPIO_Init+0x80>)
 81008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008ca:	4a11      	ldr	r2, [pc, #68]	@ (8100910 <MX_GPIO_Init+0x80>)
 81008cc:	f043 0310 	orr.w	r3, r3, #16
 81008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008d4:	4b0e      	ldr	r3, [pc, #56]	@ (8100910 <MX_GPIO_Init+0x80>)
 81008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008da:	f003 0310 	and.w	r3, r3, #16
 81008de:	607b      	str	r3, [r7, #4]
 81008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 81008e2:	2200      	movs	r2, #0
 81008e4:	2102      	movs	r1, #2
 81008e6:	480b      	ldr	r0, [pc, #44]	@ (8100914 <MX_GPIO_Init+0x84>)
 81008e8:	f000 fdfc 	bl	81014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 81008ec:	2302      	movs	r3, #2
 81008ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81008f0:	2301      	movs	r3, #1
 81008f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008f4:	2300      	movs	r3, #0
 81008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81008f8:	2300      	movs	r3, #0
 81008fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 81008fc:	f107 030c 	add.w	r3, r7, #12
 8100900:	4619      	mov	r1, r3
 8100902:	4804      	ldr	r0, [pc, #16]	@ (8100914 <MX_GPIO_Init+0x84>)
 8100904:	f000 fc3e 	bl	8101184 <HAL_GPIO_Init>

}
 8100908:	bf00      	nop
 810090a:	3720      	adds	r7, #32
 810090c:	46bd      	mov	sp, r7
 810090e:	bd80      	pop	{r7, pc}
 8100910:	58024400 	.word	0x58024400
 8100914:	58021000 	.word	0x58021000

08100918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100918:	b580      	push	{r7, lr}
 810091a:	b082      	sub	sp, #8
 810091c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810091e:	4b1f      	ldr	r3, [pc, #124]	@ (810099c <main+0x84>)
 8100920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100924:	4a1d      	ldr	r2, [pc, #116]	@ (810099c <main+0x84>)
 8100926:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810092a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810092e:	4b1b      	ldr	r3, [pc, #108]	@ (810099c <main+0x84>)
 8100930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100938:	607b      	str	r3, [r7, #4]
 810093a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810093c:	2001      	movs	r0, #1
 810093e:	f000 fe33 	bl	81015a8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100942:	f000 fed7 	bl	81016f4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100946:	2201      	movs	r2, #1
 8100948:	2102      	movs	r1, #2
 810094a:	2000      	movs	r0, #0
 810094c:	f000 fe58 	bl	8101600 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100950:	4b13      	ldr	r3, [pc, #76]	@ (81009a0 <main+0x88>)
 8100952:	681b      	ldr	r3, [r3, #0]
 8100954:	091b      	lsrs	r3, r3, #4
 8100956:	f003 030f 	and.w	r3, r3, #15
 810095a:	2b07      	cmp	r3, #7
 810095c:	d108      	bne.n	8100970 <main+0x58>
 810095e:	4b11      	ldr	r3, [pc, #68]	@ (81009a4 <main+0x8c>)
 8100960:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100964:	4a0f      	ldr	r2, [pc, #60]	@ (81009a4 <main+0x8c>)
 8100966:	f043 0301 	orr.w	r3, r3, #1
 810096a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810096e:	e007      	b.n	8100980 <main+0x68>
 8100970:	4b0c      	ldr	r3, [pc, #48]	@ (81009a4 <main+0x8c>)
 8100972:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100976:	4a0b      	ldr	r2, [pc, #44]	@ (81009a4 <main+0x8c>)
 8100978:	f043 0301 	orr.w	r3, r3, #1
 810097c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100980:	f000 fa8e 	bl	8100ea0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100984:	f7ff ff84 	bl	8100890 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8100988:	f000 f9aa 	bl	8100ce0 <MX_USART3_UART_Init>
//  OPENAMP_DeInit();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 810098c:	f004 fb80 	bl	8105090 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8100990:	f7ff fe9e 	bl	81006d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8100994:	f004 fba0 	bl	81050d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100998:	bf00      	nop
 810099a:	e7fd      	b.n	8100998 <main+0x80>
 810099c:	58024400 	.word	0x58024400
 81009a0:	e000ed00 	.word	0xe000ed00
 81009a4:	58026400 	.word	0x58026400

081009a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81009a8:	b580      	push	{r7, lr}
 81009aa:	b082      	sub	sp, #8
 81009ac:	af00      	add	r7, sp, #0
 81009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 81009b0:	687b      	ldr	r3, [r7, #4]
 81009b2:	681b      	ldr	r3, [r3, #0]
 81009b4:	4a04      	ldr	r2, [pc, #16]	@ (81009c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 81009b6:	4293      	cmp	r3, r2
 81009b8:	d101      	bne.n	81009be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 81009ba:	f000 facf 	bl	8100f5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81009be:	bf00      	nop
 81009c0:	3708      	adds	r7, #8
 81009c2:	46bd      	mov	sp, r7
 81009c4:	bd80      	pop	{r7, pc}
 81009c6:	bf00      	nop
 81009c8:	40001400 	.word	0x40001400

081009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81009cc:	b480      	push	{r7}
 81009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81009d0:	b672      	cpsid	i
}
 81009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81009d4:	bf00      	nop
 81009d6:	e7fd      	b.n	81009d4 <Error_Handler+0x8>

081009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81009d8:	b580      	push	{r7, lr}
 81009da:	b082      	sub	sp, #8
 81009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81009de:	4b10      	ldr	r3, [pc, #64]	@ (8100a20 <HAL_MspInit+0x48>)
 81009e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81009e4:	4a0e      	ldr	r2, [pc, #56]	@ (8100a20 <HAL_MspInit+0x48>)
 81009e6:	f043 0302 	orr.w	r3, r3, #2
 81009ea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8100a20 <HAL_MspInit+0x48>)
 81009f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81009f4:	f003 0302 	and.w	r3, r3, #2
 81009f8:	607b      	str	r3, [r7, #4]
 81009fa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 81009fc:	2200      	movs	r2, #0
 81009fe:	210f      	movs	r1, #15
 8100a00:	f06f 0001 	mvn.w	r0, #1
 8100a04:	f000 fb82 	bl	810110c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8100a08:	2200      	movs	r2, #0
 8100a0a:	2105      	movs	r1, #5
 8100a0c:	207e      	movs	r0, #126	@ 0x7e
 8100a0e:	f000 fb7d 	bl	810110c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100a12:	207e      	movs	r0, #126	@ 0x7e
 8100a14:	f000 fb94 	bl	8101140 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100a18:	bf00      	nop
 8100a1a:	3708      	adds	r7, #8
 8100a1c:	46bd      	mov	sp, r7
 8100a1e:	bd80      	pop	{r7, pc}
 8100a20:	58024400 	.word	0x58024400

08100a24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100a24:	b580      	push	{r7, lr}
 8100a26:	b090      	sub	sp, #64	@ 0x40
 8100a28:	af00      	add	r7, sp, #0
 8100a2a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100a2c:	687b      	ldr	r3, [r7, #4]
 8100a2e:	2b0f      	cmp	r3, #15
 8100a30:	d827      	bhi.n	8100a82 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8100a32:	2200      	movs	r2, #0
 8100a34:	6879      	ldr	r1, [r7, #4]
 8100a36:	2037      	movs	r0, #55	@ 0x37
 8100a38:	f000 fb68 	bl	810110c <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8100a3c:	2037      	movs	r0, #55	@ 0x37
 8100a3e:	f000 fb7f 	bl	8101140 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8100a42:	4a29      	ldr	r2, [pc, #164]	@ (8100ae8 <HAL_InitTick+0xc4>)
 8100a44:	687b      	ldr	r3, [r7, #4]
 8100a46:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8100a48:	4b28      	ldr	r3, [pc, #160]	@ (8100aec <HAL_InitTick+0xc8>)
 8100a4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100a4e:	4a27      	ldr	r2, [pc, #156]	@ (8100aec <HAL_InitTick+0xc8>)
 8100a50:	f043 0320 	orr.w	r3, r3, #32
 8100a54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100a58:	4b24      	ldr	r3, [pc, #144]	@ (8100aec <HAL_InitTick+0xc8>)
 8100a5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100a5e:	f003 0320 	and.w	r3, r3, #32
 8100a62:	60fb      	str	r3, [r7, #12]
 8100a64:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100a66:	f107 0210 	add.w	r2, r7, #16
 8100a6a:	f107 0314 	add.w	r3, r7, #20
 8100a6e:	4611      	mov	r1, r2
 8100a70:	4618      	mov	r0, r3
 8100a72:	f001 f825 	bl	8101ac0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8100a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100a78:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8100a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8100a7c:	2b00      	cmp	r3, #0
 8100a7e:	d106      	bne.n	8100a8e <HAL_InitTick+0x6a>
 8100a80:	e001      	b.n	8100a86 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8100a82:	2301      	movs	r3, #1
 8100a84:	e02b      	b.n	8100ade <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8100a86:	f000 ffef 	bl	8101a68 <HAL_RCC_GetPCLK1Freq>
 8100a8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8100a8c:	e004      	b.n	8100a98 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100a8e:	f000 ffeb 	bl	8101a68 <HAL_RCC_GetPCLK1Freq>
 8100a92:	4603      	mov	r3, r0
 8100a94:	005b      	lsls	r3, r3, #1
 8100a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8100a9a:	4a15      	ldr	r2, [pc, #84]	@ (8100af0 <HAL_InitTick+0xcc>)
 8100a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8100aa0:	0c9b      	lsrs	r3, r3, #18
 8100aa2:	3b01      	subs	r3, #1
 8100aa4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8100aa6:	4b13      	ldr	r3, [pc, #76]	@ (8100af4 <HAL_InitTick+0xd0>)
 8100aa8:	4a13      	ldr	r2, [pc, #76]	@ (8100af8 <HAL_InitTick+0xd4>)
 8100aaa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8100aac:	4b11      	ldr	r3, [pc, #68]	@ (8100af4 <HAL_InitTick+0xd0>)
 8100aae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8100ab2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8100ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8100af4 <HAL_InitTick+0xd0>)
 8100ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8100ab8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8100aba:	4b0e      	ldr	r3, [pc, #56]	@ (8100af4 <HAL_InitTick+0xd0>)
 8100abc:	2200      	movs	r2, #0
 8100abe:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8100af4 <HAL_InitTick+0xd0>)
 8100ac2:	2200      	movs	r2, #0
 8100ac4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8100ac6:	480b      	ldr	r0, [pc, #44]	@ (8100af4 <HAL_InitTick+0xd0>)
 8100ac8:	f002 fe68 	bl	810379c <HAL_TIM_Base_Init>
 8100acc:	4603      	mov	r3, r0
 8100ace:	2b00      	cmp	r3, #0
 8100ad0:	d104      	bne.n	8100adc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8100ad2:	4808      	ldr	r0, [pc, #32]	@ (8100af4 <HAL_InitTick+0xd0>)
 8100ad4:	f002 fec4 	bl	8103860 <HAL_TIM_Base_Start_IT>
 8100ad8:	4603      	mov	r3, r0
 8100ada:	e000      	b.n	8100ade <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8100adc:	2301      	movs	r3, #1
}
 8100ade:	4618      	mov	r0, r3
 8100ae0:	3740      	adds	r7, #64	@ 0x40
 8100ae2:	46bd      	mov	sp, r7
 8100ae4:	bd80      	pop	{r7, pc}
 8100ae6:	bf00      	nop
 8100ae8:	10000008 	.word	0x10000008
 8100aec:	58024400 	.word	0x58024400
 8100af0:	431bde83 	.word	0x431bde83
 8100af4:	10000188 	.word	0x10000188
 8100af8:	40001400 	.word	0x40001400

08100afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100afc:	b480      	push	{r7}
 8100afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100b00:	bf00      	nop
 8100b02:	e7fd      	b.n	8100b00 <NMI_Handler+0x4>

08100b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100b04:	b480      	push	{r7}
 8100b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100b08:	bf00      	nop
 8100b0a:	e7fd      	b.n	8100b08 <HardFault_Handler+0x4>

08100b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100b0c:	b480      	push	{r7}
 8100b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100b10:	bf00      	nop
 8100b12:	e7fd      	b.n	8100b10 <MemManage_Handler+0x4>

08100b14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100b14:	b480      	push	{r7}
 8100b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100b18:	bf00      	nop
 8100b1a:	e7fd      	b.n	8100b18 <BusFault_Handler+0x4>

08100b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100b1c:	b480      	push	{r7}
 8100b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100b20:	bf00      	nop
 8100b22:	e7fd      	b.n	8100b20 <UsageFault_Handler+0x4>

08100b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100b24:	b480      	push	{r7}
 8100b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100b28:	bf00      	nop
 8100b2a:	46bd      	mov	sp, r7
 8100b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b30:	4770      	bx	lr
	...

08100b34 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8100b34:	b580      	push	{r7, lr}
 8100b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8100b38:	4802      	ldr	r0, [pc, #8]	@ (8100b44 <TIM7_IRQHandler+0x10>)
 8100b3a:	f002 ff09 	bl	8103950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8100b3e:	bf00      	nop
 8100b40:	bd80      	pop	{r7, pc}
 8100b42:	bf00      	nop
 8100b44:	10000188 	.word	0x10000188

08100b48 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100b48:	b580      	push	{r7, lr}
 8100b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100b4c:	f000 fd3e 	bl	81015cc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100b50:	bf00      	nop
 8100b52:	bd80      	pop	{r7, pc}

08100b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8100b54:	b480      	push	{r7}
 8100b56:	af00      	add	r7, sp, #0
  return 1;
 8100b58:	2301      	movs	r3, #1
}
 8100b5a:	4618      	mov	r0, r3
 8100b5c:	46bd      	mov	sp, r7
 8100b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b62:	4770      	bx	lr

08100b64 <_kill>:

int _kill(int pid, int sig)
{
 8100b64:	b580      	push	{r7, lr}
 8100b66:	b082      	sub	sp, #8
 8100b68:	af00      	add	r7, sp, #0
 8100b6a:	6078      	str	r0, [r7, #4]
 8100b6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8100b6e:	f00a fd55 	bl	810b61c <__errno>
 8100b72:	4603      	mov	r3, r0
 8100b74:	2216      	movs	r2, #22
 8100b76:	601a      	str	r2, [r3, #0]
  return -1;
 8100b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100b7c:	4618      	mov	r0, r3
 8100b7e:	3708      	adds	r7, #8
 8100b80:	46bd      	mov	sp, r7
 8100b82:	bd80      	pop	{r7, pc}

08100b84 <_exit>:

void _exit (int status)
{
 8100b84:	b580      	push	{r7, lr}
 8100b86:	b082      	sub	sp, #8
 8100b88:	af00      	add	r7, sp, #0
 8100b8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8100b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8100b90:	6878      	ldr	r0, [r7, #4]
 8100b92:	f7ff ffe7 	bl	8100b64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8100b96:	bf00      	nop
 8100b98:	e7fd      	b.n	8100b96 <_exit+0x12>

08100b9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8100b9a:	b580      	push	{r7, lr}
 8100b9c:	b086      	sub	sp, #24
 8100b9e:	af00      	add	r7, sp, #0
 8100ba0:	60f8      	str	r0, [r7, #12]
 8100ba2:	60b9      	str	r1, [r7, #8]
 8100ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100ba6:	2300      	movs	r3, #0
 8100ba8:	617b      	str	r3, [r7, #20]
 8100baa:	e00a      	b.n	8100bc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8100bac:	f3af 8000 	nop.w
 8100bb0:	4601      	mov	r1, r0
 8100bb2:	68bb      	ldr	r3, [r7, #8]
 8100bb4:	1c5a      	adds	r2, r3, #1
 8100bb6:	60ba      	str	r2, [r7, #8]
 8100bb8:	b2ca      	uxtb	r2, r1
 8100bba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100bbc:	697b      	ldr	r3, [r7, #20]
 8100bbe:	3301      	adds	r3, #1
 8100bc0:	617b      	str	r3, [r7, #20]
 8100bc2:	697a      	ldr	r2, [r7, #20]
 8100bc4:	687b      	ldr	r3, [r7, #4]
 8100bc6:	429a      	cmp	r2, r3
 8100bc8:	dbf0      	blt.n	8100bac <_read+0x12>
  }

  return len;
 8100bca:	687b      	ldr	r3, [r7, #4]
}
 8100bcc:	4618      	mov	r0, r3
 8100bce:	3718      	adds	r7, #24
 8100bd0:	46bd      	mov	sp, r7
 8100bd2:	bd80      	pop	{r7, pc}

08100bd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100bd4:	b580      	push	{r7, lr}
 8100bd6:	b086      	sub	sp, #24
 8100bd8:	af00      	add	r7, sp, #0
 8100bda:	60f8      	str	r0, [r7, #12]
 8100bdc:	60b9      	str	r1, [r7, #8]
 8100bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100be0:	2300      	movs	r3, #0
 8100be2:	617b      	str	r3, [r7, #20]
 8100be4:	e009      	b.n	8100bfa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8100be6:	68bb      	ldr	r3, [r7, #8]
 8100be8:	1c5a      	adds	r2, r3, #1
 8100bea:	60ba      	str	r2, [r7, #8]
 8100bec:	781b      	ldrb	r3, [r3, #0]
 8100bee:	4618      	mov	r0, r3
 8100bf0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100bf4:	697b      	ldr	r3, [r7, #20]
 8100bf6:	3301      	adds	r3, #1
 8100bf8:	617b      	str	r3, [r7, #20]
 8100bfa:	697a      	ldr	r2, [r7, #20]
 8100bfc:	687b      	ldr	r3, [r7, #4]
 8100bfe:	429a      	cmp	r2, r3
 8100c00:	dbf1      	blt.n	8100be6 <_write+0x12>
  }
  return len;
 8100c02:	687b      	ldr	r3, [r7, #4]
}
 8100c04:	4618      	mov	r0, r3
 8100c06:	3718      	adds	r7, #24
 8100c08:	46bd      	mov	sp, r7
 8100c0a:	bd80      	pop	{r7, pc}

08100c0c <_close>:

int _close(int file)
{
 8100c0c:	b480      	push	{r7}
 8100c0e:	b083      	sub	sp, #12
 8100c10:	af00      	add	r7, sp, #0
 8100c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8100c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100c18:	4618      	mov	r0, r3
 8100c1a:	370c      	adds	r7, #12
 8100c1c:	46bd      	mov	sp, r7
 8100c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c22:	4770      	bx	lr

08100c24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8100c24:	b480      	push	{r7}
 8100c26:	b083      	sub	sp, #12
 8100c28:	af00      	add	r7, sp, #0
 8100c2a:	6078      	str	r0, [r7, #4]
 8100c2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8100c2e:	683b      	ldr	r3, [r7, #0]
 8100c30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8100c34:	605a      	str	r2, [r3, #4]
  return 0;
 8100c36:	2300      	movs	r3, #0
}
 8100c38:	4618      	mov	r0, r3
 8100c3a:	370c      	adds	r7, #12
 8100c3c:	46bd      	mov	sp, r7
 8100c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c42:	4770      	bx	lr

08100c44 <_isatty>:

int _isatty(int file)
{
 8100c44:	b480      	push	{r7}
 8100c46:	b083      	sub	sp, #12
 8100c48:	af00      	add	r7, sp, #0
 8100c4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8100c4c:	2301      	movs	r3, #1
}
 8100c4e:	4618      	mov	r0, r3
 8100c50:	370c      	adds	r7, #12
 8100c52:	46bd      	mov	sp, r7
 8100c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c58:	4770      	bx	lr

08100c5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100c5a:	b480      	push	{r7}
 8100c5c:	b085      	sub	sp, #20
 8100c5e:	af00      	add	r7, sp, #0
 8100c60:	60f8      	str	r0, [r7, #12]
 8100c62:	60b9      	str	r1, [r7, #8]
 8100c64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8100c66:	2300      	movs	r3, #0
}
 8100c68:	4618      	mov	r0, r3
 8100c6a:	3714      	adds	r7, #20
 8100c6c:	46bd      	mov	sp, r7
 8100c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c72:	4770      	bx	lr

08100c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100c74:	b580      	push	{r7, lr}
 8100c76:	b086      	sub	sp, #24
 8100c78:	af00      	add	r7, sp, #0
 8100c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100c7c:	4a14      	ldr	r2, [pc, #80]	@ (8100cd0 <_sbrk+0x5c>)
 8100c7e:	4b15      	ldr	r3, [pc, #84]	@ (8100cd4 <_sbrk+0x60>)
 8100c80:	1ad3      	subs	r3, r2, r3
 8100c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100c84:	697b      	ldr	r3, [r7, #20]
 8100c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100c88:	4b13      	ldr	r3, [pc, #76]	@ (8100cd8 <_sbrk+0x64>)
 8100c8a:	681b      	ldr	r3, [r3, #0]
 8100c8c:	2b00      	cmp	r3, #0
 8100c8e:	d102      	bne.n	8100c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100c90:	4b11      	ldr	r3, [pc, #68]	@ (8100cd8 <_sbrk+0x64>)
 8100c92:	4a12      	ldr	r2, [pc, #72]	@ (8100cdc <_sbrk+0x68>)
 8100c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100c96:	4b10      	ldr	r3, [pc, #64]	@ (8100cd8 <_sbrk+0x64>)
 8100c98:	681a      	ldr	r2, [r3, #0]
 8100c9a:	687b      	ldr	r3, [r7, #4]
 8100c9c:	4413      	add	r3, r2
 8100c9e:	693a      	ldr	r2, [r7, #16]
 8100ca0:	429a      	cmp	r2, r3
 8100ca2:	d207      	bcs.n	8100cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8100ca4:	f00a fcba 	bl	810b61c <__errno>
 8100ca8:	4603      	mov	r3, r0
 8100caa:	220c      	movs	r2, #12
 8100cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100cae:	f04f 33ff 	mov.w	r3, #4294967295
 8100cb2:	e009      	b.n	8100cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8100cb4:	4b08      	ldr	r3, [pc, #32]	@ (8100cd8 <_sbrk+0x64>)
 8100cb6:	681b      	ldr	r3, [r3, #0]
 8100cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100cba:	4b07      	ldr	r3, [pc, #28]	@ (8100cd8 <_sbrk+0x64>)
 8100cbc:	681a      	ldr	r2, [r3, #0]
 8100cbe:	687b      	ldr	r3, [r7, #4]
 8100cc0:	4413      	add	r3, r2
 8100cc2:	4a05      	ldr	r2, [pc, #20]	@ (8100cd8 <_sbrk+0x64>)
 8100cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100cc6:	68fb      	ldr	r3, [r7, #12]
}
 8100cc8:	4618      	mov	r0, r3
 8100cca:	3718      	adds	r7, #24
 8100ccc:	46bd      	mov	sp, r7
 8100cce:	bd80      	pop	{r7, pc}
 8100cd0:	10048000 	.word	0x10048000
 8100cd4:	00000400 	.word	0x00000400
 8100cd8:	100001d4 	.word	0x100001d4
 8100cdc:	10004e60 	.word	0x10004e60

08100ce0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8100ce0:	b580      	push	{r7, lr}
 8100ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100ce4:	4b22      	ldr	r3, [pc, #136]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100ce6:	4a23      	ldr	r2, [pc, #140]	@ (8100d74 <MX_USART3_UART_Init+0x94>)
 8100ce8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100cea:	4b21      	ldr	r3, [pc, #132]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100cec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8100cf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100cf4:	2200      	movs	r2, #0
 8100cf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100cfa:	2200      	movs	r2, #0
 8100cfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100d00:	2200      	movs	r2, #0
 8100d02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100d04:	4b1a      	ldr	r3, [pc, #104]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100d06:	220c      	movs	r2, #12
 8100d08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100d0a:	4b19      	ldr	r3, [pc, #100]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100d0c:	2200      	movs	r2, #0
 8100d0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100d10:	4b17      	ldr	r3, [pc, #92]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100d12:	2200      	movs	r2, #0
 8100d14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100d16:	4b16      	ldr	r3, [pc, #88]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100d18:	2200      	movs	r2, #0
 8100d1a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100d1c:	4b14      	ldr	r3, [pc, #80]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100d1e:	2200      	movs	r2, #0
 8100d20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100d22:	4b13      	ldr	r3, [pc, #76]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100d24:	2200      	movs	r2, #0
 8100d26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100d28:	4811      	ldr	r0, [pc, #68]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100d2a:	f003 f805 	bl	8103d38 <HAL_UART_Init>
 8100d2e:	4603      	mov	r3, r0
 8100d30:	2b00      	cmp	r3, #0
 8100d32:	d001      	beq.n	8100d38 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100d34:	f7ff fe4a 	bl	81009cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100d38:	2100      	movs	r1, #0
 8100d3a:	480d      	ldr	r0, [pc, #52]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100d3c:	f004 f89a 	bl	8104e74 <HAL_UARTEx_SetTxFifoThreshold>
 8100d40:	4603      	mov	r3, r0
 8100d42:	2b00      	cmp	r3, #0
 8100d44:	d001      	beq.n	8100d4a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100d46:	f7ff fe41 	bl	81009cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100d4a:	2100      	movs	r1, #0
 8100d4c:	4808      	ldr	r0, [pc, #32]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100d4e:	f004 f8cf 	bl	8104ef0 <HAL_UARTEx_SetRxFifoThreshold>
 8100d52:	4603      	mov	r3, r0
 8100d54:	2b00      	cmp	r3, #0
 8100d56:	d001      	beq.n	8100d5c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100d58:	f7ff fe38 	bl	81009cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100d5c:	4804      	ldr	r0, [pc, #16]	@ (8100d70 <MX_USART3_UART_Init+0x90>)
 8100d5e:	f004 f850 	bl	8104e02 <HAL_UARTEx_DisableFifoMode>
 8100d62:	4603      	mov	r3, r0
 8100d64:	2b00      	cmp	r3, #0
 8100d66:	d001      	beq.n	8100d6c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100d68:	f7ff fe30 	bl	81009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100d6c:	bf00      	nop
 8100d6e:	bd80      	pop	{r7, pc}
 8100d70:	100001d8 	.word	0x100001d8
 8100d74:	40004800 	.word	0x40004800

08100d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8100d78:	b580      	push	{r7, lr}
 8100d7a:	b0ba      	sub	sp, #232	@ 0xe8
 8100d7c:	af00      	add	r7, sp, #0
 8100d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100d80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100d84:	2200      	movs	r2, #0
 8100d86:	601a      	str	r2, [r3, #0]
 8100d88:	605a      	str	r2, [r3, #4]
 8100d8a:	609a      	str	r2, [r3, #8]
 8100d8c:	60da      	str	r2, [r3, #12]
 8100d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100d90:	f107 0310 	add.w	r3, r7, #16
 8100d94:	22c0      	movs	r2, #192	@ 0xc0
 8100d96:	2100      	movs	r1, #0
 8100d98:	4618      	mov	r0, r3
 8100d9a:	f00a fb66 	bl	810b46a <memset>
  if(uartHandle->Instance==USART3)
 8100d9e:	687b      	ldr	r3, [r7, #4]
 8100da0:	681b      	ldr	r3, [r3, #0]
 8100da2:	4a27      	ldr	r2, [pc, #156]	@ (8100e40 <HAL_UART_MspInit+0xc8>)
 8100da4:	4293      	cmp	r3, r2
 8100da6:	d146      	bne.n	8100e36 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100da8:	f04f 0202 	mov.w	r2, #2
 8100dac:	f04f 0300 	mov.w	r3, #0
 8100db0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100db4:	2300      	movs	r3, #0
 8100db6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100dba:	f107 0310 	add.w	r3, r7, #16
 8100dbe:	4618      	mov	r0, r3
 8100dc0:	f000 fec0 	bl	8101b44 <HAL_RCCEx_PeriphCLKConfig>
 8100dc4:	4603      	mov	r3, r0
 8100dc6:	2b00      	cmp	r3, #0
 8100dc8:	d001      	beq.n	8100dce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8100dca:	f7ff fdff 	bl	81009cc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8100dce:	4b1d      	ldr	r3, [pc, #116]	@ (8100e44 <HAL_UART_MspInit+0xcc>)
 8100dd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8100e44 <HAL_UART_MspInit+0xcc>)
 8100dd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8100dda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100dde:	4b19      	ldr	r3, [pc, #100]	@ (8100e44 <HAL_UART_MspInit+0xcc>)
 8100de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100de4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8100de8:	60fb      	str	r3, [r7, #12]
 8100dea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100dec:	4b15      	ldr	r3, [pc, #84]	@ (8100e44 <HAL_UART_MspInit+0xcc>)
 8100dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100df2:	4a14      	ldr	r2, [pc, #80]	@ (8100e44 <HAL_UART_MspInit+0xcc>)
 8100df4:	f043 0308 	orr.w	r3, r3, #8
 8100df8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100dfc:	4b11      	ldr	r3, [pc, #68]	@ (8100e44 <HAL_UART_MspInit+0xcc>)
 8100dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e02:	f003 0308 	and.w	r3, r3, #8
 8100e06:	60bb      	str	r3, [r7, #8]
 8100e08:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8100e0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8100e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e12:	2302      	movs	r3, #2
 8100e14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e18:	2300      	movs	r3, #0
 8100e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e1e:	2300      	movs	r3, #0
 8100e20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8100e24:	2307      	movs	r3, #7
 8100e26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100e2a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100e2e:	4619      	mov	r1, r3
 8100e30:	4805      	ldr	r0, [pc, #20]	@ (8100e48 <HAL_UART_MspInit+0xd0>)
 8100e32:	f000 f9a7 	bl	8101184 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8100e36:	bf00      	nop
 8100e38:	37e8      	adds	r7, #232	@ 0xe8
 8100e3a:	46bd      	mov	sp, r7
 8100e3c:	bd80      	pop	{r7, pc}
 8100e3e:	bf00      	nop
 8100e40:	40004800 	.word	0x40004800
 8100e44:	58024400 	.word	0x58024400
 8100e48:	58020c00 	.word	0x58020c00

08100e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100e4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8100e84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100e50:	f7ff fc26 	bl	81006a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100e54:	480c      	ldr	r0, [pc, #48]	@ (8100e88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100e56:	490d      	ldr	r1, [pc, #52]	@ (8100e8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100e58:	4a0d      	ldr	r2, [pc, #52]	@ (8100e90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100e5c:	e002      	b.n	8100e64 <LoopCopyDataInit>

08100e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100e62:	3304      	adds	r3, #4

08100e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100e68:	d3f9      	bcc.n	8100e5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8100e94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100e6c:	4c0a      	ldr	r4, [pc, #40]	@ (8100e98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100e70:	e001      	b.n	8100e76 <LoopFillZerobss>

08100e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100e74:	3204      	adds	r2, #4

08100e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100e78:	d3fb      	bcc.n	8100e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100e7a:	f00a fbd5 	bl	810b628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100e7e:	f7ff fd4b 	bl	8100918 <main>
  bx  lr
 8100e82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100e84:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100e88:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100e8c:	10000118 	.word	0x10000118
  ldr r2, =_sidata
 8100e90:	0810c7f8 	.word	0x0810c7f8
  ldr r2, =_sbss
 8100e94:	10000118 	.word	0x10000118
  ldr r4, =_ebss
 8100e98:	10004e5c 	.word	0x10004e5c

08100e9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100e9c:	e7fe      	b.n	8100e9c <ADC3_IRQHandler>
	...

08100ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100ea0:	b580      	push	{r7, lr}
 8100ea2:	b082      	sub	sp, #8
 8100ea4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100ea6:	4b28      	ldr	r3, [pc, #160]	@ (8100f48 <HAL_Init+0xa8>)
 8100ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100eac:	4a26      	ldr	r2, [pc, #152]	@ (8100f48 <HAL_Init+0xa8>)
 8100eae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100eb2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100eb6:	4b24      	ldr	r3, [pc, #144]	@ (8100f48 <HAL_Init+0xa8>)
 8100eb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100ec0:	603b      	str	r3, [r7, #0]
 8100ec2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100ec4:	4b21      	ldr	r3, [pc, #132]	@ (8100f4c <HAL_Init+0xac>)
 8100ec6:	681b      	ldr	r3, [r3, #0]
 8100ec8:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100ecc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8100f4c <HAL_Init+0xac>)
 8100ed2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8100ed6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8100f4c <HAL_Init+0xac>)
 8100eda:	681b      	ldr	r3, [r3, #0]
 8100edc:	4a1b      	ldr	r2, [pc, #108]	@ (8100f4c <HAL_Init+0xac>)
 8100ede:	f043 0301 	orr.w	r3, r3, #1
 8100ee2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100ee4:	2003      	movs	r0, #3
 8100ee6:	f000 f906 	bl	81010f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100eea:	f000 fc11 	bl	8101710 <HAL_RCC_GetSysClockFreq>
 8100eee:	4602      	mov	r2, r0
 8100ef0:	4b15      	ldr	r3, [pc, #84]	@ (8100f48 <HAL_Init+0xa8>)
 8100ef2:	699b      	ldr	r3, [r3, #24]
 8100ef4:	0a1b      	lsrs	r3, r3, #8
 8100ef6:	f003 030f 	and.w	r3, r3, #15
 8100efa:	4915      	ldr	r1, [pc, #84]	@ (8100f50 <HAL_Init+0xb0>)
 8100efc:	5ccb      	ldrb	r3, [r1, r3]
 8100efe:	f003 031f 	and.w	r3, r3, #31
 8100f02:	fa22 f303 	lsr.w	r3, r2, r3
 8100f06:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100f08:	4b0f      	ldr	r3, [pc, #60]	@ (8100f48 <HAL_Init+0xa8>)
 8100f0a:	699b      	ldr	r3, [r3, #24]
 8100f0c:	f003 030f 	and.w	r3, r3, #15
 8100f10:	4a0f      	ldr	r2, [pc, #60]	@ (8100f50 <HAL_Init+0xb0>)
 8100f12:	5cd3      	ldrb	r3, [r2, r3]
 8100f14:	f003 031f 	and.w	r3, r3, #31
 8100f18:	687a      	ldr	r2, [r7, #4]
 8100f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8100f1e:	4a0d      	ldr	r2, [pc, #52]	@ (8100f54 <HAL_Init+0xb4>)
 8100f20:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100f22:	4b0c      	ldr	r3, [pc, #48]	@ (8100f54 <HAL_Init+0xb4>)
 8100f24:	681b      	ldr	r3, [r3, #0]
 8100f26:	4a0c      	ldr	r2, [pc, #48]	@ (8100f58 <HAL_Init+0xb8>)
 8100f28:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100f2a:	200f      	movs	r0, #15
 8100f2c:	f7ff fd7a 	bl	8100a24 <HAL_InitTick>
 8100f30:	4603      	mov	r3, r0
 8100f32:	2b00      	cmp	r3, #0
 8100f34:	d001      	beq.n	8100f3a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100f36:	2301      	movs	r3, #1
 8100f38:	e002      	b.n	8100f40 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100f3a:	f7ff fd4d 	bl	81009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100f3e:	2300      	movs	r3, #0
}
 8100f40:	4618      	mov	r0, r3
 8100f42:	3708      	adds	r7, #8
 8100f44:	46bd      	mov	sp, r7
 8100f46:	bd80      	pop	{r7, pc}
 8100f48:	58024400 	.word	0x58024400
 8100f4c:	40024400 	.word	0x40024400
 8100f50:	0810c694 	.word	0x0810c694
 8100f54:	10000004 	.word	0x10000004
 8100f58:	10000000 	.word	0x10000000

08100f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100f5c:	b480      	push	{r7}
 8100f5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100f60:	4b06      	ldr	r3, [pc, #24]	@ (8100f7c <HAL_IncTick+0x20>)
 8100f62:	781b      	ldrb	r3, [r3, #0]
 8100f64:	461a      	mov	r2, r3
 8100f66:	4b06      	ldr	r3, [pc, #24]	@ (8100f80 <HAL_IncTick+0x24>)
 8100f68:	681b      	ldr	r3, [r3, #0]
 8100f6a:	4413      	add	r3, r2
 8100f6c:	4a04      	ldr	r2, [pc, #16]	@ (8100f80 <HAL_IncTick+0x24>)
 8100f6e:	6013      	str	r3, [r2, #0]
}
 8100f70:	bf00      	nop
 8100f72:	46bd      	mov	sp, r7
 8100f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f78:	4770      	bx	lr
 8100f7a:	bf00      	nop
 8100f7c:	1000000c 	.word	0x1000000c
 8100f80:	1000026c 	.word	0x1000026c

08100f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100f84:	b480      	push	{r7}
 8100f86:	af00      	add	r7, sp, #0
  return uwTick;
 8100f88:	4b03      	ldr	r3, [pc, #12]	@ (8100f98 <HAL_GetTick+0x14>)
 8100f8a:	681b      	ldr	r3, [r3, #0]
}
 8100f8c:	4618      	mov	r0, r3
 8100f8e:	46bd      	mov	sp, r7
 8100f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f94:	4770      	bx	lr
 8100f96:	bf00      	nop
 8100f98:	1000026c 	.word	0x1000026c

08100f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100f9c:	b480      	push	{r7}
 8100f9e:	b085      	sub	sp, #20
 8100fa0:	af00      	add	r7, sp, #0
 8100fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100fa4:	687b      	ldr	r3, [r7, #4]
 8100fa6:	f003 0307 	and.w	r3, r3, #7
 8100faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100fac:	4b0c      	ldr	r3, [pc, #48]	@ (8100fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8100fae:	68db      	ldr	r3, [r3, #12]
 8100fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100fb2:	68ba      	ldr	r2, [r7, #8]
 8100fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100fb8:	4013      	ands	r3, r2
 8100fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100fbc:	68fb      	ldr	r3, [r7, #12]
 8100fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100fc0:	68bb      	ldr	r3, [r7, #8]
 8100fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100fc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100fce:	4a04      	ldr	r2, [pc, #16]	@ (8100fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8100fd0:	68bb      	ldr	r3, [r7, #8]
 8100fd2:	60d3      	str	r3, [r2, #12]
}
 8100fd4:	bf00      	nop
 8100fd6:	3714      	adds	r7, #20
 8100fd8:	46bd      	mov	sp, r7
 8100fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fde:	4770      	bx	lr
 8100fe0:	e000ed00 	.word	0xe000ed00

08100fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100fe4:	b480      	push	{r7}
 8100fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100fe8:	4b04      	ldr	r3, [pc, #16]	@ (8100ffc <__NVIC_GetPriorityGrouping+0x18>)
 8100fea:	68db      	ldr	r3, [r3, #12]
 8100fec:	0a1b      	lsrs	r3, r3, #8
 8100fee:	f003 0307 	and.w	r3, r3, #7
}
 8100ff2:	4618      	mov	r0, r3
 8100ff4:	46bd      	mov	sp, r7
 8100ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ffa:	4770      	bx	lr
 8100ffc:	e000ed00 	.word	0xe000ed00

08101000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101000:	b480      	push	{r7}
 8101002:	b083      	sub	sp, #12
 8101004:	af00      	add	r7, sp, #0
 8101006:	4603      	mov	r3, r0
 8101008:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810100a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810100e:	2b00      	cmp	r3, #0
 8101010:	db0b      	blt.n	810102a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101012:	88fb      	ldrh	r3, [r7, #6]
 8101014:	f003 021f 	and.w	r2, r3, #31
 8101018:	4907      	ldr	r1, [pc, #28]	@ (8101038 <__NVIC_EnableIRQ+0x38>)
 810101a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810101e:	095b      	lsrs	r3, r3, #5
 8101020:	2001      	movs	r0, #1
 8101022:	fa00 f202 	lsl.w	r2, r0, r2
 8101026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810102a:	bf00      	nop
 810102c:	370c      	adds	r7, #12
 810102e:	46bd      	mov	sp, r7
 8101030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101034:	4770      	bx	lr
 8101036:	bf00      	nop
 8101038:	e000e100 	.word	0xe000e100

0810103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810103c:	b480      	push	{r7}
 810103e:	b083      	sub	sp, #12
 8101040:	af00      	add	r7, sp, #0
 8101042:	4603      	mov	r3, r0
 8101044:	6039      	str	r1, [r7, #0]
 8101046:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810104c:	2b00      	cmp	r3, #0
 810104e:	db0a      	blt.n	8101066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101050:	683b      	ldr	r3, [r7, #0]
 8101052:	b2da      	uxtb	r2, r3
 8101054:	490c      	ldr	r1, [pc, #48]	@ (8101088 <__NVIC_SetPriority+0x4c>)
 8101056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810105a:	0112      	lsls	r2, r2, #4
 810105c:	b2d2      	uxtb	r2, r2
 810105e:	440b      	add	r3, r1
 8101060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101064:	e00a      	b.n	810107c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101066:	683b      	ldr	r3, [r7, #0]
 8101068:	b2da      	uxtb	r2, r3
 810106a:	4908      	ldr	r1, [pc, #32]	@ (810108c <__NVIC_SetPriority+0x50>)
 810106c:	88fb      	ldrh	r3, [r7, #6]
 810106e:	f003 030f 	and.w	r3, r3, #15
 8101072:	3b04      	subs	r3, #4
 8101074:	0112      	lsls	r2, r2, #4
 8101076:	b2d2      	uxtb	r2, r2
 8101078:	440b      	add	r3, r1
 810107a:	761a      	strb	r2, [r3, #24]
}
 810107c:	bf00      	nop
 810107e:	370c      	adds	r7, #12
 8101080:	46bd      	mov	sp, r7
 8101082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101086:	4770      	bx	lr
 8101088:	e000e100 	.word	0xe000e100
 810108c:	e000ed00 	.word	0xe000ed00

08101090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101090:	b480      	push	{r7}
 8101092:	b089      	sub	sp, #36	@ 0x24
 8101094:	af00      	add	r7, sp, #0
 8101096:	60f8      	str	r0, [r7, #12]
 8101098:	60b9      	str	r1, [r7, #8]
 810109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810109c:	68fb      	ldr	r3, [r7, #12]
 810109e:	f003 0307 	and.w	r3, r3, #7
 81010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81010a4:	69fb      	ldr	r3, [r7, #28]
 81010a6:	f1c3 0307 	rsb	r3, r3, #7
 81010aa:	2b04      	cmp	r3, #4
 81010ac:	bf28      	it	cs
 81010ae:	2304      	movcs	r3, #4
 81010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81010b2:	69fb      	ldr	r3, [r7, #28]
 81010b4:	3304      	adds	r3, #4
 81010b6:	2b06      	cmp	r3, #6
 81010b8:	d902      	bls.n	81010c0 <NVIC_EncodePriority+0x30>
 81010ba:	69fb      	ldr	r3, [r7, #28]
 81010bc:	3b03      	subs	r3, #3
 81010be:	e000      	b.n	81010c2 <NVIC_EncodePriority+0x32>
 81010c0:	2300      	movs	r3, #0
 81010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81010c4:	f04f 32ff 	mov.w	r2, #4294967295
 81010c8:	69bb      	ldr	r3, [r7, #24]
 81010ca:	fa02 f303 	lsl.w	r3, r2, r3
 81010ce:	43da      	mvns	r2, r3
 81010d0:	68bb      	ldr	r3, [r7, #8]
 81010d2:	401a      	ands	r2, r3
 81010d4:	697b      	ldr	r3, [r7, #20]
 81010d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81010d8:	f04f 31ff 	mov.w	r1, #4294967295
 81010dc:	697b      	ldr	r3, [r7, #20]
 81010de:	fa01 f303 	lsl.w	r3, r1, r3
 81010e2:	43d9      	mvns	r1, r3
 81010e4:	687b      	ldr	r3, [r7, #4]
 81010e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81010e8:	4313      	orrs	r3, r2
         );
}
 81010ea:	4618      	mov	r0, r3
 81010ec:	3724      	adds	r7, #36	@ 0x24
 81010ee:	46bd      	mov	sp, r7
 81010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010f4:	4770      	bx	lr

081010f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81010f6:	b580      	push	{r7, lr}
 81010f8:	b082      	sub	sp, #8
 81010fa:	af00      	add	r7, sp, #0
 81010fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81010fe:	6878      	ldr	r0, [r7, #4]
 8101100:	f7ff ff4c 	bl	8100f9c <__NVIC_SetPriorityGrouping>
}
 8101104:	bf00      	nop
 8101106:	3708      	adds	r7, #8
 8101108:	46bd      	mov	sp, r7
 810110a:	bd80      	pop	{r7, pc}

0810110c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810110c:	b580      	push	{r7, lr}
 810110e:	b086      	sub	sp, #24
 8101110:	af00      	add	r7, sp, #0
 8101112:	4603      	mov	r3, r0
 8101114:	60b9      	str	r1, [r7, #8]
 8101116:	607a      	str	r2, [r7, #4]
 8101118:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810111a:	f7ff ff63 	bl	8100fe4 <__NVIC_GetPriorityGrouping>
 810111e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101120:	687a      	ldr	r2, [r7, #4]
 8101122:	68b9      	ldr	r1, [r7, #8]
 8101124:	6978      	ldr	r0, [r7, #20]
 8101126:	f7ff ffb3 	bl	8101090 <NVIC_EncodePriority>
 810112a:	4602      	mov	r2, r0
 810112c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101130:	4611      	mov	r1, r2
 8101132:	4618      	mov	r0, r3
 8101134:	f7ff ff82 	bl	810103c <__NVIC_SetPriority>
}
 8101138:	bf00      	nop
 810113a:	3718      	adds	r7, #24
 810113c:	46bd      	mov	sp, r7
 810113e:	bd80      	pop	{r7, pc}

08101140 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101140:	b580      	push	{r7, lr}
 8101142:	b082      	sub	sp, #8
 8101144:	af00      	add	r7, sp, #0
 8101146:	4603      	mov	r3, r0
 8101148:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810114e:	4618      	mov	r0, r3
 8101150:	f7ff ff56 	bl	8101000 <__NVIC_EnableIRQ>
}
 8101154:	bf00      	nop
 8101156:	3708      	adds	r7, #8
 8101158:	46bd      	mov	sp, r7
 810115a:	bd80      	pop	{r7, pc}

0810115c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810115c:	b480      	push	{r7}
 810115e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101160:	4b07      	ldr	r3, [pc, #28]	@ (8101180 <HAL_GetCurrentCPUID+0x24>)
 8101162:	681b      	ldr	r3, [r3, #0]
 8101164:	091b      	lsrs	r3, r3, #4
 8101166:	f003 030f 	and.w	r3, r3, #15
 810116a:	2b07      	cmp	r3, #7
 810116c:	d101      	bne.n	8101172 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810116e:	2303      	movs	r3, #3
 8101170:	e000      	b.n	8101174 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101172:	2301      	movs	r3, #1
  }
}
 8101174:	4618      	mov	r0, r3
 8101176:	46bd      	mov	sp, r7
 8101178:	f85d 7b04 	ldr.w	r7, [sp], #4
 810117c:	4770      	bx	lr
 810117e:	bf00      	nop
 8101180:	e000ed00 	.word	0xe000ed00

08101184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101184:	b480      	push	{r7}
 8101186:	b089      	sub	sp, #36	@ 0x24
 8101188:	af00      	add	r7, sp, #0
 810118a:	6078      	str	r0, [r7, #4]
 810118c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810118e:	2300      	movs	r3, #0
 8101190:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101192:	4b89      	ldr	r3, [pc, #548]	@ (81013b8 <HAL_GPIO_Init+0x234>)
 8101194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101196:	e194      	b.n	81014c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101198:	683b      	ldr	r3, [r7, #0]
 810119a:	681a      	ldr	r2, [r3, #0]
 810119c:	2101      	movs	r1, #1
 810119e:	69fb      	ldr	r3, [r7, #28]
 81011a0:	fa01 f303 	lsl.w	r3, r1, r3
 81011a4:	4013      	ands	r3, r2
 81011a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81011a8:	693b      	ldr	r3, [r7, #16]
 81011aa:	2b00      	cmp	r3, #0
 81011ac:	f000 8186 	beq.w	81014bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81011b0:	683b      	ldr	r3, [r7, #0]
 81011b2:	685b      	ldr	r3, [r3, #4]
 81011b4:	f003 0303 	and.w	r3, r3, #3
 81011b8:	2b01      	cmp	r3, #1
 81011ba:	d005      	beq.n	81011c8 <HAL_GPIO_Init+0x44>
 81011bc:	683b      	ldr	r3, [r7, #0]
 81011be:	685b      	ldr	r3, [r3, #4]
 81011c0:	f003 0303 	and.w	r3, r3, #3
 81011c4:	2b02      	cmp	r3, #2
 81011c6:	d130      	bne.n	810122a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81011c8:	687b      	ldr	r3, [r7, #4]
 81011ca:	689b      	ldr	r3, [r3, #8]
 81011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81011ce:	69fb      	ldr	r3, [r7, #28]
 81011d0:	005b      	lsls	r3, r3, #1
 81011d2:	2203      	movs	r2, #3
 81011d4:	fa02 f303 	lsl.w	r3, r2, r3
 81011d8:	43db      	mvns	r3, r3
 81011da:	69ba      	ldr	r2, [r7, #24]
 81011dc:	4013      	ands	r3, r2
 81011de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81011e0:	683b      	ldr	r3, [r7, #0]
 81011e2:	68da      	ldr	r2, [r3, #12]
 81011e4:	69fb      	ldr	r3, [r7, #28]
 81011e6:	005b      	lsls	r3, r3, #1
 81011e8:	fa02 f303 	lsl.w	r3, r2, r3
 81011ec:	69ba      	ldr	r2, [r7, #24]
 81011ee:	4313      	orrs	r3, r2
 81011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81011f2:	687b      	ldr	r3, [r7, #4]
 81011f4:	69ba      	ldr	r2, [r7, #24]
 81011f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81011f8:	687b      	ldr	r3, [r7, #4]
 81011fa:	685b      	ldr	r3, [r3, #4]
 81011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81011fe:	2201      	movs	r2, #1
 8101200:	69fb      	ldr	r3, [r7, #28]
 8101202:	fa02 f303 	lsl.w	r3, r2, r3
 8101206:	43db      	mvns	r3, r3
 8101208:	69ba      	ldr	r2, [r7, #24]
 810120a:	4013      	ands	r3, r2
 810120c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810120e:	683b      	ldr	r3, [r7, #0]
 8101210:	685b      	ldr	r3, [r3, #4]
 8101212:	091b      	lsrs	r3, r3, #4
 8101214:	f003 0201 	and.w	r2, r3, #1
 8101218:	69fb      	ldr	r3, [r7, #28]
 810121a:	fa02 f303 	lsl.w	r3, r2, r3
 810121e:	69ba      	ldr	r2, [r7, #24]
 8101220:	4313      	orrs	r3, r2
 8101222:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101224:	687b      	ldr	r3, [r7, #4]
 8101226:	69ba      	ldr	r2, [r7, #24]
 8101228:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810122a:	683b      	ldr	r3, [r7, #0]
 810122c:	685b      	ldr	r3, [r3, #4]
 810122e:	f003 0303 	and.w	r3, r3, #3
 8101232:	2b03      	cmp	r3, #3
 8101234:	d017      	beq.n	8101266 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101236:	687b      	ldr	r3, [r7, #4]
 8101238:	68db      	ldr	r3, [r3, #12]
 810123a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810123c:	69fb      	ldr	r3, [r7, #28]
 810123e:	005b      	lsls	r3, r3, #1
 8101240:	2203      	movs	r2, #3
 8101242:	fa02 f303 	lsl.w	r3, r2, r3
 8101246:	43db      	mvns	r3, r3
 8101248:	69ba      	ldr	r2, [r7, #24]
 810124a:	4013      	ands	r3, r2
 810124c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810124e:	683b      	ldr	r3, [r7, #0]
 8101250:	689a      	ldr	r2, [r3, #8]
 8101252:	69fb      	ldr	r3, [r7, #28]
 8101254:	005b      	lsls	r3, r3, #1
 8101256:	fa02 f303 	lsl.w	r3, r2, r3
 810125a:	69ba      	ldr	r2, [r7, #24]
 810125c:	4313      	orrs	r3, r2
 810125e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101260:	687b      	ldr	r3, [r7, #4]
 8101262:	69ba      	ldr	r2, [r7, #24]
 8101264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101266:	683b      	ldr	r3, [r7, #0]
 8101268:	685b      	ldr	r3, [r3, #4]
 810126a:	f003 0303 	and.w	r3, r3, #3
 810126e:	2b02      	cmp	r3, #2
 8101270:	d123      	bne.n	81012ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101272:	69fb      	ldr	r3, [r7, #28]
 8101274:	08da      	lsrs	r2, r3, #3
 8101276:	687b      	ldr	r3, [r7, #4]
 8101278:	3208      	adds	r2, #8
 810127a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101280:	69fb      	ldr	r3, [r7, #28]
 8101282:	f003 0307 	and.w	r3, r3, #7
 8101286:	009b      	lsls	r3, r3, #2
 8101288:	220f      	movs	r2, #15
 810128a:	fa02 f303 	lsl.w	r3, r2, r3
 810128e:	43db      	mvns	r3, r3
 8101290:	69ba      	ldr	r2, [r7, #24]
 8101292:	4013      	ands	r3, r2
 8101294:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101296:	683b      	ldr	r3, [r7, #0]
 8101298:	691a      	ldr	r2, [r3, #16]
 810129a:	69fb      	ldr	r3, [r7, #28]
 810129c:	f003 0307 	and.w	r3, r3, #7
 81012a0:	009b      	lsls	r3, r3, #2
 81012a2:	fa02 f303 	lsl.w	r3, r2, r3
 81012a6:	69ba      	ldr	r2, [r7, #24]
 81012a8:	4313      	orrs	r3, r2
 81012aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81012ac:	69fb      	ldr	r3, [r7, #28]
 81012ae:	08da      	lsrs	r2, r3, #3
 81012b0:	687b      	ldr	r3, [r7, #4]
 81012b2:	3208      	adds	r2, #8
 81012b4:	69b9      	ldr	r1, [r7, #24]
 81012b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81012ba:	687b      	ldr	r3, [r7, #4]
 81012bc:	681b      	ldr	r3, [r3, #0]
 81012be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81012c0:	69fb      	ldr	r3, [r7, #28]
 81012c2:	005b      	lsls	r3, r3, #1
 81012c4:	2203      	movs	r2, #3
 81012c6:	fa02 f303 	lsl.w	r3, r2, r3
 81012ca:	43db      	mvns	r3, r3
 81012cc:	69ba      	ldr	r2, [r7, #24]
 81012ce:	4013      	ands	r3, r2
 81012d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81012d2:	683b      	ldr	r3, [r7, #0]
 81012d4:	685b      	ldr	r3, [r3, #4]
 81012d6:	f003 0203 	and.w	r2, r3, #3
 81012da:	69fb      	ldr	r3, [r7, #28]
 81012dc:	005b      	lsls	r3, r3, #1
 81012de:	fa02 f303 	lsl.w	r3, r2, r3
 81012e2:	69ba      	ldr	r2, [r7, #24]
 81012e4:	4313      	orrs	r3, r2
 81012e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81012e8:	687b      	ldr	r3, [r7, #4]
 81012ea:	69ba      	ldr	r2, [r7, #24]
 81012ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81012ee:	683b      	ldr	r3, [r7, #0]
 81012f0:	685b      	ldr	r3, [r3, #4]
 81012f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81012f6:	2b00      	cmp	r3, #0
 81012f8:	f000 80e0 	beq.w	81014bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81012fc:	4b2f      	ldr	r3, [pc, #188]	@ (81013bc <HAL_GPIO_Init+0x238>)
 81012fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101302:	4a2e      	ldr	r2, [pc, #184]	@ (81013bc <HAL_GPIO_Init+0x238>)
 8101304:	f043 0302 	orr.w	r3, r3, #2
 8101308:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810130c:	4b2b      	ldr	r3, [pc, #172]	@ (81013bc <HAL_GPIO_Init+0x238>)
 810130e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101312:	f003 0302 	and.w	r3, r3, #2
 8101316:	60fb      	str	r3, [r7, #12]
 8101318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810131a:	4a29      	ldr	r2, [pc, #164]	@ (81013c0 <HAL_GPIO_Init+0x23c>)
 810131c:	69fb      	ldr	r3, [r7, #28]
 810131e:	089b      	lsrs	r3, r3, #2
 8101320:	3302      	adds	r3, #2
 8101322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101328:	69fb      	ldr	r3, [r7, #28]
 810132a:	f003 0303 	and.w	r3, r3, #3
 810132e:	009b      	lsls	r3, r3, #2
 8101330:	220f      	movs	r2, #15
 8101332:	fa02 f303 	lsl.w	r3, r2, r3
 8101336:	43db      	mvns	r3, r3
 8101338:	69ba      	ldr	r2, [r7, #24]
 810133a:	4013      	ands	r3, r2
 810133c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810133e:	687b      	ldr	r3, [r7, #4]
 8101340:	4a20      	ldr	r2, [pc, #128]	@ (81013c4 <HAL_GPIO_Init+0x240>)
 8101342:	4293      	cmp	r3, r2
 8101344:	d052      	beq.n	81013ec <HAL_GPIO_Init+0x268>
 8101346:	687b      	ldr	r3, [r7, #4]
 8101348:	4a1f      	ldr	r2, [pc, #124]	@ (81013c8 <HAL_GPIO_Init+0x244>)
 810134a:	4293      	cmp	r3, r2
 810134c:	d031      	beq.n	81013b2 <HAL_GPIO_Init+0x22e>
 810134e:	687b      	ldr	r3, [r7, #4]
 8101350:	4a1e      	ldr	r2, [pc, #120]	@ (81013cc <HAL_GPIO_Init+0x248>)
 8101352:	4293      	cmp	r3, r2
 8101354:	d02b      	beq.n	81013ae <HAL_GPIO_Init+0x22a>
 8101356:	687b      	ldr	r3, [r7, #4]
 8101358:	4a1d      	ldr	r2, [pc, #116]	@ (81013d0 <HAL_GPIO_Init+0x24c>)
 810135a:	4293      	cmp	r3, r2
 810135c:	d025      	beq.n	81013aa <HAL_GPIO_Init+0x226>
 810135e:	687b      	ldr	r3, [r7, #4]
 8101360:	4a1c      	ldr	r2, [pc, #112]	@ (81013d4 <HAL_GPIO_Init+0x250>)
 8101362:	4293      	cmp	r3, r2
 8101364:	d01f      	beq.n	81013a6 <HAL_GPIO_Init+0x222>
 8101366:	687b      	ldr	r3, [r7, #4]
 8101368:	4a1b      	ldr	r2, [pc, #108]	@ (81013d8 <HAL_GPIO_Init+0x254>)
 810136a:	4293      	cmp	r3, r2
 810136c:	d019      	beq.n	81013a2 <HAL_GPIO_Init+0x21e>
 810136e:	687b      	ldr	r3, [r7, #4]
 8101370:	4a1a      	ldr	r2, [pc, #104]	@ (81013dc <HAL_GPIO_Init+0x258>)
 8101372:	4293      	cmp	r3, r2
 8101374:	d013      	beq.n	810139e <HAL_GPIO_Init+0x21a>
 8101376:	687b      	ldr	r3, [r7, #4]
 8101378:	4a19      	ldr	r2, [pc, #100]	@ (81013e0 <HAL_GPIO_Init+0x25c>)
 810137a:	4293      	cmp	r3, r2
 810137c:	d00d      	beq.n	810139a <HAL_GPIO_Init+0x216>
 810137e:	687b      	ldr	r3, [r7, #4]
 8101380:	4a18      	ldr	r2, [pc, #96]	@ (81013e4 <HAL_GPIO_Init+0x260>)
 8101382:	4293      	cmp	r3, r2
 8101384:	d007      	beq.n	8101396 <HAL_GPIO_Init+0x212>
 8101386:	687b      	ldr	r3, [r7, #4]
 8101388:	4a17      	ldr	r2, [pc, #92]	@ (81013e8 <HAL_GPIO_Init+0x264>)
 810138a:	4293      	cmp	r3, r2
 810138c:	d101      	bne.n	8101392 <HAL_GPIO_Init+0x20e>
 810138e:	2309      	movs	r3, #9
 8101390:	e02d      	b.n	81013ee <HAL_GPIO_Init+0x26a>
 8101392:	230a      	movs	r3, #10
 8101394:	e02b      	b.n	81013ee <HAL_GPIO_Init+0x26a>
 8101396:	2308      	movs	r3, #8
 8101398:	e029      	b.n	81013ee <HAL_GPIO_Init+0x26a>
 810139a:	2307      	movs	r3, #7
 810139c:	e027      	b.n	81013ee <HAL_GPIO_Init+0x26a>
 810139e:	2306      	movs	r3, #6
 81013a0:	e025      	b.n	81013ee <HAL_GPIO_Init+0x26a>
 81013a2:	2305      	movs	r3, #5
 81013a4:	e023      	b.n	81013ee <HAL_GPIO_Init+0x26a>
 81013a6:	2304      	movs	r3, #4
 81013a8:	e021      	b.n	81013ee <HAL_GPIO_Init+0x26a>
 81013aa:	2303      	movs	r3, #3
 81013ac:	e01f      	b.n	81013ee <HAL_GPIO_Init+0x26a>
 81013ae:	2302      	movs	r3, #2
 81013b0:	e01d      	b.n	81013ee <HAL_GPIO_Init+0x26a>
 81013b2:	2301      	movs	r3, #1
 81013b4:	e01b      	b.n	81013ee <HAL_GPIO_Init+0x26a>
 81013b6:	bf00      	nop
 81013b8:	580000c0 	.word	0x580000c0
 81013bc:	58024400 	.word	0x58024400
 81013c0:	58000400 	.word	0x58000400
 81013c4:	58020000 	.word	0x58020000
 81013c8:	58020400 	.word	0x58020400
 81013cc:	58020800 	.word	0x58020800
 81013d0:	58020c00 	.word	0x58020c00
 81013d4:	58021000 	.word	0x58021000
 81013d8:	58021400 	.word	0x58021400
 81013dc:	58021800 	.word	0x58021800
 81013e0:	58021c00 	.word	0x58021c00
 81013e4:	58022000 	.word	0x58022000
 81013e8:	58022400 	.word	0x58022400
 81013ec:	2300      	movs	r3, #0
 81013ee:	69fa      	ldr	r2, [r7, #28]
 81013f0:	f002 0203 	and.w	r2, r2, #3
 81013f4:	0092      	lsls	r2, r2, #2
 81013f6:	4093      	lsls	r3, r2
 81013f8:	69ba      	ldr	r2, [r7, #24]
 81013fa:	4313      	orrs	r3, r2
 81013fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81013fe:	4938      	ldr	r1, [pc, #224]	@ (81014e0 <HAL_GPIO_Init+0x35c>)
 8101400:	69fb      	ldr	r3, [r7, #28]
 8101402:	089b      	lsrs	r3, r3, #2
 8101404:	3302      	adds	r3, #2
 8101406:	69ba      	ldr	r2, [r7, #24]
 8101408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810140c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101410:	681b      	ldr	r3, [r3, #0]
 8101412:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101414:	693b      	ldr	r3, [r7, #16]
 8101416:	43db      	mvns	r3, r3
 8101418:	69ba      	ldr	r2, [r7, #24]
 810141a:	4013      	ands	r3, r2
 810141c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810141e:	683b      	ldr	r3, [r7, #0]
 8101420:	685b      	ldr	r3, [r3, #4]
 8101422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8101426:	2b00      	cmp	r3, #0
 8101428:	d003      	beq.n	8101432 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810142a:	69ba      	ldr	r2, [r7, #24]
 810142c:	693b      	ldr	r3, [r7, #16]
 810142e:	4313      	orrs	r3, r2
 8101430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101432:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101436:	69bb      	ldr	r3, [r7, #24]
 8101438:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810143a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810143e:	685b      	ldr	r3, [r3, #4]
 8101440:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101442:	693b      	ldr	r3, [r7, #16]
 8101444:	43db      	mvns	r3, r3
 8101446:	69ba      	ldr	r2, [r7, #24]
 8101448:	4013      	ands	r3, r2
 810144a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810144c:	683b      	ldr	r3, [r7, #0]
 810144e:	685b      	ldr	r3, [r3, #4]
 8101450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8101454:	2b00      	cmp	r3, #0
 8101456:	d003      	beq.n	8101460 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101458:	69ba      	ldr	r2, [r7, #24]
 810145a:	693b      	ldr	r3, [r7, #16]
 810145c:	4313      	orrs	r3, r2
 810145e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101460:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101464:	69bb      	ldr	r3, [r7, #24]
 8101466:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101468:	697b      	ldr	r3, [r7, #20]
 810146a:	685b      	ldr	r3, [r3, #4]
 810146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810146e:	693b      	ldr	r3, [r7, #16]
 8101470:	43db      	mvns	r3, r3
 8101472:	69ba      	ldr	r2, [r7, #24]
 8101474:	4013      	ands	r3, r2
 8101476:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101478:	683b      	ldr	r3, [r7, #0]
 810147a:	685b      	ldr	r3, [r3, #4]
 810147c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101480:	2b00      	cmp	r3, #0
 8101482:	d003      	beq.n	810148c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101484:	69ba      	ldr	r2, [r7, #24]
 8101486:	693b      	ldr	r3, [r7, #16]
 8101488:	4313      	orrs	r3, r2
 810148a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810148c:	697b      	ldr	r3, [r7, #20]
 810148e:	69ba      	ldr	r2, [r7, #24]
 8101490:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101492:	697b      	ldr	r3, [r7, #20]
 8101494:	681b      	ldr	r3, [r3, #0]
 8101496:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101498:	693b      	ldr	r3, [r7, #16]
 810149a:	43db      	mvns	r3, r3
 810149c:	69ba      	ldr	r2, [r7, #24]
 810149e:	4013      	ands	r3, r2
 81014a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81014a2:	683b      	ldr	r3, [r7, #0]
 81014a4:	685b      	ldr	r3, [r3, #4]
 81014a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81014aa:	2b00      	cmp	r3, #0
 81014ac:	d003      	beq.n	81014b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81014ae:	69ba      	ldr	r2, [r7, #24]
 81014b0:	693b      	ldr	r3, [r7, #16]
 81014b2:	4313      	orrs	r3, r2
 81014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81014b6:	697b      	ldr	r3, [r7, #20]
 81014b8:	69ba      	ldr	r2, [r7, #24]
 81014ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81014bc:	69fb      	ldr	r3, [r7, #28]
 81014be:	3301      	adds	r3, #1
 81014c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81014c2:	683b      	ldr	r3, [r7, #0]
 81014c4:	681a      	ldr	r2, [r3, #0]
 81014c6:	69fb      	ldr	r3, [r7, #28]
 81014c8:	fa22 f303 	lsr.w	r3, r2, r3
 81014cc:	2b00      	cmp	r3, #0
 81014ce:	f47f ae63 	bne.w	8101198 <HAL_GPIO_Init+0x14>
  }
}
 81014d2:	bf00      	nop
 81014d4:	bf00      	nop
 81014d6:	3724      	adds	r7, #36	@ 0x24
 81014d8:	46bd      	mov	sp, r7
 81014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014de:	4770      	bx	lr
 81014e0:	58000400 	.word	0x58000400

081014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81014e4:	b480      	push	{r7}
 81014e6:	b083      	sub	sp, #12
 81014e8:	af00      	add	r7, sp, #0
 81014ea:	6078      	str	r0, [r7, #4]
 81014ec:	460b      	mov	r3, r1
 81014ee:	807b      	strh	r3, [r7, #2]
 81014f0:	4613      	mov	r3, r2
 81014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81014f4:	787b      	ldrb	r3, [r7, #1]
 81014f6:	2b00      	cmp	r3, #0
 81014f8:	d003      	beq.n	8101502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81014fa:	887a      	ldrh	r2, [r7, #2]
 81014fc:	687b      	ldr	r3, [r7, #4]
 81014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101500:	e003      	b.n	810150a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101502:	887b      	ldrh	r3, [r7, #2]
 8101504:	041a      	lsls	r2, r3, #16
 8101506:	687b      	ldr	r3, [r7, #4]
 8101508:	619a      	str	r2, [r3, #24]
}
 810150a:	bf00      	nop
 810150c:	370c      	adds	r7, #12
 810150e:	46bd      	mov	sp, r7
 8101510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101514:	4770      	bx	lr

08101516 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101516:	b480      	push	{r7}
 8101518:	b085      	sub	sp, #20
 810151a:	af00      	add	r7, sp, #0
 810151c:	6078      	str	r0, [r7, #4]
 810151e:	460b      	mov	r3, r1
 8101520:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8101522:	687b      	ldr	r3, [r7, #4]
 8101524:	695b      	ldr	r3, [r3, #20]
 8101526:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8101528:	887a      	ldrh	r2, [r7, #2]
 810152a:	68fb      	ldr	r3, [r7, #12]
 810152c:	4013      	ands	r3, r2
 810152e:	041a      	lsls	r2, r3, #16
 8101530:	68fb      	ldr	r3, [r7, #12]
 8101532:	43d9      	mvns	r1, r3
 8101534:	887b      	ldrh	r3, [r7, #2]
 8101536:	400b      	ands	r3, r1
 8101538:	431a      	orrs	r2, r3
 810153a:	687b      	ldr	r3, [r7, #4]
 810153c:	619a      	str	r2, [r3, #24]
}
 810153e:	bf00      	nop
 8101540:	3714      	adds	r7, #20
 8101542:	46bd      	mov	sp, r7
 8101544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101548:	4770      	bx	lr
	...

0810154c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 810154c:	b480      	push	{r7}
 810154e:	b083      	sub	sp, #12
 8101550:	af00      	add	r7, sp, #0
 8101552:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8101554:	4a08      	ldr	r2, [pc, #32]	@ (8101578 <HAL_HSEM_FastTake+0x2c>)
 8101556:	687b      	ldr	r3, [r7, #4]
 8101558:	3320      	adds	r3, #32
 810155a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810155e:	4a07      	ldr	r2, [pc, #28]	@ (810157c <HAL_HSEM_FastTake+0x30>)
 8101560:	4293      	cmp	r3, r2
 8101562:	d101      	bne.n	8101568 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8101564:	2300      	movs	r3, #0
 8101566:	e000      	b.n	810156a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8101568:	2301      	movs	r3, #1
}
 810156a:	4618      	mov	r0, r3
 810156c:	370c      	adds	r7, #12
 810156e:	46bd      	mov	sp, r7
 8101570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101574:	4770      	bx	lr
 8101576:	bf00      	nop
 8101578:	58026400 	.word	0x58026400
 810157c:	80000100 	.word	0x80000100

08101580 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8101580:	b480      	push	{r7}
 8101582:	b083      	sub	sp, #12
 8101584:	af00      	add	r7, sp, #0
 8101586:	6078      	str	r0, [r7, #4]
 8101588:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810158a:	4906      	ldr	r1, [pc, #24]	@ (81015a4 <HAL_HSEM_Release+0x24>)
 810158c:	683b      	ldr	r3, [r7, #0]
 810158e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8101592:	687b      	ldr	r3, [r7, #4]
 8101594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8101598:	bf00      	nop
 810159a:	370c      	adds	r7, #12
 810159c:	46bd      	mov	sp, r7
 810159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015a2:	4770      	bx	lr
 81015a4:	58026400 	.word	0x58026400

081015a8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81015a8:	b480      	push	{r7}
 81015aa:	b083      	sub	sp, #12
 81015ac:	af00      	add	r7, sp, #0
 81015ae:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81015b0:	4b05      	ldr	r3, [pc, #20]	@ (81015c8 <HAL_HSEM_ActivateNotification+0x20>)
 81015b2:	681a      	ldr	r2, [r3, #0]
 81015b4:	4904      	ldr	r1, [pc, #16]	@ (81015c8 <HAL_HSEM_ActivateNotification+0x20>)
 81015b6:	687b      	ldr	r3, [r7, #4]
 81015b8:	4313      	orrs	r3, r2
 81015ba:	600b      	str	r3, [r1, #0]
#endif
}
 81015bc:	bf00      	nop
 81015be:	370c      	adds	r7, #12
 81015c0:	46bd      	mov	sp, r7
 81015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015c6:	4770      	bx	lr
 81015c8:	58026510 	.word	0x58026510

081015cc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 81015cc:	b580      	push	{r7, lr}
 81015ce:	b082      	sub	sp, #8
 81015d0:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81015d2:	4b0a      	ldr	r3, [pc, #40]	@ (81015fc <HAL_HSEM_IRQHandler+0x30>)
 81015d4:	68db      	ldr	r3, [r3, #12]
 81015d6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81015d8:	4b08      	ldr	r3, [pc, #32]	@ (81015fc <HAL_HSEM_IRQHandler+0x30>)
 81015da:	681a      	ldr	r2, [r3, #0]
 81015dc:	687b      	ldr	r3, [r7, #4]
 81015de:	43db      	mvns	r3, r3
 81015e0:	4906      	ldr	r1, [pc, #24]	@ (81015fc <HAL_HSEM_IRQHandler+0x30>)
 81015e2:	4013      	ands	r3, r2
 81015e4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 81015e6:	4a05      	ldr	r2, [pc, #20]	@ (81015fc <HAL_HSEM_IRQHandler+0x30>)
 81015e8:	687b      	ldr	r3, [r7, #4]
 81015ea:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 81015ec:	6878      	ldr	r0, [r7, #4]
 81015ee:	f009 fb2f 	bl	810ac50 <HAL_HSEM_FreeCallback>
}
 81015f2:	bf00      	nop
 81015f4:	3708      	adds	r7, #8
 81015f6:	46bd      	mov	sp, r7
 81015f8:	bd80      	pop	{r7, pc}
 81015fa:	bf00      	nop
 81015fc:	58026510 	.word	0x58026510

08101600 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101600:	b580      	push	{r7, lr}
 8101602:	b084      	sub	sp, #16
 8101604:	af00      	add	r7, sp, #0
 8101606:	60f8      	str	r0, [r7, #12]
 8101608:	460b      	mov	r3, r1
 810160a:	607a      	str	r2, [r7, #4]
 810160c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810160e:	4b37      	ldr	r3, [pc, #220]	@ (81016ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8101610:	681b      	ldr	r3, [r3, #0]
 8101612:	f023 0201 	bic.w	r2, r3, #1
 8101616:	4935      	ldr	r1, [pc, #212]	@ (81016ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8101618:	68fb      	ldr	r3, [r7, #12]
 810161a:	4313      	orrs	r3, r2
 810161c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810161e:	687b      	ldr	r3, [r7, #4]
 8101620:	2b00      	cmp	r3, #0
 8101622:	d123      	bne.n	810166c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101624:	f7ff fd9a 	bl	810115c <HAL_GetCurrentCPUID>
 8101628:	4603      	mov	r3, r0
 810162a:	2b03      	cmp	r3, #3
 810162c:	d158      	bne.n	81016e0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810162e:	4b2f      	ldr	r3, [pc, #188]	@ (81016ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8101630:	691b      	ldr	r3, [r3, #16]
 8101632:	4a2e      	ldr	r2, [pc, #184]	@ (81016ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8101634:	f023 0301 	bic.w	r3, r3, #1
 8101638:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810163a:	4b2d      	ldr	r3, [pc, #180]	@ (81016f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810163c:	691b      	ldr	r3, [r3, #16]
 810163e:	4a2c      	ldr	r2, [pc, #176]	@ (81016f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101640:	f043 0304 	orr.w	r3, r3, #4
 8101644:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101646:	f3bf 8f4f 	dsb	sy
}
 810164a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810164c:	f3bf 8f6f 	isb	sy
}
 8101650:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101652:	7afb      	ldrb	r3, [r7, #11]
 8101654:	2b01      	cmp	r3, #1
 8101656:	d101      	bne.n	810165c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101658:	bf30      	wfi
 810165a:	e000      	b.n	810165e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810165c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810165e:	4b24      	ldr	r3, [pc, #144]	@ (81016f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101660:	691b      	ldr	r3, [r3, #16]
 8101662:	4a23      	ldr	r2, [pc, #140]	@ (81016f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101664:	f023 0304 	bic.w	r3, r3, #4
 8101668:	6113      	str	r3, [r2, #16]
 810166a:	e03c      	b.n	81016e6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810166c:	687b      	ldr	r3, [r7, #4]
 810166e:	2b01      	cmp	r3, #1
 8101670:	d123      	bne.n	81016ba <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101672:	f7ff fd73 	bl	810115c <HAL_GetCurrentCPUID>
 8101676:	4603      	mov	r3, r0
 8101678:	2b01      	cmp	r3, #1
 810167a:	d133      	bne.n	81016e4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810167c:	4b1b      	ldr	r3, [pc, #108]	@ (81016ec <HAL_PWREx_EnterSTOPMode+0xec>)
 810167e:	695b      	ldr	r3, [r3, #20]
 8101680:	4a1a      	ldr	r2, [pc, #104]	@ (81016ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8101682:	f023 0302 	bic.w	r3, r3, #2
 8101686:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101688:	4b19      	ldr	r3, [pc, #100]	@ (81016f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810168a:	691b      	ldr	r3, [r3, #16]
 810168c:	4a18      	ldr	r2, [pc, #96]	@ (81016f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810168e:	f043 0304 	orr.w	r3, r3, #4
 8101692:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101694:	f3bf 8f4f 	dsb	sy
}
 8101698:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810169a:	f3bf 8f6f 	isb	sy
}
 810169e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81016a0:	7afb      	ldrb	r3, [r7, #11]
 81016a2:	2b01      	cmp	r3, #1
 81016a4:	d101      	bne.n	81016aa <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81016a6:	bf30      	wfi
 81016a8:	e000      	b.n	81016ac <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81016aa:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81016ac:	4b10      	ldr	r3, [pc, #64]	@ (81016f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81016ae:	691b      	ldr	r3, [r3, #16]
 81016b0:	4a0f      	ldr	r2, [pc, #60]	@ (81016f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81016b2:	f023 0304 	bic.w	r3, r3, #4
 81016b6:	6113      	str	r3, [r2, #16]
 81016b8:	e015      	b.n	81016e6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81016ba:	f7ff fd4f 	bl	810115c <HAL_GetCurrentCPUID>
 81016be:	4603      	mov	r3, r0
 81016c0:	2b03      	cmp	r3, #3
 81016c2:	d106      	bne.n	81016d2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81016c4:	4b09      	ldr	r3, [pc, #36]	@ (81016ec <HAL_PWREx_EnterSTOPMode+0xec>)
 81016c6:	691b      	ldr	r3, [r3, #16]
 81016c8:	4a08      	ldr	r2, [pc, #32]	@ (81016ec <HAL_PWREx_EnterSTOPMode+0xec>)
 81016ca:	f023 0304 	bic.w	r3, r3, #4
 81016ce:	6113      	str	r3, [r2, #16]
 81016d0:	e009      	b.n	81016e6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81016d2:	4b06      	ldr	r3, [pc, #24]	@ (81016ec <HAL_PWREx_EnterSTOPMode+0xec>)
 81016d4:	695b      	ldr	r3, [r3, #20]
 81016d6:	4a05      	ldr	r2, [pc, #20]	@ (81016ec <HAL_PWREx_EnterSTOPMode+0xec>)
 81016d8:	f023 0304 	bic.w	r3, r3, #4
 81016dc:	6153      	str	r3, [r2, #20]
 81016de:	e002      	b.n	81016e6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81016e0:	bf00      	nop
 81016e2:	e000      	b.n	81016e6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81016e4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81016e6:	3710      	adds	r7, #16
 81016e8:	46bd      	mov	sp, r7
 81016ea:	bd80      	pop	{r7, pc}
 81016ec:	58024800 	.word	0x58024800
 81016f0:	e000ed00 	.word	0xe000ed00

081016f4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81016f4:	b580      	push	{r7, lr}
 81016f6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81016f8:	f7ff fd30 	bl	810115c <HAL_GetCurrentCPUID>
 81016fc:	4603      	mov	r3, r0
 81016fe:	2b03      	cmp	r3, #3
 8101700:	d101      	bne.n	8101706 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101702:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101704:	e001      	b.n	810170a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101706:	bf40      	sev
    __WFE ();
 8101708:	bf20      	wfe
}
 810170a:	bf00      	nop
 810170c:	bd80      	pop	{r7, pc}
	...

08101710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101710:	b480      	push	{r7}
 8101712:	b089      	sub	sp, #36	@ 0x24
 8101714:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101716:	4bb3      	ldr	r3, [pc, #716]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101718:	691b      	ldr	r3, [r3, #16]
 810171a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810171e:	2b18      	cmp	r3, #24
 8101720:	f200 8155 	bhi.w	81019ce <HAL_RCC_GetSysClockFreq+0x2be>
 8101724:	a201      	add	r2, pc, #4	@ (adr r2, 810172c <HAL_RCC_GetSysClockFreq+0x1c>)
 8101726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810172a:	bf00      	nop
 810172c:	08101791 	.word	0x08101791
 8101730:	081019cf 	.word	0x081019cf
 8101734:	081019cf 	.word	0x081019cf
 8101738:	081019cf 	.word	0x081019cf
 810173c:	081019cf 	.word	0x081019cf
 8101740:	081019cf 	.word	0x081019cf
 8101744:	081019cf 	.word	0x081019cf
 8101748:	081019cf 	.word	0x081019cf
 810174c:	081017b7 	.word	0x081017b7
 8101750:	081019cf 	.word	0x081019cf
 8101754:	081019cf 	.word	0x081019cf
 8101758:	081019cf 	.word	0x081019cf
 810175c:	081019cf 	.word	0x081019cf
 8101760:	081019cf 	.word	0x081019cf
 8101764:	081019cf 	.word	0x081019cf
 8101768:	081019cf 	.word	0x081019cf
 810176c:	081017bd 	.word	0x081017bd
 8101770:	081019cf 	.word	0x081019cf
 8101774:	081019cf 	.word	0x081019cf
 8101778:	081019cf 	.word	0x081019cf
 810177c:	081019cf 	.word	0x081019cf
 8101780:	081019cf 	.word	0x081019cf
 8101784:	081019cf 	.word	0x081019cf
 8101788:	081019cf 	.word	0x081019cf
 810178c:	081017c3 	.word	0x081017c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101790:	4b94      	ldr	r3, [pc, #592]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101792:	681b      	ldr	r3, [r3, #0]
 8101794:	f003 0320 	and.w	r3, r3, #32
 8101798:	2b00      	cmp	r3, #0
 810179a:	d009      	beq.n	81017b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810179c:	4b91      	ldr	r3, [pc, #580]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810179e:	681b      	ldr	r3, [r3, #0]
 81017a0:	08db      	lsrs	r3, r3, #3
 81017a2:	f003 0303 	and.w	r3, r3, #3
 81017a6:	4a90      	ldr	r2, [pc, #576]	@ (81019e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81017a8:	fa22 f303 	lsr.w	r3, r2, r3
 81017ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81017ae:	e111      	b.n	81019d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81017b0:	4b8d      	ldr	r3, [pc, #564]	@ (81019e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81017b2:	61bb      	str	r3, [r7, #24]
      break;
 81017b4:	e10e      	b.n	81019d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81017b6:	4b8d      	ldr	r3, [pc, #564]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 81017b8:	61bb      	str	r3, [r7, #24]
      break;
 81017ba:	e10b      	b.n	81019d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81017bc:	4b8c      	ldr	r3, [pc, #560]	@ (81019f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81017be:	61bb      	str	r3, [r7, #24]
      break;
 81017c0:	e108      	b.n	81019d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81017c2:	4b88      	ldr	r3, [pc, #544]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81017c6:	f003 0303 	and.w	r3, r3, #3
 81017ca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81017cc:	4b85      	ldr	r3, [pc, #532]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81017d0:	091b      	lsrs	r3, r3, #4
 81017d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81017d6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81017d8:	4b82      	ldr	r3, [pc, #520]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81017dc:	f003 0301 	and.w	r3, r3, #1
 81017e0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81017e2:	4b80      	ldr	r3, [pc, #512]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81017e6:	08db      	lsrs	r3, r3, #3
 81017e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81017ec:	68fa      	ldr	r2, [r7, #12]
 81017ee:	fb02 f303 	mul.w	r3, r2, r3
 81017f2:	ee07 3a90 	vmov	s15, r3
 81017f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81017fa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81017fe:	693b      	ldr	r3, [r7, #16]
 8101800:	2b00      	cmp	r3, #0
 8101802:	f000 80e1 	beq.w	81019c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101806:	697b      	ldr	r3, [r7, #20]
 8101808:	2b02      	cmp	r3, #2
 810180a:	f000 8083 	beq.w	8101914 <HAL_RCC_GetSysClockFreq+0x204>
 810180e:	697b      	ldr	r3, [r7, #20]
 8101810:	2b02      	cmp	r3, #2
 8101812:	f200 80a1 	bhi.w	8101958 <HAL_RCC_GetSysClockFreq+0x248>
 8101816:	697b      	ldr	r3, [r7, #20]
 8101818:	2b00      	cmp	r3, #0
 810181a:	d003      	beq.n	8101824 <HAL_RCC_GetSysClockFreq+0x114>
 810181c:	697b      	ldr	r3, [r7, #20]
 810181e:	2b01      	cmp	r3, #1
 8101820:	d056      	beq.n	81018d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101822:	e099      	b.n	8101958 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101824:	4b6f      	ldr	r3, [pc, #444]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101826:	681b      	ldr	r3, [r3, #0]
 8101828:	f003 0320 	and.w	r3, r3, #32
 810182c:	2b00      	cmp	r3, #0
 810182e:	d02d      	beq.n	810188c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101830:	4b6c      	ldr	r3, [pc, #432]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101832:	681b      	ldr	r3, [r3, #0]
 8101834:	08db      	lsrs	r3, r3, #3
 8101836:	f003 0303 	and.w	r3, r3, #3
 810183a:	4a6b      	ldr	r2, [pc, #428]	@ (81019e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810183c:	fa22 f303 	lsr.w	r3, r2, r3
 8101840:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101842:	687b      	ldr	r3, [r7, #4]
 8101844:	ee07 3a90 	vmov	s15, r3
 8101848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810184c:	693b      	ldr	r3, [r7, #16]
 810184e:	ee07 3a90 	vmov	s15, r3
 8101852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810185a:	4b62      	ldr	r3, [pc, #392]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810185e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101862:	ee07 3a90 	vmov	s15, r3
 8101866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810186a:	ed97 6a02 	vldr	s12, [r7, #8]
 810186e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81019f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810187a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810187e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101886:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810188a:	e087      	b.n	810199c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810188c:	693b      	ldr	r3, [r7, #16]
 810188e:	ee07 3a90 	vmov	s15, r3
 8101892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101896:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81019f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810189a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810189e:	4b51      	ldr	r3, [pc, #324]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81018a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81018a6:	ee07 3a90 	vmov	s15, r3
 81018aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81018ae:	ed97 6a02 	vldr	s12, [r7, #8]
 81018b2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81019f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81018b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81018ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81018be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81018c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81018c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81018ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81018ce:	e065      	b.n	810199c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81018d0:	693b      	ldr	r3, [r7, #16]
 81018d2:	ee07 3a90 	vmov	s15, r3
 81018d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018da:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81019fc <HAL_RCC_GetSysClockFreq+0x2ec>
 81018de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81018e2:	4b40      	ldr	r3, [pc, #256]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81018e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81018ea:	ee07 3a90 	vmov	s15, r3
 81018ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81018f2:	ed97 6a02 	vldr	s12, [r7, #8]
 81018f6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81019f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81018fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81018fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810190a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810190e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101912:	e043      	b.n	810199c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101914:	693b      	ldr	r3, [r7, #16]
 8101916:	ee07 3a90 	vmov	s15, r3
 810191a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810191e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8101a00 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101926:	4b2f      	ldr	r3, [pc, #188]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810192a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810192e:	ee07 3a90 	vmov	s15, r3
 8101932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101936:	ed97 6a02 	vldr	s12, [r7, #8]
 810193a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81019f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810193e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810194a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810194e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101952:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101956:	e021      	b.n	810199c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101958:	693b      	ldr	r3, [r7, #16]
 810195a:	ee07 3a90 	vmov	s15, r3
 810195e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101962:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81019fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8101966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810196a:	4b1e      	ldr	r3, [pc, #120]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810196e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101972:	ee07 3a90 	vmov	s15, r3
 8101976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810197a:	ed97 6a02 	vldr	s12, [r7, #8]
 810197e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81019f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810198a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810198e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101996:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810199a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810199c:	4b11      	ldr	r3, [pc, #68]	@ (81019e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810199e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81019a0:	0a5b      	lsrs	r3, r3, #9
 81019a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81019a6:	3301      	adds	r3, #1
 81019a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81019aa:	683b      	ldr	r3, [r7, #0]
 81019ac:	ee07 3a90 	vmov	s15, r3
 81019b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81019b4:	edd7 6a07 	vldr	s13, [r7, #28]
 81019b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81019bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81019c0:	ee17 3a90 	vmov	r3, s15
 81019c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81019c6:	e005      	b.n	81019d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81019c8:	2300      	movs	r3, #0
 81019ca:	61bb      	str	r3, [r7, #24]
      break;
 81019cc:	e002      	b.n	81019d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81019ce:	4b07      	ldr	r3, [pc, #28]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 81019d0:	61bb      	str	r3, [r7, #24]
      break;
 81019d2:	bf00      	nop
  }

  return sysclockfreq;
 81019d4:	69bb      	ldr	r3, [r7, #24]
}
 81019d6:	4618      	mov	r0, r3
 81019d8:	3724      	adds	r7, #36	@ 0x24
 81019da:	46bd      	mov	sp, r7
 81019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019e0:	4770      	bx	lr
 81019e2:	bf00      	nop
 81019e4:	58024400 	.word	0x58024400
 81019e8:	03d09000 	.word	0x03d09000
 81019ec:	003d0900 	.word	0x003d0900
 81019f0:	017d7840 	.word	0x017d7840
 81019f4:	46000000 	.word	0x46000000
 81019f8:	4c742400 	.word	0x4c742400
 81019fc:	4a742400 	.word	0x4a742400
 8101a00:	4bbebc20 	.word	0x4bbebc20

08101a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101a04:	b580      	push	{r7, lr}
 8101a06:	b082      	sub	sp, #8
 8101a08:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101a0a:	f7ff fe81 	bl	8101710 <HAL_RCC_GetSysClockFreq>
 8101a0e:	4602      	mov	r2, r0
 8101a10:	4b11      	ldr	r3, [pc, #68]	@ (8101a58 <HAL_RCC_GetHCLKFreq+0x54>)
 8101a12:	699b      	ldr	r3, [r3, #24]
 8101a14:	0a1b      	lsrs	r3, r3, #8
 8101a16:	f003 030f 	and.w	r3, r3, #15
 8101a1a:	4910      	ldr	r1, [pc, #64]	@ (8101a5c <HAL_RCC_GetHCLKFreq+0x58>)
 8101a1c:	5ccb      	ldrb	r3, [r1, r3]
 8101a1e:	f003 031f 	and.w	r3, r3, #31
 8101a22:	fa22 f303 	lsr.w	r3, r2, r3
 8101a26:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101a28:	4b0b      	ldr	r3, [pc, #44]	@ (8101a58 <HAL_RCC_GetHCLKFreq+0x54>)
 8101a2a:	699b      	ldr	r3, [r3, #24]
 8101a2c:	f003 030f 	and.w	r3, r3, #15
 8101a30:	4a0a      	ldr	r2, [pc, #40]	@ (8101a5c <HAL_RCC_GetHCLKFreq+0x58>)
 8101a32:	5cd3      	ldrb	r3, [r2, r3]
 8101a34:	f003 031f 	and.w	r3, r3, #31
 8101a38:	687a      	ldr	r2, [r7, #4]
 8101a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8101a3e:	4a08      	ldr	r2, [pc, #32]	@ (8101a60 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a40:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101a42:	4b07      	ldr	r3, [pc, #28]	@ (8101a60 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a44:	681b      	ldr	r3, [r3, #0]
 8101a46:	4a07      	ldr	r2, [pc, #28]	@ (8101a64 <HAL_RCC_GetHCLKFreq+0x60>)
 8101a48:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8101a4a:	4b05      	ldr	r3, [pc, #20]	@ (8101a60 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a4c:	681b      	ldr	r3, [r3, #0]
}
 8101a4e:	4618      	mov	r0, r3
 8101a50:	3708      	adds	r7, #8
 8101a52:	46bd      	mov	sp, r7
 8101a54:	bd80      	pop	{r7, pc}
 8101a56:	bf00      	nop
 8101a58:	58024400 	.word	0x58024400
 8101a5c:	0810c694 	.word	0x0810c694
 8101a60:	10000004 	.word	0x10000004
 8101a64:	10000000 	.word	0x10000000

08101a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101a68:	b580      	push	{r7, lr}
 8101a6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101a6c:	f7ff ffca 	bl	8101a04 <HAL_RCC_GetHCLKFreq>
 8101a70:	4602      	mov	r2, r0
 8101a72:	4b06      	ldr	r3, [pc, #24]	@ (8101a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8101a74:	69db      	ldr	r3, [r3, #28]
 8101a76:	091b      	lsrs	r3, r3, #4
 8101a78:	f003 0307 	and.w	r3, r3, #7
 8101a7c:	4904      	ldr	r1, [pc, #16]	@ (8101a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8101a7e:	5ccb      	ldrb	r3, [r1, r3]
 8101a80:	f003 031f 	and.w	r3, r3, #31
 8101a84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101a88:	4618      	mov	r0, r3
 8101a8a:	bd80      	pop	{r7, pc}
 8101a8c:	58024400 	.word	0x58024400
 8101a90:	0810c694 	.word	0x0810c694

08101a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101a94:	b580      	push	{r7, lr}
 8101a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8101a98:	f7ff ffb4 	bl	8101a04 <HAL_RCC_GetHCLKFreq>
 8101a9c:	4602      	mov	r2, r0
 8101a9e:	4b06      	ldr	r3, [pc, #24]	@ (8101ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8101aa0:	69db      	ldr	r3, [r3, #28]
 8101aa2:	0a1b      	lsrs	r3, r3, #8
 8101aa4:	f003 0307 	and.w	r3, r3, #7
 8101aa8:	4904      	ldr	r1, [pc, #16]	@ (8101abc <HAL_RCC_GetPCLK2Freq+0x28>)
 8101aaa:	5ccb      	ldrb	r3, [r1, r3]
 8101aac:	f003 031f 	and.w	r3, r3, #31
 8101ab0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101ab4:	4618      	mov	r0, r3
 8101ab6:	bd80      	pop	{r7, pc}
 8101ab8:	58024400 	.word	0x58024400
 8101abc:	0810c694 	.word	0x0810c694

08101ac0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8101ac0:	b480      	push	{r7}
 8101ac2:	b083      	sub	sp, #12
 8101ac4:	af00      	add	r7, sp, #0
 8101ac6:	6078      	str	r0, [r7, #4]
 8101ac8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	223f      	movs	r2, #63	@ 0x3f
 8101ace:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8101ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8101b3c <HAL_RCC_GetClockConfig+0x7c>)
 8101ad2:	691b      	ldr	r3, [r3, #16]
 8101ad4:	f003 0207 	and.w	r2, r3, #7
 8101ad8:	687b      	ldr	r3, [r7, #4]
 8101ada:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8101adc:	4b17      	ldr	r3, [pc, #92]	@ (8101b3c <HAL_RCC_GetClockConfig+0x7c>)
 8101ade:	699b      	ldr	r3, [r3, #24]
 8101ae0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8101ae4:	687b      	ldr	r3, [r7, #4]
 8101ae6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8101ae8:	4b14      	ldr	r3, [pc, #80]	@ (8101b3c <HAL_RCC_GetClockConfig+0x7c>)
 8101aea:	699b      	ldr	r3, [r3, #24]
 8101aec:	f003 020f 	and.w	r2, r3, #15
 8101af0:	687b      	ldr	r3, [r7, #4]
 8101af2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8101af4:	4b11      	ldr	r3, [pc, #68]	@ (8101b3c <HAL_RCC_GetClockConfig+0x7c>)
 8101af6:	699b      	ldr	r3, [r3, #24]
 8101af8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8101afc:	687b      	ldr	r3, [r7, #4]
 8101afe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8101b00:	4b0e      	ldr	r3, [pc, #56]	@ (8101b3c <HAL_RCC_GetClockConfig+0x7c>)
 8101b02:	69db      	ldr	r3, [r3, #28]
 8101b04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8101b08:	687b      	ldr	r3, [r7, #4]
 8101b0a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8101b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8101b3c <HAL_RCC_GetClockConfig+0x7c>)
 8101b0e:	69db      	ldr	r3, [r3, #28]
 8101b10:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8101b14:	687b      	ldr	r3, [r7, #4]
 8101b16:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8101b18:	4b08      	ldr	r3, [pc, #32]	@ (8101b3c <HAL_RCC_GetClockConfig+0x7c>)
 8101b1a:	6a1b      	ldr	r3, [r3, #32]
 8101b1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8101b20:	687b      	ldr	r3, [r7, #4]
 8101b22:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8101b24:	4b06      	ldr	r3, [pc, #24]	@ (8101b40 <HAL_RCC_GetClockConfig+0x80>)
 8101b26:	681b      	ldr	r3, [r3, #0]
 8101b28:	f003 020f 	and.w	r2, r3, #15
 8101b2c:	683b      	ldr	r3, [r7, #0]
 8101b2e:	601a      	str	r2, [r3, #0]
}
 8101b30:	bf00      	nop
 8101b32:	370c      	adds	r7, #12
 8101b34:	46bd      	mov	sp, r7
 8101b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b3a:	4770      	bx	lr
 8101b3c:	58024400 	.word	0x58024400
 8101b40:	52002000 	.word	0x52002000

08101b44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101b48:	b0ca      	sub	sp, #296	@ 0x128
 8101b4a:	af00      	add	r7, sp, #0
 8101b4c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101b50:	2300      	movs	r3, #0
 8101b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101b56:	2300      	movs	r3, #0
 8101b58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b64:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8101b68:	2500      	movs	r5, #0
 8101b6a:	ea54 0305 	orrs.w	r3, r4, r5
 8101b6e:	d049      	beq.n	8101c04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8101b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101b76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8101b7a:	d02f      	beq.n	8101bdc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8101b7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8101b80:	d828      	bhi.n	8101bd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8101b82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101b86:	d01a      	beq.n	8101bbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8101b88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101b8c:	d822      	bhi.n	8101bd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8101b8e:	2b00      	cmp	r3, #0
 8101b90:	d003      	beq.n	8101b9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8101b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8101b96:	d007      	beq.n	8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8101b98:	e01c      	b.n	8101bd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101b9a:	4bb8      	ldr	r3, [pc, #736]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101b9e:	4ab7      	ldr	r2, [pc, #732]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101ba6:	e01a      	b.n	8101bde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bac:	3308      	adds	r3, #8
 8101bae:	2102      	movs	r1, #2
 8101bb0:	4618      	mov	r0, r3
 8101bb2:	f001 fc8f 	bl	81034d4 <RCCEx_PLL2_Config>
 8101bb6:	4603      	mov	r3, r0
 8101bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101bbc:	e00f      	b.n	8101bde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8101bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bc2:	3328      	adds	r3, #40	@ 0x28
 8101bc4:	2102      	movs	r1, #2
 8101bc6:	4618      	mov	r0, r3
 8101bc8:	f001 fd36 	bl	8103638 <RCCEx_PLL3_Config>
 8101bcc:	4603      	mov	r3, r0
 8101bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101bd2:	e004      	b.n	8101bde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101bd4:	2301      	movs	r3, #1
 8101bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101bda:	e000      	b.n	8101bde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8101bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101be2:	2b00      	cmp	r3, #0
 8101be4:	d10a      	bne.n	8101bfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101be6:	4ba5      	ldr	r3, [pc, #660]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101bea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8101bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101bf4:	4aa1      	ldr	r2, [pc, #644]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101bf6:	430b      	orrs	r3, r1
 8101bf8:	6513      	str	r3, [r2, #80]	@ 0x50
 8101bfa:	e003      	b.n	8101c04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101c00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c0c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8101c10:	f04f 0900 	mov.w	r9, #0
 8101c14:	ea58 0309 	orrs.w	r3, r8, r9
 8101c18:	d047      	beq.n	8101caa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8101c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101c20:	2b04      	cmp	r3, #4
 8101c22:	d82a      	bhi.n	8101c7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8101c24:	a201      	add	r2, pc, #4	@ (adr r2, 8101c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8101c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101c2a:	bf00      	nop
 8101c2c:	08101c41 	.word	0x08101c41
 8101c30:	08101c4f 	.word	0x08101c4f
 8101c34:	08101c65 	.word	0x08101c65
 8101c38:	08101c83 	.word	0x08101c83
 8101c3c:	08101c83 	.word	0x08101c83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101c40:	4b8e      	ldr	r3, [pc, #568]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101c44:	4a8d      	ldr	r2, [pc, #564]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101c4c:	e01a      	b.n	8101c84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c52:	3308      	adds	r3, #8
 8101c54:	2100      	movs	r1, #0
 8101c56:	4618      	mov	r0, r3
 8101c58:	f001 fc3c 	bl	81034d4 <RCCEx_PLL2_Config>
 8101c5c:	4603      	mov	r3, r0
 8101c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101c62:	e00f      	b.n	8101c84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c68:	3328      	adds	r3, #40	@ 0x28
 8101c6a:	2100      	movs	r1, #0
 8101c6c:	4618      	mov	r0, r3
 8101c6e:	f001 fce3 	bl	8103638 <RCCEx_PLL3_Config>
 8101c72:	4603      	mov	r3, r0
 8101c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101c78:	e004      	b.n	8101c84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101c7a:	2301      	movs	r3, #1
 8101c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101c80:	e000      	b.n	8101c84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8101c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101c88:	2b00      	cmp	r3, #0
 8101c8a:	d10a      	bne.n	8101ca2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101c8c:	4b7b      	ldr	r3, [pc, #492]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101c90:	f023 0107 	bic.w	r1, r3, #7
 8101c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101c9a:	4a78      	ldr	r2, [pc, #480]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c9c:	430b      	orrs	r3, r1
 8101c9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8101ca0:	e003      	b.n	8101caa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101cb2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8101cb6:	f04f 0b00 	mov.w	fp, #0
 8101cba:	ea5a 030b 	orrs.w	r3, sl, fp
 8101cbe:	d04c      	beq.n	8101d5a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8101cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101cca:	d030      	beq.n	8101d2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8101ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101cd0:	d829      	bhi.n	8101d26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101cd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8101cd4:	d02d      	beq.n	8101d32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8101cd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8101cd8:	d825      	bhi.n	8101d26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101cda:	2b80      	cmp	r3, #128	@ 0x80
 8101cdc:	d018      	beq.n	8101d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8101cde:	2b80      	cmp	r3, #128	@ 0x80
 8101ce0:	d821      	bhi.n	8101d26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101ce2:	2b00      	cmp	r3, #0
 8101ce4:	d002      	beq.n	8101cec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8101ce6:	2b40      	cmp	r3, #64	@ 0x40
 8101ce8:	d007      	beq.n	8101cfa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8101cea:	e01c      	b.n	8101d26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101cec:	4b63      	ldr	r3, [pc, #396]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101cf0:	4a62      	ldr	r2, [pc, #392]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101cf8:	e01c      	b.n	8101d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101cfe:	3308      	adds	r3, #8
 8101d00:	2100      	movs	r1, #0
 8101d02:	4618      	mov	r0, r3
 8101d04:	f001 fbe6 	bl	81034d4 <RCCEx_PLL2_Config>
 8101d08:	4603      	mov	r3, r0
 8101d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101d0e:	e011      	b.n	8101d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d14:	3328      	adds	r3, #40	@ 0x28
 8101d16:	2100      	movs	r1, #0
 8101d18:	4618      	mov	r0, r3
 8101d1a:	f001 fc8d 	bl	8103638 <RCCEx_PLL3_Config>
 8101d1e:	4603      	mov	r3, r0
 8101d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101d24:	e006      	b.n	8101d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101d26:	2301      	movs	r3, #1
 8101d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101d2c:	e002      	b.n	8101d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101d2e:	bf00      	nop
 8101d30:	e000      	b.n	8101d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d38:	2b00      	cmp	r3, #0
 8101d3a:	d10a      	bne.n	8101d52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8101d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101d40:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8101d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101d4a:	4a4c      	ldr	r2, [pc, #304]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101d4c:	430b      	orrs	r3, r1
 8101d4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8101d50:	e003      	b.n	8101d5a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8101d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101d62:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8101d66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8101d6a:	2300      	movs	r3, #0
 8101d6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8101d70:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8101d74:	460b      	mov	r3, r1
 8101d76:	4313      	orrs	r3, r2
 8101d78:	d053      	beq.n	8101e22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8101d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8101d82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101d86:	d035      	beq.n	8101df4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8101d88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101d8c:	d82e      	bhi.n	8101dec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101d8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8101d92:	d031      	beq.n	8101df8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8101d94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8101d98:	d828      	bhi.n	8101dec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101d9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101d9e:	d01a      	beq.n	8101dd6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8101da0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101da4:	d822      	bhi.n	8101dec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101da6:	2b00      	cmp	r3, #0
 8101da8:	d003      	beq.n	8101db2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8101daa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101dae:	d007      	beq.n	8101dc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8101db0:	e01c      	b.n	8101dec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101db2:	4b32      	ldr	r3, [pc, #200]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101db6:	4a31      	ldr	r2, [pc, #196]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101dbe:	e01c      	b.n	8101dfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101dc4:	3308      	adds	r3, #8
 8101dc6:	2100      	movs	r1, #0
 8101dc8:	4618      	mov	r0, r3
 8101dca:	f001 fb83 	bl	81034d4 <RCCEx_PLL2_Config>
 8101dce:	4603      	mov	r3, r0
 8101dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101dd4:	e011      	b.n	8101dfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101dda:	3328      	adds	r3, #40	@ 0x28
 8101ddc:	2100      	movs	r1, #0
 8101dde:	4618      	mov	r0, r3
 8101de0:	f001 fc2a 	bl	8103638 <RCCEx_PLL3_Config>
 8101de4:	4603      	mov	r3, r0
 8101de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101dea:	e006      	b.n	8101dfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101dec:	2301      	movs	r3, #1
 8101dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101df2:	e002      	b.n	8101dfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101df4:	bf00      	nop
 8101df6:	e000      	b.n	8101dfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101dfe:	2b00      	cmp	r3, #0
 8101e00:	d10b      	bne.n	8101e1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101e02:	4b1e      	ldr	r3, [pc, #120]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101e06:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8101e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8101e12:	4a1a      	ldr	r2, [pc, #104]	@ (8101e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101e14:	430b      	orrs	r3, r1
 8101e16:	6593      	str	r3, [r2, #88]	@ 0x58
 8101e18:	e003      	b.n	8101e22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101e2a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8101e2e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8101e32:	2300      	movs	r3, #0
 8101e34:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8101e38:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8101e3c:	460b      	mov	r3, r1
 8101e3e:	4313      	orrs	r3, r2
 8101e40:	d056      	beq.n	8101ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8101e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8101e4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8101e4e:	d038      	beq.n	8101ec2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8101e50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8101e54:	d831      	bhi.n	8101eba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101e56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8101e5a:	d034      	beq.n	8101ec6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8101e5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8101e60:	d82b      	bhi.n	8101eba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101e62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8101e66:	d01d      	beq.n	8101ea4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8101e68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8101e6c:	d825      	bhi.n	8101eba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101e6e:	2b00      	cmp	r3, #0
 8101e70:	d006      	beq.n	8101e80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8101e72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101e76:	d00a      	beq.n	8101e8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8101e78:	e01f      	b.n	8101eba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101e7a:	bf00      	nop
 8101e7c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101e80:	4ba2      	ldr	r3, [pc, #648]	@ (810210c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101e84:	4aa1      	ldr	r2, [pc, #644]	@ (810210c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101e8c:	e01c      	b.n	8101ec8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e92:	3308      	adds	r3, #8
 8101e94:	2100      	movs	r1, #0
 8101e96:	4618      	mov	r0, r3
 8101e98:	f001 fb1c 	bl	81034d4 <RCCEx_PLL2_Config>
 8101e9c:	4603      	mov	r3, r0
 8101e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101ea2:	e011      	b.n	8101ec8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ea8:	3328      	adds	r3, #40	@ 0x28
 8101eaa:	2100      	movs	r1, #0
 8101eac:	4618      	mov	r0, r3
 8101eae:	f001 fbc3 	bl	8103638 <RCCEx_PLL3_Config>
 8101eb2:	4603      	mov	r3, r0
 8101eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101eb8:	e006      	b.n	8101ec8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101eba:	2301      	movs	r3, #1
 8101ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101ec0:	e002      	b.n	8101ec8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101ec2:	bf00      	nop
 8101ec4:	e000      	b.n	8101ec8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101ecc:	2b00      	cmp	r3, #0
 8101ece:	d10b      	bne.n	8101ee8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101ed0:	4b8e      	ldr	r3, [pc, #568]	@ (810210c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101ed4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8101ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101edc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8101ee0:	4a8a      	ldr	r2, [pc, #552]	@ (810210c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101ee2:	430b      	orrs	r3, r1
 8101ee4:	6593      	str	r3, [r2, #88]	@ 0x58
 8101ee6:	e003      	b.n	8101ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101eec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101ef8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8101efc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8101f00:	2300      	movs	r3, #0
 8101f02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8101f06:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8101f0a:	460b      	mov	r3, r1
 8101f0c:	4313      	orrs	r3, r2
 8101f0e:	d03a      	beq.n	8101f86 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8101f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101f16:	2b30      	cmp	r3, #48	@ 0x30
 8101f18:	d01f      	beq.n	8101f5a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8101f1a:	2b30      	cmp	r3, #48	@ 0x30
 8101f1c:	d819      	bhi.n	8101f52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101f1e:	2b20      	cmp	r3, #32
 8101f20:	d00c      	beq.n	8101f3c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8101f22:	2b20      	cmp	r3, #32
 8101f24:	d815      	bhi.n	8101f52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101f26:	2b00      	cmp	r3, #0
 8101f28:	d019      	beq.n	8101f5e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8101f2a:	2b10      	cmp	r3, #16
 8101f2c:	d111      	bne.n	8101f52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101f2e:	4b77      	ldr	r3, [pc, #476]	@ (810210c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101f32:	4a76      	ldr	r2, [pc, #472]	@ (810210c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101f3a:	e011      	b.n	8101f60 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f40:	3308      	adds	r3, #8
 8101f42:	2102      	movs	r1, #2
 8101f44:	4618      	mov	r0, r3
 8101f46:	f001 fac5 	bl	81034d4 <RCCEx_PLL2_Config>
 8101f4a:	4603      	mov	r3, r0
 8101f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101f50:	e006      	b.n	8101f60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101f52:	2301      	movs	r3, #1
 8101f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101f58:	e002      	b.n	8101f60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101f5a:	bf00      	nop
 8101f5c:	e000      	b.n	8101f60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101f64:	2b00      	cmp	r3, #0
 8101f66:	d10a      	bne.n	8101f7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101f68:	4b68      	ldr	r3, [pc, #416]	@ (810210c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101f6c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8101f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101f76:	4a65      	ldr	r2, [pc, #404]	@ (810210c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f78:	430b      	orrs	r3, r1
 8101f7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101f7c:	e003      	b.n	8101f86 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101f82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f8e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8101f92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8101f96:	2300      	movs	r3, #0
 8101f98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8101f9c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8101fa0:	460b      	mov	r3, r1
 8101fa2:	4313      	orrs	r3, r2
 8101fa4:	d051      	beq.n	810204a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8101fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101fac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101fb0:	d035      	beq.n	810201e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8101fb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101fb6:	d82e      	bhi.n	8102016 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101fb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8101fbc:	d031      	beq.n	8102022 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8101fbe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8101fc2:	d828      	bhi.n	8102016 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101fc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101fc8:	d01a      	beq.n	8102000 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8101fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101fce:	d822      	bhi.n	8102016 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101fd0:	2b00      	cmp	r3, #0
 8101fd2:	d003      	beq.n	8101fdc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8101fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8101fd8:	d007      	beq.n	8101fea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8101fda:	e01c      	b.n	8102016 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101fdc:	4b4b      	ldr	r3, [pc, #300]	@ (810210c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101fe0:	4a4a      	ldr	r2, [pc, #296]	@ (810210c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101fe8:	e01c      	b.n	8102024 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fee:	3308      	adds	r3, #8
 8101ff0:	2100      	movs	r1, #0
 8101ff2:	4618      	mov	r0, r3
 8101ff4:	f001 fa6e 	bl	81034d4 <RCCEx_PLL2_Config>
 8101ff8:	4603      	mov	r3, r0
 8101ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101ffe:	e011      	b.n	8102024 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102004:	3328      	adds	r3, #40	@ 0x28
 8102006:	2100      	movs	r1, #0
 8102008:	4618      	mov	r0, r3
 810200a:	f001 fb15 	bl	8103638 <RCCEx_PLL3_Config>
 810200e:	4603      	mov	r3, r0
 8102010:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102014:	e006      	b.n	8102024 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102016:	2301      	movs	r3, #1
 8102018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810201c:	e002      	b.n	8102024 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810201e:	bf00      	nop
 8102020:	e000      	b.n	8102024 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102028:	2b00      	cmp	r3, #0
 810202a:	d10a      	bne.n	8102042 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810202c:	4b37      	ldr	r3, [pc, #220]	@ (810210c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810202e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102030:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8102034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810203a:	4a34      	ldr	r2, [pc, #208]	@ (810210c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810203c:	430b      	orrs	r3, r1
 810203e:	6513      	str	r3, [r2, #80]	@ 0x50
 8102040:	e003      	b.n	810204a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810204a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102052:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8102056:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810205a:	2300      	movs	r3, #0
 810205c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8102060:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8102064:	460b      	mov	r3, r1
 8102066:	4313      	orrs	r3, r2
 8102068:	d056      	beq.n	8102118 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810206a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810206e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102074:	d033      	beq.n	81020de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102076:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810207a:	d82c      	bhi.n	81020d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810207c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102080:	d02f      	beq.n	81020e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8102082:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102086:	d826      	bhi.n	81020d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102088:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810208c:	d02b      	beq.n	81020e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810208e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102092:	d820      	bhi.n	81020d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102098:	d012      	beq.n	81020c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810209a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810209e:	d81a      	bhi.n	81020d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81020a0:	2b00      	cmp	r3, #0
 81020a2:	d022      	beq.n	81020ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81020a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81020a8:	d115      	bne.n	81020d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81020aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020ae:	3308      	adds	r3, #8
 81020b0:	2101      	movs	r1, #1
 81020b2:	4618      	mov	r0, r3
 81020b4:	f001 fa0e 	bl	81034d4 <RCCEx_PLL2_Config>
 81020b8:	4603      	mov	r3, r0
 81020ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81020be:	e015      	b.n	81020ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81020c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020c4:	3328      	adds	r3, #40	@ 0x28
 81020c6:	2101      	movs	r1, #1
 81020c8:	4618      	mov	r0, r3
 81020ca:	f001 fab5 	bl	8103638 <RCCEx_PLL3_Config>
 81020ce:	4603      	mov	r3, r0
 81020d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81020d4:	e00a      	b.n	81020ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81020d6:	2301      	movs	r3, #1
 81020d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81020dc:	e006      	b.n	81020ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81020de:	bf00      	nop
 81020e0:	e004      	b.n	81020ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81020e2:	bf00      	nop
 81020e4:	e002      	b.n	81020ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81020e6:	bf00      	nop
 81020e8:	e000      	b.n	81020ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81020ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 81020ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81020f0:	2b00      	cmp	r3, #0
 81020f2:	d10d      	bne.n	8102110 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81020f4:	4b05      	ldr	r3, [pc, #20]	@ (810210c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81020f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81020f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81020fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102102:	4a02      	ldr	r2, [pc, #8]	@ (810210c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102104:	430b      	orrs	r3, r1
 8102106:	6513      	str	r3, [r2, #80]	@ 0x50
 8102108:	e006      	b.n	8102118 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810210a:	bf00      	nop
 810210c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102114:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102120:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8102124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8102128:	2300      	movs	r3, #0
 810212a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810212e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8102132:	460b      	mov	r3, r1
 8102134:	4313      	orrs	r3, r2
 8102136:	d055      	beq.n	81021e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8102138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810213c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102140:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102144:	d033      	beq.n	81021ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8102146:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810214a:	d82c      	bhi.n	81021a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810214c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102150:	d02f      	beq.n	81021b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8102152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102156:	d826      	bhi.n	81021a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102158:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810215c:	d02b      	beq.n	81021b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810215e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102162:	d820      	bhi.n	81021a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102164:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102168:	d012      	beq.n	8102190 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810216a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810216e:	d81a      	bhi.n	81021a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102170:	2b00      	cmp	r3, #0
 8102172:	d022      	beq.n	81021ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8102174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102178:	d115      	bne.n	81021a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810217a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810217e:	3308      	adds	r3, #8
 8102180:	2101      	movs	r1, #1
 8102182:	4618      	mov	r0, r3
 8102184:	f001 f9a6 	bl	81034d4 <RCCEx_PLL2_Config>
 8102188:	4603      	mov	r3, r0
 810218a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810218e:	e015      	b.n	81021bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102194:	3328      	adds	r3, #40	@ 0x28
 8102196:	2101      	movs	r1, #1
 8102198:	4618      	mov	r0, r3
 810219a:	f001 fa4d 	bl	8103638 <RCCEx_PLL3_Config>
 810219e:	4603      	mov	r3, r0
 81021a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81021a4:	e00a      	b.n	81021bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81021a6:	2301      	movs	r3, #1
 81021a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81021ac:	e006      	b.n	81021bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81021ae:	bf00      	nop
 81021b0:	e004      	b.n	81021bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81021b2:	bf00      	nop
 81021b4:	e002      	b.n	81021bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81021b6:	bf00      	nop
 81021b8:	e000      	b.n	81021bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81021ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 81021bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81021c0:	2b00      	cmp	r3, #0
 81021c2:	d10b      	bne.n	81021dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81021c4:	4ba4      	ldr	r3, [pc, #656]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81021c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81021c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81021cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81021d4:	4aa0      	ldr	r2, [pc, #640]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81021d6:	430b      	orrs	r3, r1
 81021d8:	6593      	str	r3, [r2, #88]	@ 0x58
 81021da:	e003      	b.n	81021e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81021e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81021e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81021ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81021f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81021f4:	2300      	movs	r3, #0
 81021f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81021fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81021fe:	460b      	mov	r3, r1
 8102200:	4313      	orrs	r3, r2
 8102202:	d037      	beq.n	8102274 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8102204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810220a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810220e:	d00e      	beq.n	810222e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8102210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102214:	d816      	bhi.n	8102244 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8102216:	2b00      	cmp	r3, #0
 8102218:	d018      	beq.n	810224c <HAL_RCCEx_PeriphCLKConfig+0x708>
 810221a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810221e:	d111      	bne.n	8102244 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102220:	4b8d      	ldr	r3, [pc, #564]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102224:	4a8c      	ldr	r2, [pc, #560]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810222a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810222c:	e00f      	b.n	810224e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810222e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102232:	3308      	adds	r3, #8
 8102234:	2101      	movs	r1, #1
 8102236:	4618      	mov	r0, r3
 8102238:	f001 f94c 	bl	81034d4 <RCCEx_PLL2_Config>
 810223c:	4603      	mov	r3, r0
 810223e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8102242:	e004      	b.n	810224e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102244:	2301      	movs	r3, #1
 8102246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810224a:	e000      	b.n	810224e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 810224c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810224e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102252:	2b00      	cmp	r3, #0
 8102254:	d10a      	bne.n	810226c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8102256:	4b80      	ldr	r3, [pc, #512]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810225a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810225e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102264:	4a7c      	ldr	r2, [pc, #496]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102266:	430b      	orrs	r3, r1
 8102268:	6513      	str	r3, [r2, #80]	@ 0x50
 810226a:	e003      	b.n	8102274 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810226c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102270:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102278:	e9d3 2300 	ldrd	r2, r3, [r3]
 810227c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8102280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8102284:	2300      	movs	r3, #0
 8102286:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810228a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810228e:	460b      	mov	r3, r1
 8102290:	4313      	orrs	r3, r2
 8102292:	d039      	beq.n	8102308 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8102294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810229a:	2b03      	cmp	r3, #3
 810229c:	d81c      	bhi.n	81022d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810229e:	a201      	add	r2, pc, #4	@ (adr r2, 81022a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81022a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81022a4:	081022e1 	.word	0x081022e1
 81022a8:	081022b5 	.word	0x081022b5
 81022ac:	081022c3 	.word	0x081022c3
 81022b0:	081022e1 	.word	0x081022e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81022b4:	4b68      	ldr	r3, [pc, #416]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81022b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81022b8:	4a67      	ldr	r2, [pc, #412]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81022ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81022be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81022c0:	e00f      	b.n	81022e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81022c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022c6:	3308      	adds	r3, #8
 81022c8:	2102      	movs	r1, #2
 81022ca:	4618      	mov	r0, r3
 81022cc:	f001 f902 	bl	81034d4 <RCCEx_PLL2_Config>
 81022d0:	4603      	mov	r3, r0
 81022d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81022d6:	e004      	b.n	81022e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81022d8:	2301      	movs	r3, #1
 81022da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81022de:	e000      	b.n	81022e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81022e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81022e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81022e6:	2b00      	cmp	r3, #0
 81022e8:	d10a      	bne.n	8102300 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81022ea:	4b5b      	ldr	r3, [pc, #364]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81022ee:	f023 0103 	bic.w	r1, r3, #3
 81022f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81022f8:	4a57      	ldr	r2, [pc, #348]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81022fa:	430b      	orrs	r3, r1
 81022fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81022fe:	e003      	b.n	8102308 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102304:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102310:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8102314:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8102318:	2300      	movs	r3, #0
 810231a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810231e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8102322:	460b      	mov	r3, r1
 8102324:	4313      	orrs	r3, r2
 8102326:	f000 809f 	beq.w	8102468 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810232a:	4b4c      	ldr	r3, [pc, #304]	@ (810245c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810232c:	681b      	ldr	r3, [r3, #0]
 810232e:	4a4b      	ldr	r2, [pc, #300]	@ (810245c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8102334:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8102336:	f7fe fe25 	bl	8100f84 <HAL_GetTick>
 810233a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810233e:	e00b      	b.n	8102358 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102340:	f7fe fe20 	bl	8100f84 <HAL_GetTick>
 8102344:	4602      	mov	r2, r0
 8102346:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810234a:	1ad3      	subs	r3, r2, r3
 810234c:	2b64      	cmp	r3, #100	@ 0x64
 810234e:	d903      	bls.n	8102358 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8102350:	2303      	movs	r3, #3
 8102352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102356:	e005      	b.n	8102364 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102358:	4b40      	ldr	r3, [pc, #256]	@ (810245c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810235a:	681b      	ldr	r3, [r3, #0]
 810235c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102360:	2b00      	cmp	r3, #0
 8102362:	d0ed      	beq.n	8102340 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8102364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102368:	2b00      	cmp	r3, #0
 810236a:	d179      	bne.n	8102460 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810236c:	4b3a      	ldr	r3, [pc, #232]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810236e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8102370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102374:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102378:	4053      	eors	r3, r2
 810237a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810237e:	2b00      	cmp	r3, #0
 8102380:	d015      	beq.n	81023ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102382:	4b35      	ldr	r3, [pc, #212]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102386:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810238a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810238e:	4b32      	ldr	r3, [pc, #200]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102392:	4a31      	ldr	r2, [pc, #196]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8102398:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810239a:	4b2f      	ldr	r3, [pc, #188]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810239c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810239e:	4a2e      	ldr	r2, [pc, #184]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81023a4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81023a6:	4a2c      	ldr	r2, [pc, #176]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81023ac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81023ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81023b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81023ba:	d118      	bne.n	81023ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81023bc:	f7fe fde2 	bl	8100f84 <HAL_GetTick>
 81023c0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81023c4:	e00d      	b.n	81023e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81023c6:	f7fe fddd 	bl	8100f84 <HAL_GetTick>
 81023ca:	4602      	mov	r2, r0
 81023cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81023d0:	1ad2      	subs	r2, r2, r3
 81023d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 81023d6:	429a      	cmp	r2, r3
 81023d8:	d903      	bls.n	81023e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81023da:	2303      	movs	r3, #3
 81023dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 81023e0:	e005      	b.n	81023ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81023e2:	4b1d      	ldr	r3, [pc, #116]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81023e6:	f003 0302 	and.w	r3, r3, #2
 81023ea:	2b00      	cmp	r3, #0
 81023ec:	d0eb      	beq.n	81023c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81023ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81023f2:	2b00      	cmp	r3, #0
 81023f4:	d12b      	bne.n	810244e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81023f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81023fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102406:	d110      	bne.n	810242a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8102408:	4b13      	ldr	r3, [pc, #76]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810240a:	691b      	ldr	r3, [r3, #16]
 810240c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8102410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102414:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102418:	091b      	lsrs	r3, r3, #4
 810241a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810241e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8102422:	4a0d      	ldr	r2, [pc, #52]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102424:	430b      	orrs	r3, r1
 8102426:	6113      	str	r3, [r2, #16]
 8102428:	e005      	b.n	8102436 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810242a:	4b0b      	ldr	r3, [pc, #44]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810242c:	691b      	ldr	r3, [r3, #16]
 810242e:	4a0a      	ldr	r2, [pc, #40]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102430:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8102434:	6113      	str	r3, [r2, #16]
 8102436:	4b08      	ldr	r3, [pc, #32]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102438:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810243a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810243e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102446:	4a04      	ldr	r2, [pc, #16]	@ (8102458 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102448:	430b      	orrs	r3, r1
 810244a:	6713      	str	r3, [r2, #112]	@ 0x70
 810244c:	e00c      	b.n	8102468 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810244e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8102456:	e007      	b.n	8102468 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8102458:	58024400 	.word	0x58024400
 810245c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102464:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102470:	f002 0301 	and.w	r3, r2, #1
 8102474:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8102478:	2300      	movs	r3, #0
 810247a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810247e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8102482:	460b      	mov	r3, r1
 8102484:	4313      	orrs	r3, r2
 8102486:	f000 8089 	beq.w	810259c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810248a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810248e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102490:	2b28      	cmp	r3, #40	@ 0x28
 8102492:	d86b      	bhi.n	810256c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8102494:	a201      	add	r2, pc, #4	@ (adr r2, 810249c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8102496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810249a:	bf00      	nop
 810249c:	08102575 	.word	0x08102575
 81024a0:	0810256d 	.word	0x0810256d
 81024a4:	0810256d 	.word	0x0810256d
 81024a8:	0810256d 	.word	0x0810256d
 81024ac:	0810256d 	.word	0x0810256d
 81024b0:	0810256d 	.word	0x0810256d
 81024b4:	0810256d 	.word	0x0810256d
 81024b8:	0810256d 	.word	0x0810256d
 81024bc:	08102541 	.word	0x08102541
 81024c0:	0810256d 	.word	0x0810256d
 81024c4:	0810256d 	.word	0x0810256d
 81024c8:	0810256d 	.word	0x0810256d
 81024cc:	0810256d 	.word	0x0810256d
 81024d0:	0810256d 	.word	0x0810256d
 81024d4:	0810256d 	.word	0x0810256d
 81024d8:	0810256d 	.word	0x0810256d
 81024dc:	08102557 	.word	0x08102557
 81024e0:	0810256d 	.word	0x0810256d
 81024e4:	0810256d 	.word	0x0810256d
 81024e8:	0810256d 	.word	0x0810256d
 81024ec:	0810256d 	.word	0x0810256d
 81024f0:	0810256d 	.word	0x0810256d
 81024f4:	0810256d 	.word	0x0810256d
 81024f8:	0810256d 	.word	0x0810256d
 81024fc:	08102575 	.word	0x08102575
 8102500:	0810256d 	.word	0x0810256d
 8102504:	0810256d 	.word	0x0810256d
 8102508:	0810256d 	.word	0x0810256d
 810250c:	0810256d 	.word	0x0810256d
 8102510:	0810256d 	.word	0x0810256d
 8102514:	0810256d 	.word	0x0810256d
 8102518:	0810256d 	.word	0x0810256d
 810251c:	08102575 	.word	0x08102575
 8102520:	0810256d 	.word	0x0810256d
 8102524:	0810256d 	.word	0x0810256d
 8102528:	0810256d 	.word	0x0810256d
 810252c:	0810256d 	.word	0x0810256d
 8102530:	0810256d 	.word	0x0810256d
 8102534:	0810256d 	.word	0x0810256d
 8102538:	0810256d 	.word	0x0810256d
 810253c:	08102575 	.word	0x08102575
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102544:	3308      	adds	r3, #8
 8102546:	2101      	movs	r1, #1
 8102548:	4618      	mov	r0, r3
 810254a:	f000 ffc3 	bl	81034d4 <RCCEx_PLL2_Config>
 810254e:	4603      	mov	r3, r0
 8102550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102554:	e00f      	b.n	8102576 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810255a:	3328      	adds	r3, #40	@ 0x28
 810255c:	2101      	movs	r1, #1
 810255e:	4618      	mov	r0, r3
 8102560:	f001 f86a 	bl	8103638 <RCCEx_PLL3_Config>
 8102564:	4603      	mov	r3, r0
 8102566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810256a:	e004      	b.n	8102576 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810256c:	2301      	movs	r3, #1
 810256e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102572:	e000      	b.n	8102576 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8102574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810257a:	2b00      	cmp	r3, #0
 810257c:	d10a      	bne.n	8102594 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810257e:	4bbf      	ldr	r3, [pc, #764]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102582:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8102586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810258a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810258c:	4abb      	ldr	r2, [pc, #748]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810258e:	430b      	orrs	r3, r1
 8102590:	6553      	str	r3, [r2, #84]	@ 0x54
 8102592:	e003      	b.n	810259c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102598:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810259c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025a4:	f002 0302 	and.w	r3, r2, #2
 81025a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81025ac:	2300      	movs	r3, #0
 81025ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81025b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 81025b6:	460b      	mov	r3, r1
 81025b8:	4313      	orrs	r3, r2
 81025ba:	d041      	beq.n	8102640 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81025bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81025c2:	2b05      	cmp	r3, #5
 81025c4:	d824      	bhi.n	8102610 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81025c6:	a201      	add	r2, pc, #4	@ (adr r2, 81025cc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81025c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81025cc:	08102619 	.word	0x08102619
 81025d0:	081025e5 	.word	0x081025e5
 81025d4:	081025fb 	.word	0x081025fb
 81025d8:	08102619 	.word	0x08102619
 81025dc:	08102619 	.word	0x08102619
 81025e0:	08102619 	.word	0x08102619
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81025e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025e8:	3308      	adds	r3, #8
 81025ea:	2101      	movs	r1, #1
 81025ec:	4618      	mov	r0, r3
 81025ee:	f000 ff71 	bl	81034d4 <RCCEx_PLL2_Config>
 81025f2:	4603      	mov	r3, r0
 81025f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81025f8:	e00f      	b.n	810261a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81025fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025fe:	3328      	adds	r3, #40	@ 0x28
 8102600:	2101      	movs	r1, #1
 8102602:	4618      	mov	r0, r3
 8102604:	f001 f818 	bl	8103638 <RCCEx_PLL3_Config>
 8102608:	4603      	mov	r3, r0
 810260a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810260e:	e004      	b.n	810261a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102610:	2301      	movs	r3, #1
 8102612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102616:	e000      	b.n	810261a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8102618:	bf00      	nop
    }

    if (ret == HAL_OK)
 810261a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810261e:	2b00      	cmp	r3, #0
 8102620:	d10a      	bne.n	8102638 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102622:	4b96      	ldr	r3, [pc, #600]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102626:	f023 0107 	bic.w	r1, r3, #7
 810262a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810262e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102630:	4a92      	ldr	r2, [pc, #584]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102632:	430b      	orrs	r3, r1
 8102634:	6553      	str	r3, [r2, #84]	@ 0x54
 8102636:	e003      	b.n	8102640 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810263c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102648:	f002 0304 	and.w	r3, r2, #4
 810264c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8102650:	2300      	movs	r3, #0
 8102652:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8102656:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810265a:	460b      	mov	r3, r1
 810265c:	4313      	orrs	r3, r2
 810265e:	d044      	beq.n	81026ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8102660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102668:	2b05      	cmp	r3, #5
 810266a:	d825      	bhi.n	81026b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 810266c:	a201      	add	r2, pc, #4	@ (adr r2, 8102674 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810266e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102672:	bf00      	nop
 8102674:	081026c1 	.word	0x081026c1
 8102678:	0810268d 	.word	0x0810268d
 810267c:	081026a3 	.word	0x081026a3
 8102680:	081026c1 	.word	0x081026c1
 8102684:	081026c1 	.word	0x081026c1
 8102688:	081026c1 	.word	0x081026c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810268c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102690:	3308      	adds	r3, #8
 8102692:	2101      	movs	r1, #1
 8102694:	4618      	mov	r0, r3
 8102696:	f000 ff1d 	bl	81034d4 <RCCEx_PLL2_Config>
 810269a:	4603      	mov	r3, r0
 810269c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81026a0:	e00f      	b.n	81026c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81026a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026a6:	3328      	adds	r3, #40	@ 0x28
 81026a8:	2101      	movs	r1, #1
 81026aa:	4618      	mov	r0, r3
 81026ac:	f000 ffc4 	bl	8103638 <RCCEx_PLL3_Config>
 81026b0:	4603      	mov	r3, r0
 81026b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81026b6:	e004      	b.n	81026c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81026b8:	2301      	movs	r3, #1
 81026ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81026be:	e000      	b.n	81026c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81026c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81026c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81026c6:	2b00      	cmp	r3, #0
 81026c8:	d10b      	bne.n	81026e2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81026ca:	4b6c      	ldr	r3, [pc, #432]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81026cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81026ce:	f023 0107 	bic.w	r1, r3, #7
 81026d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81026da:	4a68      	ldr	r2, [pc, #416]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81026dc:	430b      	orrs	r3, r1
 81026de:	6593      	str	r3, [r2, #88]	@ 0x58
 81026e0:	e003      	b.n	81026ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81026e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81026e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81026ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026f2:	f002 0320 	and.w	r3, r2, #32
 81026f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81026fa:	2300      	movs	r3, #0
 81026fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8102700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8102704:	460b      	mov	r3, r1
 8102706:	4313      	orrs	r3, r2
 8102708:	d055      	beq.n	81027b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810270a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102712:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102716:	d033      	beq.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8102718:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810271c:	d82c      	bhi.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810271e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102722:	d02f      	beq.n	8102784 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8102724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102728:	d826      	bhi.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810272a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810272e:	d02b      	beq.n	8102788 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8102730:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102734:	d820      	bhi.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810273a:	d012      	beq.n	8102762 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 810273c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102740:	d81a      	bhi.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102742:	2b00      	cmp	r3, #0
 8102744:	d022      	beq.n	810278c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8102746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810274a:	d115      	bne.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810274c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102750:	3308      	adds	r3, #8
 8102752:	2100      	movs	r1, #0
 8102754:	4618      	mov	r0, r3
 8102756:	f000 febd 	bl	81034d4 <RCCEx_PLL2_Config>
 810275a:	4603      	mov	r3, r0
 810275c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102760:	e015      	b.n	810278e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102766:	3328      	adds	r3, #40	@ 0x28
 8102768:	2102      	movs	r1, #2
 810276a:	4618      	mov	r0, r3
 810276c:	f000 ff64 	bl	8103638 <RCCEx_PLL3_Config>
 8102770:	4603      	mov	r3, r0
 8102772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102776:	e00a      	b.n	810278e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102778:	2301      	movs	r3, #1
 810277a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810277e:	e006      	b.n	810278e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102780:	bf00      	nop
 8102782:	e004      	b.n	810278e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102784:	bf00      	nop
 8102786:	e002      	b.n	810278e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102788:	bf00      	nop
 810278a:	e000      	b.n	810278e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810278c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810278e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102792:	2b00      	cmp	r3, #0
 8102794:	d10b      	bne.n	81027ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102796:	4b39      	ldr	r3, [pc, #228]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810279a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810279e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81027a6:	4a35      	ldr	r2, [pc, #212]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81027a8:	430b      	orrs	r3, r1
 81027aa:	6553      	str	r3, [r2, #84]	@ 0x54
 81027ac:	e003      	b.n	81027b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81027b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81027b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81027c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81027c6:	2300      	movs	r3, #0
 81027c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81027cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81027d0:	460b      	mov	r3, r1
 81027d2:	4313      	orrs	r3, r2
 81027d4:	d058      	beq.n	8102888 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81027d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81027de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81027e2:	d033      	beq.n	810284c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81027e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81027e8:	d82c      	bhi.n	8102844 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81027ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81027ee:	d02f      	beq.n	8102850 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81027f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81027f4:	d826      	bhi.n	8102844 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81027f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81027fa:	d02b      	beq.n	8102854 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 81027fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102800:	d820      	bhi.n	8102844 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102802:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102806:	d012      	beq.n	810282e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8102808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810280c:	d81a      	bhi.n	8102844 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810280e:	2b00      	cmp	r3, #0
 8102810:	d022      	beq.n	8102858 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8102812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8102816:	d115      	bne.n	8102844 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810281c:	3308      	adds	r3, #8
 810281e:	2100      	movs	r1, #0
 8102820:	4618      	mov	r0, r3
 8102822:	f000 fe57 	bl	81034d4 <RCCEx_PLL2_Config>
 8102826:	4603      	mov	r3, r0
 8102828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810282c:	e015      	b.n	810285a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810282e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102832:	3328      	adds	r3, #40	@ 0x28
 8102834:	2102      	movs	r1, #2
 8102836:	4618      	mov	r0, r3
 8102838:	f000 fefe 	bl	8103638 <RCCEx_PLL3_Config>
 810283c:	4603      	mov	r3, r0
 810283e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102842:	e00a      	b.n	810285a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102844:	2301      	movs	r3, #1
 8102846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810284a:	e006      	b.n	810285a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810284c:	bf00      	nop
 810284e:	e004      	b.n	810285a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102850:	bf00      	nop
 8102852:	e002      	b.n	810285a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102854:	bf00      	nop
 8102856:	e000      	b.n	810285a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102858:	bf00      	nop
    }

    if (ret == HAL_OK)
 810285a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810285e:	2b00      	cmp	r3, #0
 8102860:	d10e      	bne.n	8102880 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102862:	4b06      	ldr	r3, [pc, #24]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102866:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810286a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810286e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102872:	4a02      	ldr	r2, [pc, #8]	@ (810287c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102874:	430b      	orrs	r3, r1
 8102876:	6593      	str	r3, [r2, #88]	@ 0x58
 8102878:	e006      	b.n	8102888 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810287a:	bf00      	nop
 810287c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102890:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8102894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8102898:	2300      	movs	r3, #0
 810289a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810289e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81028a2:	460b      	mov	r3, r1
 81028a4:	4313      	orrs	r3, r2
 81028a6:	d055      	beq.n	8102954 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81028a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81028b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81028b4:	d033      	beq.n	810291e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81028b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81028ba:	d82c      	bhi.n	8102916 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81028bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81028c0:	d02f      	beq.n	8102922 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81028c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81028c6:	d826      	bhi.n	8102916 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81028c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81028cc:	d02b      	beq.n	8102926 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81028ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81028d2:	d820      	bhi.n	8102916 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81028d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81028d8:	d012      	beq.n	8102900 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81028da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81028de:	d81a      	bhi.n	8102916 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81028e0:	2b00      	cmp	r3, #0
 81028e2:	d022      	beq.n	810292a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81028e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81028e8:	d115      	bne.n	8102916 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81028ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028ee:	3308      	adds	r3, #8
 81028f0:	2100      	movs	r1, #0
 81028f2:	4618      	mov	r0, r3
 81028f4:	f000 fdee 	bl	81034d4 <RCCEx_PLL2_Config>
 81028f8:	4603      	mov	r3, r0
 81028fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81028fe:	e015      	b.n	810292c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102904:	3328      	adds	r3, #40	@ 0x28
 8102906:	2102      	movs	r1, #2
 8102908:	4618      	mov	r0, r3
 810290a:	f000 fe95 	bl	8103638 <RCCEx_PLL3_Config>
 810290e:	4603      	mov	r3, r0
 8102910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102914:	e00a      	b.n	810292c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102916:	2301      	movs	r3, #1
 8102918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810291c:	e006      	b.n	810292c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810291e:	bf00      	nop
 8102920:	e004      	b.n	810292c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102922:	bf00      	nop
 8102924:	e002      	b.n	810292c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102926:	bf00      	nop
 8102928:	e000      	b.n	810292c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810292a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810292c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102930:	2b00      	cmp	r3, #0
 8102932:	d10b      	bne.n	810294c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102934:	4ba1      	ldr	r3, [pc, #644]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102938:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810293c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102940:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102944:	4a9d      	ldr	r2, [pc, #628]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102946:	430b      	orrs	r3, r1
 8102948:	6593      	str	r3, [r2, #88]	@ 0x58
 810294a:	e003      	b.n	8102954 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810294c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102950:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102958:	e9d3 2300 	ldrd	r2, r3, [r3]
 810295c:	f002 0308 	and.w	r3, r2, #8
 8102960:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8102964:	2300      	movs	r3, #0
 8102966:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810296a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810296e:	460b      	mov	r3, r1
 8102970:	4313      	orrs	r3, r2
 8102972:	d01e      	beq.n	81029b2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8102974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810297c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102980:	d10c      	bne.n	810299c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102986:	3328      	adds	r3, #40	@ 0x28
 8102988:	2102      	movs	r1, #2
 810298a:	4618      	mov	r0, r3
 810298c:	f000 fe54 	bl	8103638 <RCCEx_PLL3_Config>
 8102990:	4603      	mov	r3, r0
 8102992:	2b00      	cmp	r3, #0
 8102994:	d002      	beq.n	810299c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8102996:	2301      	movs	r3, #1
 8102998:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810299c:	4b87      	ldr	r3, [pc, #540]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810299e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81029a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81029a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81029ac:	4a83      	ldr	r2, [pc, #524]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81029ae:	430b      	orrs	r3, r1
 81029b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81029b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029ba:	f002 0310 	and.w	r3, r2, #16
 81029be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81029c2:	2300      	movs	r3, #0
 81029c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81029c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81029cc:	460b      	mov	r3, r1
 81029ce:	4313      	orrs	r3, r2
 81029d0:	d01e      	beq.n	8102a10 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81029d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81029da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81029de:	d10c      	bne.n	81029fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81029e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029e4:	3328      	adds	r3, #40	@ 0x28
 81029e6:	2102      	movs	r1, #2
 81029e8:	4618      	mov	r0, r3
 81029ea:	f000 fe25 	bl	8103638 <RCCEx_PLL3_Config>
 81029ee:	4603      	mov	r3, r0
 81029f0:	2b00      	cmp	r3, #0
 81029f2:	d002      	beq.n	81029fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81029f4:	2301      	movs	r3, #1
 81029f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81029fa:	4b70      	ldr	r3, [pc, #448]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81029fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81029fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102a0a:	4a6c      	ldr	r2, [pc, #432]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102a0c:	430b      	orrs	r3, r1
 8102a0e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a18:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8102a1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8102a20:	2300      	movs	r3, #0
 8102a22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8102a26:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8102a2a:	460b      	mov	r3, r1
 8102a2c:	4313      	orrs	r3, r2
 8102a2e:	d03e      	beq.n	8102aae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8102a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102a38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102a3c:	d022      	beq.n	8102a84 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8102a3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102a42:	d81b      	bhi.n	8102a7c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8102a44:	2b00      	cmp	r3, #0
 8102a46:	d003      	beq.n	8102a50 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8102a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102a4c:	d00b      	beq.n	8102a66 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8102a4e:	e015      	b.n	8102a7c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a54:	3308      	adds	r3, #8
 8102a56:	2100      	movs	r1, #0
 8102a58:	4618      	mov	r0, r3
 8102a5a:	f000 fd3b 	bl	81034d4 <RCCEx_PLL2_Config>
 8102a5e:	4603      	mov	r3, r0
 8102a60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102a64:	e00f      	b.n	8102a86 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a6a:	3328      	adds	r3, #40	@ 0x28
 8102a6c:	2102      	movs	r1, #2
 8102a6e:	4618      	mov	r0, r3
 8102a70:	f000 fde2 	bl	8103638 <RCCEx_PLL3_Config>
 8102a74:	4603      	mov	r3, r0
 8102a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102a7a:	e004      	b.n	8102a86 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102a7c:	2301      	movs	r3, #1
 8102a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102a82:	e000      	b.n	8102a86 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8102a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a8a:	2b00      	cmp	r3, #0
 8102a8c:	d10b      	bne.n	8102aa6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102a8e:	4b4b      	ldr	r3, [pc, #300]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102a92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8102a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102a9e:	4a47      	ldr	r2, [pc, #284]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102aa0:	430b      	orrs	r3, r1
 8102aa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8102aa4:	e003      	b.n	8102aae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102aaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ab6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8102aba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8102abc:	2300      	movs	r3, #0
 8102abe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8102ac0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8102ac4:	460b      	mov	r3, r1
 8102ac6:	4313      	orrs	r3, r2
 8102ac8:	d03b      	beq.n	8102b42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8102aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102ad2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102ad6:	d01f      	beq.n	8102b18 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8102ad8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102adc:	d818      	bhi.n	8102b10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8102ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102ae2:	d003      	beq.n	8102aec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8102ae4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102ae8:	d007      	beq.n	8102afa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8102aea:	e011      	b.n	8102b10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102aec:	4b33      	ldr	r3, [pc, #204]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102af0:	4a32      	ldr	r2, [pc, #200]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102af6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8102af8:	e00f      	b.n	8102b1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102afe:	3328      	adds	r3, #40	@ 0x28
 8102b00:	2101      	movs	r1, #1
 8102b02:	4618      	mov	r0, r3
 8102b04:	f000 fd98 	bl	8103638 <RCCEx_PLL3_Config>
 8102b08:	4603      	mov	r3, r0
 8102b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8102b0e:	e004      	b.n	8102b1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102b10:	2301      	movs	r3, #1
 8102b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102b16:	e000      	b.n	8102b1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8102b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b1e:	2b00      	cmp	r3, #0
 8102b20:	d10b      	bne.n	8102b3a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102b22:	4b26      	ldr	r3, [pc, #152]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102b26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102b32:	4a22      	ldr	r2, [pc, #136]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102b34:	430b      	orrs	r3, r1
 8102b36:	6553      	str	r3, [r2, #84]	@ 0x54
 8102b38:	e003      	b.n	8102b42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b4a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8102b4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8102b50:	2300      	movs	r3, #0
 8102b52:	677b      	str	r3, [r7, #116]	@ 0x74
 8102b54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8102b58:	460b      	mov	r3, r1
 8102b5a:	4313      	orrs	r3, r2
 8102b5c:	d034      	beq.n	8102bc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8102b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102b64:	2b00      	cmp	r3, #0
 8102b66:	d003      	beq.n	8102b70 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8102b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102b6c:	d007      	beq.n	8102b7e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8102b6e:	e011      	b.n	8102b94 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b70:	4b12      	ldr	r3, [pc, #72]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102b74:	4a11      	ldr	r2, [pc, #68]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8102b7c:	e00e      	b.n	8102b9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b82:	3308      	adds	r3, #8
 8102b84:	2102      	movs	r1, #2
 8102b86:	4618      	mov	r0, r3
 8102b88:	f000 fca4 	bl	81034d4 <RCCEx_PLL2_Config>
 8102b8c:	4603      	mov	r3, r0
 8102b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8102b92:	e003      	b.n	8102b9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8102b94:	2301      	movs	r3, #1
 8102b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ba0:	2b00      	cmp	r3, #0
 8102ba2:	d10d      	bne.n	8102bc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8102ba4:	4b05      	ldr	r3, [pc, #20]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102ba8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8102bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102bb2:	4a02      	ldr	r2, [pc, #8]	@ (8102bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102bb4:	430b      	orrs	r3, r1
 8102bb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102bb8:	e006      	b.n	8102bc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8102bba:	bf00      	nop
 8102bbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102bc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102bd0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8102bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8102bd6:	2300      	movs	r3, #0
 8102bd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8102bda:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8102bde:	460b      	mov	r3, r1
 8102be0:	4313      	orrs	r3, r2
 8102be2:	d00c      	beq.n	8102bfe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102be8:	3328      	adds	r3, #40	@ 0x28
 8102bea:	2102      	movs	r1, #2
 8102bec:	4618      	mov	r0, r3
 8102bee:	f000 fd23 	bl	8103638 <RCCEx_PLL3_Config>
 8102bf2:	4603      	mov	r3, r0
 8102bf4:	2b00      	cmp	r3, #0
 8102bf6:	d002      	beq.n	8102bfe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8102bf8:	2301      	movs	r3, #1
 8102bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8102c0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8102c0c:	2300      	movs	r3, #0
 8102c0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8102c10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8102c14:	460b      	mov	r3, r1
 8102c16:	4313      	orrs	r3, r2
 8102c18:	d038      	beq.n	8102c8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8102c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102c22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102c26:	d018      	beq.n	8102c5a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8102c28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102c2c:	d811      	bhi.n	8102c52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8102c2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102c32:	d014      	beq.n	8102c5e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8102c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102c38:	d80b      	bhi.n	8102c52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8102c3a:	2b00      	cmp	r3, #0
 8102c3c:	d011      	beq.n	8102c62 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8102c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102c42:	d106      	bne.n	8102c52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c44:	4bc3      	ldr	r3, [pc, #780]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c48:	4ac2      	ldr	r2, [pc, #776]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8102c50:	e008      	b.n	8102c64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102c52:	2301      	movs	r3, #1
 8102c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102c58:	e004      	b.n	8102c64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102c5a:	bf00      	nop
 8102c5c:	e002      	b.n	8102c64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102c5e:	bf00      	nop
 8102c60:	e000      	b.n	8102c64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c68:	2b00      	cmp	r3, #0
 8102c6a:	d10b      	bne.n	8102c84 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102c6c:	4bb9      	ldr	r3, [pc, #740]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102c70:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102c7c:	4ab5      	ldr	r2, [pc, #724]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c7e:	430b      	orrs	r3, r1
 8102c80:	6553      	str	r3, [r2, #84]	@ 0x54
 8102c82:	e003      	b.n	8102c8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c94:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8102c98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8102c9a:	2300      	movs	r3, #0
 8102c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8102c9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8102ca2:	460b      	mov	r3, r1
 8102ca4:	4313      	orrs	r3, r2
 8102ca6:	d009      	beq.n	8102cbc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8102ca8:	4baa      	ldr	r3, [pc, #680]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102cac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8102cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8102cb6:	4aa7      	ldr	r2, [pc, #668]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102cb8:	430b      	orrs	r3, r1
 8102cba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cc4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8102cc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8102cca:	2300      	movs	r3, #0
 8102ccc:	657b      	str	r3, [r7, #84]	@ 0x54
 8102cce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8102cd2:	460b      	mov	r3, r1
 8102cd4:	4313      	orrs	r3, r2
 8102cd6:	d00a      	beq.n	8102cee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102cd8:	4b9e      	ldr	r3, [pc, #632]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102cda:	691b      	ldr	r3, [r3, #16]
 8102cdc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8102ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ce4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8102ce8:	4a9a      	ldr	r2, [pc, #616]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102cea:	430b      	orrs	r3, r1
 8102cec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cf6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8102cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8102cfc:	2300      	movs	r3, #0
 8102cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8102d00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8102d04:	460b      	mov	r3, r1
 8102d06:	4313      	orrs	r3, r2
 8102d08:	d009      	beq.n	8102d1e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102d0a:	4b92      	ldr	r3, [pc, #584]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102d0e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8102d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102d18:	4a8e      	ldr	r2, [pc, #568]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d1a:	430b      	orrs	r3, r1
 8102d1c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d26:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8102d2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8102d2c:	2300      	movs	r3, #0
 8102d2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8102d30:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8102d34:	460b      	mov	r3, r1
 8102d36:	4313      	orrs	r3, r2
 8102d38:	d00e      	beq.n	8102d58 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102d3a:	4b86      	ldr	r3, [pc, #536]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d3c:	691b      	ldr	r3, [r3, #16]
 8102d3e:	4a85      	ldr	r2, [pc, #532]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8102d44:	6113      	str	r3, [r2, #16]
 8102d46:	4b83      	ldr	r3, [pc, #524]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d48:	6919      	ldr	r1, [r3, #16]
 8102d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102d52:	4a80      	ldr	r2, [pc, #512]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d54:	430b      	orrs	r3, r1
 8102d56:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d60:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8102d64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8102d66:	2300      	movs	r3, #0
 8102d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102d6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8102d6e:	460b      	mov	r3, r1
 8102d70:	4313      	orrs	r3, r2
 8102d72:	d009      	beq.n	8102d88 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102d74:	4b77      	ldr	r3, [pc, #476]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102d78:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8102d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102d82:	4a74      	ldr	r2, [pc, #464]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d84:	430b      	orrs	r3, r1
 8102d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d90:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8102d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8102d96:	2300      	movs	r3, #0
 8102d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8102d9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8102d9e:	460b      	mov	r3, r1
 8102da0:	4313      	orrs	r3, r2
 8102da2:	d00a      	beq.n	8102dba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8102da4:	4b6b      	ldr	r3, [pc, #428]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102da8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8102dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8102db4:	4a67      	ldr	r2, [pc, #412]	@ (8102f54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102db6:	430b      	orrs	r3, r1
 8102db8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8102dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102dc2:	2100      	movs	r1, #0
 8102dc4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8102dc6:	f003 0301 	and.w	r3, r3, #1
 8102dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102dcc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8102dd0:	460b      	mov	r3, r1
 8102dd2:	4313      	orrs	r3, r2
 8102dd4:	d011      	beq.n	8102dfa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dda:	3308      	adds	r3, #8
 8102ddc:	2100      	movs	r1, #0
 8102dde:	4618      	mov	r0, r3
 8102de0:	f000 fb78 	bl	81034d4 <RCCEx_PLL2_Config>
 8102de4:	4603      	mov	r3, r0
 8102de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102dee:	2b00      	cmp	r3, #0
 8102df0:	d003      	beq.n	8102dfa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102df6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8102dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e02:	2100      	movs	r1, #0
 8102e04:	6239      	str	r1, [r7, #32]
 8102e06:	f003 0302 	and.w	r3, r3, #2
 8102e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8102e0c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8102e10:	460b      	mov	r3, r1
 8102e12:	4313      	orrs	r3, r2
 8102e14:	d011      	beq.n	8102e3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e1a:	3308      	adds	r3, #8
 8102e1c:	2101      	movs	r1, #1
 8102e1e:	4618      	mov	r0, r3
 8102e20:	f000 fb58 	bl	81034d4 <RCCEx_PLL2_Config>
 8102e24:	4603      	mov	r3, r0
 8102e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e2e:	2b00      	cmp	r3, #0
 8102e30:	d003      	beq.n	8102e3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8102e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e42:	2100      	movs	r1, #0
 8102e44:	61b9      	str	r1, [r7, #24]
 8102e46:	f003 0304 	and.w	r3, r3, #4
 8102e4a:	61fb      	str	r3, [r7, #28]
 8102e4c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8102e50:	460b      	mov	r3, r1
 8102e52:	4313      	orrs	r3, r2
 8102e54:	d011      	beq.n	8102e7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e5a:	3308      	adds	r3, #8
 8102e5c:	2102      	movs	r1, #2
 8102e5e:	4618      	mov	r0, r3
 8102e60:	f000 fb38 	bl	81034d4 <RCCEx_PLL2_Config>
 8102e64:	4603      	mov	r3, r0
 8102e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e6e:	2b00      	cmp	r3, #0
 8102e70:	d003      	beq.n	8102e7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8102e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e82:	2100      	movs	r1, #0
 8102e84:	6139      	str	r1, [r7, #16]
 8102e86:	f003 0308 	and.w	r3, r3, #8
 8102e8a:	617b      	str	r3, [r7, #20]
 8102e8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8102e90:	460b      	mov	r3, r1
 8102e92:	4313      	orrs	r3, r2
 8102e94:	d011      	beq.n	8102eba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e9a:	3328      	adds	r3, #40	@ 0x28
 8102e9c:	2100      	movs	r1, #0
 8102e9e:	4618      	mov	r0, r3
 8102ea0:	f000 fbca 	bl	8103638 <RCCEx_PLL3_Config>
 8102ea4:	4603      	mov	r3, r0
 8102ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8102eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102eae:	2b00      	cmp	r3, #0
 8102eb0:	d003      	beq.n	8102eba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8102eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ec2:	2100      	movs	r1, #0
 8102ec4:	60b9      	str	r1, [r7, #8]
 8102ec6:	f003 0310 	and.w	r3, r3, #16
 8102eca:	60fb      	str	r3, [r7, #12]
 8102ecc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8102ed0:	460b      	mov	r3, r1
 8102ed2:	4313      	orrs	r3, r2
 8102ed4:	d011      	beq.n	8102efa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102eda:	3328      	adds	r3, #40	@ 0x28
 8102edc:	2101      	movs	r1, #1
 8102ede:	4618      	mov	r0, r3
 8102ee0:	f000 fbaa 	bl	8103638 <RCCEx_PLL3_Config>
 8102ee4:	4603      	mov	r3, r0
 8102ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102eee:	2b00      	cmp	r3, #0
 8102ef0:	d003      	beq.n	8102efa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8102efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f02:	2100      	movs	r1, #0
 8102f04:	6039      	str	r1, [r7, #0]
 8102f06:	f003 0320 	and.w	r3, r3, #32
 8102f0a:	607b      	str	r3, [r7, #4]
 8102f0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8102f10:	460b      	mov	r3, r1
 8102f12:	4313      	orrs	r3, r2
 8102f14:	d011      	beq.n	8102f3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f1a:	3328      	adds	r3, #40	@ 0x28
 8102f1c:	2102      	movs	r1, #2
 8102f1e:	4618      	mov	r0, r3
 8102f20:	f000 fb8a 	bl	8103638 <RCCEx_PLL3_Config>
 8102f24:	4603      	mov	r3, r0
 8102f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102f2e:	2b00      	cmp	r3, #0
 8102f30:	d003      	beq.n	8102f3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8102f3a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8102f3e:	2b00      	cmp	r3, #0
 8102f40:	d101      	bne.n	8102f46 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8102f42:	2300      	movs	r3, #0
 8102f44:	e000      	b.n	8102f48 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8102f46:	2301      	movs	r3, #1
}
 8102f48:	4618      	mov	r0, r3
 8102f4a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8102f4e:	46bd      	mov	sp, r7
 8102f50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8102f54:	58024400 	.word	0x58024400

08102f58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8102f58:	b580      	push	{r7, lr}
 8102f5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8102f5c:	f7fe fd52 	bl	8101a04 <HAL_RCC_GetHCLKFreq>
 8102f60:	4602      	mov	r2, r0
 8102f62:	4b06      	ldr	r3, [pc, #24]	@ (8102f7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8102f64:	6a1b      	ldr	r3, [r3, #32]
 8102f66:	091b      	lsrs	r3, r3, #4
 8102f68:	f003 0307 	and.w	r3, r3, #7
 8102f6c:	4904      	ldr	r1, [pc, #16]	@ (8102f80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8102f6e:	5ccb      	ldrb	r3, [r1, r3]
 8102f70:	f003 031f 	and.w	r3, r3, #31
 8102f74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8102f78:	4618      	mov	r0, r3
 8102f7a:	bd80      	pop	{r7, pc}
 8102f7c:	58024400 	.word	0x58024400
 8102f80:	0810c694 	.word	0x0810c694

08102f84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8102f84:	b480      	push	{r7}
 8102f86:	b089      	sub	sp, #36	@ 0x24
 8102f88:	af00      	add	r7, sp, #0
 8102f8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102f8c:	4ba1      	ldr	r3, [pc, #644]	@ (8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102f90:	f003 0303 	and.w	r3, r3, #3
 8102f94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8102f96:	4b9f      	ldr	r3, [pc, #636]	@ (8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102f9a:	0b1b      	lsrs	r3, r3, #12
 8102f9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102fa0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8102fa2:	4b9c      	ldr	r3, [pc, #624]	@ (8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102fa6:	091b      	lsrs	r3, r3, #4
 8102fa8:	f003 0301 	and.w	r3, r3, #1
 8102fac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8102fae:	4b99      	ldr	r3, [pc, #612]	@ (8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102fb2:	08db      	lsrs	r3, r3, #3
 8102fb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102fb8:	693a      	ldr	r2, [r7, #16]
 8102fba:	fb02 f303 	mul.w	r3, r2, r3
 8102fbe:	ee07 3a90 	vmov	s15, r3
 8102fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102fc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8102fca:	697b      	ldr	r3, [r7, #20]
 8102fcc:	2b00      	cmp	r3, #0
 8102fce:	f000 8111 	beq.w	81031f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8102fd2:	69bb      	ldr	r3, [r7, #24]
 8102fd4:	2b02      	cmp	r3, #2
 8102fd6:	f000 8083 	beq.w	81030e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8102fda:	69bb      	ldr	r3, [r7, #24]
 8102fdc:	2b02      	cmp	r3, #2
 8102fde:	f200 80a1 	bhi.w	8103124 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8102fe2:	69bb      	ldr	r3, [r7, #24]
 8102fe4:	2b00      	cmp	r3, #0
 8102fe6:	d003      	beq.n	8102ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8102fe8:	69bb      	ldr	r3, [r7, #24]
 8102fea:	2b01      	cmp	r3, #1
 8102fec:	d056      	beq.n	810309c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8102fee:	e099      	b.n	8103124 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102ff0:	4b88      	ldr	r3, [pc, #544]	@ (8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102ff2:	681b      	ldr	r3, [r3, #0]
 8102ff4:	f003 0320 	and.w	r3, r3, #32
 8102ff8:	2b00      	cmp	r3, #0
 8102ffa:	d02d      	beq.n	8103058 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102ffc:	4b85      	ldr	r3, [pc, #532]	@ (8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102ffe:	681b      	ldr	r3, [r3, #0]
 8103000:	08db      	lsrs	r3, r3, #3
 8103002:	f003 0303 	and.w	r3, r3, #3
 8103006:	4a84      	ldr	r2, [pc, #528]	@ (8103218 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103008:	fa22 f303 	lsr.w	r3, r2, r3
 810300c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810300e:	68bb      	ldr	r3, [r7, #8]
 8103010:	ee07 3a90 	vmov	s15, r3
 8103014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103018:	697b      	ldr	r3, [r7, #20]
 810301a:	ee07 3a90 	vmov	s15, r3
 810301e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103026:	4b7b      	ldr	r3, [pc, #492]	@ (8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810302a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810302e:	ee07 3a90 	vmov	s15, r3
 8103032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103036:	ed97 6a03 	vldr	s12, [r7, #12]
 810303a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810321c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810303e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810304a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810304e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103052:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8103056:	e087      	b.n	8103168 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103058:	697b      	ldr	r3, [r7, #20]
 810305a:	ee07 3a90 	vmov	s15, r3
 810305e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103062:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8103220 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8103066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810306a:	4b6a      	ldr	r3, [pc, #424]	@ (8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810306c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810306e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103072:	ee07 3a90 	vmov	s15, r3
 8103076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810307a:	ed97 6a03 	vldr	s12, [r7, #12]
 810307e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810321c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810308a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810308e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810309a:	e065      	b.n	8103168 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810309c:	697b      	ldr	r3, [r7, #20]
 810309e:	ee07 3a90 	vmov	s15, r3
 81030a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8103224 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81030aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81030ae:	4b59      	ldr	r3, [pc, #356]	@ (8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81030b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81030b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81030b6:	ee07 3a90 	vmov	s15, r3
 81030ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81030be:	ed97 6a03 	vldr	s12, [r7, #12]
 81030c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810321c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81030c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81030ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81030ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81030d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81030d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81030da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81030de:	e043      	b.n	8103168 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81030e0:	697b      	ldr	r3, [r7, #20]
 81030e2:	ee07 3a90 	vmov	s15, r3
 81030e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8103228 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81030ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81030f2:	4b48      	ldr	r3, [pc, #288]	@ (8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81030f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81030f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81030fa:	ee07 3a90 	vmov	s15, r3
 81030fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103102:	ed97 6a03 	vldr	s12, [r7, #12]
 8103106:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810321c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810310a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810310e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810311a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810311e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103122:	e021      	b.n	8103168 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103124:	697b      	ldr	r3, [r7, #20]
 8103126:	ee07 3a90 	vmov	s15, r3
 810312a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810312e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8103224 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103136:	4b37      	ldr	r3, [pc, #220]	@ (8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810313a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810313e:	ee07 3a90 	vmov	s15, r3
 8103142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103146:	ed97 6a03 	vldr	s12, [r7, #12]
 810314a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810321c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810314e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810315a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810315e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103166:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8103168:	4b2a      	ldr	r3, [pc, #168]	@ (8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810316a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810316c:	0a5b      	lsrs	r3, r3, #9
 810316e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103172:	ee07 3a90 	vmov	s15, r3
 8103176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810317a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810317e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103182:	edd7 6a07 	vldr	s13, [r7, #28]
 8103186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810318a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810318e:	ee17 2a90 	vmov	r2, s15
 8103192:	687b      	ldr	r3, [r7, #4]
 8103194:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8103196:	4b1f      	ldr	r3, [pc, #124]	@ (8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810319a:	0c1b      	lsrs	r3, r3, #16
 810319c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81031a0:	ee07 3a90 	vmov	s15, r3
 81031a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81031ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 81031b0:	edd7 6a07 	vldr	s13, [r7, #28]
 81031b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81031b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81031bc:	ee17 2a90 	vmov	r2, s15
 81031c0:	687b      	ldr	r3, [r7, #4]
 81031c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81031c4:	4b13      	ldr	r3, [pc, #76]	@ (8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81031c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81031c8:	0e1b      	lsrs	r3, r3, #24
 81031ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81031ce:	ee07 3a90 	vmov	s15, r3
 81031d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81031da:	ee37 7a87 	vadd.f32	s14, s15, s14
 81031de:	edd7 6a07 	vldr	s13, [r7, #28]
 81031e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81031e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81031ea:	ee17 2a90 	vmov	r2, s15
 81031ee:	687b      	ldr	r3, [r7, #4]
 81031f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81031f2:	e008      	b.n	8103206 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81031f4:	687b      	ldr	r3, [r7, #4]
 81031f6:	2200      	movs	r2, #0
 81031f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	2200      	movs	r2, #0
 81031fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	2200      	movs	r2, #0
 8103204:	609a      	str	r2, [r3, #8]
}
 8103206:	bf00      	nop
 8103208:	3724      	adds	r7, #36	@ 0x24
 810320a:	46bd      	mov	sp, r7
 810320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103210:	4770      	bx	lr
 8103212:	bf00      	nop
 8103214:	58024400 	.word	0x58024400
 8103218:	03d09000 	.word	0x03d09000
 810321c:	46000000 	.word	0x46000000
 8103220:	4c742400 	.word	0x4c742400
 8103224:	4a742400 	.word	0x4a742400
 8103228:	4bbebc20 	.word	0x4bbebc20

0810322c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810322c:	b480      	push	{r7}
 810322e:	b089      	sub	sp, #36	@ 0x24
 8103230:	af00      	add	r7, sp, #0
 8103232:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103234:	4ba1      	ldr	r3, [pc, #644]	@ (81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103238:	f003 0303 	and.w	r3, r3, #3
 810323c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810323e:	4b9f      	ldr	r3, [pc, #636]	@ (81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103242:	0d1b      	lsrs	r3, r3, #20
 8103244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103248:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810324a:	4b9c      	ldr	r3, [pc, #624]	@ (81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810324c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810324e:	0a1b      	lsrs	r3, r3, #8
 8103250:	f003 0301 	and.w	r3, r3, #1
 8103254:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8103256:	4b99      	ldr	r3, [pc, #612]	@ (81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810325a:	08db      	lsrs	r3, r3, #3
 810325c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103260:	693a      	ldr	r2, [r7, #16]
 8103262:	fb02 f303 	mul.w	r3, r2, r3
 8103266:	ee07 3a90 	vmov	s15, r3
 810326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810326e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8103272:	697b      	ldr	r3, [r7, #20]
 8103274:	2b00      	cmp	r3, #0
 8103276:	f000 8111 	beq.w	810349c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810327a:	69bb      	ldr	r3, [r7, #24]
 810327c:	2b02      	cmp	r3, #2
 810327e:	f000 8083 	beq.w	8103388 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8103282:	69bb      	ldr	r3, [r7, #24]
 8103284:	2b02      	cmp	r3, #2
 8103286:	f200 80a1 	bhi.w	81033cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810328a:	69bb      	ldr	r3, [r7, #24]
 810328c:	2b00      	cmp	r3, #0
 810328e:	d003      	beq.n	8103298 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8103290:	69bb      	ldr	r3, [r7, #24]
 8103292:	2b01      	cmp	r3, #1
 8103294:	d056      	beq.n	8103344 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8103296:	e099      	b.n	81033cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103298:	4b88      	ldr	r3, [pc, #544]	@ (81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	f003 0320 	and.w	r3, r3, #32
 81032a0:	2b00      	cmp	r3, #0
 81032a2:	d02d      	beq.n	8103300 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81032a4:	4b85      	ldr	r3, [pc, #532]	@ (81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81032a6:	681b      	ldr	r3, [r3, #0]
 81032a8:	08db      	lsrs	r3, r3, #3
 81032aa:	f003 0303 	and.w	r3, r3, #3
 81032ae:	4a84      	ldr	r2, [pc, #528]	@ (81034c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81032b0:	fa22 f303 	lsr.w	r3, r2, r3
 81032b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81032b6:	68bb      	ldr	r3, [r7, #8]
 81032b8:	ee07 3a90 	vmov	s15, r3
 81032bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81032c0:	697b      	ldr	r3, [r7, #20]
 81032c2:	ee07 3a90 	vmov	s15, r3
 81032c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81032ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81032ce:	4b7b      	ldr	r3, [pc, #492]	@ (81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81032d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81032d6:	ee07 3a90 	vmov	s15, r3
 81032da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81032de:	ed97 6a03 	vldr	s12, [r7, #12]
 81032e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81032e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81032ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81032ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81032f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81032f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81032fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81032fe:	e087      	b.n	8103410 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103300:	697b      	ldr	r3, [r7, #20]
 8103302:	ee07 3a90 	vmov	s15, r3
 8103306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810330a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81034c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810330e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103312:	4b6a      	ldr	r3, [pc, #424]	@ (81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810331a:	ee07 3a90 	vmov	s15, r3
 810331e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103322:	ed97 6a03 	vldr	s12, [r7, #12]
 8103326:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810332a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810332e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810333e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103342:	e065      	b.n	8103410 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103344:	697b      	ldr	r3, [r7, #20]
 8103346:	ee07 3a90 	vmov	s15, r3
 810334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810334e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81034cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103356:	4b59      	ldr	r3, [pc, #356]	@ (81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810335a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810335e:	ee07 3a90 	vmov	s15, r3
 8103362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103366:	ed97 6a03 	vldr	s12, [r7, #12]
 810336a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810336e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810337a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103386:	e043      	b.n	8103410 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103388:	697b      	ldr	r3, [r7, #20]
 810338a:	ee07 3a90 	vmov	s15, r3
 810338e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103392:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81034d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8103396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810339a:	4b48      	ldr	r3, [pc, #288]	@ (81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81033a2:	ee07 3a90 	vmov	s15, r3
 81033a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81033ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81033b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81033b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81033ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81033be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81033c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81033ca:	e021      	b.n	8103410 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81033cc:	697b      	ldr	r3, [r7, #20]
 81033ce:	ee07 3a90 	vmov	s15, r3
 81033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81034cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81033da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81033de:	4b37      	ldr	r3, [pc, #220]	@ (81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81033e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81033e6:	ee07 3a90 	vmov	s15, r3
 81033ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81033f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81033f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81033fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81033fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103406:	ee67 7a27 	vmul.f32	s15, s14, s15
 810340a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810340e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8103410:	4b2a      	ldr	r3, [pc, #168]	@ (81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103414:	0a5b      	lsrs	r3, r3, #9
 8103416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810341a:	ee07 3a90 	vmov	s15, r3
 810341e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103422:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103426:	ee37 7a87 	vadd.f32	s14, s15, s14
 810342a:	edd7 6a07 	vldr	s13, [r7, #28]
 810342e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103436:	ee17 2a90 	vmov	r2, s15
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810343e:	4b1f      	ldr	r3, [pc, #124]	@ (81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103442:	0c1b      	lsrs	r3, r3, #16
 8103444:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103448:	ee07 3a90 	vmov	s15, r3
 810344c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103450:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103454:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103458:	edd7 6a07 	vldr	s13, [r7, #28]
 810345c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103464:	ee17 2a90 	vmov	r2, s15
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810346c:	4b13      	ldr	r3, [pc, #76]	@ (81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103470:	0e1b      	lsrs	r3, r3, #24
 8103472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103476:	ee07 3a90 	vmov	s15, r3
 810347a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810347e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103482:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103486:	edd7 6a07 	vldr	s13, [r7, #28]
 810348a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810348e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103492:	ee17 2a90 	vmov	r2, s15
 8103496:	687b      	ldr	r3, [r7, #4]
 8103498:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810349a:	e008      	b.n	81034ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810349c:	687b      	ldr	r3, [r7, #4]
 810349e:	2200      	movs	r2, #0
 81034a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	2200      	movs	r2, #0
 81034a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81034a8:	687b      	ldr	r3, [r7, #4]
 81034aa:	2200      	movs	r2, #0
 81034ac:	609a      	str	r2, [r3, #8]
}
 81034ae:	bf00      	nop
 81034b0:	3724      	adds	r7, #36	@ 0x24
 81034b2:	46bd      	mov	sp, r7
 81034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034b8:	4770      	bx	lr
 81034ba:	bf00      	nop
 81034bc:	58024400 	.word	0x58024400
 81034c0:	03d09000 	.word	0x03d09000
 81034c4:	46000000 	.word	0x46000000
 81034c8:	4c742400 	.word	0x4c742400
 81034cc:	4a742400 	.word	0x4a742400
 81034d0:	4bbebc20 	.word	0x4bbebc20

081034d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81034d4:	b580      	push	{r7, lr}
 81034d6:	b084      	sub	sp, #16
 81034d8:	af00      	add	r7, sp, #0
 81034da:	6078      	str	r0, [r7, #4]
 81034dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81034de:	2300      	movs	r3, #0
 81034e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81034e2:	4b54      	ldr	r3, [pc, #336]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81034e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81034e6:	f003 0303 	and.w	r3, r3, #3
 81034ea:	2b03      	cmp	r3, #3
 81034ec:	d101      	bne.n	81034f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81034ee:	2301      	movs	r3, #1
 81034f0:	e09b      	b.n	810362a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81034f2:	4b50      	ldr	r3, [pc, #320]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81034f4:	681b      	ldr	r3, [r3, #0]
 81034f6:	4a4f      	ldr	r2, [pc, #316]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81034f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81034fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81034fe:	f7fd fd41 	bl	8100f84 <HAL_GetTick>
 8103502:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103504:	e008      	b.n	8103518 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103506:	f7fd fd3d 	bl	8100f84 <HAL_GetTick>
 810350a:	4602      	mov	r2, r0
 810350c:	68bb      	ldr	r3, [r7, #8]
 810350e:	1ad3      	subs	r3, r2, r3
 8103510:	2b02      	cmp	r3, #2
 8103512:	d901      	bls.n	8103518 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103514:	2303      	movs	r3, #3
 8103516:	e088      	b.n	810362a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103518:	4b46      	ldr	r3, [pc, #280]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 810351a:	681b      	ldr	r3, [r3, #0]
 810351c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103520:	2b00      	cmp	r3, #0
 8103522:	d1f0      	bne.n	8103506 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103524:	4b43      	ldr	r3, [pc, #268]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 8103526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103528:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	681b      	ldr	r3, [r3, #0]
 8103530:	031b      	lsls	r3, r3, #12
 8103532:	4940      	ldr	r1, [pc, #256]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 8103534:	4313      	orrs	r3, r2
 8103536:	628b      	str	r3, [r1, #40]	@ 0x28
 8103538:	687b      	ldr	r3, [r7, #4]
 810353a:	685b      	ldr	r3, [r3, #4]
 810353c:	3b01      	subs	r3, #1
 810353e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103542:	687b      	ldr	r3, [r7, #4]
 8103544:	689b      	ldr	r3, [r3, #8]
 8103546:	3b01      	subs	r3, #1
 8103548:	025b      	lsls	r3, r3, #9
 810354a:	b29b      	uxth	r3, r3
 810354c:	431a      	orrs	r2, r3
 810354e:	687b      	ldr	r3, [r7, #4]
 8103550:	68db      	ldr	r3, [r3, #12]
 8103552:	3b01      	subs	r3, #1
 8103554:	041b      	lsls	r3, r3, #16
 8103556:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810355a:	431a      	orrs	r2, r3
 810355c:	687b      	ldr	r3, [r7, #4]
 810355e:	691b      	ldr	r3, [r3, #16]
 8103560:	3b01      	subs	r3, #1
 8103562:	061b      	lsls	r3, r3, #24
 8103564:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103568:	4932      	ldr	r1, [pc, #200]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 810356a:	4313      	orrs	r3, r2
 810356c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810356e:	4b31      	ldr	r3, [pc, #196]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 8103570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103572:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8103576:	687b      	ldr	r3, [r7, #4]
 8103578:	695b      	ldr	r3, [r3, #20]
 810357a:	492e      	ldr	r1, [pc, #184]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 810357c:	4313      	orrs	r3, r2
 810357e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103580:	4b2c      	ldr	r3, [pc, #176]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 8103582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103584:	f023 0220 	bic.w	r2, r3, #32
 8103588:	687b      	ldr	r3, [r7, #4]
 810358a:	699b      	ldr	r3, [r3, #24]
 810358c:	4929      	ldr	r1, [pc, #164]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 810358e:	4313      	orrs	r3, r2
 8103590:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103592:	4b28      	ldr	r3, [pc, #160]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 8103594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103596:	4a27      	ldr	r2, [pc, #156]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 8103598:	f023 0310 	bic.w	r3, r3, #16
 810359c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810359e:	4b25      	ldr	r3, [pc, #148]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81035a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81035a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81035a6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81035aa:	687a      	ldr	r2, [r7, #4]
 81035ac:	69d2      	ldr	r2, [r2, #28]
 81035ae:	00d2      	lsls	r2, r2, #3
 81035b0:	4920      	ldr	r1, [pc, #128]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81035b2:	4313      	orrs	r3, r2
 81035b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81035b6:	4b1f      	ldr	r3, [pc, #124]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81035b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035ba:	4a1e      	ldr	r2, [pc, #120]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81035bc:	f043 0310 	orr.w	r3, r3, #16
 81035c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81035c2:	683b      	ldr	r3, [r7, #0]
 81035c4:	2b00      	cmp	r3, #0
 81035c6:	d106      	bne.n	81035d6 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81035c8:	4b1a      	ldr	r3, [pc, #104]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81035ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035cc:	4a19      	ldr	r2, [pc, #100]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81035ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81035d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81035d4:	e00f      	b.n	81035f6 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81035d6:	683b      	ldr	r3, [r7, #0]
 81035d8:	2b01      	cmp	r3, #1
 81035da:	d106      	bne.n	81035ea <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81035dc:	4b15      	ldr	r3, [pc, #84]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035e0:	4a14      	ldr	r2, [pc, #80]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81035e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81035e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81035e8:	e005      	b.n	81035f6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81035ea:	4b12      	ldr	r3, [pc, #72]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035ee:	4a11      	ldr	r2, [pc, #68]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81035f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81035f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81035f6:	4b0f      	ldr	r3, [pc, #60]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81035f8:	681b      	ldr	r3, [r3, #0]
 81035fa:	4a0e      	ldr	r2, [pc, #56]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 81035fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8103600:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103602:	f7fd fcbf 	bl	8100f84 <HAL_GetTick>
 8103606:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103608:	e008      	b.n	810361c <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810360a:	f7fd fcbb 	bl	8100f84 <HAL_GetTick>
 810360e:	4602      	mov	r2, r0
 8103610:	68bb      	ldr	r3, [r7, #8]
 8103612:	1ad3      	subs	r3, r2, r3
 8103614:	2b02      	cmp	r3, #2
 8103616:	d901      	bls.n	810361c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103618:	2303      	movs	r3, #3
 810361a:	e006      	b.n	810362a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810361c:	4b05      	ldr	r3, [pc, #20]	@ (8103634 <RCCEx_PLL2_Config+0x160>)
 810361e:	681b      	ldr	r3, [r3, #0]
 8103620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103624:	2b00      	cmp	r3, #0
 8103626:	d0f0      	beq.n	810360a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103628:	7bfb      	ldrb	r3, [r7, #15]
}
 810362a:	4618      	mov	r0, r3
 810362c:	3710      	adds	r7, #16
 810362e:	46bd      	mov	sp, r7
 8103630:	bd80      	pop	{r7, pc}
 8103632:	bf00      	nop
 8103634:	58024400 	.word	0x58024400

08103638 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103638:	b580      	push	{r7, lr}
 810363a:	b084      	sub	sp, #16
 810363c:	af00      	add	r7, sp, #0
 810363e:	6078      	str	r0, [r7, #4]
 8103640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103642:	2300      	movs	r3, #0
 8103644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103646:	4b54      	ldr	r3, [pc, #336]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 8103648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810364a:	f003 0303 	and.w	r3, r3, #3
 810364e:	2b03      	cmp	r3, #3
 8103650:	d101      	bne.n	8103656 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103652:	2301      	movs	r3, #1
 8103654:	e09b      	b.n	810378e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103656:	4b50      	ldr	r3, [pc, #320]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 8103658:	681b      	ldr	r3, [r3, #0]
 810365a:	4a4f      	ldr	r2, [pc, #316]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 810365c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8103660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103662:	f7fd fc8f 	bl	8100f84 <HAL_GetTick>
 8103666:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103668:	e008      	b.n	810367c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810366a:	f7fd fc8b 	bl	8100f84 <HAL_GetTick>
 810366e:	4602      	mov	r2, r0
 8103670:	68bb      	ldr	r3, [r7, #8]
 8103672:	1ad3      	subs	r3, r2, r3
 8103674:	2b02      	cmp	r3, #2
 8103676:	d901      	bls.n	810367c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103678:	2303      	movs	r3, #3
 810367a:	e088      	b.n	810378e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810367c:	4b46      	ldr	r3, [pc, #280]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 810367e:	681b      	ldr	r3, [r3, #0]
 8103680:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103684:	2b00      	cmp	r3, #0
 8103686:	d1f0      	bne.n	810366a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103688:	4b43      	ldr	r3, [pc, #268]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 810368a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810368c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8103690:	687b      	ldr	r3, [r7, #4]
 8103692:	681b      	ldr	r3, [r3, #0]
 8103694:	051b      	lsls	r3, r3, #20
 8103696:	4940      	ldr	r1, [pc, #256]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 8103698:	4313      	orrs	r3, r2
 810369a:	628b      	str	r3, [r1, #40]	@ 0x28
 810369c:	687b      	ldr	r3, [r7, #4]
 810369e:	685b      	ldr	r3, [r3, #4]
 81036a0:	3b01      	subs	r3, #1
 81036a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81036a6:	687b      	ldr	r3, [r7, #4]
 81036a8:	689b      	ldr	r3, [r3, #8]
 81036aa:	3b01      	subs	r3, #1
 81036ac:	025b      	lsls	r3, r3, #9
 81036ae:	b29b      	uxth	r3, r3
 81036b0:	431a      	orrs	r2, r3
 81036b2:	687b      	ldr	r3, [r7, #4]
 81036b4:	68db      	ldr	r3, [r3, #12]
 81036b6:	3b01      	subs	r3, #1
 81036b8:	041b      	lsls	r3, r3, #16
 81036ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81036be:	431a      	orrs	r2, r3
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	691b      	ldr	r3, [r3, #16]
 81036c4:	3b01      	subs	r3, #1
 81036c6:	061b      	lsls	r3, r3, #24
 81036c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81036cc:	4932      	ldr	r1, [pc, #200]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 81036ce:	4313      	orrs	r3, r2
 81036d0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81036d2:	4b31      	ldr	r3, [pc, #196]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 81036d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81036da:	687b      	ldr	r3, [r7, #4]
 81036dc:	695b      	ldr	r3, [r3, #20]
 81036de:	492e      	ldr	r1, [pc, #184]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 81036e0:	4313      	orrs	r3, r2
 81036e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81036e4:	4b2c      	ldr	r3, [pc, #176]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 81036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 81036ec:	687b      	ldr	r3, [r7, #4]
 81036ee:	699b      	ldr	r3, [r3, #24]
 81036f0:	4929      	ldr	r1, [pc, #164]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 81036f2:	4313      	orrs	r3, r2
 81036f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81036f6:	4b28      	ldr	r3, [pc, #160]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 81036f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036fa:	4a27      	ldr	r2, [pc, #156]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 81036fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8103700:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103702:	4b25      	ldr	r3, [pc, #148]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 8103704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810370a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810370e:	687a      	ldr	r2, [r7, #4]
 8103710:	69d2      	ldr	r2, [r2, #28]
 8103712:	00d2      	lsls	r2, r2, #3
 8103714:	4920      	ldr	r1, [pc, #128]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 8103716:	4313      	orrs	r3, r2
 8103718:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810371a:	4b1f      	ldr	r3, [pc, #124]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 810371c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810371e:	4a1e      	ldr	r2, [pc, #120]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 8103720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103724:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8103726:	683b      	ldr	r3, [r7, #0]
 8103728:	2b00      	cmp	r3, #0
 810372a:	d106      	bne.n	810373a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810372c:	4b1a      	ldr	r3, [pc, #104]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 810372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103730:	4a19      	ldr	r2, [pc, #100]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 8103732:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8103736:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103738:	e00f      	b.n	810375a <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810373a:	683b      	ldr	r3, [r7, #0]
 810373c:	2b01      	cmp	r3, #1
 810373e:	d106      	bne.n	810374e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103740:	4b15      	ldr	r3, [pc, #84]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 8103742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103744:	4a14      	ldr	r2, [pc, #80]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 8103746:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810374a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810374c:	e005      	b.n	810375a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810374e:	4b12      	ldr	r3, [pc, #72]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 8103750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103752:	4a11      	ldr	r2, [pc, #68]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 8103754:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8103758:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810375a:	4b0f      	ldr	r3, [pc, #60]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 810375c:	681b      	ldr	r3, [r3, #0]
 810375e:	4a0e      	ldr	r2, [pc, #56]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 8103760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8103764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103766:	f7fd fc0d 	bl	8100f84 <HAL_GetTick>
 810376a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810376c:	e008      	b.n	8103780 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810376e:	f7fd fc09 	bl	8100f84 <HAL_GetTick>
 8103772:	4602      	mov	r2, r0
 8103774:	68bb      	ldr	r3, [r7, #8]
 8103776:	1ad3      	subs	r3, r2, r3
 8103778:	2b02      	cmp	r3, #2
 810377a:	d901      	bls.n	8103780 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810377c:	2303      	movs	r3, #3
 810377e:	e006      	b.n	810378e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103780:	4b05      	ldr	r3, [pc, #20]	@ (8103798 <RCCEx_PLL3_Config+0x160>)
 8103782:	681b      	ldr	r3, [r3, #0]
 8103784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103788:	2b00      	cmp	r3, #0
 810378a:	d0f0      	beq.n	810376e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810378c:	7bfb      	ldrb	r3, [r7, #15]
}
 810378e:	4618      	mov	r0, r3
 8103790:	3710      	adds	r7, #16
 8103792:	46bd      	mov	sp, r7
 8103794:	bd80      	pop	{r7, pc}
 8103796:	bf00      	nop
 8103798:	58024400 	.word	0x58024400

0810379c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810379c:	b580      	push	{r7, lr}
 810379e:	b082      	sub	sp, #8
 81037a0:	af00      	add	r7, sp, #0
 81037a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81037a4:	687b      	ldr	r3, [r7, #4]
 81037a6:	2b00      	cmp	r3, #0
 81037a8:	d101      	bne.n	81037ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81037aa:	2301      	movs	r3, #1
 81037ac:	e049      	b.n	8103842 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81037b4:	b2db      	uxtb	r3, r3
 81037b6:	2b00      	cmp	r3, #0
 81037b8:	d106      	bne.n	81037c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	2200      	movs	r2, #0
 81037be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81037c2:	6878      	ldr	r0, [r7, #4]
 81037c4:	f000 f841 	bl	810384a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81037c8:	687b      	ldr	r3, [r7, #4]
 81037ca:	2202      	movs	r2, #2
 81037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81037d0:	687b      	ldr	r3, [r7, #4]
 81037d2:	681a      	ldr	r2, [r3, #0]
 81037d4:	687b      	ldr	r3, [r7, #4]
 81037d6:	3304      	adds	r3, #4
 81037d8:	4619      	mov	r1, r3
 81037da:	4610      	mov	r0, r2
 81037dc:	f000 f9e8 	bl	8103bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	2201      	movs	r2, #1
 81037e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81037e8:	687b      	ldr	r3, [r7, #4]
 81037ea:	2201      	movs	r2, #1
 81037ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81037f0:	687b      	ldr	r3, [r7, #4]
 81037f2:	2201      	movs	r2, #1
 81037f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81037f8:	687b      	ldr	r3, [r7, #4]
 81037fa:	2201      	movs	r2, #1
 81037fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8103800:	687b      	ldr	r3, [r7, #4]
 8103802:	2201      	movs	r2, #1
 8103804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	2201      	movs	r2, #1
 810380c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	2201      	movs	r2, #1
 8103814:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	2201      	movs	r2, #1
 810381c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8103820:	687b      	ldr	r3, [r7, #4]
 8103822:	2201      	movs	r2, #1
 8103824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	2201      	movs	r2, #1
 810382c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	2201      	movs	r2, #1
 8103834:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103838:	687b      	ldr	r3, [r7, #4]
 810383a:	2201      	movs	r2, #1
 810383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8103840:	2300      	movs	r3, #0
}
 8103842:	4618      	mov	r0, r3
 8103844:	3708      	adds	r7, #8
 8103846:	46bd      	mov	sp, r7
 8103848:	bd80      	pop	{r7, pc}

0810384a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 810384a:	b480      	push	{r7}
 810384c:	b083      	sub	sp, #12
 810384e:	af00      	add	r7, sp, #0
 8103850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8103852:	bf00      	nop
 8103854:	370c      	adds	r7, #12
 8103856:	46bd      	mov	sp, r7
 8103858:	f85d 7b04 	ldr.w	r7, [sp], #4
 810385c:	4770      	bx	lr
	...

08103860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8103860:	b480      	push	{r7}
 8103862:	b085      	sub	sp, #20
 8103864:	af00      	add	r7, sp, #0
 8103866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810386e:	b2db      	uxtb	r3, r3
 8103870:	2b01      	cmp	r3, #1
 8103872:	d001      	beq.n	8103878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8103874:	2301      	movs	r3, #1
 8103876:	e054      	b.n	8103922 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103878:	687b      	ldr	r3, [r7, #4]
 810387a:	2202      	movs	r2, #2
 810387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8103880:	687b      	ldr	r3, [r7, #4]
 8103882:	681b      	ldr	r3, [r3, #0]
 8103884:	68da      	ldr	r2, [r3, #12]
 8103886:	687b      	ldr	r3, [r7, #4]
 8103888:	681b      	ldr	r3, [r3, #0]
 810388a:	f042 0201 	orr.w	r2, r2, #1
 810388e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8103890:	687b      	ldr	r3, [r7, #4]
 8103892:	681b      	ldr	r3, [r3, #0]
 8103894:	4a26      	ldr	r2, [pc, #152]	@ (8103930 <HAL_TIM_Base_Start_IT+0xd0>)
 8103896:	4293      	cmp	r3, r2
 8103898:	d022      	beq.n	81038e0 <HAL_TIM_Base_Start_IT+0x80>
 810389a:	687b      	ldr	r3, [r7, #4]
 810389c:	681b      	ldr	r3, [r3, #0]
 810389e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81038a2:	d01d      	beq.n	81038e0 <HAL_TIM_Base_Start_IT+0x80>
 81038a4:	687b      	ldr	r3, [r7, #4]
 81038a6:	681b      	ldr	r3, [r3, #0]
 81038a8:	4a22      	ldr	r2, [pc, #136]	@ (8103934 <HAL_TIM_Base_Start_IT+0xd4>)
 81038aa:	4293      	cmp	r3, r2
 81038ac:	d018      	beq.n	81038e0 <HAL_TIM_Base_Start_IT+0x80>
 81038ae:	687b      	ldr	r3, [r7, #4]
 81038b0:	681b      	ldr	r3, [r3, #0]
 81038b2:	4a21      	ldr	r2, [pc, #132]	@ (8103938 <HAL_TIM_Base_Start_IT+0xd8>)
 81038b4:	4293      	cmp	r3, r2
 81038b6:	d013      	beq.n	81038e0 <HAL_TIM_Base_Start_IT+0x80>
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	681b      	ldr	r3, [r3, #0]
 81038bc:	4a1f      	ldr	r2, [pc, #124]	@ (810393c <HAL_TIM_Base_Start_IT+0xdc>)
 81038be:	4293      	cmp	r3, r2
 81038c0:	d00e      	beq.n	81038e0 <HAL_TIM_Base_Start_IT+0x80>
 81038c2:	687b      	ldr	r3, [r7, #4]
 81038c4:	681b      	ldr	r3, [r3, #0]
 81038c6:	4a1e      	ldr	r2, [pc, #120]	@ (8103940 <HAL_TIM_Base_Start_IT+0xe0>)
 81038c8:	4293      	cmp	r3, r2
 81038ca:	d009      	beq.n	81038e0 <HAL_TIM_Base_Start_IT+0x80>
 81038cc:	687b      	ldr	r3, [r7, #4]
 81038ce:	681b      	ldr	r3, [r3, #0]
 81038d0:	4a1c      	ldr	r2, [pc, #112]	@ (8103944 <HAL_TIM_Base_Start_IT+0xe4>)
 81038d2:	4293      	cmp	r3, r2
 81038d4:	d004      	beq.n	81038e0 <HAL_TIM_Base_Start_IT+0x80>
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	681b      	ldr	r3, [r3, #0]
 81038da:	4a1b      	ldr	r2, [pc, #108]	@ (8103948 <HAL_TIM_Base_Start_IT+0xe8>)
 81038dc:	4293      	cmp	r3, r2
 81038de:	d115      	bne.n	810390c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81038e0:	687b      	ldr	r3, [r7, #4]
 81038e2:	681b      	ldr	r3, [r3, #0]
 81038e4:	689a      	ldr	r2, [r3, #8]
 81038e6:	4b19      	ldr	r3, [pc, #100]	@ (810394c <HAL_TIM_Base_Start_IT+0xec>)
 81038e8:	4013      	ands	r3, r2
 81038ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81038ec:	68fb      	ldr	r3, [r7, #12]
 81038ee:	2b06      	cmp	r3, #6
 81038f0:	d015      	beq.n	810391e <HAL_TIM_Base_Start_IT+0xbe>
 81038f2:	68fb      	ldr	r3, [r7, #12]
 81038f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81038f8:	d011      	beq.n	810391e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	681b      	ldr	r3, [r3, #0]
 81038fe:	681a      	ldr	r2, [r3, #0]
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	681b      	ldr	r3, [r3, #0]
 8103904:	f042 0201 	orr.w	r2, r2, #1
 8103908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810390a:	e008      	b.n	810391e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810390c:	687b      	ldr	r3, [r7, #4]
 810390e:	681b      	ldr	r3, [r3, #0]
 8103910:	681a      	ldr	r2, [r3, #0]
 8103912:	687b      	ldr	r3, [r7, #4]
 8103914:	681b      	ldr	r3, [r3, #0]
 8103916:	f042 0201 	orr.w	r2, r2, #1
 810391a:	601a      	str	r2, [r3, #0]
 810391c:	e000      	b.n	8103920 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810391e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8103920:	2300      	movs	r3, #0
}
 8103922:	4618      	mov	r0, r3
 8103924:	3714      	adds	r7, #20
 8103926:	46bd      	mov	sp, r7
 8103928:	f85d 7b04 	ldr.w	r7, [sp], #4
 810392c:	4770      	bx	lr
 810392e:	bf00      	nop
 8103930:	40010000 	.word	0x40010000
 8103934:	40000400 	.word	0x40000400
 8103938:	40000800 	.word	0x40000800
 810393c:	40000c00 	.word	0x40000c00
 8103940:	40010400 	.word	0x40010400
 8103944:	40001800 	.word	0x40001800
 8103948:	40014000 	.word	0x40014000
 810394c:	00010007 	.word	0x00010007

08103950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8103950:	b580      	push	{r7, lr}
 8103952:	b084      	sub	sp, #16
 8103954:	af00      	add	r7, sp, #0
 8103956:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	681b      	ldr	r3, [r3, #0]
 810395c:	68db      	ldr	r3, [r3, #12]
 810395e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	681b      	ldr	r3, [r3, #0]
 8103964:	691b      	ldr	r3, [r3, #16]
 8103966:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8103968:	68bb      	ldr	r3, [r7, #8]
 810396a:	f003 0302 	and.w	r3, r3, #2
 810396e:	2b00      	cmp	r3, #0
 8103970:	d020      	beq.n	81039b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8103972:	68fb      	ldr	r3, [r7, #12]
 8103974:	f003 0302 	and.w	r3, r3, #2
 8103978:	2b00      	cmp	r3, #0
 810397a:	d01b      	beq.n	81039b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	681b      	ldr	r3, [r3, #0]
 8103980:	f06f 0202 	mvn.w	r2, #2
 8103984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8103986:	687b      	ldr	r3, [r7, #4]
 8103988:	2201      	movs	r2, #1
 810398a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	681b      	ldr	r3, [r3, #0]
 8103990:	699b      	ldr	r3, [r3, #24]
 8103992:	f003 0303 	and.w	r3, r3, #3
 8103996:	2b00      	cmp	r3, #0
 8103998:	d003      	beq.n	81039a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810399a:	6878      	ldr	r0, [r7, #4]
 810399c:	f000 f8e9 	bl	8103b72 <HAL_TIM_IC_CaptureCallback>
 81039a0:	e005      	b.n	81039ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81039a2:	6878      	ldr	r0, [r7, #4]
 81039a4:	f000 f8db 	bl	8103b5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81039a8:	6878      	ldr	r0, [r7, #4]
 81039aa:	f000 f8ec 	bl	8103b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81039ae:	687b      	ldr	r3, [r7, #4]
 81039b0:	2200      	movs	r2, #0
 81039b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 81039b4:	68bb      	ldr	r3, [r7, #8]
 81039b6:	f003 0304 	and.w	r3, r3, #4
 81039ba:	2b00      	cmp	r3, #0
 81039bc:	d020      	beq.n	8103a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 81039be:	68fb      	ldr	r3, [r7, #12]
 81039c0:	f003 0304 	and.w	r3, r3, #4
 81039c4:	2b00      	cmp	r3, #0
 81039c6:	d01b      	beq.n	8103a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	681b      	ldr	r3, [r3, #0]
 81039cc:	f06f 0204 	mvn.w	r2, #4
 81039d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	2202      	movs	r2, #2
 81039d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	681b      	ldr	r3, [r3, #0]
 81039dc:	699b      	ldr	r3, [r3, #24]
 81039de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81039e2:	2b00      	cmp	r3, #0
 81039e4:	d003      	beq.n	81039ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81039e6:	6878      	ldr	r0, [r7, #4]
 81039e8:	f000 f8c3 	bl	8103b72 <HAL_TIM_IC_CaptureCallback>
 81039ec:	e005      	b.n	81039fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81039ee:	6878      	ldr	r0, [r7, #4]
 81039f0:	f000 f8b5 	bl	8103b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81039f4:	6878      	ldr	r0, [r7, #4]
 81039f6:	f000 f8c6 	bl	8103b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81039fa:	687b      	ldr	r3, [r7, #4]
 81039fc:	2200      	movs	r2, #0
 81039fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8103a00:	68bb      	ldr	r3, [r7, #8]
 8103a02:	f003 0308 	and.w	r3, r3, #8
 8103a06:	2b00      	cmp	r3, #0
 8103a08:	d020      	beq.n	8103a4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8103a0a:	68fb      	ldr	r3, [r7, #12]
 8103a0c:	f003 0308 	and.w	r3, r3, #8
 8103a10:	2b00      	cmp	r3, #0
 8103a12:	d01b      	beq.n	8103a4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8103a14:	687b      	ldr	r3, [r7, #4]
 8103a16:	681b      	ldr	r3, [r3, #0]
 8103a18:	f06f 0208 	mvn.w	r2, #8
 8103a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	2204      	movs	r2, #4
 8103a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	681b      	ldr	r3, [r3, #0]
 8103a28:	69db      	ldr	r3, [r3, #28]
 8103a2a:	f003 0303 	and.w	r3, r3, #3
 8103a2e:	2b00      	cmp	r3, #0
 8103a30:	d003      	beq.n	8103a3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103a32:	6878      	ldr	r0, [r7, #4]
 8103a34:	f000 f89d 	bl	8103b72 <HAL_TIM_IC_CaptureCallback>
 8103a38:	e005      	b.n	8103a46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103a3a:	6878      	ldr	r0, [r7, #4]
 8103a3c:	f000 f88f 	bl	8103b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103a40:	6878      	ldr	r0, [r7, #4]
 8103a42:	f000 f8a0 	bl	8103b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	2200      	movs	r2, #0
 8103a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8103a4c:	68bb      	ldr	r3, [r7, #8]
 8103a4e:	f003 0310 	and.w	r3, r3, #16
 8103a52:	2b00      	cmp	r3, #0
 8103a54:	d020      	beq.n	8103a98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8103a56:	68fb      	ldr	r3, [r7, #12]
 8103a58:	f003 0310 	and.w	r3, r3, #16
 8103a5c:	2b00      	cmp	r3, #0
 8103a5e:	d01b      	beq.n	8103a98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8103a60:	687b      	ldr	r3, [r7, #4]
 8103a62:	681b      	ldr	r3, [r3, #0]
 8103a64:	f06f 0210 	mvn.w	r2, #16
 8103a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8103a6a:	687b      	ldr	r3, [r7, #4]
 8103a6c:	2208      	movs	r2, #8
 8103a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	681b      	ldr	r3, [r3, #0]
 8103a74:	69db      	ldr	r3, [r3, #28]
 8103a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103a7a:	2b00      	cmp	r3, #0
 8103a7c:	d003      	beq.n	8103a86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103a7e:	6878      	ldr	r0, [r7, #4]
 8103a80:	f000 f877 	bl	8103b72 <HAL_TIM_IC_CaptureCallback>
 8103a84:	e005      	b.n	8103a92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103a86:	6878      	ldr	r0, [r7, #4]
 8103a88:	f000 f869 	bl	8103b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103a8c:	6878      	ldr	r0, [r7, #4]
 8103a8e:	f000 f87a 	bl	8103b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103a92:	687b      	ldr	r3, [r7, #4]
 8103a94:	2200      	movs	r2, #0
 8103a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8103a98:	68bb      	ldr	r3, [r7, #8]
 8103a9a:	f003 0301 	and.w	r3, r3, #1
 8103a9e:	2b00      	cmp	r3, #0
 8103aa0:	d00c      	beq.n	8103abc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8103aa2:	68fb      	ldr	r3, [r7, #12]
 8103aa4:	f003 0301 	and.w	r3, r3, #1
 8103aa8:	2b00      	cmp	r3, #0
 8103aaa:	d007      	beq.n	8103abc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	681b      	ldr	r3, [r3, #0]
 8103ab0:	f06f 0201 	mvn.w	r2, #1
 8103ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8103ab6:	6878      	ldr	r0, [r7, #4]
 8103ab8:	f7fc ff76 	bl	81009a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8103abc:	68bb      	ldr	r3, [r7, #8]
 8103abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103ac2:	2b00      	cmp	r3, #0
 8103ac4:	d104      	bne.n	8103ad0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8103ac6:	68bb      	ldr	r3, [r7, #8]
 8103ac8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8103acc:	2b00      	cmp	r3, #0
 8103ace:	d00c      	beq.n	8103aea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8103ad0:	68fb      	ldr	r3, [r7, #12]
 8103ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103ad6:	2b00      	cmp	r3, #0
 8103ad8:	d007      	beq.n	8103aea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8103ada:	687b      	ldr	r3, [r7, #4]
 8103adc:	681b      	ldr	r3, [r3, #0]
 8103ade:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8103ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8103ae4:	6878      	ldr	r0, [r7, #4]
 8103ae6:	f000 f913 	bl	8103d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8103aea:	68bb      	ldr	r3, [r7, #8]
 8103aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103af0:	2b00      	cmp	r3, #0
 8103af2:	d00c      	beq.n	8103b0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8103af4:	68fb      	ldr	r3, [r7, #12]
 8103af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103afa:	2b00      	cmp	r3, #0
 8103afc:	d007      	beq.n	8103b0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	681b      	ldr	r3, [r3, #0]
 8103b02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8103b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8103b08:	6878      	ldr	r0, [r7, #4]
 8103b0a:	f000 f90b 	bl	8103d24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8103b0e:	68bb      	ldr	r3, [r7, #8]
 8103b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103b14:	2b00      	cmp	r3, #0
 8103b16:	d00c      	beq.n	8103b32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8103b18:	68fb      	ldr	r3, [r7, #12]
 8103b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103b1e:	2b00      	cmp	r3, #0
 8103b20:	d007      	beq.n	8103b32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	681b      	ldr	r3, [r3, #0]
 8103b26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8103b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8103b2c:	6878      	ldr	r0, [r7, #4]
 8103b2e:	f000 f834 	bl	8103b9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8103b32:	68bb      	ldr	r3, [r7, #8]
 8103b34:	f003 0320 	and.w	r3, r3, #32
 8103b38:	2b00      	cmp	r3, #0
 8103b3a:	d00c      	beq.n	8103b56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8103b3c:	68fb      	ldr	r3, [r7, #12]
 8103b3e:	f003 0320 	and.w	r3, r3, #32
 8103b42:	2b00      	cmp	r3, #0
 8103b44:	d007      	beq.n	8103b56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	681b      	ldr	r3, [r3, #0]
 8103b4a:	f06f 0220 	mvn.w	r2, #32
 8103b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8103b50:	6878      	ldr	r0, [r7, #4]
 8103b52:	f000 f8d3 	bl	8103cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8103b56:	bf00      	nop
 8103b58:	3710      	adds	r7, #16
 8103b5a:	46bd      	mov	sp, r7
 8103b5c:	bd80      	pop	{r7, pc}

08103b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8103b5e:	b480      	push	{r7}
 8103b60:	b083      	sub	sp, #12
 8103b62:	af00      	add	r7, sp, #0
 8103b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8103b66:	bf00      	nop
 8103b68:	370c      	adds	r7, #12
 8103b6a:	46bd      	mov	sp, r7
 8103b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b70:	4770      	bx	lr

08103b72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8103b72:	b480      	push	{r7}
 8103b74:	b083      	sub	sp, #12
 8103b76:	af00      	add	r7, sp, #0
 8103b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8103b7a:	bf00      	nop
 8103b7c:	370c      	adds	r7, #12
 8103b7e:	46bd      	mov	sp, r7
 8103b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b84:	4770      	bx	lr

08103b86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8103b86:	b480      	push	{r7}
 8103b88:	b083      	sub	sp, #12
 8103b8a:	af00      	add	r7, sp, #0
 8103b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8103b8e:	bf00      	nop
 8103b90:	370c      	adds	r7, #12
 8103b92:	46bd      	mov	sp, r7
 8103b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b98:	4770      	bx	lr

08103b9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8103b9a:	b480      	push	{r7}
 8103b9c:	b083      	sub	sp, #12
 8103b9e:	af00      	add	r7, sp, #0
 8103ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8103ba2:	bf00      	nop
 8103ba4:	370c      	adds	r7, #12
 8103ba6:	46bd      	mov	sp, r7
 8103ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bac:	4770      	bx	lr
	...

08103bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8103bb0:	b480      	push	{r7}
 8103bb2:	b085      	sub	sp, #20
 8103bb4:	af00      	add	r7, sp, #0
 8103bb6:	6078      	str	r0, [r7, #4]
 8103bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	681b      	ldr	r3, [r3, #0]
 8103bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8103bc0:	687b      	ldr	r3, [r7, #4]
 8103bc2:	4a46      	ldr	r2, [pc, #280]	@ (8103cdc <TIM_Base_SetConfig+0x12c>)
 8103bc4:	4293      	cmp	r3, r2
 8103bc6:	d013      	beq.n	8103bf0 <TIM_Base_SetConfig+0x40>
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103bce:	d00f      	beq.n	8103bf0 <TIM_Base_SetConfig+0x40>
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	4a43      	ldr	r2, [pc, #268]	@ (8103ce0 <TIM_Base_SetConfig+0x130>)
 8103bd4:	4293      	cmp	r3, r2
 8103bd6:	d00b      	beq.n	8103bf0 <TIM_Base_SetConfig+0x40>
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	4a42      	ldr	r2, [pc, #264]	@ (8103ce4 <TIM_Base_SetConfig+0x134>)
 8103bdc:	4293      	cmp	r3, r2
 8103bde:	d007      	beq.n	8103bf0 <TIM_Base_SetConfig+0x40>
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	4a41      	ldr	r2, [pc, #260]	@ (8103ce8 <TIM_Base_SetConfig+0x138>)
 8103be4:	4293      	cmp	r3, r2
 8103be6:	d003      	beq.n	8103bf0 <TIM_Base_SetConfig+0x40>
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	4a40      	ldr	r2, [pc, #256]	@ (8103cec <TIM_Base_SetConfig+0x13c>)
 8103bec:	4293      	cmp	r3, r2
 8103bee:	d108      	bne.n	8103c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8103bf0:	68fb      	ldr	r3, [r7, #12]
 8103bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8103bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8103bf8:	683b      	ldr	r3, [r7, #0]
 8103bfa:	685b      	ldr	r3, [r3, #4]
 8103bfc:	68fa      	ldr	r2, [r7, #12]
 8103bfe:	4313      	orrs	r3, r2
 8103c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	4a35      	ldr	r2, [pc, #212]	@ (8103cdc <TIM_Base_SetConfig+0x12c>)
 8103c06:	4293      	cmp	r3, r2
 8103c08:	d01f      	beq.n	8103c4a <TIM_Base_SetConfig+0x9a>
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103c10:	d01b      	beq.n	8103c4a <TIM_Base_SetConfig+0x9a>
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	4a32      	ldr	r2, [pc, #200]	@ (8103ce0 <TIM_Base_SetConfig+0x130>)
 8103c16:	4293      	cmp	r3, r2
 8103c18:	d017      	beq.n	8103c4a <TIM_Base_SetConfig+0x9a>
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	4a31      	ldr	r2, [pc, #196]	@ (8103ce4 <TIM_Base_SetConfig+0x134>)
 8103c1e:	4293      	cmp	r3, r2
 8103c20:	d013      	beq.n	8103c4a <TIM_Base_SetConfig+0x9a>
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	4a30      	ldr	r2, [pc, #192]	@ (8103ce8 <TIM_Base_SetConfig+0x138>)
 8103c26:	4293      	cmp	r3, r2
 8103c28:	d00f      	beq.n	8103c4a <TIM_Base_SetConfig+0x9a>
 8103c2a:	687b      	ldr	r3, [r7, #4]
 8103c2c:	4a2f      	ldr	r2, [pc, #188]	@ (8103cec <TIM_Base_SetConfig+0x13c>)
 8103c2e:	4293      	cmp	r3, r2
 8103c30:	d00b      	beq.n	8103c4a <TIM_Base_SetConfig+0x9a>
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	4a2e      	ldr	r2, [pc, #184]	@ (8103cf0 <TIM_Base_SetConfig+0x140>)
 8103c36:	4293      	cmp	r3, r2
 8103c38:	d007      	beq.n	8103c4a <TIM_Base_SetConfig+0x9a>
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8103cf4 <TIM_Base_SetConfig+0x144>)
 8103c3e:	4293      	cmp	r3, r2
 8103c40:	d003      	beq.n	8103c4a <TIM_Base_SetConfig+0x9a>
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	4a2c      	ldr	r2, [pc, #176]	@ (8103cf8 <TIM_Base_SetConfig+0x148>)
 8103c46:	4293      	cmp	r3, r2
 8103c48:	d108      	bne.n	8103c5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8103c4a:	68fb      	ldr	r3, [r7, #12]
 8103c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8103c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8103c52:	683b      	ldr	r3, [r7, #0]
 8103c54:	68db      	ldr	r3, [r3, #12]
 8103c56:	68fa      	ldr	r2, [r7, #12]
 8103c58:	4313      	orrs	r3, r2
 8103c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8103c5c:	68fb      	ldr	r3, [r7, #12]
 8103c5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8103c62:	683b      	ldr	r3, [r7, #0]
 8103c64:	695b      	ldr	r3, [r3, #20]
 8103c66:	4313      	orrs	r3, r2
 8103c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	68fa      	ldr	r2, [r7, #12]
 8103c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8103c70:	683b      	ldr	r3, [r7, #0]
 8103c72:	689a      	ldr	r2, [r3, #8]
 8103c74:	687b      	ldr	r3, [r7, #4]
 8103c76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8103c78:	683b      	ldr	r3, [r7, #0]
 8103c7a:	681a      	ldr	r2, [r3, #0]
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8103c80:	687b      	ldr	r3, [r7, #4]
 8103c82:	4a16      	ldr	r2, [pc, #88]	@ (8103cdc <TIM_Base_SetConfig+0x12c>)
 8103c84:	4293      	cmp	r3, r2
 8103c86:	d00f      	beq.n	8103ca8 <TIM_Base_SetConfig+0xf8>
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	4a18      	ldr	r2, [pc, #96]	@ (8103cec <TIM_Base_SetConfig+0x13c>)
 8103c8c:	4293      	cmp	r3, r2
 8103c8e:	d00b      	beq.n	8103ca8 <TIM_Base_SetConfig+0xf8>
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	4a17      	ldr	r2, [pc, #92]	@ (8103cf0 <TIM_Base_SetConfig+0x140>)
 8103c94:	4293      	cmp	r3, r2
 8103c96:	d007      	beq.n	8103ca8 <TIM_Base_SetConfig+0xf8>
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	4a16      	ldr	r2, [pc, #88]	@ (8103cf4 <TIM_Base_SetConfig+0x144>)
 8103c9c:	4293      	cmp	r3, r2
 8103c9e:	d003      	beq.n	8103ca8 <TIM_Base_SetConfig+0xf8>
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	4a15      	ldr	r2, [pc, #84]	@ (8103cf8 <TIM_Base_SetConfig+0x148>)
 8103ca4:	4293      	cmp	r3, r2
 8103ca6:	d103      	bne.n	8103cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8103ca8:	683b      	ldr	r3, [r7, #0]
 8103caa:	691a      	ldr	r2, [r3, #16]
 8103cac:	687b      	ldr	r3, [r7, #4]
 8103cae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8103cb0:	687b      	ldr	r3, [r7, #4]
 8103cb2:	2201      	movs	r2, #1
 8103cb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8103cb6:	687b      	ldr	r3, [r7, #4]
 8103cb8:	691b      	ldr	r3, [r3, #16]
 8103cba:	f003 0301 	and.w	r3, r3, #1
 8103cbe:	2b01      	cmp	r3, #1
 8103cc0:	d105      	bne.n	8103cce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	691b      	ldr	r3, [r3, #16]
 8103cc6:	f023 0201 	bic.w	r2, r3, #1
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	611a      	str	r2, [r3, #16]
  }
}
 8103cce:	bf00      	nop
 8103cd0:	3714      	adds	r7, #20
 8103cd2:	46bd      	mov	sp, r7
 8103cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cd8:	4770      	bx	lr
 8103cda:	bf00      	nop
 8103cdc:	40010000 	.word	0x40010000
 8103ce0:	40000400 	.word	0x40000400
 8103ce4:	40000800 	.word	0x40000800
 8103ce8:	40000c00 	.word	0x40000c00
 8103cec:	40010400 	.word	0x40010400
 8103cf0:	40014000 	.word	0x40014000
 8103cf4:	40014400 	.word	0x40014400
 8103cf8:	40014800 	.word	0x40014800

08103cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8103cfc:	b480      	push	{r7}
 8103cfe:	b083      	sub	sp, #12
 8103d00:	af00      	add	r7, sp, #0
 8103d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8103d04:	bf00      	nop
 8103d06:	370c      	adds	r7, #12
 8103d08:	46bd      	mov	sp, r7
 8103d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d0e:	4770      	bx	lr

08103d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8103d10:	b480      	push	{r7}
 8103d12:	b083      	sub	sp, #12
 8103d14:	af00      	add	r7, sp, #0
 8103d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8103d18:	bf00      	nop
 8103d1a:	370c      	adds	r7, #12
 8103d1c:	46bd      	mov	sp, r7
 8103d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d22:	4770      	bx	lr

08103d24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8103d24:	b480      	push	{r7}
 8103d26:	b083      	sub	sp, #12
 8103d28:	af00      	add	r7, sp, #0
 8103d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8103d2c:	bf00      	nop
 8103d2e:	370c      	adds	r7, #12
 8103d30:	46bd      	mov	sp, r7
 8103d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d36:	4770      	bx	lr

08103d38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8103d38:	b580      	push	{r7, lr}
 8103d3a:	b082      	sub	sp, #8
 8103d3c:	af00      	add	r7, sp, #0
 8103d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8103d40:	687b      	ldr	r3, [r7, #4]
 8103d42:	2b00      	cmp	r3, #0
 8103d44:	d101      	bne.n	8103d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8103d46:	2301      	movs	r3, #1
 8103d48:	e042      	b.n	8103dd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8103d4a:	687b      	ldr	r3, [r7, #4]
 8103d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103d50:	2b00      	cmp	r3, #0
 8103d52:	d106      	bne.n	8103d62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	2200      	movs	r2, #0
 8103d58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8103d5c:	6878      	ldr	r0, [r7, #4]
 8103d5e:	f7fd f80b 	bl	8100d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	2224      	movs	r2, #36	@ 0x24
 8103d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	681b      	ldr	r3, [r3, #0]
 8103d6e:	681a      	ldr	r2, [r3, #0]
 8103d70:	687b      	ldr	r3, [r7, #4]
 8103d72:	681b      	ldr	r3, [r3, #0]
 8103d74:	f022 0201 	bic.w	r2, r2, #1
 8103d78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103d7e:	2b00      	cmp	r3, #0
 8103d80:	d002      	beq.n	8103d88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8103d82:	6878      	ldr	r0, [r7, #4]
 8103d84:	f000 fe1e 	bl	81049c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8103d88:	6878      	ldr	r0, [r7, #4]
 8103d8a:	f000 f8b3 	bl	8103ef4 <UART_SetConfig>
 8103d8e:	4603      	mov	r3, r0
 8103d90:	2b01      	cmp	r3, #1
 8103d92:	d101      	bne.n	8103d98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8103d94:	2301      	movs	r3, #1
 8103d96:	e01b      	b.n	8103dd0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	681b      	ldr	r3, [r3, #0]
 8103d9c:	685a      	ldr	r2, [r3, #4]
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	681b      	ldr	r3, [r3, #0]
 8103da2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8103da6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8103da8:	687b      	ldr	r3, [r7, #4]
 8103daa:	681b      	ldr	r3, [r3, #0]
 8103dac:	689a      	ldr	r2, [r3, #8]
 8103dae:	687b      	ldr	r3, [r7, #4]
 8103db0:	681b      	ldr	r3, [r3, #0]
 8103db2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8103db6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8103db8:	687b      	ldr	r3, [r7, #4]
 8103dba:	681b      	ldr	r3, [r3, #0]
 8103dbc:	681a      	ldr	r2, [r3, #0]
 8103dbe:	687b      	ldr	r3, [r7, #4]
 8103dc0:	681b      	ldr	r3, [r3, #0]
 8103dc2:	f042 0201 	orr.w	r2, r2, #1
 8103dc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8103dc8:	6878      	ldr	r0, [r7, #4]
 8103dca:	f000 fe9d 	bl	8104b08 <UART_CheckIdleState>
 8103dce:	4603      	mov	r3, r0
}
 8103dd0:	4618      	mov	r0, r3
 8103dd2:	3708      	adds	r7, #8
 8103dd4:	46bd      	mov	sp, r7
 8103dd6:	bd80      	pop	{r7, pc}

08103dd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103dd8:	b580      	push	{r7, lr}
 8103dda:	b08a      	sub	sp, #40	@ 0x28
 8103ddc:	af02      	add	r7, sp, #8
 8103dde:	60f8      	str	r0, [r7, #12]
 8103de0:	60b9      	str	r1, [r7, #8]
 8103de2:	603b      	str	r3, [r7, #0]
 8103de4:	4613      	mov	r3, r2
 8103de6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8103de8:	68fb      	ldr	r3, [r7, #12]
 8103dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103dee:	2b20      	cmp	r3, #32
 8103df0:	d17b      	bne.n	8103eea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8103df2:	68bb      	ldr	r3, [r7, #8]
 8103df4:	2b00      	cmp	r3, #0
 8103df6:	d002      	beq.n	8103dfe <HAL_UART_Transmit+0x26>
 8103df8:	88fb      	ldrh	r3, [r7, #6]
 8103dfa:	2b00      	cmp	r3, #0
 8103dfc:	d101      	bne.n	8103e02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8103dfe:	2301      	movs	r3, #1
 8103e00:	e074      	b.n	8103eec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103e02:	68fb      	ldr	r3, [r7, #12]
 8103e04:	2200      	movs	r2, #0
 8103e06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8103e0a:	68fb      	ldr	r3, [r7, #12]
 8103e0c:	2221      	movs	r2, #33	@ 0x21
 8103e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8103e12:	f7fd f8b7 	bl	8100f84 <HAL_GetTick>
 8103e16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8103e18:	68fb      	ldr	r3, [r7, #12]
 8103e1a:	88fa      	ldrh	r2, [r7, #6]
 8103e1c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8103e20:	68fb      	ldr	r3, [r7, #12]
 8103e22:	88fa      	ldrh	r2, [r7, #6]
 8103e24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8103e28:	68fb      	ldr	r3, [r7, #12]
 8103e2a:	689b      	ldr	r3, [r3, #8]
 8103e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103e30:	d108      	bne.n	8103e44 <HAL_UART_Transmit+0x6c>
 8103e32:	68fb      	ldr	r3, [r7, #12]
 8103e34:	691b      	ldr	r3, [r3, #16]
 8103e36:	2b00      	cmp	r3, #0
 8103e38:	d104      	bne.n	8103e44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8103e3a:	2300      	movs	r3, #0
 8103e3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8103e3e:	68bb      	ldr	r3, [r7, #8]
 8103e40:	61bb      	str	r3, [r7, #24]
 8103e42:	e003      	b.n	8103e4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8103e44:	68bb      	ldr	r3, [r7, #8]
 8103e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8103e48:	2300      	movs	r3, #0
 8103e4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8103e4c:	e030      	b.n	8103eb0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8103e4e:	683b      	ldr	r3, [r7, #0]
 8103e50:	9300      	str	r3, [sp, #0]
 8103e52:	697b      	ldr	r3, [r7, #20]
 8103e54:	2200      	movs	r2, #0
 8103e56:	2180      	movs	r1, #128	@ 0x80
 8103e58:	68f8      	ldr	r0, [r7, #12]
 8103e5a:	f000 feff 	bl	8104c5c <UART_WaitOnFlagUntilTimeout>
 8103e5e:	4603      	mov	r3, r0
 8103e60:	2b00      	cmp	r3, #0
 8103e62:	d005      	beq.n	8103e70 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8103e64:	68fb      	ldr	r3, [r7, #12]
 8103e66:	2220      	movs	r2, #32
 8103e68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8103e6c:	2303      	movs	r3, #3
 8103e6e:	e03d      	b.n	8103eec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8103e70:	69fb      	ldr	r3, [r7, #28]
 8103e72:	2b00      	cmp	r3, #0
 8103e74:	d10b      	bne.n	8103e8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8103e76:	69bb      	ldr	r3, [r7, #24]
 8103e78:	881b      	ldrh	r3, [r3, #0]
 8103e7a:	461a      	mov	r2, r3
 8103e7c:	68fb      	ldr	r3, [r7, #12]
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8103e84:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8103e86:	69bb      	ldr	r3, [r7, #24]
 8103e88:	3302      	adds	r3, #2
 8103e8a:	61bb      	str	r3, [r7, #24]
 8103e8c:	e007      	b.n	8103e9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8103e8e:	69fb      	ldr	r3, [r7, #28]
 8103e90:	781a      	ldrb	r2, [r3, #0]
 8103e92:	68fb      	ldr	r3, [r7, #12]
 8103e94:	681b      	ldr	r3, [r3, #0]
 8103e96:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8103e98:	69fb      	ldr	r3, [r7, #28]
 8103e9a:	3301      	adds	r3, #1
 8103e9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8103e9e:	68fb      	ldr	r3, [r7, #12]
 8103ea0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8103ea4:	b29b      	uxth	r3, r3
 8103ea6:	3b01      	subs	r3, #1
 8103ea8:	b29a      	uxth	r2, r3
 8103eaa:	68fb      	ldr	r3, [r7, #12]
 8103eac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8103eb0:	68fb      	ldr	r3, [r7, #12]
 8103eb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8103eb6:	b29b      	uxth	r3, r3
 8103eb8:	2b00      	cmp	r3, #0
 8103eba:	d1c8      	bne.n	8103e4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8103ebc:	683b      	ldr	r3, [r7, #0]
 8103ebe:	9300      	str	r3, [sp, #0]
 8103ec0:	697b      	ldr	r3, [r7, #20]
 8103ec2:	2200      	movs	r2, #0
 8103ec4:	2140      	movs	r1, #64	@ 0x40
 8103ec6:	68f8      	ldr	r0, [r7, #12]
 8103ec8:	f000 fec8 	bl	8104c5c <UART_WaitOnFlagUntilTimeout>
 8103ecc:	4603      	mov	r3, r0
 8103ece:	2b00      	cmp	r3, #0
 8103ed0:	d005      	beq.n	8103ede <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8103ed2:	68fb      	ldr	r3, [r7, #12]
 8103ed4:	2220      	movs	r2, #32
 8103ed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8103eda:	2303      	movs	r3, #3
 8103edc:	e006      	b.n	8103eec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8103ede:	68fb      	ldr	r3, [r7, #12]
 8103ee0:	2220      	movs	r2, #32
 8103ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8103ee6:	2300      	movs	r3, #0
 8103ee8:	e000      	b.n	8103eec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8103eea:	2302      	movs	r3, #2
  }
}
 8103eec:	4618      	mov	r0, r3
 8103eee:	3720      	adds	r7, #32
 8103ef0:	46bd      	mov	sp, r7
 8103ef2:	bd80      	pop	{r7, pc}

08103ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8103ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103ef8:	b092      	sub	sp, #72	@ 0x48
 8103efa:	af00      	add	r7, sp, #0
 8103efc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8103efe:	2300      	movs	r3, #0
 8103f00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8103f04:	697b      	ldr	r3, [r7, #20]
 8103f06:	689a      	ldr	r2, [r3, #8]
 8103f08:	697b      	ldr	r3, [r7, #20]
 8103f0a:	691b      	ldr	r3, [r3, #16]
 8103f0c:	431a      	orrs	r2, r3
 8103f0e:	697b      	ldr	r3, [r7, #20]
 8103f10:	695b      	ldr	r3, [r3, #20]
 8103f12:	431a      	orrs	r2, r3
 8103f14:	697b      	ldr	r3, [r7, #20]
 8103f16:	69db      	ldr	r3, [r3, #28]
 8103f18:	4313      	orrs	r3, r2
 8103f1a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8103f1c:	697b      	ldr	r3, [r7, #20]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	681a      	ldr	r2, [r3, #0]
 8103f22:	4bbd      	ldr	r3, [pc, #756]	@ (8104218 <UART_SetConfig+0x324>)
 8103f24:	4013      	ands	r3, r2
 8103f26:	697a      	ldr	r2, [r7, #20]
 8103f28:	6812      	ldr	r2, [r2, #0]
 8103f2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8103f2c:	430b      	orrs	r3, r1
 8103f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8103f30:	697b      	ldr	r3, [r7, #20]
 8103f32:	681b      	ldr	r3, [r3, #0]
 8103f34:	685b      	ldr	r3, [r3, #4]
 8103f36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8103f3a:	697b      	ldr	r3, [r7, #20]
 8103f3c:	68da      	ldr	r2, [r3, #12]
 8103f3e:	697b      	ldr	r3, [r7, #20]
 8103f40:	681b      	ldr	r3, [r3, #0]
 8103f42:	430a      	orrs	r2, r1
 8103f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8103f46:	697b      	ldr	r3, [r7, #20]
 8103f48:	699b      	ldr	r3, [r3, #24]
 8103f4a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8103f4c:	697b      	ldr	r3, [r7, #20]
 8103f4e:	681b      	ldr	r3, [r3, #0]
 8103f50:	4ab2      	ldr	r2, [pc, #712]	@ (810421c <UART_SetConfig+0x328>)
 8103f52:	4293      	cmp	r3, r2
 8103f54:	d004      	beq.n	8103f60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8103f56:	697b      	ldr	r3, [r7, #20]
 8103f58:	6a1b      	ldr	r3, [r3, #32]
 8103f5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8103f5c:	4313      	orrs	r3, r2
 8103f5e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8103f60:	697b      	ldr	r3, [r7, #20]
 8103f62:	681b      	ldr	r3, [r3, #0]
 8103f64:	689b      	ldr	r3, [r3, #8]
 8103f66:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8103f6a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8103f6e:	697a      	ldr	r2, [r7, #20]
 8103f70:	6812      	ldr	r2, [r2, #0]
 8103f72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8103f74:	430b      	orrs	r3, r1
 8103f76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8103f78:	697b      	ldr	r3, [r7, #20]
 8103f7a:	681b      	ldr	r3, [r3, #0]
 8103f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f7e:	f023 010f 	bic.w	r1, r3, #15
 8103f82:	697b      	ldr	r3, [r7, #20]
 8103f84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8103f86:	697b      	ldr	r3, [r7, #20]
 8103f88:	681b      	ldr	r3, [r3, #0]
 8103f8a:	430a      	orrs	r2, r1
 8103f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8103f8e:	697b      	ldr	r3, [r7, #20]
 8103f90:	681b      	ldr	r3, [r3, #0]
 8103f92:	4aa3      	ldr	r2, [pc, #652]	@ (8104220 <UART_SetConfig+0x32c>)
 8103f94:	4293      	cmp	r3, r2
 8103f96:	d177      	bne.n	8104088 <UART_SetConfig+0x194>
 8103f98:	4ba2      	ldr	r3, [pc, #648]	@ (8104224 <UART_SetConfig+0x330>)
 8103f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103f9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8103fa0:	2b28      	cmp	r3, #40	@ 0x28
 8103fa2:	d86d      	bhi.n	8104080 <UART_SetConfig+0x18c>
 8103fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8103fac <UART_SetConfig+0xb8>)
 8103fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103faa:	bf00      	nop
 8103fac:	08104051 	.word	0x08104051
 8103fb0:	08104081 	.word	0x08104081
 8103fb4:	08104081 	.word	0x08104081
 8103fb8:	08104081 	.word	0x08104081
 8103fbc:	08104081 	.word	0x08104081
 8103fc0:	08104081 	.word	0x08104081
 8103fc4:	08104081 	.word	0x08104081
 8103fc8:	08104081 	.word	0x08104081
 8103fcc:	08104059 	.word	0x08104059
 8103fd0:	08104081 	.word	0x08104081
 8103fd4:	08104081 	.word	0x08104081
 8103fd8:	08104081 	.word	0x08104081
 8103fdc:	08104081 	.word	0x08104081
 8103fe0:	08104081 	.word	0x08104081
 8103fe4:	08104081 	.word	0x08104081
 8103fe8:	08104081 	.word	0x08104081
 8103fec:	08104061 	.word	0x08104061
 8103ff0:	08104081 	.word	0x08104081
 8103ff4:	08104081 	.word	0x08104081
 8103ff8:	08104081 	.word	0x08104081
 8103ffc:	08104081 	.word	0x08104081
 8104000:	08104081 	.word	0x08104081
 8104004:	08104081 	.word	0x08104081
 8104008:	08104081 	.word	0x08104081
 810400c:	08104069 	.word	0x08104069
 8104010:	08104081 	.word	0x08104081
 8104014:	08104081 	.word	0x08104081
 8104018:	08104081 	.word	0x08104081
 810401c:	08104081 	.word	0x08104081
 8104020:	08104081 	.word	0x08104081
 8104024:	08104081 	.word	0x08104081
 8104028:	08104081 	.word	0x08104081
 810402c:	08104071 	.word	0x08104071
 8104030:	08104081 	.word	0x08104081
 8104034:	08104081 	.word	0x08104081
 8104038:	08104081 	.word	0x08104081
 810403c:	08104081 	.word	0x08104081
 8104040:	08104081 	.word	0x08104081
 8104044:	08104081 	.word	0x08104081
 8104048:	08104081 	.word	0x08104081
 810404c:	08104079 	.word	0x08104079
 8104050:	2301      	movs	r3, #1
 8104052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104056:	e220      	b.n	810449a <UART_SetConfig+0x5a6>
 8104058:	2304      	movs	r3, #4
 810405a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810405e:	e21c      	b.n	810449a <UART_SetConfig+0x5a6>
 8104060:	2308      	movs	r3, #8
 8104062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104066:	e218      	b.n	810449a <UART_SetConfig+0x5a6>
 8104068:	2310      	movs	r3, #16
 810406a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810406e:	e214      	b.n	810449a <UART_SetConfig+0x5a6>
 8104070:	2320      	movs	r3, #32
 8104072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104076:	e210      	b.n	810449a <UART_SetConfig+0x5a6>
 8104078:	2340      	movs	r3, #64	@ 0x40
 810407a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810407e:	e20c      	b.n	810449a <UART_SetConfig+0x5a6>
 8104080:	2380      	movs	r3, #128	@ 0x80
 8104082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104086:	e208      	b.n	810449a <UART_SetConfig+0x5a6>
 8104088:	697b      	ldr	r3, [r7, #20]
 810408a:	681b      	ldr	r3, [r3, #0]
 810408c:	4a66      	ldr	r2, [pc, #408]	@ (8104228 <UART_SetConfig+0x334>)
 810408e:	4293      	cmp	r3, r2
 8104090:	d130      	bne.n	81040f4 <UART_SetConfig+0x200>
 8104092:	4b64      	ldr	r3, [pc, #400]	@ (8104224 <UART_SetConfig+0x330>)
 8104094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104096:	f003 0307 	and.w	r3, r3, #7
 810409a:	2b05      	cmp	r3, #5
 810409c:	d826      	bhi.n	81040ec <UART_SetConfig+0x1f8>
 810409e:	a201      	add	r2, pc, #4	@ (adr r2, 81040a4 <UART_SetConfig+0x1b0>)
 81040a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81040a4:	081040bd 	.word	0x081040bd
 81040a8:	081040c5 	.word	0x081040c5
 81040ac:	081040cd 	.word	0x081040cd
 81040b0:	081040d5 	.word	0x081040d5
 81040b4:	081040dd 	.word	0x081040dd
 81040b8:	081040e5 	.word	0x081040e5
 81040bc:	2300      	movs	r3, #0
 81040be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81040c2:	e1ea      	b.n	810449a <UART_SetConfig+0x5a6>
 81040c4:	2304      	movs	r3, #4
 81040c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81040ca:	e1e6      	b.n	810449a <UART_SetConfig+0x5a6>
 81040cc:	2308      	movs	r3, #8
 81040ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81040d2:	e1e2      	b.n	810449a <UART_SetConfig+0x5a6>
 81040d4:	2310      	movs	r3, #16
 81040d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81040da:	e1de      	b.n	810449a <UART_SetConfig+0x5a6>
 81040dc:	2320      	movs	r3, #32
 81040de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81040e2:	e1da      	b.n	810449a <UART_SetConfig+0x5a6>
 81040e4:	2340      	movs	r3, #64	@ 0x40
 81040e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81040ea:	e1d6      	b.n	810449a <UART_SetConfig+0x5a6>
 81040ec:	2380      	movs	r3, #128	@ 0x80
 81040ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81040f2:	e1d2      	b.n	810449a <UART_SetConfig+0x5a6>
 81040f4:	697b      	ldr	r3, [r7, #20]
 81040f6:	681b      	ldr	r3, [r3, #0]
 81040f8:	4a4c      	ldr	r2, [pc, #304]	@ (810422c <UART_SetConfig+0x338>)
 81040fa:	4293      	cmp	r3, r2
 81040fc:	d130      	bne.n	8104160 <UART_SetConfig+0x26c>
 81040fe:	4b49      	ldr	r3, [pc, #292]	@ (8104224 <UART_SetConfig+0x330>)
 8104100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104102:	f003 0307 	and.w	r3, r3, #7
 8104106:	2b05      	cmp	r3, #5
 8104108:	d826      	bhi.n	8104158 <UART_SetConfig+0x264>
 810410a:	a201      	add	r2, pc, #4	@ (adr r2, 8104110 <UART_SetConfig+0x21c>)
 810410c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104110:	08104129 	.word	0x08104129
 8104114:	08104131 	.word	0x08104131
 8104118:	08104139 	.word	0x08104139
 810411c:	08104141 	.word	0x08104141
 8104120:	08104149 	.word	0x08104149
 8104124:	08104151 	.word	0x08104151
 8104128:	2300      	movs	r3, #0
 810412a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810412e:	e1b4      	b.n	810449a <UART_SetConfig+0x5a6>
 8104130:	2304      	movs	r3, #4
 8104132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104136:	e1b0      	b.n	810449a <UART_SetConfig+0x5a6>
 8104138:	2308      	movs	r3, #8
 810413a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810413e:	e1ac      	b.n	810449a <UART_SetConfig+0x5a6>
 8104140:	2310      	movs	r3, #16
 8104142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104146:	e1a8      	b.n	810449a <UART_SetConfig+0x5a6>
 8104148:	2320      	movs	r3, #32
 810414a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810414e:	e1a4      	b.n	810449a <UART_SetConfig+0x5a6>
 8104150:	2340      	movs	r3, #64	@ 0x40
 8104152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104156:	e1a0      	b.n	810449a <UART_SetConfig+0x5a6>
 8104158:	2380      	movs	r3, #128	@ 0x80
 810415a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810415e:	e19c      	b.n	810449a <UART_SetConfig+0x5a6>
 8104160:	697b      	ldr	r3, [r7, #20]
 8104162:	681b      	ldr	r3, [r3, #0]
 8104164:	4a32      	ldr	r2, [pc, #200]	@ (8104230 <UART_SetConfig+0x33c>)
 8104166:	4293      	cmp	r3, r2
 8104168:	d130      	bne.n	81041cc <UART_SetConfig+0x2d8>
 810416a:	4b2e      	ldr	r3, [pc, #184]	@ (8104224 <UART_SetConfig+0x330>)
 810416c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810416e:	f003 0307 	and.w	r3, r3, #7
 8104172:	2b05      	cmp	r3, #5
 8104174:	d826      	bhi.n	81041c4 <UART_SetConfig+0x2d0>
 8104176:	a201      	add	r2, pc, #4	@ (adr r2, 810417c <UART_SetConfig+0x288>)
 8104178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810417c:	08104195 	.word	0x08104195
 8104180:	0810419d 	.word	0x0810419d
 8104184:	081041a5 	.word	0x081041a5
 8104188:	081041ad 	.word	0x081041ad
 810418c:	081041b5 	.word	0x081041b5
 8104190:	081041bd 	.word	0x081041bd
 8104194:	2300      	movs	r3, #0
 8104196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810419a:	e17e      	b.n	810449a <UART_SetConfig+0x5a6>
 810419c:	2304      	movs	r3, #4
 810419e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81041a2:	e17a      	b.n	810449a <UART_SetConfig+0x5a6>
 81041a4:	2308      	movs	r3, #8
 81041a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81041aa:	e176      	b.n	810449a <UART_SetConfig+0x5a6>
 81041ac:	2310      	movs	r3, #16
 81041ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81041b2:	e172      	b.n	810449a <UART_SetConfig+0x5a6>
 81041b4:	2320      	movs	r3, #32
 81041b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81041ba:	e16e      	b.n	810449a <UART_SetConfig+0x5a6>
 81041bc:	2340      	movs	r3, #64	@ 0x40
 81041be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81041c2:	e16a      	b.n	810449a <UART_SetConfig+0x5a6>
 81041c4:	2380      	movs	r3, #128	@ 0x80
 81041c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81041ca:	e166      	b.n	810449a <UART_SetConfig+0x5a6>
 81041cc:	697b      	ldr	r3, [r7, #20]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	4a18      	ldr	r2, [pc, #96]	@ (8104234 <UART_SetConfig+0x340>)
 81041d2:	4293      	cmp	r3, r2
 81041d4:	d140      	bne.n	8104258 <UART_SetConfig+0x364>
 81041d6:	4b13      	ldr	r3, [pc, #76]	@ (8104224 <UART_SetConfig+0x330>)
 81041d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81041da:	f003 0307 	and.w	r3, r3, #7
 81041de:	2b05      	cmp	r3, #5
 81041e0:	d836      	bhi.n	8104250 <UART_SetConfig+0x35c>
 81041e2:	a201      	add	r2, pc, #4	@ (adr r2, 81041e8 <UART_SetConfig+0x2f4>)
 81041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81041e8:	08104201 	.word	0x08104201
 81041ec:	08104209 	.word	0x08104209
 81041f0:	08104211 	.word	0x08104211
 81041f4:	08104239 	.word	0x08104239
 81041f8:	08104241 	.word	0x08104241
 81041fc:	08104249 	.word	0x08104249
 8104200:	2300      	movs	r3, #0
 8104202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104206:	e148      	b.n	810449a <UART_SetConfig+0x5a6>
 8104208:	2304      	movs	r3, #4
 810420a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810420e:	e144      	b.n	810449a <UART_SetConfig+0x5a6>
 8104210:	2308      	movs	r3, #8
 8104212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104216:	e140      	b.n	810449a <UART_SetConfig+0x5a6>
 8104218:	cfff69f3 	.word	0xcfff69f3
 810421c:	58000c00 	.word	0x58000c00
 8104220:	40011000 	.word	0x40011000
 8104224:	58024400 	.word	0x58024400
 8104228:	40004400 	.word	0x40004400
 810422c:	40004800 	.word	0x40004800
 8104230:	40004c00 	.word	0x40004c00
 8104234:	40005000 	.word	0x40005000
 8104238:	2310      	movs	r3, #16
 810423a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810423e:	e12c      	b.n	810449a <UART_SetConfig+0x5a6>
 8104240:	2320      	movs	r3, #32
 8104242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104246:	e128      	b.n	810449a <UART_SetConfig+0x5a6>
 8104248:	2340      	movs	r3, #64	@ 0x40
 810424a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810424e:	e124      	b.n	810449a <UART_SetConfig+0x5a6>
 8104250:	2380      	movs	r3, #128	@ 0x80
 8104252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104256:	e120      	b.n	810449a <UART_SetConfig+0x5a6>
 8104258:	697b      	ldr	r3, [r7, #20]
 810425a:	681b      	ldr	r3, [r3, #0]
 810425c:	4acb      	ldr	r2, [pc, #812]	@ (810458c <UART_SetConfig+0x698>)
 810425e:	4293      	cmp	r3, r2
 8104260:	d176      	bne.n	8104350 <UART_SetConfig+0x45c>
 8104262:	4bcb      	ldr	r3, [pc, #812]	@ (8104590 <UART_SetConfig+0x69c>)
 8104264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810426a:	2b28      	cmp	r3, #40	@ 0x28
 810426c:	d86c      	bhi.n	8104348 <UART_SetConfig+0x454>
 810426e:	a201      	add	r2, pc, #4	@ (adr r2, 8104274 <UART_SetConfig+0x380>)
 8104270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104274:	08104319 	.word	0x08104319
 8104278:	08104349 	.word	0x08104349
 810427c:	08104349 	.word	0x08104349
 8104280:	08104349 	.word	0x08104349
 8104284:	08104349 	.word	0x08104349
 8104288:	08104349 	.word	0x08104349
 810428c:	08104349 	.word	0x08104349
 8104290:	08104349 	.word	0x08104349
 8104294:	08104321 	.word	0x08104321
 8104298:	08104349 	.word	0x08104349
 810429c:	08104349 	.word	0x08104349
 81042a0:	08104349 	.word	0x08104349
 81042a4:	08104349 	.word	0x08104349
 81042a8:	08104349 	.word	0x08104349
 81042ac:	08104349 	.word	0x08104349
 81042b0:	08104349 	.word	0x08104349
 81042b4:	08104329 	.word	0x08104329
 81042b8:	08104349 	.word	0x08104349
 81042bc:	08104349 	.word	0x08104349
 81042c0:	08104349 	.word	0x08104349
 81042c4:	08104349 	.word	0x08104349
 81042c8:	08104349 	.word	0x08104349
 81042cc:	08104349 	.word	0x08104349
 81042d0:	08104349 	.word	0x08104349
 81042d4:	08104331 	.word	0x08104331
 81042d8:	08104349 	.word	0x08104349
 81042dc:	08104349 	.word	0x08104349
 81042e0:	08104349 	.word	0x08104349
 81042e4:	08104349 	.word	0x08104349
 81042e8:	08104349 	.word	0x08104349
 81042ec:	08104349 	.word	0x08104349
 81042f0:	08104349 	.word	0x08104349
 81042f4:	08104339 	.word	0x08104339
 81042f8:	08104349 	.word	0x08104349
 81042fc:	08104349 	.word	0x08104349
 8104300:	08104349 	.word	0x08104349
 8104304:	08104349 	.word	0x08104349
 8104308:	08104349 	.word	0x08104349
 810430c:	08104349 	.word	0x08104349
 8104310:	08104349 	.word	0x08104349
 8104314:	08104341 	.word	0x08104341
 8104318:	2301      	movs	r3, #1
 810431a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810431e:	e0bc      	b.n	810449a <UART_SetConfig+0x5a6>
 8104320:	2304      	movs	r3, #4
 8104322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104326:	e0b8      	b.n	810449a <UART_SetConfig+0x5a6>
 8104328:	2308      	movs	r3, #8
 810432a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810432e:	e0b4      	b.n	810449a <UART_SetConfig+0x5a6>
 8104330:	2310      	movs	r3, #16
 8104332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104336:	e0b0      	b.n	810449a <UART_SetConfig+0x5a6>
 8104338:	2320      	movs	r3, #32
 810433a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810433e:	e0ac      	b.n	810449a <UART_SetConfig+0x5a6>
 8104340:	2340      	movs	r3, #64	@ 0x40
 8104342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104346:	e0a8      	b.n	810449a <UART_SetConfig+0x5a6>
 8104348:	2380      	movs	r3, #128	@ 0x80
 810434a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810434e:	e0a4      	b.n	810449a <UART_SetConfig+0x5a6>
 8104350:	697b      	ldr	r3, [r7, #20]
 8104352:	681b      	ldr	r3, [r3, #0]
 8104354:	4a8f      	ldr	r2, [pc, #572]	@ (8104594 <UART_SetConfig+0x6a0>)
 8104356:	4293      	cmp	r3, r2
 8104358:	d130      	bne.n	81043bc <UART_SetConfig+0x4c8>
 810435a:	4b8d      	ldr	r3, [pc, #564]	@ (8104590 <UART_SetConfig+0x69c>)
 810435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810435e:	f003 0307 	and.w	r3, r3, #7
 8104362:	2b05      	cmp	r3, #5
 8104364:	d826      	bhi.n	81043b4 <UART_SetConfig+0x4c0>
 8104366:	a201      	add	r2, pc, #4	@ (adr r2, 810436c <UART_SetConfig+0x478>)
 8104368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810436c:	08104385 	.word	0x08104385
 8104370:	0810438d 	.word	0x0810438d
 8104374:	08104395 	.word	0x08104395
 8104378:	0810439d 	.word	0x0810439d
 810437c:	081043a5 	.word	0x081043a5
 8104380:	081043ad 	.word	0x081043ad
 8104384:	2300      	movs	r3, #0
 8104386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810438a:	e086      	b.n	810449a <UART_SetConfig+0x5a6>
 810438c:	2304      	movs	r3, #4
 810438e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104392:	e082      	b.n	810449a <UART_SetConfig+0x5a6>
 8104394:	2308      	movs	r3, #8
 8104396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810439a:	e07e      	b.n	810449a <UART_SetConfig+0x5a6>
 810439c:	2310      	movs	r3, #16
 810439e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81043a2:	e07a      	b.n	810449a <UART_SetConfig+0x5a6>
 81043a4:	2320      	movs	r3, #32
 81043a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81043aa:	e076      	b.n	810449a <UART_SetConfig+0x5a6>
 81043ac:	2340      	movs	r3, #64	@ 0x40
 81043ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81043b2:	e072      	b.n	810449a <UART_SetConfig+0x5a6>
 81043b4:	2380      	movs	r3, #128	@ 0x80
 81043b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81043ba:	e06e      	b.n	810449a <UART_SetConfig+0x5a6>
 81043bc:	697b      	ldr	r3, [r7, #20]
 81043be:	681b      	ldr	r3, [r3, #0]
 81043c0:	4a75      	ldr	r2, [pc, #468]	@ (8104598 <UART_SetConfig+0x6a4>)
 81043c2:	4293      	cmp	r3, r2
 81043c4:	d130      	bne.n	8104428 <UART_SetConfig+0x534>
 81043c6:	4b72      	ldr	r3, [pc, #456]	@ (8104590 <UART_SetConfig+0x69c>)
 81043c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81043ca:	f003 0307 	and.w	r3, r3, #7
 81043ce:	2b05      	cmp	r3, #5
 81043d0:	d826      	bhi.n	8104420 <UART_SetConfig+0x52c>
 81043d2:	a201      	add	r2, pc, #4	@ (adr r2, 81043d8 <UART_SetConfig+0x4e4>)
 81043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81043d8:	081043f1 	.word	0x081043f1
 81043dc:	081043f9 	.word	0x081043f9
 81043e0:	08104401 	.word	0x08104401
 81043e4:	08104409 	.word	0x08104409
 81043e8:	08104411 	.word	0x08104411
 81043ec:	08104419 	.word	0x08104419
 81043f0:	2300      	movs	r3, #0
 81043f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81043f6:	e050      	b.n	810449a <UART_SetConfig+0x5a6>
 81043f8:	2304      	movs	r3, #4
 81043fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81043fe:	e04c      	b.n	810449a <UART_SetConfig+0x5a6>
 8104400:	2308      	movs	r3, #8
 8104402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104406:	e048      	b.n	810449a <UART_SetConfig+0x5a6>
 8104408:	2310      	movs	r3, #16
 810440a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810440e:	e044      	b.n	810449a <UART_SetConfig+0x5a6>
 8104410:	2320      	movs	r3, #32
 8104412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104416:	e040      	b.n	810449a <UART_SetConfig+0x5a6>
 8104418:	2340      	movs	r3, #64	@ 0x40
 810441a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810441e:	e03c      	b.n	810449a <UART_SetConfig+0x5a6>
 8104420:	2380      	movs	r3, #128	@ 0x80
 8104422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104426:	e038      	b.n	810449a <UART_SetConfig+0x5a6>
 8104428:	697b      	ldr	r3, [r7, #20]
 810442a:	681b      	ldr	r3, [r3, #0]
 810442c:	4a5b      	ldr	r2, [pc, #364]	@ (810459c <UART_SetConfig+0x6a8>)
 810442e:	4293      	cmp	r3, r2
 8104430:	d130      	bne.n	8104494 <UART_SetConfig+0x5a0>
 8104432:	4b57      	ldr	r3, [pc, #348]	@ (8104590 <UART_SetConfig+0x69c>)
 8104434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104436:	f003 0307 	and.w	r3, r3, #7
 810443a:	2b05      	cmp	r3, #5
 810443c:	d826      	bhi.n	810448c <UART_SetConfig+0x598>
 810443e:	a201      	add	r2, pc, #4	@ (adr r2, 8104444 <UART_SetConfig+0x550>)
 8104440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104444:	0810445d 	.word	0x0810445d
 8104448:	08104465 	.word	0x08104465
 810444c:	0810446d 	.word	0x0810446d
 8104450:	08104475 	.word	0x08104475
 8104454:	0810447d 	.word	0x0810447d
 8104458:	08104485 	.word	0x08104485
 810445c:	2302      	movs	r3, #2
 810445e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104462:	e01a      	b.n	810449a <UART_SetConfig+0x5a6>
 8104464:	2304      	movs	r3, #4
 8104466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810446a:	e016      	b.n	810449a <UART_SetConfig+0x5a6>
 810446c:	2308      	movs	r3, #8
 810446e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104472:	e012      	b.n	810449a <UART_SetConfig+0x5a6>
 8104474:	2310      	movs	r3, #16
 8104476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810447a:	e00e      	b.n	810449a <UART_SetConfig+0x5a6>
 810447c:	2320      	movs	r3, #32
 810447e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104482:	e00a      	b.n	810449a <UART_SetConfig+0x5a6>
 8104484:	2340      	movs	r3, #64	@ 0x40
 8104486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810448a:	e006      	b.n	810449a <UART_SetConfig+0x5a6>
 810448c:	2380      	movs	r3, #128	@ 0x80
 810448e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104492:	e002      	b.n	810449a <UART_SetConfig+0x5a6>
 8104494:	2380      	movs	r3, #128	@ 0x80
 8104496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810449a:	697b      	ldr	r3, [r7, #20]
 810449c:	681b      	ldr	r3, [r3, #0]
 810449e:	4a3f      	ldr	r2, [pc, #252]	@ (810459c <UART_SetConfig+0x6a8>)
 81044a0:	4293      	cmp	r3, r2
 81044a2:	f040 80f8 	bne.w	8104696 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81044a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81044aa:	2b20      	cmp	r3, #32
 81044ac:	dc46      	bgt.n	810453c <UART_SetConfig+0x648>
 81044ae:	2b02      	cmp	r3, #2
 81044b0:	f2c0 8082 	blt.w	81045b8 <UART_SetConfig+0x6c4>
 81044b4:	3b02      	subs	r3, #2
 81044b6:	2b1e      	cmp	r3, #30
 81044b8:	d87e      	bhi.n	81045b8 <UART_SetConfig+0x6c4>
 81044ba:	a201      	add	r2, pc, #4	@ (adr r2, 81044c0 <UART_SetConfig+0x5cc>)
 81044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81044c0:	08104543 	.word	0x08104543
 81044c4:	081045b9 	.word	0x081045b9
 81044c8:	0810454b 	.word	0x0810454b
 81044cc:	081045b9 	.word	0x081045b9
 81044d0:	081045b9 	.word	0x081045b9
 81044d4:	081045b9 	.word	0x081045b9
 81044d8:	0810455b 	.word	0x0810455b
 81044dc:	081045b9 	.word	0x081045b9
 81044e0:	081045b9 	.word	0x081045b9
 81044e4:	081045b9 	.word	0x081045b9
 81044e8:	081045b9 	.word	0x081045b9
 81044ec:	081045b9 	.word	0x081045b9
 81044f0:	081045b9 	.word	0x081045b9
 81044f4:	081045b9 	.word	0x081045b9
 81044f8:	0810456b 	.word	0x0810456b
 81044fc:	081045b9 	.word	0x081045b9
 8104500:	081045b9 	.word	0x081045b9
 8104504:	081045b9 	.word	0x081045b9
 8104508:	081045b9 	.word	0x081045b9
 810450c:	081045b9 	.word	0x081045b9
 8104510:	081045b9 	.word	0x081045b9
 8104514:	081045b9 	.word	0x081045b9
 8104518:	081045b9 	.word	0x081045b9
 810451c:	081045b9 	.word	0x081045b9
 8104520:	081045b9 	.word	0x081045b9
 8104524:	081045b9 	.word	0x081045b9
 8104528:	081045b9 	.word	0x081045b9
 810452c:	081045b9 	.word	0x081045b9
 8104530:	081045b9 	.word	0x081045b9
 8104534:	081045b9 	.word	0x081045b9
 8104538:	081045ab 	.word	0x081045ab
 810453c:	2b40      	cmp	r3, #64	@ 0x40
 810453e:	d037      	beq.n	81045b0 <UART_SetConfig+0x6bc>
 8104540:	e03a      	b.n	81045b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8104542:	f7fe fd09 	bl	8102f58 <HAL_RCCEx_GetD3PCLK1Freq>
 8104546:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104548:	e03c      	b.n	81045c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810454a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810454e:	4618      	mov	r0, r3
 8104550:	f7fe fd18 	bl	8102f84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8104554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104558:	e034      	b.n	81045c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810455a:	f107 0318 	add.w	r3, r7, #24
 810455e:	4618      	mov	r0, r3
 8104560:	f7fe fe64 	bl	810322c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8104564:	69fb      	ldr	r3, [r7, #28]
 8104566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104568:	e02c      	b.n	81045c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810456a:	4b09      	ldr	r3, [pc, #36]	@ (8104590 <UART_SetConfig+0x69c>)
 810456c:	681b      	ldr	r3, [r3, #0]
 810456e:	f003 0320 	and.w	r3, r3, #32
 8104572:	2b00      	cmp	r3, #0
 8104574:	d016      	beq.n	81045a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8104576:	4b06      	ldr	r3, [pc, #24]	@ (8104590 <UART_SetConfig+0x69c>)
 8104578:	681b      	ldr	r3, [r3, #0]
 810457a:	08db      	lsrs	r3, r3, #3
 810457c:	f003 0303 	and.w	r3, r3, #3
 8104580:	4a07      	ldr	r2, [pc, #28]	@ (81045a0 <UART_SetConfig+0x6ac>)
 8104582:	fa22 f303 	lsr.w	r3, r2, r3
 8104586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104588:	e01c      	b.n	81045c4 <UART_SetConfig+0x6d0>
 810458a:	bf00      	nop
 810458c:	40011400 	.word	0x40011400
 8104590:	58024400 	.word	0x58024400
 8104594:	40007800 	.word	0x40007800
 8104598:	40007c00 	.word	0x40007c00
 810459c:	58000c00 	.word	0x58000c00
 81045a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 81045a4:	4b9d      	ldr	r3, [pc, #628]	@ (810481c <UART_SetConfig+0x928>)
 81045a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045a8:	e00c      	b.n	81045c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81045aa:	4b9d      	ldr	r3, [pc, #628]	@ (8104820 <UART_SetConfig+0x92c>)
 81045ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045ae:	e009      	b.n	81045c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81045b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81045b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045b6:	e005      	b.n	81045c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 81045b8:	2300      	movs	r3, #0
 81045ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81045bc:	2301      	movs	r3, #1
 81045be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81045c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81045c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81045c6:	2b00      	cmp	r3, #0
 81045c8:	f000 81de 	beq.w	8104988 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81045cc:	697b      	ldr	r3, [r7, #20]
 81045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81045d0:	4a94      	ldr	r2, [pc, #592]	@ (8104824 <UART_SetConfig+0x930>)
 81045d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81045d6:	461a      	mov	r2, r3
 81045d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81045da:	fbb3 f3f2 	udiv	r3, r3, r2
 81045de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81045e0:	697b      	ldr	r3, [r7, #20]
 81045e2:	685a      	ldr	r2, [r3, #4]
 81045e4:	4613      	mov	r3, r2
 81045e6:	005b      	lsls	r3, r3, #1
 81045e8:	4413      	add	r3, r2
 81045ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81045ec:	429a      	cmp	r2, r3
 81045ee:	d305      	bcc.n	81045fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81045f0:	697b      	ldr	r3, [r7, #20]
 81045f2:	685b      	ldr	r3, [r3, #4]
 81045f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81045f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81045f8:	429a      	cmp	r2, r3
 81045fa:	d903      	bls.n	8104604 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81045fc:	2301      	movs	r3, #1
 81045fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8104602:	e1c1      	b.n	8104988 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104606:	2200      	movs	r2, #0
 8104608:	60bb      	str	r3, [r7, #8]
 810460a:	60fa      	str	r2, [r7, #12]
 810460c:	697b      	ldr	r3, [r7, #20]
 810460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104610:	4a84      	ldr	r2, [pc, #528]	@ (8104824 <UART_SetConfig+0x930>)
 8104612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104616:	b29b      	uxth	r3, r3
 8104618:	2200      	movs	r2, #0
 810461a:	603b      	str	r3, [r7, #0]
 810461c:	607a      	str	r2, [r7, #4]
 810461e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104622:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8104626:	f7fb fec3 	bl	81003b0 <__aeabi_uldivmod>
 810462a:	4602      	mov	r2, r0
 810462c:	460b      	mov	r3, r1
 810462e:	4610      	mov	r0, r2
 8104630:	4619      	mov	r1, r3
 8104632:	f04f 0200 	mov.w	r2, #0
 8104636:	f04f 0300 	mov.w	r3, #0
 810463a:	020b      	lsls	r3, r1, #8
 810463c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8104640:	0202      	lsls	r2, r0, #8
 8104642:	6979      	ldr	r1, [r7, #20]
 8104644:	6849      	ldr	r1, [r1, #4]
 8104646:	0849      	lsrs	r1, r1, #1
 8104648:	2000      	movs	r0, #0
 810464a:	460c      	mov	r4, r1
 810464c:	4605      	mov	r5, r0
 810464e:	eb12 0804 	adds.w	r8, r2, r4
 8104652:	eb43 0905 	adc.w	r9, r3, r5
 8104656:	697b      	ldr	r3, [r7, #20]
 8104658:	685b      	ldr	r3, [r3, #4]
 810465a:	2200      	movs	r2, #0
 810465c:	469a      	mov	sl, r3
 810465e:	4693      	mov	fp, r2
 8104660:	4652      	mov	r2, sl
 8104662:	465b      	mov	r3, fp
 8104664:	4640      	mov	r0, r8
 8104666:	4649      	mov	r1, r9
 8104668:	f7fb fea2 	bl	81003b0 <__aeabi_uldivmod>
 810466c:	4602      	mov	r2, r0
 810466e:	460b      	mov	r3, r1
 8104670:	4613      	mov	r3, r2
 8104672:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8104674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104676:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810467a:	d308      	bcc.n	810468e <UART_SetConfig+0x79a>
 810467c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810467e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104682:	d204      	bcs.n	810468e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8104684:	697b      	ldr	r3, [r7, #20]
 8104686:	681b      	ldr	r3, [r3, #0]
 8104688:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810468a:	60da      	str	r2, [r3, #12]
 810468c:	e17c      	b.n	8104988 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810468e:	2301      	movs	r3, #1
 8104690:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8104694:	e178      	b.n	8104988 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8104696:	697b      	ldr	r3, [r7, #20]
 8104698:	69db      	ldr	r3, [r3, #28]
 810469a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810469e:	f040 80c5 	bne.w	810482c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81046a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81046a6:	2b20      	cmp	r3, #32
 81046a8:	dc48      	bgt.n	810473c <UART_SetConfig+0x848>
 81046aa:	2b00      	cmp	r3, #0
 81046ac:	db7b      	blt.n	81047a6 <UART_SetConfig+0x8b2>
 81046ae:	2b20      	cmp	r3, #32
 81046b0:	d879      	bhi.n	81047a6 <UART_SetConfig+0x8b2>
 81046b2:	a201      	add	r2, pc, #4	@ (adr r2, 81046b8 <UART_SetConfig+0x7c4>)
 81046b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81046b8:	08104743 	.word	0x08104743
 81046bc:	0810474b 	.word	0x0810474b
 81046c0:	081047a7 	.word	0x081047a7
 81046c4:	081047a7 	.word	0x081047a7
 81046c8:	08104753 	.word	0x08104753
 81046cc:	081047a7 	.word	0x081047a7
 81046d0:	081047a7 	.word	0x081047a7
 81046d4:	081047a7 	.word	0x081047a7
 81046d8:	08104763 	.word	0x08104763
 81046dc:	081047a7 	.word	0x081047a7
 81046e0:	081047a7 	.word	0x081047a7
 81046e4:	081047a7 	.word	0x081047a7
 81046e8:	081047a7 	.word	0x081047a7
 81046ec:	081047a7 	.word	0x081047a7
 81046f0:	081047a7 	.word	0x081047a7
 81046f4:	081047a7 	.word	0x081047a7
 81046f8:	08104773 	.word	0x08104773
 81046fc:	081047a7 	.word	0x081047a7
 8104700:	081047a7 	.word	0x081047a7
 8104704:	081047a7 	.word	0x081047a7
 8104708:	081047a7 	.word	0x081047a7
 810470c:	081047a7 	.word	0x081047a7
 8104710:	081047a7 	.word	0x081047a7
 8104714:	081047a7 	.word	0x081047a7
 8104718:	081047a7 	.word	0x081047a7
 810471c:	081047a7 	.word	0x081047a7
 8104720:	081047a7 	.word	0x081047a7
 8104724:	081047a7 	.word	0x081047a7
 8104728:	081047a7 	.word	0x081047a7
 810472c:	081047a7 	.word	0x081047a7
 8104730:	081047a7 	.word	0x081047a7
 8104734:	081047a7 	.word	0x081047a7
 8104738:	08104799 	.word	0x08104799
 810473c:	2b40      	cmp	r3, #64	@ 0x40
 810473e:	d02e      	beq.n	810479e <UART_SetConfig+0x8aa>
 8104740:	e031      	b.n	81047a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8104742:	f7fd f991 	bl	8101a68 <HAL_RCC_GetPCLK1Freq>
 8104746:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104748:	e033      	b.n	81047b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810474a:	f7fd f9a3 	bl	8101a94 <HAL_RCC_GetPCLK2Freq>
 810474e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104750:	e02f      	b.n	81047b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104756:	4618      	mov	r0, r3
 8104758:	f7fe fc14 	bl	8102f84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810475c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810475e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104760:	e027      	b.n	81047b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104762:	f107 0318 	add.w	r3, r7, #24
 8104766:	4618      	mov	r0, r3
 8104768:	f7fe fd60 	bl	810322c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810476c:	69fb      	ldr	r3, [r7, #28]
 810476e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104770:	e01f      	b.n	81047b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104772:	4b2d      	ldr	r3, [pc, #180]	@ (8104828 <UART_SetConfig+0x934>)
 8104774:	681b      	ldr	r3, [r3, #0]
 8104776:	f003 0320 	and.w	r3, r3, #32
 810477a:	2b00      	cmp	r3, #0
 810477c:	d009      	beq.n	8104792 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810477e:	4b2a      	ldr	r3, [pc, #168]	@ (8104828 <UART_SetConfig+0x934>)
 8104780:	681b      	ldr	r3, [r3, #0]
 8104782:	08db      	lsrs	r3, r3, #3
 8104784:	f003 0303 	and.w	r3, r3, #3
 8104788:	4a24      	ldr	r2, [pc, #144]	@ (810481c <UART_SetConfig+0x928>)
 810478a:	fa22 f303 	lsr.w	r3, r2, r3
 810478e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104790:	e00f      	b.n	81047b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8104792:	4b22      	ldr	r3, [pc, #136]	@ (810481c <UART_SetConfig+0x928>)
 8104794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104796:	e00c      	b.n	81047b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8104798:	4b21      	ldr	r3, [pc, #132]	@ (8104820 <UART_SetConfig+0x92c>)
 810479a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810479c:	e009      	b.n	81047b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810479e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81047a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81047a4:	e005      	b.n	81047b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81047a6:	2300      	movs	r3, #0
 81047a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81047aa:	2301      	movs	r3, #1
 81047ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81047b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81047b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81047b4:	2b00      	cmp	r3, #0
 81047b6:	f000 80e7 	beq.w	8104988 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81047ba:	697b      	ldr	r3, [r7, #20]
 81047bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81047be:	4a19      	ldr	r2, [pc, #100]	@ (8104824 <UART_SetConfig+0x930>)
 81047c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81047c4:	461a      	mov	r2, r3
 81047c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81047c8:	fbb3 f3f2 	udiv	r3, r3, r2
 81047cc:	005a      	lsls	r2, r3, #1
 81047ce:	697b      	ldr	r3, [r7, #20]
 81047d0:	685b      	ldr	r3, [r3, #4]
 81047d2:	085b      	lsrs	r3, r3, #1
 81047d4:	441a      	add	r2, r3
 81047d6:	697b      	ldr	r3, [r7, #20]
 81047d8:	685b      	ldr	r3, [r3, #4]
 81047da:	fbb2 f3f3 	udiv	r3, r2, r3
 81047de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81047e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81047e2:	2b0f      	cmp	r3, #15
 81047e4:	d916      	bls.n	8104814 <UART_SetConfig+0x920>
 81047e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81047e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81047ec:	d212      	bcs.n	8104814 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81047ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81047f0:	b29b      	uxth	r3, r3
 81047f2:	f023 030f 	bic.w	r3, r3, #15
 81047f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81047f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81047fa:	085b      	lsrs	r3, r3, #1
 81047fc:	b29b      	uxth	r3, r3
 81047fe:	f003 0307 	and.w	r3, r3, #7
 8104802:	b29a      	uxth	r2, r3
 8104804:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8104806:	4313      	orrs	r3, r2
 8104808:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810480a:	697b      	ldr	r3, [r7, #20]
 810480c:	681b      	ldr	r3, [r3, #0]
 810480e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8104810:	60da      	str	r2, [r3, #12]
 8104812:	e0b9      	b.n	8104988 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8104814:	2301      	movs	r3, #1
 8104816:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810481a:	e0b5      	b.n	8104988 <UART_SetConfig+0xa94>
 810481c:	03d09000 	.word	0x03d09000
 8104820:	003d0900 	.word	0x003d0900
 8104824:	0810c6fc 	.word	0x0810c6fc
 8104828:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810482c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8104830:	2b20      	cmp	r3, #32
 8104832:	dc49      	bgt.n	81048c8 <UART_SetConfig+0x9d4>
 8104834:	2b00      	cmp	r3, #0
 8104836:	db7c      	blt.n	8104932 <UART_SetConfig+0xa3e>
 8104838:	2b20      	cmp	r3, #32
 810483a:	d87a      	bhi.n	8104932 <UART_SetConfig+0xa3e>
 810483c:	a201      	add	r2, pc, #4	@ (adr r2, 8104844 <UART_SetConfig+0x950>)
 810483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104842:	bf00      	nop
 8104844:	081048cf 	.word	0x081048cf
 8104848:	081048d7 	.word	0x081048d7
 810484c:	08104933 	.word	0x08104933
 8104850:	08104933 	.word	0x08104933
 8104854:	081048df 	.word	0x081048df
 8104858:	08104933 	.word	0x08104933
 810485c:	08104933 	.word	0x08104933
 8104860:	08104933 	.word	0x08104933
 8104864:	081048ef 	.word	0x081048ef
 8104868:	08104933 	.word	0x08104933
 810486c:	08104933 	.word	0x08104933
 8104870:	08104933 	.word	0x08104933
 8104874:	08104933 	.word	0x08104933
 8104878:	08104933 	.word	0x08104933
 810487c:	08104933 	.word	0x08104933
 8104880:	08104933 	.word	0x08104933
 8104884:	081048ff 	.word	0x081048ff
 8104888:	08104933 	.word	0x08104933
 810488c:	08104933 	.word	0x08104933
 8104890:	08104933 	.word	0x08104933
 8104894:	08104933 	.word	0x08104933
 8104898:	08104933 	.word	0x08104933
 810489c:	08104933 	.word	0x08104933
 81048a0:	08104933 	.word	0x08104933
 81048a4:	08104933 	.word	0x08104933
 81048a8:	08104933 	.word	0x08104933
 81048ac:	08104933 	.word	0x08104933
 81048b0:	08104933 	.word	0x08104933
 81048b4:	08104933 	.word	0x08104933
 81048b8:	08104933 	.word	0x08104933
 81048bc:	08104933 	.word	0x08104933
 81048c0:	08104933 	.word	0x08104933
 81048c4:	08104925 	.word	0x08104925
 81048c8:	2b40      	cmp	r3, #64	@ 0x40
 81048ca:	d02e      	beq.n	810492a <UART_SetConfig+0xa36>
 81048cc:	e031      	b.n	8104932 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81048ce:	f7fd f8cb 	bl	8101a68 <HAL_RCC_GetPCLK1Freq>
 81048d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81048d4:	e033      	b.n	810493e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81048d6:	f7fd f8dd 	bl	8101a94 <HAL_RCC_GetPCLK2Freq>
 81048da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81048dc:	e02f      	b.n	810493e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81048de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81048e2:	4618      	mov	r0, r3
 81048e4:	f7fe fb4e 	bl	8102f84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81048e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81048ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81048ec:	e027      	b.n	810493e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81048ee:	f107 0318 	add.w	r3, r7, #24
 81048f2:	4618      	mov	r0, r3
 81048f4:	f7fe fc9a 	bl	810322c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81048f8:	69fb      	ldr	r3, [r7, #28]
 81048fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81048fc:	e01f      	b.n	810493e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81048fe:	4b2d      	ldr	r3, [pc, #180]	@ (81049b4 <UART_SetConfig+0xac0>)
 8104900:	681b      	ldr	r3, [r3, #0]
 8104902:	f003 0320 	and.w	r3, r3, #32
 8104906:	2b00      	cmp	r3, #0
 8104908:	d009      	beq.n	810491e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810490a:	4b2a      	ldr	r3, [pc, #168]	@ (81049b4 <UART_SetConfig+0xac0>)
 810490c:	681b      	ldr	r3, [r3, #0]
 810490e:	08db      	lsrs	r3, r3, #3
 8104910:	f003 0303 	and.w	r3, r3, #3
 8104914:	4a28      	ldr	r2, [pc, #160]	@ (81049b8 <UART_SetConfig+0xac4>)
 8104916:	fa22 f303 	lsr.w	r3, r2, r3
 810491a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810491c:	e00f      	b.n	810493e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810491e:	4b26      	ldr	r3, [pc, #152]	@ (81049b8 <UART_SetConfig+0xac4>)
 8104920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104922:	e00c      	b.n	810493e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8104924:	4b25      	ldr	r3, [pc, #148]	@ (81049bc <UART_SetConfig+0xac8>)
 8104926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104928:	e009      	b.n	810493e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810492a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810492e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104930:	e005      	b.n	810493e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8104932:	2300      	movs	r3, #0
 8104934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8104936:	2301      	movs	r3, #1
 8104938:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810493c:	bf00      	nop
    }

    if (pclk != 0U)
 810493e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104940:	2b00      	cmp	r3, #0
 8104942:	d021      	beq.n	8104988 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104944:	697b      	ldr	r3, [r7, #20]
 8104946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104948:	4a1d      	ldr	r2, [pc, #116]	@ (81049c0 <UART_SetConfig+0xacc>)
 810494a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810494e:	461a      	mov	r2, r3
 8104950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104952:	fbb3 f2f2 	udiv	r2, r3, r2
 8104956:	697b      	ldr	r3, [r7, #20]
 8104958:	685b      	ldr	r3, [r3, #4]
 810495a:	085b      	lsrs	r3, r3, #1
 810495c:	441a      	add	r2, r3
 810495e:	697b      	ldr	r3, [r7, #20]
 8104960:	685b      	ldr	r3, [r3, #4]
 8104962:	fbb2 f3f3 	udiv	r3, r2, r3
 8104966:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8104968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810496a:	2b0f      	cmp	r3, #15
 810496c:	d909      	bls.n	8104982 <UART_SetConfig+0xa8e>
 810496e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104974:	d205      	bcs.n	8104982 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8104976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104978:	b29a      	uxth	r2, r3
 810497a:	697b      	ldr	r3, [r7, #20]
 810497c:	681b      	ldr	r3, [r3, #0]
 810497e:	60da      	str	r2, [r3, #12]
 8104980:	e002      	b.n	8104988 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8104982:	2301      	movs	r3, #1
 8104984:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8104988:	697b      	ldr	r3, [r7, #20]
 810498a:	2201      	movs	r2, #1
 810498c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8104990:	697b      	ldr	r3, [r7, #20]
 8104992:	2201      	movs	r2, #1
 8104994:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8104998:	697b      	ldr	r3, [r7, #20]
 810499a:	2200      	movs	r2, #0
 810499c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810499e:	697b      	ldr	r3, [r7, #20]
 81049a0:	2200      	movs	r2, #0
 81049a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 81049a4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 81049a8:	4618      	mov	r0, r3
 81049aa:	3748      	adds	r7, #72	@ 0x48
 81049ac:	46bd      	mov	sp, r7
 81049ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81049b2:	bf00      	nop
 81049b4:	58024400 	.word	0x58024400
 81049b8:	03d09000 	.word	0x03d09000
 81049bc:	003d0900 	.word	0x003d0900
 81049c0:	0810c6fc 	.word	0x0810c6fc

081049c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81049c4:	b480      	push	{r7}
 81049c6:	b083      	sub	sp, #12
 81049c8:	af00      	add	r7, sp, #0
 81049ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81049cc:	687b      	ldr	r3, [r7, #4]
 81049ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81049d0:	f003 0308 	and.w	r3, r3, #8
 81049d4:	2b00      	cmp	r3, #0
 81049d6:	d00a      	beq.n	81049ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81049d8:	687b      	ldr	r3, [r7, #4]
 81049da:	681b      	ldr	r3, [r3, #0]
 81049dc:	685b      	ldr	r3, [r3, #4]
 81049de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 81049e2:	687b      	ldr	r3, [r7, #4]
 81049e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81049e6:	687b      	ldr	r3, [r7, #4]
 81049e8:	681b      	ldr	r3, [r3, #0]
 81049ea:	430a      	orrs	r2, r1
 81049ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81049ee:	687b      	ldr	r3, [r7, #4]
 81049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81049f2:	f003 0301 	and.w	r3, r3, #1
 81049f6:	2b00      	cmp	r3, #0
 81049f8:	d00a      	beq.n	8104a10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81049fa:	687b      	ldr	r3, [r7, #4]
 81049fc:	681b      	ldr	r3, [r3, #0]
 81049fe:	685b      	ldr	r3, [r3, #4]
 8104a00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8104a04:	687b      	ldr	r3, [r7, #4]
 8104a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8104a08:	687b      	ldr	r3, [r7, #4]
 8104a0a:	681b      	ldr	r3, [r3, #0]
 8104a0c:	430a      	orrs	r2, r1
 8104a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8104a10:	687b      	ldr	r3, [r7, #4]
 8104a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a14:	f003 0302 	and.w	r3, r3, #2
 8104a18:	2b00      	cmp	r3, #0
 8104a1a:	d00a      	beq.n	8104a32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8104a1c:	687b      	ldr	r3, [r7, #4]
 8104a1e:	681b      	ldr	r3, [r3, #0]
 8104a20:	685b      	ldr	r3, [r3, #4]
 8104a22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8104a26:	687b      	ldr	r3, [r7, #4]
 8104a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8104a2a:	687b      	ldr	r3, [r7, #4]
 8104a2c:	681b      	ldr	r3, [r3, #0]
 8104a2e:	430a      	orrs	r2, r1
 8104a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8104a32:	687b      	ldr	r3, [r7, #4]
 8104a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a36:	f003 0304 	and.w	r3, r3, #4
 8104a3a:	2b00      	cmp	r3, #0
 8104a3c:	d00a      	beq.n	8104a54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8104a3e:	687b      	ldr	r3, [r7, #4]
 8104a40:	681b      	ldr	r3, [r3, #0]
 8104a42:	685b      	ldr	r3, [r3, #4]
 8104a44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104a4c:	687b      	ldr	r3, [r7, #4]
 8104a4e:	681b      	ldr	r3, [r3, #0]
 8104a50:	430a      	orrs	r2, r1
 8104a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8104a54:	687b      	ldr	r3, [r7, #4]
 8104a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a58:	f003 0310 	and.w	r3, r3, #16
 8104a5c:	2b00      	cmp	r3, #0
 8104a5e:	d00a      	beq.n	8104a76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8104a60:	687b      	ldr	r3, [r7, #4]
 8104a62:	681b      	ldr	r3, [r3, #0]
 8104a64:	689b      	ldr	r3, [r3, #8]
 8104a66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8104a6a:	687b      	ldr	r3, [r7, #4]
 8104a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8104a6e:	687b      	ldr	r3, [r7, #4]
 8104a70:	681b      	ldr	r3, [r3, #0]
 8104a72:	430a      	orrs	r2, r1
 8104a74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8104a76:	687b      	ldr	r3, [r7, #4]
 8104a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a7a:	f003 0320 	and.w	r3, r3, #32
 8104a7e:	2b00      	cmp	r3, #0
 8104a80:	d00a      	beq.n	8104a98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8104a82:	687b      	ldr	r3, [r7, #4]
 8104a84:	681b      	ldr	r3, [r3, #0]
 8104a86:	689b      	ldr	r3, [r3, #8]
 8104a88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8104a8c:	687b      	ldr	r3, [r7, #4]
 8104a8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8104a90:	687b      	ldr	r3, [r7, #4]
 8104a92:	681b      	ldr	r3, [r3, #0]
 8104a94:	430a      	orrs	r2, r1
 8104a96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8104a98:	687b      	ldr	r3, [r7, #4]
 8104a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104aa0:	2b00      	cmp	r3, #0
 8104aa2:	d01a      	beq.n	8104ada <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	681b      	ldr	r3, [r3, #0]
 8104aa8:	685b      	ldr	r3, [r3, #4]
 8104aaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8104ab2:	687b      	ldr	r3, [r7, #4]
 8104ab4:	681b      	ldr	r3, [r3, #0]
 8104ab6:	430a      	orrs	r2, r1
 8104ab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104abe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104ac2:	d10a      	bne.n	8104ada <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8104ac4:	687b      	ldr	r3, [r7, #4]
 8104ac6:	681b      	ldr	r3, [r3, #0]
 8104ac8:	685b      	ldr	r3, [r3, #4]
 8104aca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8104ace:	687b      	ldr	r3, [r7, #4]
 8104ad0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8104ad2:	687b      	ldr	r3, [r7, #4]
 8104ad4:	681b      	ldr	r3, [r3, #0]
 8104ad6:	430a      	orrs	r2, r1
 8104ad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104ae2:	2b00      	cmp	r3, #0
 8104ae4:	d00a      	beq.n	8104afc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8104ae6:	687b      	ldr	r3, [r7, #4]
 8104ae8:	681b      	ldr	r3, [r3, #0]
 8104aea:	685b      	ldr	r3, [r3, #4]
 8104aec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8104af0:	687b      	ldr	r3, [r7, #4]
 8104af2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8104af4:	687b      	ldr	r3, [r7, #4]
 8104af6:	681b      	ldr	r3, [r3, #0]
 8104af8:	430a      	orrs	r2, r1
 8104afa:	605a      	str	r2, [r3, #4]
  }
}
 8104afc:	bf00      	nop
 8104afe:	370c      	adds	r7, #12
 8104b00:	46bd      	mov	sp, r7
 8104b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b06:	4770      	bx	lr

08104b08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8104b08:	b580      	push	{r7, lr}
 8104b0a:	b098      	sub	sp, #96	@ 0x60
 8104b0c:	af02      	add	r7, sp, #8
 8104b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104b10:	687b      	ldr	r3, [r7, #4]
 8104b12:	2200      	movs	r2, #0
 8104b14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8104b18:	f7fc fa34 	bl	8100f84 <HAL_GetTick>
 8104b1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	681b      	ldr	r3, [r3, #0]
 8104b22:	681b      	ldr	r3, [r3, #0]
 8104b24:	f003 0308 	and.w	r3, r3, #8
 8104b28:	2b08      	cmp	r3, #8
 8104b2a:	d12f      	bne.n	8104b8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8104b2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8104b30:	9300      	str	r3, [sp, #0]
 8104b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8104b34:	2200      	movs	r2, #0
 8104b36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8104b3a:	6878      	ldr	r0, [r7, #4]
 8104b3c:	f000 f88e 	bl	8104c5c <UART_WaitOnFlagUntilTimeout>
 8104b40:	4603      	mov	r3, r0
 8104b42:	2b00      	cmp	r3, #0
 8104b44:	d022      	beq.n	8104b8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8104b46:	687b      	ldr	r3, [r7, #4]
 8104b48:	681b      	ldr	r3, [r3, #0]
 8104b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b4e:	e853 3f00 	ldrex	r3, [r3]
 8104b52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8104b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8104b5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8104b5c:	687b      	ldr	r3, [r7, #4]
 8104b5e:	681b      	ldr	r3, [r3, #0]
 8104b60:	461a      	mov	r2, r3
 8104b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8104b66:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104b68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8104b6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8104b6c:	e841 2300 	strex	r3, r2, [r1]
 8104b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8104b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104b74:	2b00      	cmp	r3, #0
 8104b76:	d1e6      	bne.n	8104b46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8104b78:	687b      	ldr	r3, [r7, #4]
 8104b7a:	2220      	movs	r2, #32
 8104b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8104b80:	687b      	ldr	r3, [r7, #4]
 8104b82:	2200      	movs	r2, #0
 8104b84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8104b88:	2303      	movs	r3, #3
 8104b8a:	e063      	b.n	8104c54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	681b      	ldr	r3, [r3, #0]
 8104b90:	681b      	ldr	r3, [r3, #0]
 8104b92:	f003 0304 	and.w	r3, r3, #4
 8104b96:	2b04      	cmp	r3, #4
 8104b98:	d149      	bne.n	8104c2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8104b9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8104b9e:	9300      	str	r3, [sp, #0]
 8104ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8104ba2:	2200      	movs	r2, #0
 8104ba4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8104ba8:	6878      	ldr	r0, [r7, #4]
 8104baa:	f000 f857 	bl	8104c5c <UART_WaitOnFlagUntilTimeout>
 8104bae:	4603      	mov	r3, r0
 8104bb0:	2b00      	cmp	r3, #0
 8104bb2:	d03c      	beq.n	8104c2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8104bb4:	687b      	ldr	r3, [r7, #4]
 8104bb6:	681b      	ldr	r3, [r3, #0]
 8104bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104bbc:	e853 3f00 	ldrex	r3, [r3]
 8104bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8104bc2:	6a3b      	ldr	r3, [r7, #32]
 8104bc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8104bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8104bca:	687b      	ldr	r3, [r7, #4]
 8104bcc:	681b      	ldr	r3, [r3, #0]
 8104bce:	461a      	mov	r2, r3
 8104bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8104bd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8104bd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8104bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8104bda:	e841 2300 	strex	r3, r2, [r1]
 8104bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8104be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104be2:	2b00      	cmp	r3, #0
 8104be4:	d1e6      	bne.n	8104bb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8104be6:	687b      	ldr	r3, [r7, #4]
 8104be8:	681b      	ldr	r3, [r3, #0]
 8104bea:	3308      	adds	r3, #8
 8104bec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104bee:	693b      	ldr	r3, [r7, #16]
 8104bf0:	e853 3f00 	ldrex	r3, [r3]
 8104bf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8104bf6:	68fb      	ldr	r3, [r7, #12]
 8104bf8:	f023 0301 	bic.w	r3, r3, #1
 8104bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8104bfe:	687b      	ldr	r3, [r7, #4]
 8104c00:	681b      	ldr	r3, [r3, #0]
 8104c02:	3308      	adds	r3, #8
 8104c04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8104c06:	61fa      	str	r2, [r7, #28]
 8104c08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104c0a:	69b9      	ldr	r1, [r7, #24]
 8104c0c:	69fa      	ldr	r2, [r7, #28]
 8104c0e:	e841 2300 	strex	r3, r2, [r1]
 8104c12:	617b      	str	r3, [r7, #20]
   return(result);
 8104c14:	697b      	ldr	r3, [r7, #20]
 8104c16:	2b00      	cmp	r3, #0
 8104c18:	d1e5      	bne.n	8104be6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8104c1a:	687b      	ldr	r3, [r7, #4]
 8104c1c:	2220      	movs	r2, #32
 8104c1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8104c22:	687b      	ldr	r3, [r7, #4]
 8104c24:	2200      	movs	r2, #0
 8104c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8104c2a:	2303      	movs	r3, #3
 8104c2c:	e012      	b.n	8104c54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8104c2e:	687b      	ldr	r3, [r7, #4]
 8104c30:	2220      	movs	r2, #32
 8104c32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8104c36:	687b      	ldr	r3, [r7, #4]
 8104c38:	2220      	movs	r2, #32
 8104c3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8104c3e:	687b      	ldr	r3, [r7, #4]
 8104c40:	2200      	movs	r2, #0
 8104c42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8104c44:	687b      	ldr	r3, [r7, #4]
 8104c46:	2200      	movs	r2, #0
 8104c48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8104c4a:	687b      	ldr	r3, [r7, #4]
 8104c4c:	2200      	movs	r2, #0
 8104c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104c52:	2300      	movs	r3, #0
}
 8104c54:	4618      	mov	r0, r3
 8104c56:	3758      	adds	r7, #88	@ 0x58
 8104c58:	46bd      	mov	sp, r7
 8104c5a:	bd80      	pop	{r7, pc}

08104c5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8104c5c:	b580      	push	{r7, lr}
 8104c5e:	b084      	sub	sp, #16
 8104c60:	af00      	add	r7, sp, #0
 8104c62:	60f8      	str	r0, [r7, #12]
 8104c64:	60b9      	str	r1, [r7, #8]
 8104c66:	603b      	str	r3, [r7, #0]
 8104c68:	4613      	mov	r3, r2
 8104c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8104c6c:	e04f      	b.n	8104d0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104c6e:	69bb      	ldr	r3, [r7, #24]
 8104c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104c74:	d04b      	beq.n	8104d0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104c76:	f7fc f985 	bl	8100f84 <HAL_GetTick>
 8104c7a:	4602      	mov	r2, r0
 8104c7c:	683b      	ldr	r3, [r7, #0]
 8104c7e:	1ad3      	subs	r3, r2, r3
 8104c80:	69ba      	ldr	r2, [r7, #24]
 8104c82:	429a      	cmp	r2, r3
 8104c84:	d302      	bcc.n	8104c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8104c86:	69bb      	ldr	r3, [r7, #24]
 8104c88:	2b00      	cmp	r3, #0
 8104c8a:	d101      	bne.n	8104c90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8104c8c:	2303      	movs	r3, #3
 8104c8e:	e04e      	b.n	8104d2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8104c90:	68fb      	ldr	r3, [r7, #12]
 8104c92:	681b      	ldr	r3, [r3, #0]
 8104c94:	681b      	ldr	r3, [r3, #0]
 8104c96:	f003 0304 	and.w	r3, r3, #4
 8104c9a:	2b00      	cmp	r3, #0
 8104c9c:	d037      	beq.n	8104d0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8104c9e:	68bb      	ldr	r3, [r7, #8]
 8104ca0:	2b80      	cmp	r3, #128	@ 0x80
 8104ca2:	d034      	beq.n	8104d0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8104ca4:	68bb      	ldr	r3, [r7, #8]
 8104ca6:	2b40      	cmp	r3, #64	@ 0x40
 8104ca8:	d031      	beq.n	8104d0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8104caa:	68fb      	ldr	r3, [r7, #12]
 8104cac:	681b      	ldr	r3, [r3, #0]
 8104cae:	69db      	ldr	r3, [r3, #28]
 8104cb0:	f003 0308 	and.w	r3, r3, #8
 8104cb4:	2b08      	cmp	r3, #8
 8104cb6:	d110      	bne.n	8104cda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8104cb8:	68fb      	ldr	r3, [r7, #12]
 8104cba:	681b      	ldr	r3, [r3, #0]
 8104cbc:	2208      	movs	r2, #8
 8104cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8104cc0:	68f8      	ldr	r0, [r7, #12]
 8104cc2:	f000 f838 	bl	8104d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8104cc6:	68fb      	ldr	r3, [r7, #12]
 8104cc8:	2208      	movs	r2, #8
 8104cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8104cce:	68fb      	ldr	r3, [r7, #12]
 8104cd0:	2200      	movs	r2, #0
 8104cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8104cd6:	2301      	movs	r3, #1
 8104cd8:	e029      	b.n	8104d2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8104cda:	68fb      	ldr	r3, [r7, #12]
 8104cdc:	681b      	ldr	r3, [r3, #0]
 8104cde:	69db      	ldr	r3, [r3, #28]
 8104ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8104ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104ce8:	d111      	bne.n	8104d0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8104cea:	68fb      	ldr	r3, [r7, #12]
 8104cec:	681b      	ldr	r3, [r3, #0]
 8104cee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8104cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8104cf4:	68f8      	ldr	r0, [r7, #12]
 8104cf6:	f000 f81e 	bl	8104d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8104cfa:	68fb      	ldr	r3, [r7, #12]
 8104cfc:	2220      	movs	r2, #32
 8104cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8104d02:	68fb      	ldr	r3, [r7, #12]
 8104d04:	2200      	movs	r2, #0
 8104d06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8104d0a:	2303      	movs	r3, #3
 8104d0c:	e00f      	b.n	8104d2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8104d0e:	68fb      	ldr	r3, [r7, #12]
 8104d10:	681b      	ldr	r3, [r3, #0]
 8104d12:	69da      	ldr	r2, [r3, #28]
 8104d14:	68bb      	ldr	r3, [r7, #8]
 8104d16:	4013      	ands	r3, r2
 8104d18:	68ba      	ldr	r2, [r7, #8]
 8104d1a:	429a      	cmp	r2, r3
 8104d1c:	bf0c      	ite	eq
 8104d1e:	2301      	moveq	r3, #1
 8104d20:	2300      	movne	r3, #0
 8104d22:	b2db      	uxtb	r3, r3
 8104d24:	461a      	mov	r2, r3
 8104d26:	79fb      	ldrb	r3, [r7, #7]
 8104d28:	429a      	cmp	r2, r3
 8104d2a:	d0a0      	beq.n	8104c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8104d2c:	2300      	movs	r3, #0
}
 8104d2e:	4618      	mov	r0, r3
 8104d30:	3710      	adds	r7, #16
 8104d32:	46bd      	mov	sp, r7
 8104d34:	bd80      	pop	{r7, pc}

08104d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8104d36:	b480      	push	{r7}
 8104d38:	b095      	sub	sp, #84	@ 0x54
 8104d3a:	af00      	add	r7, sp, #0
 8104d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8104d3e:	687b      	ldr	r3, [r7, #4]
 8104d40:	681b      	ldr	r3, [r3, #0]
 8104d42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104d46:	e853 3f00 	ldrex	r3, [r3]
 8104d4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8104d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104d4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8104d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	681b      	ldr	r3, [r3, #0]
 8104d58:	461a      	mov	r2, r3
 8104d5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8104d5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8104d5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104d60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8104d62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8104d64:	e841 2300 	strex	r3, r2, [r1]
 8104d68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8104d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d6c:	2b00      	cmp	r3, #0
 8104d6e:	d1e6      	bne.n	8104d3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8104d70:	687b      	ldr	r3, [r7, #4]
 8104d72:	681b      	ldr	r3, [r3, #0]
 8104d74:	3308      	adds	r3, #8
 8104d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104d78:	6a3b      	ldr	r3, [r7, #32]
 8104d7a:	e853 3f00 	ldrex	r3, [r3]
 8104d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8104d80:	69fb      	ldr	r3, [r7, #28]
 8104d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8104d86:	f023 0301 	bic.w	r3, r3, #1
 8104d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8104d8c:	687b      	ldr	r3, [r7, #4]
 8104d8e:	681b      	ldr	r3, [r3, #0]
 8104d90:	3308      	adds	r3, #8
 8104d92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8104d94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8104d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8104d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8104d9c:	e841 2300 	strex	r3, r2, [r1]
 8104da0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8104da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104da4:	2b00      	cmp	r3, #0
 8104da6:	d1e3      	bne.n	8104d70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104dac:	2b01      	cmp	r3, #1
 8104dae:	d118      	bne.n	8104de2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8104db0:	687b      	ldr	r3, [r7, #4]
 8104db2:	681b      	ldr	r3, [r3, #0]
 8104db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104db6:	68fb      	ldr	r3, [r7, #12]
 8104db8:	e853 3f00 	ldrex	r3, [r3]
 8104dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8104dbe:	68bb      	ldr	r3, [r7, #8]
 8104dc0:	f023 0310 	bic.w	r3, r3, #16
 8104dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8104dc6:	687b      	ldr	r3, [r7, #4]
 8104dc8:	681b      	ldr	r3, [r3, #0]
 8104dca:	461a      	mov	r2, r3
 8104dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8104dce:	61bb      	str	r3, [r7, #24]
 8104dd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104dd2:	6979      	ldr	r1, [r7, #20]
 8104dd4:	69ba      	ldr	r2, [r7, #24]
 8104dd6:	e841 2300 	strex	r3, r2, [r1]
 8104dda:	613b      	str	r3, [r7, #16]
   return(result);
 8104ddc:	693b      	ldr	r3, [r7, #16]
 8104dde:	2b00      	cmp	r3, #0
 8104de0:	d1e6      	bne.n	8104db0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8104de2:	687b      	ldr	r3, [r7, #4]
 8104de4:	2220      	movs	r2, #32
 8104de6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8104dea:	687b      	ldr	r3, [r7, #4]
 8104dec:	2200      	movs	r2, #0
 8104dee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8104df0:	687b      	ldr	r3, [r7, #4]
 8104df2:	2200      	movs	r2, #0
 8104df4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8104df6:	bf00      	nop
 8104df8:	3754      	adds	r7, #84	@ 0x54
 8104dfa:	46bd      	mov	sp, r7
 8104dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e00:	4770      	bx	lr

08104e02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8104e02:	b480      	push	{r7}
 8104e04:	b085      	sub	sp, #20
 8104e06:	af00      	add	r7, sp, #0
 8104e08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8104e0a:	687b      	ldr	r3, [r7, #4]
 8104e0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8104e10:	2b01      	cmp	r3, #1
 8104e12:	d101      	bne.n	8104e18 <HAL_UARTEx_DisableFifoMode+0x16>
 8104e14:	2302      	movs	r3, #2
 8104e16:	e027      	b.n	8104e68 <HAL_UARTEx_DisableFifoMode+0x66>
 8104e18:	687b      	ldr	r3, [r7, #4]
 8104e1a:	2201      	movs	r2, #1
 8104e1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8104e20:	687b      	ldr	r3, [r7, #4]
 8104e22:	2224      	movs	r2, #36	@ 0x24
 8104e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	681b      	ldr	r3, [r3, #0]
 8104e2c:	681b      	ldr	r3, [r3, #0]
 8104e2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	681b      	ldr	r3, [r3, #0]
 8104e34:	681a      	ldr	r2, [r3, #0]
 8104e36:	687b      	ldr	r3, [r7, #4]
 8104e38:	681b      	ldr	r3, [r3, #0]
 8104e3a:	f022 0201 	bic.w	r2, r2, #1
 8104e3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8104e40:	68fb      	ldr	r3, [r7, #12]
 8104e42:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8104e46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8104e48:	687b      	ldr	r3, [r7, #4]
 8104e4a:	2200      	movs	r2, #0
 8104e4c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8104e4e:	687b      	ldr	r3, [r7, #4]
 8104e50:	681b      	ldr	r3, [r3, #0]
 8104e52:	68fa      	ldr	r2, [r7, #12]
 8104e54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	2220      	movs	r2, #32
 8104e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8104e5e:	687b      	ldr	r3, [r7, #4]
 8104e60:	2200      	movs	r2, #0
 8104e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104e66:	2300      	movs	r3, #0
}
 8104e68:	4618      	mov	r0, r3
 8104e6a:	3714      	adds	r7, #20
 8104e6c:	46bd      	mov	sp, r7
 8104e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e72:	4770      	bx	lr

08104e74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8104e74:	b580      	push	{r7, lr}
 8104e76:	b084      	sub	sp, #16
 8104e78:	af00      	add	r7, sp, #0
 8104e7a:	6078      	str	r0, [r7, #4]
 8104e7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8104e7e:	687b      	ldr	r3, [r7, #4]
 8104e80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8104e84:	2b01      	cmp	r3, #1
 8104e86:	d101      	bne.n	8104e8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8104e88:	2302      	movs	r3, #2
 8104e8a:	e02d      	b.n	8104ee8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	2201      	movs	r2, #1
 8104e90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	2224      	movs	r2, #36	@ 0x24
 8104e98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8104e9c:	687b      	ldr	r3, [r7, #4]
 8104e9e:	681b      	ldr	r3, [r3, #0]
 8104ea0:	681b      	ldr	r3, [r3, #0]
 8104ea2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	681a      	ldr	r2, [r3, #0]
 8104eaa:	687b      	ldr	r3, [r7, #4]
 8104eac:	681b      	ldr	r3, [r3, #0]
 8104eae:	f022 0201 	bic.w	r2, r2, #1
 8104eb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	681b      	ldr	r3, [r3, #0]
 8104eb8:	689b      	ldr	r3, [r3, #8]
 8104eba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8104ebe:	687b      	ldr	r3, [r7, #4]
 8104ec0:	681b      	ldr	r3, [r3, #0]
 8104ec2:	683a      	ldr	r2, [r7, #0]
 8104ec4:	430a      	orrs	r2, r1
 8104ec6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8104ec8:	6878      	ldr	r0, [r7, #4]
 8104eca:	f000 f84f 	bl	8104f6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8104ece:	687b      	ldr	r3, [r7, #4]
 8104ed0:	681b      	ldr	r3, [r3, #0]
 8104ed2:	68fa      	ldr	r2, [r7, #12]
 8104ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	2220      	movs	r2, #32
 8104eda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8104ede:	687b      	ldr	r3, [r7, #4]
 8104ee0:	2200      	movs	r2, #0
 8104ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104ee6:	2300      	movs	r3, #0
}
 8104ee8:	4618      	mov	r0, r3
 8104eea:	3710      	adds	r7, #16
 8104eec:	46bd      	mov	sp, r7
 8104eee:	bd80      	pop	{r7, pc}

08104ef0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8104ef0:	b580      	push	{r7, lr}
 8104ef2:	b084      	sub	sp, #16
 8104ef4:	af00      	add	r7, sp, #0
 8104ef6:	6078      	str	r0, [r7, #4]
 8104ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8104f00:	2b01      	cmp	r3, #1
 8104f02:	d101      	bne.n	8104f08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8104f04:	2302      	movs	r3, #2
 8104f06:	e02d      	b.n	8104f64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8104f08:	687b      	ldr	r3, [r7, #4]
 8104f0a:	2201      	movs	r2, #1
 8104f0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8104f10:	687b      	ldr	r3, [r7, #4]
 8104f12:	2224      	movs	r2, #36	@ 0x24
 8104f14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8104f18:	687b      	ldr	r3, [r7, #4]
 8104f1a:	681b      	ldr	r3, [r3, #0]
 8104f1c:	681b      	ldr	r3, [r3, #0]
 8104f1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	681b      	ldr	r3, [r3, #0]
 8104f24:	681a      	ldr	r2, [r3, #0]
 8104f26:	687b      	ldr	r3, [r7, #4]
 8104f28:	681b      	ldr	r3, [r3, #0]
 8104f2a:	f022 0201 	bic.w	r2, r2, #1
 8104f2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8104f30:	687b      	ldr	r3, [r7, #4]
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	689b      	ldr	r3, [r3, #8]
 8104f36:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8104f3a:	687b      	ldr	r3, [r7, #4]
 8104f3c:	681b      	ldr	r3, [r3, #0]
 8104f3e:	683a      	ldr	r2, [r7, #0]
 8104f40:	430a      	orrs	r2, r1
 8104f42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8104f44:	6878      	ldr	r0, [r7, #4]
 8104f46:	f000 f811 	bl	8104f6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8104f4a:	687b      	ldr	r3, [r7, #4]
 8104f4c:	681b      	ldr	r3, [r3, #0]
 8104f4e:	68fa      	ldr	r2, [r7, #12]
 8104f50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8104f52:	687b      	ldr	r3, [r7, #4]
 8104f54:	2220      	movs	r2, #32
 8104f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8104f5a:	687b      	ldr	r3, [r7, #4]
 8104f5c:	2200      	movs	r2, #0
 8104f5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104f62:	2300      	movs	r3, #0
}
 8104f64:	4618      	mov	r0, r3
 8104f66:	3710      	adds	r7, #16
 8104f68:	46bd      	mov	sp, r7
 8104f6a:	bd80      	pop	{r7, pc}

08104f6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8104f6c:	b480      	push	{r7}
 8104f6e:	b085      	sub	sp, #20
 8104f70:	af00      	add	r7, sp, #0
 8104f72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8104f74:	687b      	ldr	r3, [r7, #4]
 8104f76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104f78:	2b00      	cmp	r3, #0
 8104f7a:	d108      	bne.n	8104f8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8104f7c:	687b      	ldr	r3, [r7, #4]
 8104f7e:	2201      	movs	r2, #1
 8104f80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	2201      	movs	r2, #1
 8104f88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8104f8c:	e031      	b.n	8104ff2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8104f8e:	2310      	movs	r3, #16
 8104f90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8104f92:	2310      	movs	r3, #16
 8104f94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	681b      	ldr	r3, [r3, #0]
 8104f9a:	689b      	ldr	r3, [r3, #8]
 8104f9c:	0e5b      	lsrs	r3, r3, #25
 8104f9e:	b2db      	uxtb	r3, r3
 8104fa0:	f003 0307 	and.w	r3, r3, #7
 8104fa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8104fa6:	687b      	ldr	r3, [r7, #4]
 8104fa8:	681b      	ldr	r3, [r3, #0]
 8104faa:	689b      	ldr	r3, [r3, #8]
 8104fac:	0f5b      	lsrs	r3, r3, #29
 8104fae:	b2db      	uxtb	r3, r3
 8104fb0:	f003 0307 	and.w	r3, r3, #7
 8104fb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8104fb6:	7bbb      	ldrb	r3, [r7, #14]
 8104fb8:	7b3a      	ldrb	r2, [r7, #12]
 8104fba:	4911      	ldr	r1, [pc, #68]	@ (8105000 <UARTEx_SetNbDataToProcess+0x94>)
 8104fbc:	5c8a      	ldrb	r2, [r1, r2]
 8104fbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8104fc2:	7b3a      	ldrb	r2, [r7, #12]
 8104fc4:	490f      	ldr	r1, [pc, #60]	@ (8105004 <UARTEx_SetNbDataToProcess+0x98>)
 8104fc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8104fc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8104fcc:	b29a      	uxth	r2, r3
 8104fce:	687b      	ldr	r3, [r7, #4]
 8104fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8104fd4:	7bfb      	ldrb	r3, [r7, #15]
 8104fd6:	7b7a      	ldrb	r2, [r7, #13]
 8104fd8:	4909      	ldr	r1, [pc, #36]	@ (8105000 <UARTEx_SetNbDataToProcess+0x94>)
 8104fda:	5c8a      	ldrb	r2, [r1, r2]
 8104fdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8104fe0:	7b7a      	ldrb	r2, [r7, #13]
 8104fe2:	4908      	ldr	r1, [pc, #32]	@ (8105004 <UARTEx_SetNbDataToProcess+0x98>)
 8104fe4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8104fe6:	fb93 f3f2 	sdiv	r3, r3, r2
 8104fea:	b29a      	uxth	r2, r3
 8104fec:	687b      	ldr	r3, [r7, #4]
 8104fee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8104ff2:	bf00      	nop
 8104ff4:	3714      	adds	r7, #20
 8104ff6:	46bd      	mov	sp, r7
 8104ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ffc:	4770      	bx	lr
 8104ffe:	bf00      	nop
 8105000:	0810c714 	.word	0x0810c714
 8105004:	0810c71c 	.word	0x0810c71c

08105008 <__NVIC_SetPriority>:
{
 8105008:	b480      	push	{r7}
 810500a:	b083      	sub	sp, #12
 810500c:	af00      	add	r7, sp, #0
 810500e:	4603      	mov	r3, r0
 8105010:	6039      	str	r1, [r7, #0]
 8105012:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105018:	2b00      	cmp	r3, #0
 810501a:	db0a      	blt.n	8105032 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810501c:	683b      	ldr	r3, [r7, #0]
 810501e:	b2da      	uxtb	r2, r3
 8105020:	490c      	ldr	r1, [pc, #48]	@ (8105054 <__NVIC_SetPriority+0x4c>)
 8105022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105026:	0112      	lsls	r2, r2, #4
 8105028:	b2d2      	uxtb	r2, r2
 810502a:	440b      	add	r3, r1
 810502c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8105030:	e00a      	b.n	8105048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105032:	683b      	ldr	r3, [r7, #0]
 8105034:	b2da      	uxtb	r2, r3
 8105036:	4908      	ldr	r1, [pc, #32]	@ (8105058 <__NVIC_SetPriority+0x50>)
 8105038:	88fb      	ldrh	r3, [r7, #6]
 810503a:	f003 030f 	and.w	r3, r3, #15
 810503e:	3b04      	subs	r3, #4
 8105040:	0112      	lsls	r2, r2, #4
 8105042:	b2d2      	uxtb	r2, r2
 8105044:	440b      	add	r3, r1
 8105046:	761a      	strb	r2, [r3, #24]
}
 8105048:	bf00      	nop
 810504a:	370c      	adds	r7, #12
 810504c:	46bd      	mov	sp, r7
 810504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105052:	4770      	bx	lr
 8105054:	e000e100 	.word	0xe000e100
 8105058:	e000ed00 	.word	0xe000ed00

0810505c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 810505c:	b580      	push	{r7, lr}
 810505e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8105060:	4b05      	ldr	r3, [pc, #20]	@ (8105078 <SysTick_Handler+0x1c>)
 8105062:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8105064:	f002 fee2 	bl	8107e2c <xTaskGetSchedulerState>
 8105068:	4603      	mov	r3, r0
 810506a:	2b01      	cmp	r3, #1
 810506c:	d001      	beq.n	8105072 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810506e:	f000 feeb 	bl	8105e48 <xPortSysTickHandler>
  }
}
 8105072:	bf00      	nop
 8105074:	bd80      	pop	{r7, pc}
 8105076:	bf00      	nop
 8105078:	e000e010 	.word	0xe000e010

0810507c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810507c:	b580      	push	{r7, lr}
 810507e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8105080:	2100      	movs	r1, #0
 8105082:	f06f 0004 	mvn.w	r0, #4
 8105086:	f7ff ffbf 	bl	8105008 <__NVIC_SetPriority>
#endif
}
 810508a:	bf00      	nop
 810508c:	bd80      	pop	{r7, pc}
	...

08105090 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8105090:	b480      	push	{r7}
 8105092:	b083      	sub	sp, #12
 8105094:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105096:	f3ef 8305 	mrs	r3, IPSR
 810509a:	603b      	str	r3, [r7, #0]
  return(result);
 810509c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810509e:	2b00      	cmp	r3, #0
 81050a0:	d003      	beq.n	81050aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 81050a2:	f06f 0305 	mvn.w	r3, #5
 81050a6:	607b      	str	r3, [r7, #4]
 81050a8:	e00c      	b.n	81050c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 81050aa:	4b0a      	ldr	r3, [pc, #40]	@ (81050d4 <osKernelInitialize+0x44>)
 81050ac:	681b      	ldr	r3, [r3, #0]
 81050ae:	2b00      	cmp	r3, #0
 81050b0:	d105      	bne.n	81050be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 81050b2:	4b08      	ldr	r3, [pc, #32]	@ (81050d4 <osKernelInitialize+0x44>)
 81050b4:	2201      	movs	r2, #1
 81050b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 81050b8:	2300      	movs	r3, #0
 81050ba:	607b      	str	r3, [r7, #4]
 81050bc:	e002      	b.n	81050c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 81050be:	f04f 33ff 	mov.w	r3, #4294967295
 81050c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 81050c4:	687b      	ldr	r3, [r7, #4]
}
 81050c6:	4618      	mov	r0, r3
 81050c8:	370c      	adds	r7, #12
 81050ca:	46bd      	mov	sp, r7
 81050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050d0:	4770      	bx	lr
 81050d2:	bf00      	nop
 81050d4:	10000270 	.word	0x10000270

081050d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 81050d8:	b580      	push	{r7, lr}
 81050da:	b082      	sub	sp, #8
 81050dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81050de:	f3ef 8305 	mrs	r3, IPSR
 81050e2:	603b      	str	r3, [r7, #0]
  return(result);
 81050e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 81050e6:	2b00      	cmp	r3, #0
 81050e8:	d003      	beq.n	81050f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 81050ea:	f06f 0305 	mvn.w	r3, #5
 81050ee:	607b      	str	r3, [r7, #4]
 81050f0:	e010      	b.n	8105114 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 81050f2:	4b0b      	ldr	r3, [pc, #44]	@ (8105120 <osKernelStart+0x48>)
 81050f4:	681b      	ldr	r3, [r3, #0]
 81050f6:	2b01      	cmp	r3, #1
 81050f8:	d109      	bne.n	810510e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 81050fa:	f7ff ffbf 	bl	810507c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 81050fe:	4b08      	ldr	r3, [pc, #32]	@ (8105120 <osKernelStart+0x48>)
 8105100:	2202      	movs	r2, #2
 8105102:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8105104:	f002 fa2e 	bl	8107564 <vTaskStartScheduler>
      stat = osOK;
 8105108:	2300      	movs	r3, #0
 810510a:	607b      	str	r3, [r7, #4]
 810510c:	e002      	b.n	8105114 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810510e:	f04f 33ff 	mov.w	r3, #4294967295
 8105112:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8105114:	687b      	ldr	r3, [r7, #4]
}
 8105116:	4618      	mov	r0, r3
 8105118:	3708      	adds	r7, #8
 810511a:	46bd      	mov	sp, r7
 810511c:	bd80      	pop	{r7, pc}
 810511e:	bf00      	nop
 8105120:	10000270 	.word	0x10000270

08105124 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8105124:	b580      	push	{r7, lr}
 8105126:	b08e      	sub	sp, #56	@ 0x38
 8105128:	af04      	add	r7, sp, #16
 810512a:	60f8      	str	r0, [r7, #12]
 810512c:	60b9      	str	r1, [r7, #8]
 810512e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8105130:	2300      	movs	r3, #0
 8105132:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105134:	f3ef 8305 	mrs	r3, IPSR
 8105138:	617b      	str	r3, [r7, #20]
  return(result);
 810513a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810513c:	2b00      	cmp	r3, #0
 810513e:	d17e      	bne.n	810523e <osThreadNew+0x11a>
 8105140:	68fb      	ldr	r3, [r7, #12]
 8105142:	2b00      	cmp	r3, #0
 8105144:	d07b      	beq.n	810523e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8105146:	2380      	movs	r3, #128	@ 0x80
 8105148:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810514a:	2318      	movs	r3, #24
 810514c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810514e:	2300      	movs	r3, #0
 8105150:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8105152:	f04f 33ff 	mov.w	r3, #4294967295
 8105156:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8105158:	687b      	ldr	r3, [r7, #4]
 810515a:	2b00      	cmp	r3, #0
 810515c:	d045      	beq.n	81051ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810515e:	687b      	ldr	r3, [r7, #4]
 8105160:	681b      	ldr	r3, [r3, #0]
 8105162:	2b00      	cmp	r3, #0
 8105164:	d002      	beq.n	810516c <osThreadNew+0x48>
        name = attr->name;
 8105166:	687b      	ldr	r3, [r7, #4]
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810516c:	687b      	ldr	r3, [r7, #4]
 810516e:	699b      	ldr	r3, [r3, #24]
 8105170:	2b00      	cmp	r3, #0
 8105172:	d002      	beq.n	810517a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8105174:	687b      	ldr	r3, [r7, #4]
 8105176:	699b      	ldr	r3, [r3, #24]
 8105178:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810517a:	69fb      	ldr	r3, [r7, #28]
 810517c:	2b00      	cmp	r3, #0
 810517e:	d008      	beq.n	8105192 <osThreadNew+0x6e>
 8105180:	69fb      	ldr	r3, [r7, #28]
 8105182:	2b38      	cmp	r3, #56	@ 0x38
 8105184:	d805      	bhi.n	8105192 <osThreadNew+0x6e>
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	685b      	ldr	r3, [r3, #4]
 810518a:	f003 0301 	and.w	r3, r3, #1
 810518e:	2b00      	cmp	r3, #0
 8105190:	d001      	beq.n	8105196 <osThreadNew+0x72>
        return (NULL);
 8105192:	2300      	movs	r3, #0
 8105194:	e054      	b.n	8105240 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8105196:	687b      	ldr	r3, [r7, #4]
 8105198:	695b      	ldr	r3, [r3, #20]
 810519a:	2b00      	cmp	r3, #0
 810519c:	d003      	beq.n	81051a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810519e:	687b      	ldr	r3, [r7, #4]
 81051a0:	695b      	ldr	r3, [r3, #20]
 81051a2:	089b      	lsrs	r3, r3, #2
 81051a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81051a6:	687b      	ldr	r3, [r7, #4]
 81051a8:	689b      	ldr	r3, [r3, #8]
 81051aa:	2b00      	cmp	r3, #0
 81051ac:	d00e      	beq.n	81051cc <osThreadNew+0xa8>
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	68db      	ldr	r3, [r3, #12]
 81051b2:	2ba7      	cmp	r3, #167	@ 0xa7
 81051b4:	d90a      	bls.n	81051cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81051b6:	687b      	ldr	r3, [r7, #4]
 81051b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81051ba:	2b00      	cmp	r3, #0
 81051bc:	d006      	beq.n	81051cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	695b      	ldr	r3, [r3, #20]
 81051c2:	2b00      	cmp	r3, #0
 81051c4:	d002      	beq.n	81051cc <osThreadNew+0xa8>
        mem = 1;
 81051c6:	2301      	movs	r3, #1
 81051c8:	61bb      	str	r3, [r7, #24]
 81051ca:	e010      	b.n	81051ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 81051cc:	687b      	ldr	r3, [r7, #4]
 81051ce:	689b      	ldr	r3, [r3, #8]
 81051d0:	2b00      	cmp	r3, #0
 81051d2:	d10c      	bne.n	81051ee <osThreadNew+0xca>
 81051d4:	687b      	ldr	r3, [r7, #4]
 81051d6:	68db      	ldr	r3, [r3, #12]
 81051d8:	2b00      	cmp	r3, #0
 81051da:	d108      	bne.n	81051ee <osThreadNew+0xca>
 81051dc:	687b      	ldr	r3, [r7, #4]
 81051de:	691b      	ldr	r3, [r3, #16]
 81051e0:	2b00      	cmp	r3, #0
 81051e2:	d104      	bne.n	81051ee <osThreadNew+0xca>
          mem = 0;
 81051e4:	2300      	movs	r3, #0
 81051e6:	61bb      	str	r3, [r7, #24]
 81051e8:	e001      	b.n	81051ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 81051ea:	2300      	movs	r3, #0
 81051ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 81051ee:	69bb      	ldr	r3, [r7, #24]
 81051f0:	2b01      	cmp	r3, #1
 81051f2:	d110      	bne.n	8105216 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81051f4:	687b      	ldr	r3, [r7, #4]
 81051f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 81051f8:	687a      	ldr	r2, [r7, #4]
 81051fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81051fc:	9202      	str	r2, [sp, #8]
 81051fe:	9301      	str	r3, [sp, #4]
 8105200:	69fb      	ldr	r3, [r7, #28]
 8105202:	9300      	str	r3, [sp, #0]
 8105204:	68bb      	ldr	r3, [r7, #8]
 8105206:	6a3a      	ldr	r2, [r7, #32]
 8105208:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810520a:	68f8      	ldr	r0, [r7, #12]
 810520c:	f001 feda 	bl	8106fc4 <xTaskCreateStatic>
 8105210:	4603      	mov	r3, r0
 8105212:	613b      	str	r3, [r7, #16]
 8105214:	e013      	b.n	810523e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8105216:	69bb      	ldr	r3, [r7, #24]
 8105218:	2b00      	cmp	r3, #0
 810521a:	d110      	bne.n	810523e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810521c:	6a3b      	ldr	r3, [r7, #32]
 810521e:	b29a      	uxth	r2, r3
 8105220:	f107 0310 	add.w	r3, r7, #16
 8105224:	9301      	str	r3, [sp, #4]
 8105226:	69fb      	ldr	r3, [r7, #28]
 8105228:	9300      	str	r3, [sp, #0]
 810522a:	68bb      	ldr	r3, [r7, #8]
 810522c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810522e:	68f8      	ldr	r0, [r7, #12]
 8105230:	f001 ff28 	bl	8107084 <xTaskCreate>
 8105234:	4603      	mov	r3, r0
 8105236:	2b01      	cmp	r3, #1
 8105238:	d001      	beq.n	810523e <osThreadNew+0x11a>
            hTask = NULL;
 810523a:	2300      	movs	r3, #0
 810523c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810523e:	693b      	ldr	r3, [r7, #16]
}
 8105240:	4618      	mov	r0, r3
 8105242:	3728      	adds	r7, #40	@ 0x28
 8105244:	46bd      	mov	sp, r7
 8105246:	bd80      	pop	{r7, pc}

08105248 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8105248:	b580      	push	{r7, lr}
 810524a:	b086      	sub	sp, #24
 810524c:	af00      	add	r7, sp, #0
 810524e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105254:	f3ef 8305 	mrs	r3, IPSR
 8105258:	60bb      	str	r3, [r7, #8]
  return(result);
 810525a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 810525c:	2b00      	cmp	r3, #0
 810525e:	d003      	beq.n	8105268 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8105260:	f06f 0305 	mvn.w	r3, #5
 8105264:	617b      	str	r3, [r7, #20]
 8105266:	e017      	b.n	8105298 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8105268:	693b      	ldr	r3, [r7, #16]
 810526a:	2b00      	cmp	r3, #0
 810526c:	d103      	bne.n	8105276 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 810526e:	f06f 0303 	mvn.w	r3, #3
 8105272:	617b      	str	r3, [r7, #20]
 8105274:	e010      	b.n	8105298 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8105276:	6938      	ldr	r0, [r7, #16]
 8105278:	f002 f90c 	bl	8107494 <eTaskGetState>
 810527c:	4603      	mov	r3, r0
 810527e:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8105280:	7bfb      	ldrb	r3, [r7, #15]
 8105282:	2b04      	cmp	r3, #4
 8105284:	d005      	beq.n	8105292 <osThreadTerminate+0x4a>
      stat = osOK;
 8105286:	2300      	movs	r3, #0
 8105288:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 810528a:	6938      	ldr	r0, [r7, #16]
 810528c:	f002 f858 	bl	8107340 <vTaskDelete>
 8105290:	e002      	b.n	8105298 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8105292:	f06f 0302 	mvn.w	r3, #2
 8105296:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8105298:	697b      	ldr	r3, [r7, #20]
}
 810529a:	4618      	mov	r0, r3
 810529c:	3718      	adds	r7, #24
 810529e:	46bd      	mov	sp, r7
 81052a0:	bd80      	pop	{r7, pc}

081052a2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 81052a2:	b580      	push	{r7, lr}
 81052a4:	b084      	sub	sp, #16
 81052a6:	af00      	add	r7, sp, #0
 81052a8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81052aa:	f3ef 8305 	mrs	r3, IPSR
 81052ae:	60bb      	str	r3, [r7, #8]
  return(result);
 81052b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81052b2:	2b00      	cmp	r3, #0
 81052b4:	d003      	beq.n	81052be <osDelay+0x1c>
    stat = osErrorISR;
 81052b6:	f06f 0305 	mvn.w	r3, #5
 81052ba:	60fb      	str	r3, [r7, #12]
 81052bc:	e007      	b.n	81052ce <osDelay+0x2c>
  }
  else {
    stat = osOK;
 81052be:	2300      	movs	r3, #0
 81052c0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 81052c2:	687b      	ldr	r3, [r7, #4]
 81052c4:	2b00      	cmp	r3, #0
 81052c6:	d002      	beq.n	81052ce <osDelay+0x2c>
      vTaskDelay(ticks);
 81052c8:	6878      	ldr	r0, [r7, #4]
 81052ca:	f002 f8ad 	bl	8107428 <vTaskDelay>
    }
  }

  return (stat);
 81052ce:	68fb      	ldr	r3, [r7, #12]
}
 81052d0:	4618      	mov	r0, r3
 81052d2:	3710      	adds	r7, #16
 81052d4:	46bd      	mov	sp, r7
 81052d6:	bd80      	pop	{r7, pc}

081052d8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 81052d8:	b580      	push	{r7, lr}
 81052da:	b08a      	sub	sp, #40	@ 0x28
 81052dc:	af02      	add	r7, sp, #8
 81052de:	60f8      	str	r0, [r7, #12]
 81052e0:	60b9      	str	r1, [r7, #8]
 81052e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 81052e4:	2300      	movs	r3, #0
 81052e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81052e8:	f3ef 8305 	mrs	r3, IPSR
 81052ec:	613b      	str	r3, [r7, #16]
  return(result);
 81052ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 81052f0:	2b00      	cmp	r3, #0
 81052f2:	d175      	bne.n	81053e0 <osSemaphoreNew+0x108>
 81052f4:	68fb      	ldr	r3, [r7, #12]
 81052f6:	2b00      	cmp	r3, #0
 81052f8:	d072      	beq.n	81053e0 <osSemaphoreNew+0x108>
 81052fa:	68ba      	ldr	r2, [r7, #8]
 81052fc:	68fb      	ldr	r3, [r7, #12]
 81052fe:	429a      	cmp	r2, r3
 8105300:	d86e      	bhi.n	81053e0 <osSemaphoreNew+0x108>
    mem = -1;
 8105302:	f04f 33ff 	mov.w	r3, #4294967295
 8105306:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	2b00      	cmp	r3, #0
 810530c:	d015      	beq.n	810533a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 810530e:	687b      	ldr	r3, [r7, #4]
 8105310:	689b      	ldr	r3, [r3, #8]
 8105312:	2b00      	cmp	r3, #0
 8105314:	d006      	beq.n	8105324 <osSemaphoreNew+0x4c>
 8105316:	687b      	ldr	r3, [r7, #4]
 8105318:	68db      	ldr	r3, [r3, #12]
 810531a:	2b4f      	cmp	r3, #79	@ 0x4f
 810531c:	d902      	bls.n	8105324 <osSemaphoreNew+0x4c>
        mem = 1;
 810531e:	2301      	movs	r3, #1
 8105320:	61bb      	str	r3, [r7, #24]
 8105322:	e00c      	b.n	810533e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8105324:	687b      	ldr	r3, [r7, #4]
 8105326:	689b      	ldr	r3, [r3, #8]
 8105328:	2b00      	cmp	r3, #0
 810532a:	d108      	bne.n	810533e <osSemaphoreNew+0x66>
 810532c:	687b      	ldr	r3, [r7, #4]
 810532e:	68db      	ldr	r3, [r3, #12]
 8105330:	2b00      	cmp	r3, #0
 8105332:	d104      	bne.n	810533e <osSemaphoreNew+0x66>
          mem = 0;
 8105334:	2300      	movs	r3, #0
 8105336:	61bb      	str	r3, [r7, #24]
 8105338:	e001      	b.n	810533e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 810533a:	2300      	movs	r3, #0
 810533c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 810533e:	69bb      	ldr	r3, [r7, #24]
 8105340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105344:	d04c      	beq.n	81053e0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8105346:	68fb      	ldr	r3, [r7, #12]
 8105348:	2b01      	cmp	r3, #1
 810534a:	d128      	bne.n	810539e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 810534c:	69bb      	ldr	r3, [r7, #24]
 810534e:	2b01      	cmp	r3, #1
 8105350:	d10a      	bne.n	8105368 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8105352:	687b      	ldr	r3, [r7, #4]
 8105354:	689b      	ldr	r3, [r3, #8]
 8105356:	2203      	movs	r2, #3
 8105358:	9200      	str	r2, [sp, #0]
 810535a:	2200      	movs	r2, #0
 810535c:	2100      	movs	r1, #0
 810535e:	2001      	movs	r0, #1
 8105360:	f000 fe6e 	bl	8106040 <xQueueGenericCreateStatic>
 8105364:	61f8      	str	r0, [r7, #28]
 8105366:	e005      	b.n	8105374 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8105368:	2203      	movs	r2, #3
 810536a:	2100      	movs	r1, #0
 810536c:	2001      	movs	r0, #1
 810536e:	f000 fee4 	bl	810613a <xQueueGenericCreate>
 8105372:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8105374:	69fb      	ldr	r3, [r7, #28]
 8105376:	2b00      	cmp	r3, #0
 8105378:	d022      	beq.n	81053c0 <osSemaphoreNew+0xe8>
 810537a:	68bb      	ldr	r3, [r7, #8]
 810537c:	2b00      	cmp	r3, #0
 810537e:	d01f      	beq.n	81053c0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8105380:	2300      	movs	r3, #0
 8105382:	2200      	movs	r2, #0
 8105384:	2100      	movs	r1, #0
 8105386:	69f8      	ldr	r0, [r7, #28]
 8105388:	f000 ffa4 	bl	81062d4 <xQueueGenericSend>
 810538c:	4603      	mov	r3, r0
 810538e:	2b01      	cmp	r3, #1
 8105390:	d016      	beq.n	81053c0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8105392:	69f8      	ldr	r0, [r7, #28]
 8105394:	f001 fc42 	bl	8106c1c <vQueueDelete>
            hSemaphore = NULL;
 8105398:	2300      	movs	r3, #0
 810539a:	61fb      	str	r3, [r7, #28]
 810539c:	e010      	b.n	81053c0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 810539e:	69bb      	ldr	r3, [r7, #24]
 81053a0:	2b01      	cmp	r3, #1
 81053a2:	d108      	bne.n	81053b6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 81053a4:	687b      	ldr	r3, [r7, #4]
 81053a6:	689b      	ldr	r3, [r3, #8]
 81053a8:	461a      	mov	r2, r3
 81053aa:	68b9      	ldr	r1, [r7, #8]
 81053ac:	68f8      	ldr	r0, [r7, #12]
 81053ae:	f000 ff22 	bl	81061f6 <xQueueCreateCountingSemaphoreStatic>
 81053b2:	61f8      	str	r0, [r7, #28]
 81053b4:	e004      	b.n	81053c0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 81053b6:	68b9      	ldr	r1, [r7, #8]
 81053b8:	68f8      	ldr	r0, [r7, #12]
 81053ba:	f000 ff55 	bl	8106268 <xQueueCreateCountingSemaphore>
 81053be:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 81053c0:	69fb      	ldr	r3, [r7, #28]
 81053c2:	2b00      	cmp	r3, #0
 81053c4:	d00c      	beq.n	81053e0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 81053c6:	687b      	ldr	r3, [r7, #4]
 81053c8:	2b00      	cmp	r3, #0
 81053ca:	d003      	beq.n	81053d4 <osSemaphoreNew+0xfc>
          name = attr->name;
 81053cc:	687b      	ldr	r3, [r7, #4]
 81053ce:	681b      	ldr	r3, [r3, #0]
 81053d0:	617b      	str	r3, [r7, #20]
 81053d2:	e001      	b.n	81053d8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 81053d4:	2300      	movs	r3, #0
 81053d6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 81053d8:	6979      	ldr	r1, [r7, #20]
 81053da:	69f8      	ldr	r0, [r7, #28]
 81053dc:	f001 fd6a 	bl	8106eb4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 81053e0:	69fb      	ldr	r3, [r7, #28]
}
 81053e2:	4618      	mov	r0, r3
 81053e4:	3720      	adds	r7, #32
 81053e6:	46bd      	mov	sp, r7
 81053e8:	bd80      	pop	{r7, pc}
	...

081053ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 81053ec:	b580      	push	{r7, lr}
 81053ee:	b086      	sub	sp, #24
 81053f0:	af00      	add	r7, sp, #0
 81053f2:	6078      	str	r0, [r7, #4]
 81053f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 81053f6:	687b      	ldr	r3, [r7, #4]
 81053f8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 81053fa:	2300      	movs	r3, #0
 81053fc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 81053fe:	693b      	ldr	r3, [r7, #16]
 8105400:	2b00      	cmp	r3, #0
 8105402:	d103      	bne.n	810540c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8105404:	f06f 0303 	mvn.w	r3, #3
 8105408:	617b      	str	r3, [r7, #20]
 810540a:	e039      	b.n	8105480 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810540c:	f3ef 8305 	mrs	r3, IPSR
 8105410:	60fb      	str	r3, [r7, #12]
  return(result);
 8105412:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8105414:	2b00      	cmp	r3, #0
 8105416:	d022      	beq.n	810545e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8105418:	683b      	ldr	r3, [r7, #0]
 810541a:	2b00      	cmp	r3, #0
 810541c:	d003      	beq.n	8105426 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 810541e:	f06f 0303 	mvn.w	r3, #3
 8105422:	617b      	str	r3, [r7, #20]
 8105424:	e02c      	b.n	8105480 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8105426:	2300      	movs	r3, #0
 8105428:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 810542a:	f107 0308 	add.w	r3, r7, #8
 810542e:	461a      	mov	r2, r3
 8105430:	2100      	movs	r1, #0
 8105432:	6938      	ldr	r0, [r7, #16]
 8105434:	f001 fb70 	bl	8106b18 <xQueueReceiveFromISR>
 8105438:	4603      	mov	r3, r0
 810543a:	2b01      	cmp	r3, #1
 810543c:	d003      	beq.n	8105446 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 810543e:	f06f 0302 	mvn.w	r3, #2
 8105442:	617b      	str	r3, [r7, #20]
 8105444:	e01c      	b.n	8105480 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8105446:	68bb      	ldr	r3, [r7, #8]
 8105448:	2b00      	cmp	r3, #0
 810544a:	d019      	beq.n	8105480 <osSemaphoreAcquire+0x94>
 810544c:	4b0f      	ldr	r3, [pc, #60]	@ (810548c <osSemaphoreAcquire+0xa0>)
 810544e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105452:	601a      	str	r2, [r3, #0]
 8105454:	f3bf 8f4f 	dsb	sy
 8105458:	f3bf 8f6f 	isb	sy
 810545c:	e010      	b.n	8105480 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 810545e:	6839      	ldr	r1, [r7, #0]
 8105460:	6938      	ldr	r0, [r7, #16]
 8105462:	f001 fa49 	bl	81068f8 <xQueueSemaphoreTake>
 8105466:	4603      	mov	r3, r0
 8105468:	2b01      	cmp	r3, #1
 810546a:	d009      	beq.n	8105480 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 810546c:	683b      	ldr	r3, [r7, #0]
 810546e:	2b00      	cmp	r3, #0
 8105470:	d003      	beq.n	810547a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8105472:	f06f 0301 	mvn.w	r3, #1
 8105476:	617b      	str	r3, [r7, #20]
 8105478:	e002      	b.n	8105480 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 810547a:	f06f 0302 	mvn.w	r3, #2
 810547e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8105480:	697b      	ldr	r3, [r7, #20]
}
 8105482:	4618      	mov	r0, r3
 8105484:	3718      	adds	r7, #24
 8105486:	46bd      	mov	sp, r7
 8105488:	bd80      	pop	{r7, pc}
 810548a:	bf00      	nop
 810548c:	e000ed04 	.word	0xe000ed04

08105490 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8105490:	b580      	push	{r7, lr}
 8105492:	b086      	sub	sp, #24
 8105494:	af00      	add	r7, sp, #0
 8105496:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8105498:	687b      	ldr	r3, [r7, #4]
 810549a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 810549c:	2300      	movs	r3, #0
 810549e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 81054a0:	693b      	ldr	r3, [r7, #16]
 81054a2:	2b00      	cmp	r3, #0
 81054a4:	d103      	bne.n	81054ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 81054a6:	f06f 0303 	mvn.w	r3, #3
 81054aa:	617b      	str	r3, [r7, #20]
 81054ac:	e02c      	b.n	8105508 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81054ae:	f3ef 8305 	mrs	r3, IPSR
 81054b2:	60fb      	str	r3, [r7, #12]
  return(result);
 81054b4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 81054b6:	2b00      	cmp	r3, #0
 81054b8:	d01a      	beq.n	81054f0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 81054ba:	2300      	movs	r3, #0
 81054bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 81054be:	f107 0308 	add.w	r3, r7, #8
 81054c2:	4619      	mov	r1, r3
 81054c4:	6938      	ldr	r0, [r7, #16]
 81054c6:	f001 f8a5 	bl	8106614 <xQueueGiveFromISR>
 81054ca:	4603      	mov	r3, r0
 81054cc:	2b01      	cmp	r3, #1
 81054ce:	d003      	beq.n	81054d8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 81054d0:	f06f 0302 	mvn.w	r3, #2
 81054d4:	617b      	str	r3, [r7, #20]
 81054d6:	e017      	b.n	8105508 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 81054d8:	68bb      	ldr	r3, [r7, #8]
 81054da:	2b00      	cmp	r3, #0
 81054dc:	d014      	beq.n	8105508 <osSemaphoreRelease+0x78>
 81054de:	4b0d      	ldr	r3, [pc, #52]	@ (8105514 <osSemaphoreRelease+0x84>)
 81054e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81054e4:	601a      	str	r2, [r3, #0]
 81054e6:	f3bf 8f4f 	dsb	sy
 81054ea:	f3bf 8f6f 	isb	sy
 81054ee:	e00b      	b.n	8105508 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 81054f0:	2300      	movs	r3, #0
 81054f2:	2200      	movs	r2, #0
 81054f4:	2100      	movs	r1, #0
 81054f6:	6938      	ldr	r0, [r7, #16]
 81054f8:	f000 feec 	bl	81062d4 <xQueueGenericSend>
 81054fc:	4603      	mov	r3, r0
 81054fe:	2b01      	cmp	r3, #1
 8105500:	d002      	beq.n	8105508 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8105502:	f06f 0302 	mvn.w	r3, #2
 8105506:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8105508:	697b      	ldr	r3, [r7, #20]
}
 810550a:	4618      	mov	r0, r3
 810550c:	3718      	adds	r7, #24
 810550e:	46bd      	mov	sp, r7
 8105510:	bd80      	pop	{r7, pc}
 8105512:	bf00      	nop
 8105514:	e000ed04 	.word	0xe000ed04

08105518 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8105518:	b480      	push	{r7}
 810551a:	b085      	sub	sp, #20
 810551c:	af00      	add	r7, sp, #0
 810551e:	60f8      	str	r0, [r7, #12]
 8105520:	60b9      	str	r1, [r7, #8]
 8105522:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8105524:	68fb      	ldr	r3, [r7, #12]
 8105526:	4a07      	ldr	r2, [pc, #28]	@ (8105544 <vApplicationGetIdleTaskMemory+0x2c>)
 8105528:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810552a:	68bb      	ldr	r3, [r7, #8]
 810552c:	4a06      	ldr	r2, [pc, #24]	@ (8105548 <vApplicationGetIdleTaskMemory+0x30>)
 810552e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8105530:	687b      	ldr	r3, [r7, #4]
 8105532:	2280      	movs	r2, #128	@ 0x80
 8105534:	601a      	str	r2, [r3, #0]
}
 8105536:	bf00      	nop
 8105538:	3714      	adds	r7, #20
 810553a:	46bd      	mov	sp, r7
 810553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105540:	4770      	bx	lr
 8105542:	bf00      	nop
 8105544:	10000274 	.word	0x10000274
 8105548:	1000031c 	.word	0x1000031c

0810554c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810554c:	b480      	push	{r7}
 810554e:	b085      	sub	sp, #20
 8105550:	af00      	add	r7, sp, #0
 8105552:	60f8      	str	r0, [r7, #12]
 8105554:	60b9      	str	r1, [r7, #8]
 8105556:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8105558:	68fb      	ldr	r3, [r7, #12]
 810555a:	4a07      	ldr	r2, [pc, #28]	@ (8105578 <vApplicationGetTimerTaskMemory+0x2c>)
 810555c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810555e:	68bb      	ldr	r3, [r7, #8]
 8105560:	4a06      	ldr	r2, [pc, #24]	@ (810557c <vApplicationGetTimerTaskMemory+0x30>)
 8105562:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8105564:	687b      	ldr	r3, [r7, #4]
 8105566:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810556a:	601a      	str	r2, [r3, #0]
}
 810556c:	bf00      	nop
 810556e:	3714      	adds	r7, #20
 8105570:	46bd      	mov	sp, r7
 8105572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105576:	4770      	bx	lr
 8105578:	1000051c 	.word	0x1000051c
 810557c:	100005c4 	.word	0x100005c4

08105580 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8105580:	b580      	push	{r7, lr}
 8105582:	b08a      	sub	sp, #40	@ 0x28
 8105584:	af00      	add	r7, sp, #0
 8105586:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8105588:	2300      	movs	r3, #0
 810558a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810558c:	f002 f85a 	bl	8107644 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8105590:	4b5c      	ldr	r3, [pc, #368]	@ (8105704 <pvPortMalloc+0x184>)
 8105592:	681b      	ldr	r3, [r3, #0]
 8105594:	2b00      	cmp	r3, #0
 8105596:	d101      	bne.n	810559c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8105598:	f000 f924 	bl	81057e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810559c:	4b5a      	ldr	r3, [pc, #360]	@ (8105708 <pvPortMalloc+0x188>)
 810559e:	681a      	ldr	r2, [r3, #0]
 81055a0:	687b      	ldr	r3, [r7, #4]
 81055a2:	4013      	ands	r3, r2
 81055a4:	2b00      	cmp	r3, #0
 81055a6:	f040 8095 	bne.w	81056d4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81055aa:	687b      	ldr	r3, [r7, #4]
 81055ac:	2b00      	cmp	r3, #0
 81055ae:	d01e      	beq.n	81055ee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 81055b0:	2208      	movs	r2, #8
 81055b2:	687b      	ldr	r3, [r7, #4]
 81055b4:	4413      	add	r3, r2
 81055b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81055b8:	687b      	ldr	r3, [r7, #4]
 81055ba:	f003 0307 	and.w	r3, r3, #7
 81055be:	2b00      	cmp	r3, #0
 81055c0:	d015      	beq.n	81055ee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81055c2:	687b      	ldr	r3, [r7, #4]
 81055c4:	f023 0307 	bic.w	r3, r3, #7
 81055c8:	3308      	adds	r3, #8
 81055ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	f003 0307 	and.w	r3, r3, #7
 81055d2:	2b00      	cmp	r3, #0
 81055d4:	d00b      	beq.n	81055ee <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81055d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81055da:	f383 8811 	msr	BASEPRI, r3
 81055de:	f3bf 8f6f 	isb	sy
 81055e2:	f3bf 8f4f 	dsb	sy
 81055e6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 81055e8:	bf00      	nop
 81055ea:	bf00      	nop
 81055ec:	e7fd      	b.n	81055ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	2b00      	cmp	r3, #0
 81055f2:	d06f      	beq.n	81056d4 <pvPortMalloc+0x154>
 81055f4:	4b45      	ldr	r3, [pc, #276]	@ (810570c <pvPortMalloc+0x18c>)
 81055f6:	681b      	ldr	r3, [r3, #0]
 81055f8:	687a      	ldr	r2, [r7, #4]
 81055fa:	429a      	cmp	r2, r3
 81055fc:	d86a      	bhi.n	81056d4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81055fe:	4b44      	ldr	r3, [pc, #272]	@ (8105710 <pvPortMalloc+0x190>)
 8105600:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8105602:	4b43      	ldr	r3, [pc, #268]	@ (8105710 <pvPortMalloc+0x190>)
 8105604:	681b      	ldr	r3, [r3, #0]
 8105606:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8105608:	e004      	b.n	8105614 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810560c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105610:	681b      	ldr	r3, [r3, #0]
 8105612:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8105614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105616:	685b      	ldr	r3, [r3, #4]
 8105618:	687a      	ldr	r2, [r7, #4]
 810561a:	429a      	cmp	r2, r3
 810561c:	d903      	bls.n	8105626 <pvPortMalloc+0xa6>
 810561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105620:	681b      	ldr	r3, [r3, #0]
 8105622:	2b00      	cmp	r3, #0
 8105624:	d1f1      	bne.n	810560a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8105626:	4b37      	ldr	r3, [pc, #220]	@ (8105704 <pvPortMalloc+0x184>)
 8105628:	681b      	ldr	r3, [r3, #0]
 810562a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810562c:	429a      	cmp	r2, r3
 810562e:	d051      	beq.n	81056d4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8105630:	6a3b      	ldr	r3, [r7, #32]
 8105632:	681b      	ldr	r3, [r3, #0]
 8105634:	2208      	movs	r2, #8
 8105636:	4413      	add	r3, r2
 8105638:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810563c:	681a      	ldr	r2, [r3, #0]
 810563e:	6a3b      	ldr	r3, [r7, #32]
 8105640:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8105642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105644:	685a      	ldr	r2, [r3, #4]
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	1ad2      	subs	r2, r2, r3
 810564a:	2308      	movs	r3, #8
 810564c:	005b      	lsls	r3, r3, #1
 810564e:	429a      	cmp	r2, r3
 8105650:	d920      	bls.n	8105694 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8105652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	4413      	add	r3, r2
 8105658:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810565a:	69bb      	ldr	r3, [r7, #24]
 810565c:	f003 0307 	and.w	r3, r3, #7
 8105660:	2b00      	cmp	r3, #0
 8105662:	d00b      	beq.n	810567c <pvPortMalloc+0xfc>
	__asm volatile
 8105664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105668:	f383 8811 	msr	BASEPRI, r3
 810566c:	f3bf 8f6f 	isb	sy
 8105670:	f3bf 8f4f 	dsb	sy
 8105674:	613b      	str	r3, [r7, #16]
}
 8105676:	bf00      	nop
 8105678:	bf00      	nop
 810567a:	e7fd      	b.n	8105678 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810567e:	685a      	ldr	r2, [r3, #4]
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	1ad2      	subs	r2, r2, r3
 8105684:	69bb      	ldr	r3, [r7, #24]
 8105686:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8105688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810568a:	687a      	ldr	r2, [r7, #4]
 810568c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810568e:	69b8      	ldr	r0, [r7, #24]
 8105690:	f000 f90a 	bl	81058a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8105694:	4b1d      	ldr	r3, [pc, #116]	@ (810570c <pvPortMalloc+0x18c>)
 8105696:	681a      	ldr	r2, [r3, #0]
 8105698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810569a:	685b      	ldr	r3, [r3, #4]
 810569c:	1ad3      	subs	r3, r2, r3
 810569e:	4a1b      	ldr	r2, [pc, #108]	@ (810570c <pvPortMalloc+0x18c>)
 81056a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81056a2:	4b1a      	ldr	r3, [pc, #104]	@ (810570c <pvPortMalloc+0x18c>)
 81056a4:	681a      	ldr	r2, [r3, #0]
 81056a6:	4b1b      	ldr	r3, [pc, #108]	@ (8105714 <pvPortMalloc+0x194>)
 81056a8:	681b      	ldr	r3, [r3, #0]
 81056aa:	429a      	cmp	r2, r3
 81056ac:	d203      	bcs.n	81056b6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81056ae:	4b17      	ldr	r3, [pc, #92]	@ (810570c <pvPortMalloc+0x18c>)
 81056b0:	681b      	ldr	r3, [r3, #0]
 81056b2:	4a18      	ldr	r2, [pc, #96]	@ (8105714 <pvPortMalloc+0x194>)
 81056b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81056b8:	685a      	ldr	r2, [r3, #4]
 81056ba:	4b13      	ldr	r3, [pc, #76]	@ (8105708 <pvPortMalloc+0x188>)
 81056bc:	681b      	ldr	r3, [r3, #0]
 81056be:	431a      	orrs	r2, r3
 81056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81056c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81056c6:	2200      	movs	r2, #0
 81056c8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 81056ca:	4b13      	ldr	r3, [pc, #76]	@ (8105718 <pvPortMalloc+0x198>)
 81056cc:	681b      	ldr	r3, [r3, #0]
 81056ce:	3301      	adds	r3, #1
 81056d0:	4a11      	ldr	r2, [pc, #68]	@ (8105718 <pvPortMalloc+0x198>)
 81056d2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81056d4:	f001 ffc4 	bl	8107660 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81056d8:	69fb      	ldr	r3, [r7, #28]
 81056da:	f003 0307 	and.w	r3, r3, #7
 81056de:	2b00      	cmp	r3, #0
 81056e0:	d00b      	beq.n	81056fa <pvPortMalloc+0x17a>
	__asm volatile
 81056e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81056e6:	f383 8811 	msr	BASEPRI, r3
 81056ea:	f3bf 8f6f 	isb	sy
 81056ee:	f3bf 8f4f 	dsb	sy
 81056f2:	60fb      	str	r3, [r7, #12]
}
 81056f4:	bf00      	nop
 81056f6:	bf00      	nop
 81056f8:	e7fd      	b.n	81056f6 <pvPortMalloc+0x176>
	return pvReturn;
 81056fa:	69fb      	ldr	r3, [r7, #28]
}
 81056fc:	4618      	mov	r0, r3
 81056fe:	3728      	adds	r7, #40	@ 0x28
 8105700:	46bd      	mov	sp, r7
 8105702:	bd80      	pop	{r7, pc}
 8105704:	100045cc 	.word	0x100045cc
 8105708:	100045e0 	.word	0x100045e0
 810570c:	100045d0 	.word	0x100045d0
 8105710:	100045c4 	.word	0x100045c4
 8105714:	100045d4 	.word	0x100045d4
 8105718:	100045d8 	.word	0x100045d8

0810571c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810571c:	b580      	push	{r7, lr}
 810571e:	b086      	sub	sp, #24
 8105720:	af00      	add	r7, sp, #0
 8105722:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8105724:	687b      	ldr	r3, [r7, #4]
 8105726:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8105728:	687b      	ldr	r3, [r7, #4]
 810572a:	2b00      	cmp	r3, #0
 810572c:	d04f      	beq.n	81057ce <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810572e:	2308      	movs	r3, #8
 8105730:	425b      	negs	r3, r3
 8105732:	697a      	ldr	r2, [r7, #20]
 8105734:	4413      	add	r3, r2
 8105736:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8105738:	697b      	ldr	r3, [r7, #20]
 810573a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810573c:	693b      	ldr	r3, [r7, #16]
 810573e:	685a      	ldr	r2, [r3, #4]
 8105740:	4b25      	ldr	r3, [pc, #148]	@ (81057d8 <vPortFree+0xbc>)
 8105742:	681b      	ldr	r3, [r3, #0]
 8105744:	4013      	ands	r3, r2
 8105746:	2b00      	cmp	r3, #0
 8105748:	d10b      	bne.n	8105762 <vPortFree+0x46>
	__asm volatile
 810574a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810574e:	f383 8811 	msr	BASEPRI, r3
 8105752:	f3bf 8f6f 	isb	sy
 8105756:	f3bf 8f4f 	dsb	sy
 810575a:	60fb      	str	r3, [r7, #12]
}
 810575c:	bf00      	nop
 810575e:	bf00      	nop
 8105760:	e7fd      	b.n	810575e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8105762:	693b      	ldr	r3, [r7, #16]
 8105764:	681b      	ldr	r3, [r3, #0]
 8105766:	2b00      	cmp	r3, #0
 8105768:	d00b      	beq.n	8105782 <vPortFree+0x66>
	__asm volatile
 810576a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810576e:	f383 8811 	msr	BASEPRI, r3
 8105772:	f3bf 8f6f 	isb	sy
 8105776:	f3bf 8f4f 	dsb	sy
 810577a:	60bb      	str	r3, [r7, #8]
}
 810577c:	bf00      	nop
 810577e:	bf00      	nop
 8105780:	e7fd      	b.n	810577e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8105782:	693b      	ldr	r3, [r7, #16]
 8105784:	685a      	ldr	r2, [r3, #4]
 8105786:	4b14      	ldr	r3, [pc, #80]	@ (81057d8 <vPortFree+0xbc>)
 8105788:	681b      	ldr	r3, [r3, #0]
 810578a:	4013      	ands	r3, r2
 810578c:	2b00      	cmp	r3, #0
 810578e:	d01e      	beq.n	81057ce <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8105790:	693b      	ldr	r3, [r7, #16]
 8105792:	681b      	ldr	r3, [r3, #0]
 8105794:	2b00      	cmp	r3, #0
 8105796:	d11a      	bne.n	81057ce <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8105798:	693b      	ldr	r3, [r7, #16]
 810579a:	685a      	ldr	r2, [r3, #4]
 810579c:	4b0e      	ldr	r3, [pc, #56]	@ (81057d8 <vPortFree+0xbc>)
 810579e:	681b      	ldr	r3, [r3, #0]
 81057a0:	43db      	mvns	r3, r3
 81057a2:	401a      	ands	r2, r3
 81057a4:	693b      	ldr	r3, [r7, #16]
 81057a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 81057a8:	f001 ff4c 	bl	8107644 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 81057ac:	693b      	ldr	r3, [r7, #16]
 81057ae:	685a      	ldr	r2, [r3, #4]
 81057b0:	4b0a      	ldr	r3, [pc, #40]	@ (81057dc <vPortFree+0xc0>)
 81057b2:	681b      	ldr	r3, [r3, #0]
 81057b4:	4413      	add	r3, r2
 81057b6:	4a09      	ldr	r2, [pc, #36]	@ (81057dc <vPortFree+0xc0>)
 81057b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81057ba:	6938      	ldr	r0, [r7, #16]
 81057bc:	f000 f874 	bl	81058a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 81057c0:	4b07      	ldr	r3, [pc, #28]	@ (81057e0 <vPortFree+0xc4>)
 81057c2:	681b      	ldr	r3, [r3, #0]
 81057c4:	3301      	adds	r3, #1
 81057c6:	4a06      	ldr	r2, [pc, #24]	@ (81057e0 <vPortFree+0xc4>)
 81057c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 81057ca:	f001 ff49 	bl	8107660 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81057ce:	bf00      	nop
 81057d0:	3718      	adds	r7, #24
 81057d2:	46bd      	mov	sp, r7
 81057d4:	bd80      	pop	{r7, pc}
 81057d6:	bf00      	nop
 81057d8:	100045e0 	.word	0x100045e0
 81057dc:	100045d0 	.word	0x100045d0
 81057e0:	100045dc 	.word	0x100045dc

081057e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81057e4:	b480      	push	{r7}
 81057e6:	b085      	sub	sp, #20
 81057e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81057ea:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 81057ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81057f0:	4b27      	ldr	r3, [pc, #156]	@ (8105890 <prvHeapInit+0xac>)
 81057f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81057f4:	68fb      	ldr	r3, [r7, #12]
 81057f6:	f003 0307 	and.w	r3, r3, #7
 81057fa:	2b00      	cmp	r3, #0
 81057fc:	d00c      	beq.n	8105818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81057fe:	68fb      	ldr	r3, [r7, #12]
 8105800:	3307      	adds	r3, #7
 8105802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8105804:	68fb      	ldr	r3, [r7, #12]
 8105806:	f023 0307 	bic.w	r3, r3, #7
 810580a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810580c:	68ba      	ldr	r2, [r7, #8]
 810580e:	68fb      	ldr	r3, [r7, #12]
 8105810:	1ad3      	subs	r3, r2, r3
 8105812:	4a1f      	ldr	r2, [pc, #124]	@ (8105890 <prvHeapInit+0xac>)
 8105814:	4413      	add	r3, r2
 8105816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8105818:	68fb      	ldr	r3, [r7, #12]
 810581a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810581c:	4a1d      	ldr	r2, [pc, #116]	@ (8105894 <prvHeapInit+0xb0>)
 810581e:	687b      	ldr	r3, [r7, #4]
 8105820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8105822:	4b1c      	ldr	r3, [pc, #112]	@ (8105894 <prvHeapInit+0xb0>)
 8105824:	2200      	movs	r2, #0
 8105826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	68ba      	ldr	r2, [r7, #8]
 810582c:	4413      	add	r3, r2
 810582e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8105830:	2208      	movs	r2, #8
 8105832:	68fb      	ldr	r3, [r7, #12]
 8105834:	1a9b      	subs	r3, r3, r2
 8105836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8105838:	68fb      	ldr	r3, [r7, #12]
 810583a:	f023 0307 	bic.w	r3, r3, #7
 810583e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8105840:	68fb      	ldr	r3, [r7, #12]
 8105842:	4a15      	ldr	r2, [pc, #84]	@ (8105898 <prvHeapInit+0xb4>)
 8105844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8105846:	4b14      	ldr	r3, [pc, #80]	@ (8105898 <prvHeapInit+0xb4>)
 8105848:	681b      	ldr	r3, [r3, #0]
 810584a:	2200      	movs	r2, #0
 810584c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810584e:	4b12      	ldr	r3, [pc, #72]	@ (8105898 <prvHeapInit+0xb4>)
 8105850:	681b      	ldr	r3, [r3, #0]
 8105852:	2200      	movs	r2, #0
 8105854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8105856:	687b      	ldr	r3, [r7, #4]
 8105858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810585a:	683b      	ldr	r3, [r7, #0]
 810585c:	68fa      	ldr	r2, [r7, #12]
 810585e:	1ad2      	subs	r2, r2, r3
 8105860:	683b      	ldr	r3, [r7, #0]
 8105862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8105864:	4b0c      	ldr	r3, [pc, #48]	@ (8105898 <prvHeapInit+0xb4>)
 8105866:	681a      	ldr	r2, [r3, #0]
 8105868:	683b      	ldr	r3, [r7, #0]
 810586a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810586c:	683b      	ldr	r3, [r7, #0]
 810586e:	685b      	ldr	r3, [r3, #4]
 8105870:	4a0a      	ldr	r2, [pc, #40]	@ (810589c <prvHeapInit+0xb8>)
 8105872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8105874:	683b      	ldr	r3, [r7, #0]
 8105876:	685b      	ldr	r3, [r3, #4]
 8105878:	4a09      	ldr	r2, [pc, #36]	@ (81058a0 <prvHeapInit+0xbc>)
 810587a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810587c:	4b09      	ldr	r3, [pc, #36]	@ (81058a4 <prvHeapInit+0xc0>)
 810587e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8105882:	601a      	str	r2, [r3, #0]
}
 8105884:	bf00      	nop
 8105886:	3714      	adds	r7, #20
 8105888:	46bd      	mov	sp, r7
 810588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810588e:	4770      	bx	lr
 8105890:	100009c4 	.word	0x100009c4
 8105894:	100045c4 	.word	0x100045c4
 8105898:	100045cc 	.word	0x100045cc
 810589c:	100045d4 	.word	0x100045d4
 81058a0:	100045d0 	.word	0x100045d0
 81058a4:	100045e0 	.word	0x100045e0

081058a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81058a8:	b480      	push	{r7}
 81058aa:	b085      	sub	sp, #20
 81058ac:	af00      	add	r7, sp, #0
 81058ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81058b0:	4b28      	ldr	r3, [pc, #160]	@ (8105954 <prvInsertBlockIntoFreeList+0xac>)
 81058b2:	60fb      	str	r3, [r7, #12]
 81058b4:	e002      	b.n	81058bc <prvInsertBlockIntoFreeList+0x14>
 81058b6:	68fb      	ldr	r3, [r7, #12]
 81058b8:	681b      	ldr	r3, [r3, #0]
 81058ba:	60fb      	str	r3, [r7, #12]
 81058bc:	68fb      	ldr	r3, [r7, #12]
 81058be:	681b      	ldr	r3, [r3, #0]
 81058c0:	687a      	ldr	r2, [r7, #4]
 81058c2:	429a      	cmp	r2, r3
 81058c4:	d8f7      	bhi.n	81058b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81058c6:	68fb      	ldr	r3, [r7, #12]
 81058c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81058ca:	68fb      	ldr	r3, [r7, #12]
 81058cc:	685b      	ldr	r3, [r3, #4]
 81058ce:	68ba      	ldr	r2, [r7, #8]
 81058d0:	4413      	add	r3, r2
 81058d2:	687a      	ldr	r2, [r7, #4]
 81058d4:	429a      	cmp	r2, r3
 81058d6:	d108      	bne.n	81058ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81058d8:	68fb      	ldr	r3, [r7, #12]
 81058da:	685a      	ldr	r2, [r3, #4]
 81058dc:	687b      	ldr	r3, [r7, #4]
 81058de:	685b      	ldr	r3, [r3, #4]
 81058e0:	441a      	add	r2, r3
 81058e2:	68fb      	ldr	r3, [r7, #12]
 81058e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81058e6:	68fb      	ldr	r3, [r7, #12]
 81058e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81058ea:	687b      	ldr	r3, [r7, #4]
 81058ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	685b      	ldr	r3, [r3, #4]
 81058f2:	68ba      	ldr	r2, [r7, #8]
 81058f4:	441a      	add	r2, r3
 81058f6:	68fb      	ldr	r3, [r7, #12]
 81058f8:	681b      	ldr	r3, [r3, #0]
 81058fa:	429a      	cmp	r2, r3
 81058fc:	d118      	bne.n	8105930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81058fe:	68fb      	ldr	r3, [r7, #12]
 8105900:	681a      	ldr	r2, [r3, #0]
 8105902:	4b15      	ldr	r3, [pc, #84]	@ (8105958 <prvInsertBlockIntoFreeList+0xb0>)
 8105904:	681b      	ldr	r3, [r3, #0]
 8105906:	429a      	cmp	r2, r3
 8105908:	d00d      	beq.n	8105926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810590a:	687b      	ldr	r3, [r7, #4]
 810590c:	685a      	ldr	r2, [r3, #4]
 810590e:	68fb      	ldr	r3, [r7, #12]
 8105910:	681b      	ldr	r3, [r3, #0]
 8105912:	685b      	ldr	r3, [r3, #4]
 8105914:	441a      	add	r2, r3
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810591a:	68fb      	ldr	r3, [r7, #12]
 810591c:	681b      	ldr	r3, [r3, #0]
 810591e:	681a      	ldr	r2, [r3, #0]
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	601a      	str	r2, [r3, #0]
 8105924:	e008      	b.n	8105938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8105926:	4b0c      	ldr	r3, [pc, #48]	@ (8105958 <prvInsertBlockIntoFreeList+0xb0>)
 8105928:	681a      	ldr	r2, [r3, #0]
 810592a:	687b      	ldr	r3, [r7, #4]
 810592c:	601a      	str	r2, [r3, #0]
 810592e:	e003      	b.n	8105938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8105930:	68fb      	ldr	r3, [r7, #12]
 8105932:	681a      	ldr	r2, [r3, #0]
 8105934:	687b      	ldr	r3, [r7, #4]
 8105936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8105938:	68fa      	ldr	r2, [r7, #12]
 810593a:	687b      	ldr	r3, [r7, #4]
 810593c:	429a      	cmp	r2, r3
 810593e:	d002      	beq.n	8105946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8105940:	68fb      	ldr	r3, [r7, #12]
 8105942:	687a      	ldr	r2, [r7, #4]
 8105944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8105946:	bf00      	nop
 8105948:	3714      	adds	r7, #20
 810594a:	46bd      	mov	sp, r7
 810594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105950:	4770      	bx	lr
 8105952:	bf00      	nop
 8105954:	100045c4 	.word	0x100045c4
 8105958:	100045cc 	.word	0x100045cc

0810595c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810595c:	b480      	push	{r7}
 810595e:	b083      	sub	sp, #12
 8105960:	af00      	add	r7, sp, #0
 8105962:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8105964:	687b      	ldr	r3, [r7, #4]
 8105966:	f103 0208 	add.w	r2, r3, #8
 810596a:	687b      	ldr	r3, [r7, #4]
 810596c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	f04f 32ff 	mov.w	r2, #4294967295
 8105974:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8105976:	687b      	ldr	r3, [r7, #4]
 8105978:	f103 0208 	add.w	r2, r3, #8
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8105980:	687b      	ldr	r3, [r7, #4]
 8105982:	f103 0208 	add.w	r2, r3, #8
 8105986:	687b      	ldr	r3, [r7, #4]
 8105988:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810598a:	687b      	ldr	r3, [r7, #4]
 810598c:	2200      	movs	r2, #0
 810598e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8105990:	bf00      	nop
 8105992:	370c      	adds	r7, #12
 8105994:	46bd      	mov	sp, r7
 8105996:	f85d 7b04 	ldr.w	r7, [sp], #4
 810599a:	4770      	bx	lr

0810599c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810599c:	b480      	push	{r7}
 810599e:	b083      	sub	sp, #12
 81059a0:	af00      	add	r7, sp, #0
 81059a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81059a4:	687b      	ldr	r3, [r7, #4]
 81059a6:	2200      	movs	r2, #0
 81059a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81059aa:	bf00      	nop
 81059ac:	370c      	adds	r7, #12
 81059ae:	46bd      	mov	sp, r7
 81059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059b4:	4770      	bx	lr

081059b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81059b6:	b480      	push	{r7}
 81059b8:	b085      	sub	sp, #20
 81059ba:	af00      	add	r7, sp, #0
 81059bc:	6078      	str	r0, [r7, #4]
 81059be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81059c0:	687b      	ldr	r3, [r7, #4]
 81059c2:	685b      	ldr	r3, [r3, #4]
 81059c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81059c6:	683b      	ldr	r3, [r7, #0]
 81059c8:	68fa      	ldr	r2, [r7, #12]
 81059ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81059cc:	68fb      	ldr	r3, [r7, #12]
 81059ce:	689a      	ldr	r2, [r3, #8]
 81059d0:	683b      	ldr	r3, [r7, #0]
 81059d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81059d4:	68fb      	ldr	r3, [r7, #12]
 81059d6:	689b      	ldr	r3, [r3, #8]
 81059d8:	683a      	ldr	r2, [r7, #0]
 81059da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81059dc:	68fb      	ldr	r3, [r7, #12]
 81059de:	683a      	ldr	r2, [r7, #0]
 81059e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81059e2:	683b      	ldr	r3, [r7, #0]
 81059e4:	687a      	ldr	r2, [r7, #4]
 81059e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	681b      	ldr	r3, [r3, #0]
 81059ec:	1c5a      	adds	r2, r3, #1
 81059ee:	687b      	ldr	r3, [r7, #4]
 81059f0:	601a      	str	r2, [r3, #0]
}
 81059f2:	bf00      	nop
 81059f4:	3714      	adds	r7, #20
 81059f6:	46bd      	mov	sp, r7
 81059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059fc:	4770      	bx	lr

081059fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81059fe:	b480      	push	{r7}
 8105a00:	b085      	sub	sp, #20
 8105a02:	af00      	add	r7, sp, #0
 8105a04:	6078      	str	r0, [r7, #4]
 8105a06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8105a08:	683b      	ldr	r3, [r7, #0]
 8105a0a:	681b      	ldr	r3, [r3, #0]
 8105a0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8105a0e:	68bb      	ldr	r3, [r7, #8]
 8105a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105a14:	d103      	bne.n	8105a1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8105a16:	687b      	ldr	r3, [r7, #4]
 8105a18:	691b      	ldr	r3, [r3, #16]
 8105a1a:	60fb      	str	r3, [r7, #12]
 8105a1c:	e00c      	b.n	8105a38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8105a1e:	687b      	ldr	r3, [r7, #4]
 8105a20:	3308      	adds	r3, #8
 8105a22:	60fb      	str	r3, [r7, #12]
 8105a24:	e002      	b.n	8105a2c <vListInsert+0x2e>
 8105a26:	68fb      	ldr	r3, [r7, #12]
 8105a28:	685b      	ldr	r3, [r3, #4]
 8105a2a:	60fb      	str	r3, [r7, #12]
 8105a2c:	68fb      	ldr	r3, [r7, #12]
 8105a2e:	685b      	ldr	r3, [r3, #4]
 8105a30:	681b      	ldr	r3, [r3, #0]
 8105a32:	68ba      	ldr	r2, [r7, #8]
 8105a34:	429a      	cmp	r2, r3
 8105a36:	d2f6      	bcs.n	8105a26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8105a38:	68fb      	ldr	r3, [r7, #12]
 8105a3a:	685a      	ldr	r2, [r3, #4]
 8105a3c:	683b      	ldr	r3, [r7, #0]
 8105a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8105a40:	683b      	ldr	r3, [r7, #0]
 8105a42:	685b      	ldr	r3, [r3, #4]
 8105a44:	683a      	ldr	r2, [r7, #0]
 8105a46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8105a48:	683b      	ldr	r3, [r7, #0]
 8105a4a:	68fa      	ldr	r2, [r7, #12]
 8105a4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8105a4e:	68fb      	ldr	r3, [r7, #12]
 8105a50:	683a      	ldr	r2, [r7, #0]
 8105a52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8105a54:	683b      	ldr	r3, [r7, #0]
 8105a56:	687a      	ldr	r2, [r7, #4]
 8105a58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8105a5a:	687b      	ldr	r3, [r7, #4]
 8105a5c:	681b      	ldr	r3, [r3, #0]
 8105a5e:	1c5a      	adds	r2, r3, #1
 8105a60:	687b      	ldr	r3, [r7, #4]
 8105a62:	601a      	str	r2, [r3, #0]
}
 8105a64:	bf00      	nop
 8105a66:	3714      	adds	r7, #20
 8105a68:	46bd      	mov	sp, r7
 8105a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a6e:	4770      	bx	lr

08105a70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8105a70:	b480      	push	{r7}
 8105a72:	b085      	sub	sp, #20
 8105a74:	af00      	add	r7, sp, #0
 8105a76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	691b      	ldr	r3, [r3, #16]
 8105a7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8105a7e:	687b      	ldr	r3, [r7, #4]
 8105a80:	685b      	ldr	r3, [r3, #4]
 8105a82:	687a      	ldr	r2, [r7, #4]
 8105a84:	6892      	ldr	r2, [r2, #8]
 8105a86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8105a88:	687b      	ldr	r3, [r7, #4]
 8105a8a:	689b      	ldr	r3, [r3, #8]
 8105a8c:	687a      	ldr	r2, [r7, #4]
 8105a8e:	6852      	ldr	r2, [r2, #4]
 8105a90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8105a92:	68fb      	ldr	r3, [r7, #12]
 8105a94:	685b      	ldr	r3, [r3, #4]
 8105a96:	687a      	ldr	r2, [r7, #4]
 8105a98:	429a      	cmp	r2, r3
 8105a9a:	d103      	bne.n	8105aa4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	689a      	ldr	r2, [r3, #8]
 8105aa0:	68fb      	ldr	r3, [r7, #12]
 8105aa2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8105aa4:	687b      	ldr	r3, [r7, #4]
 8105aa6:	2200      	movs	r2, #0
 8105aa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8105aaa:	68fb      	ldr	r3, [r7, #12]
 8105aac:	681b      	ldr	r3, [r3, #0]
 8105aae:	1e5a      	subs	r2, r3, #1
 8105ab0:	68fb      	ldr	r3, [r7, #12]
 8105ab2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8105ab4:	68fb      	ldr	r3, [r7, #12]
 8105ab6:	681b      	ldr	r3, [r3, #0]
}
 8105ab8:	4618      	mov	r0, r3
 8105aba:	3714      	adds	r7, #20
 8105abc:	46bd      	mov	sp, r7
 8105abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ac2:	4770      	bx	lr

08105ac4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8105ac4:	b480      	push	{r7}
 8105ac6:	b085      	sub	sp, #20
 8105ac8:	af00      	add	r7, sp, #0
 8105aca:	60f8      	str	r0, [r7, #12]
 8105acc:	60b9      	str	r1, [r7, #8]
 8105ace:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8105ad0:	68fb      	ldr	r3, [r7, #12]
 8105ad2:	3b04      	subs	r3, #4
 8105ad4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8105ad6:	68fb      	ldr	r3, [r7, #12]
 8105ad8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8105adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8105ade:	68fb      	ldr	r3, [r7, #12]
 8105ae0:	3b04      	subs	r3, #4
 8105ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8105ae4:	68bb      	ldr	r3, [r7, #8]
 8105ae6:	f023 0201 	bic.w	r2, r3, #1
 8105aea:	68fb      	ldr	r3, [r7, #12]
 8105aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8105aee:	68fb      	ldr	r3, [r7, #12]
 8105af0:	3b04      	subs	r3, #4
 8105af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8105af4:	4a0c      	ldr	r2, [pc, #48]	@ (8105b28 <pxPortInitialiseStack+0x64>)
 8105af6:	68fb      	ldr	r3, [r7, #12]
 8105af8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8105afa:	68fb      	ldr	r3, [r7, #12]
 8105afc:	3b14      	subs	r3, #20
 8105afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8105b00:	687a      	ldr	r2, [r7, #4]
 8105b02:	68fb      	ldr	r3, [r7, #12]
 8105b04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8105b06:	68fb      	ldr	r3, [r7, #12]
 8105b08:	3b04      	subs	r3, #4
 8105b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8105b0c:	68fb      	ldr	r3, [r7, #12]
 8105b0e:	f06f 0202 	mvn.w	r2, #2
 8105b12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8105b14:	68fb      	ldr	r3, [r7, #12]
 8105b16:	3b20      	subs	r3, #32
 8105b18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8105b1a:	68fb      	ldr	r3, [r7, #12]
}
 8105b1c:	4618      	mov	r0, r3
 8105b1e:	3714      	adds	r7, #20
 8105b20:	46bd      	mov	sp, r7
 8105b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b26:	4770      	bx	lr
 8105b28:	08105b2d 	.word	0x08105b2d

08105b2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8105b2c:	b480      	push	{r7}
 8105b2e:	b085      	sub	sp, #20
 8105b30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8105b32:	2300      	movs	r3, #0
 8105b34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8105b36:	4b13      	ldr	r3, [pc, #76]	@ (8105b84 <prvTaskExitError+0x58>)
 8105b38:	681b      	ldr	r3, [r3, #0]
 8105b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105b3e:	d00b      	beq.n	8105b58 <prvTaskExitError+0x2c>
	__asm volatile
 8105b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105b44:	f383 8811 	msr	BASEPRI, r3
 8105b48:	f3bf 8f6f 	isb	sy
 8105b4c:	f3bf 8f4f 	dsb	sy
 8105b50:	60fb      	str	r3, [r7, #12]
}
 8105b52:	bf00      	nop
 8105b54:	bf00      	nop
 8105b56:	e7fd      	b.n	8105b54 <prvTaskExitError+0x28>
	__asm volatile
 8105b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105b5c:	f383 8811 	msr	BASEPRI, r3
 8105b60:	f3bf 8f6f 	isb	sy
 8105b64:	f3bf 8f4f 	dsb	sy
 8105b68:	60bb      	str	r3, [r7, #8]
}
 8105b6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8105b6c:	bf00      	nop
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	2b00      	cmp	r3, #0
 8105b72:	d0fc      	beq.n	8105b6e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8105b74:	bf00      	nop
 8105b76:	bf00      	nop
 8105b78:	3714      	adds	r7, #20
 8105b7a:	46bd      	mov	sp, r7
 8105b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b80:	4770      	bx	lr
 8105b82:	bf00      	nop
 8105b84:	10000010 	.word	0x10000010
	...

08105b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8105b90:	4b07      	ldr	r3, [pc, #28]	@ (8105bb0 <pxCurrentTCBConst2>)
 8105b92:	6819      	ldr	r1, [r3, #0]
 8105b94:	6808      	ldr	r0, [r1, #0]
 8105b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105b9a:	f380 8809 	msr	PSP, r0
 8105b9e:	f3bf 8f6f 	isb	sy
 8105ba2:	f04f 0000 	mov.w	r0, #0
 8105ba6:	f380 8811 	msr	BASEPRI, r0
 8105baa:	4770      	bx	lr
 8105bac:	f3af 8000 	nop.w

08105bb0 <pxCurrentTCBConst2>:
 8105bb0:	1000462c 	.word	0x1000462c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8105bb4:	bf00      	nop
 8105bb6:	bf00      	nop

08105bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8105bb8:	4808      	ldr	r0, [pc, #32]	@ (8105bdc <prvPortStartFirstTask+0x24>)
 8105bba:	6800      	ldr	r0, [r0, #0]
 8105bbc:	6800      	ldr	r0, [r0, #0]
 8105bbe:	f380 8808 	msr	MSP, r0
 8105bc2:	f04f 0000 	mov.w	r0, #0
 8105bc6:	f380 8814 	msr	CONTROL, r0
 8105bca:	b662      	cpsie	i
 8105bcc:	b661      	cpsie	f
 8105bce:	f3bf 8f4f 	dsb	sy
 8105bd2:	f3bf 8f6f 	isb	sy
 8105bd6:	df00      	svc	0
 8105bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8105bda:	bf00      	nop
 8105bdc:	e000ed08 	.word	0xe000ed08

08105be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8105be0:	b580      	push	{r7, lr}
 8105be2:	b086      	sub	sp, #24
 8105be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8105be6:	4b47      	ldr	r3, [pc, #284]	@ (8105d04 <xPortStartScheduler+0x124>)
 8105be8:	681b      	ldr	r3, [r3, #0]
 8105bea:	4a47      	ldr	r2, [pc, #284]	@ (8105d08 <xPortStartScheduler+0x128>)
 8105bec:	4293      	cmp	r3, r2
 8105bee:	d10b      	bne.n	8105c08 <xPortStartScheduler+0x28>
	__asm volatile
 8105bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105bf4:	f383 8811 	msr	BASEPRI, r3
 8105bf8:	f3bf 8f6f 	isb	sy
 8105bfc:	f3bf 8f4f 	dsb	sy
 8105c00:	613b      	str	r3, [r7, #16]
}
 8105c02:	bf00      	nop
 8105c04:	bf00      	nop
 8105c06:	e7fd      	b.n	8105c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8105c08:	4b3e      	ldr	r3, [pc, #248]	@ (8105d04 <xPortStartScheduler+0x124>)
 8105c0a:	681b      	ldr	r3, [r3, #0]
 8105c0c:	4a3f      	ldr	r2, [pc, #252]	@ (8105d0c <xPortStartScheduler+0x12c>)
 8105c0e:	4293      	cmp	r3, r2
 8105c10:	d10b      	bne.n	8105c2a <xPortStartScheduler+0x4a>
	__asm volatile
 8105c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105c16:	f383 8811 	msr	BASEPRI, r3
 8105c1a:	f3bf 8f6f 	isb	sy
 8105c1e:	f3bf 8f4f 	dsb	sy
 8105c22:	60fb      	str	r3, [r7, #12]
}
 8105c24:	bf00      	nop
 8105c26:	bf00      	nop
 8105c28:	e7fd      	b.n	8105c26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8105c2a:	4b39      	ldr	r3, [pc, #228]	@ (8105d10 <xPortStartScheduler+0x130>)
 8105c2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8105c2e:	697b      	ldr	r3, [r7, #20]
 8105c30:	781b      	ldrb	r3, [r3, #0]
 8105c32:	b2db      	uxtb	r3, r3
 8105c34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8105c36:	697b      	ldr	r3, [r7, #20]
 8105c38:	22ff      	movs	r2, #255	@ 0xff
 8105c3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8105c3c:	697b      	ldr	r3, [r7, #20]
 8105c3e:	781b      	ldrb	r3, [r3, #0]
 8105c40:	b2db      	uxtb	r3, r3
 8105c42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8105c44:	78fb      	ldrb	r3, [r7, #3]
 8105c46:	b2db      	uxtb	r3, r3
 8105c48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8105c4c:	b2da      	uxtb	r2, r3
 8105c4e:	4b31      	ldr	r3, [pc, #196]	@ (8105d14 <xPortStartScheduler+0x134>)
 8105c50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8105c52:	4b31      	ldr	r3, [pc, #196]	@ (8105d18 <xPortStartScheduler+0x138>)
 8105c54:	2207      	movs	r2, #7
 8105c56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8105c58:	e009      	b.n	8105c6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8105c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8105d18 <xPortStartScheduler+0x138>)
 8105c5c:	681b      	ldr	r3, [r3, #0]
 8105c5e:	3b01      	subs	r3, #1
 8105c60:	4a2d      	ldr	r2, [pc, #180]	@ (8105d18 <xPortStartScheduler+0x138>)
 8105c62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8105c64:	78fb      	ldrb	r3, [r7, #3]
 8105c66:	b2db      	uxtb	r3, r3
 8105c68:	005b      	lsls	r3, r3, #1
 8105c6a:	b2db      	uxtb	r3, r3
 8105c6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8105c6e:	78fb      	ldrb	r3, [r7, #3]
 8105c70:	b2db      	uxtb	r3, r3
 8105c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8105c76:	2b80      	cmp	r3, #128	@ 0x80
 8105c78:	d0ef      	beq.n	8105c5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8105c7a:	4b27      	ldr	r3, [pc, #156]	@ (8105d18 <xPortStartScheduler+0x138>)
 8105c7c:	681b      	ldr	r3, [r3, #0]
 8105c7e:	f1c3 0307 	rsb	r3, r3, #7
 8105c82:	2b04      	cmp	r3, #4
 8105c84:	d00b      	beq.n	8105c9e <xPortStartScheduler+0xbe>
	__asm volatile
 8105c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105c8a:	f383 8811 	msr	BASEPRI, r3
 8105c8e:	f3bf 8f6f 	isb	sy
 8105c92:	f3bf 8f4f 	dsb	sy
 8105c96:	60bb      	str	r3, [r7, #8]
}
 8105c98:	bf00      	nop
 8105c9a:	bf00      	nop
 8105c9c:	e7fd      	b.n	8105c9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8105c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8105d18 <xPortStartScheduler+0x138>)
 8105ca0:	681b      	ldr	r3, [r3, #0]
 8105ca2:	021b      	lsls	r3, r3, #8
 8105ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8105d18 <xPortStartScheduler+0x138>)
 8105ca6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8105ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8105d18 <xPortStartScheduler+0x138>)
 8105caa:	681b      	ldr	r3, [r3, #0]
 8105cac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8105cb0:	4a19      	ldr	r2, [pc, #100]	@ (8105d18 <xPortStartScheduler+0x138>)
 8105cb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8105cb4:	687b      	ldr	r3, [r7, #4]
 8105cb6:	b2da      	uxtb	r2, r3
 8105cb8:	697b      	ldr	r3, [r7, #20]
 8105cba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8105cbc:	4b17      	ldr	r3, [pc, #92]	@ (8105d1c <xPortStartScheduler+0x13c>)
 8105cbe:	681b      	ldr	r3, [r3, #0]
 8105cc0:	4a16      	ldr	r2, [pc, #88]	@ (8105d1c <xPortStartScheduler+0x13c>)
 8105cc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8105cc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8105cc8:	4b14      	ldr	r3, [pc, #80]	@ (8105d1c <xPortStartScheduler+0x13c>)
 8105cca:	681b      	ldr	r3, [r3, #0]
 8105ccc:	4a13      	ldr	r2, [pc, #76]	@ (8105d1c <xPortStartScheduler+0x13c>)
 8105cce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8105cd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8105cd4:	f000 f8da 	bl	8105e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8105cd8:	4b11      	ldr	r3, [pc, #68]	@ (8105d20 <xPortStartScheduler+0x140>)
 8105cda:	2200      	movs	r2, #0
 8105cdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8105cde:	f000 f8f9 	bl	8105ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8105ce2:	4b10      	ldr	r3, [pc, #64]	@ (8105d24 <xPortStartScheduler+0x144>)
 8105ce4:	681b      	ldr	r3, [r3, #0]
 8105ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8105d24 <xPortStartScheduler+0x144>)
 8105ce8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8105cec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8105cee:	f7ff ff63 	bl	8105bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8105cf2:	f001 fe1d 	bl	8107930 <vTaskSwitchContext>
	prvTaskExitError();
 8105cf6:	f7ff ff19 	bl	8105b2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8105cfa:	2300      	movs	r3, #0
}
 8105cfc:	4618      	mov	r0, r3
 8105cfe:	3718      	adds	r7, #24
 8105d00:	46bd      	mov	sp, r7
 8105d02:	bd80      	pop	{r7, pc}
 8105d04:	e000ed00 	.word	0xe000ed00
 8105d08:	410fc271 	.word	0x410fc271
 8105d0c:	410fc270 	.word	0x410fc270
 8105d10:	e000e400 	.word	0xe000e400
 8105d14:	100045e4 	.word	0x100045e4
 8105d18:	100045e8 	.word	0x100045e8
 8105d1c:	e000ed20 	.word	0xe000ed20
 8105d20:	10000010 	.word	0x10000010
 8105d24:	e000ef34 	.word	0xe000ef34

08105d28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8105d28:	b480      	push	{r7}
 8105d2a:	b083      	sub	sp, #12
 8105d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8105d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105d32:	f383 8811 	msr	BASEPRI, r3
 8105d36:	f3bf 8f6f 	isb	sy
 8105d3a:	f3bf 8f4f 	dsb	sy
 8105d3e:	607b      	str	r3, [r7, #4]
}
 8105d40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8105d42:	4b10      	ldr	r3, [pc, #64]	@ (8105d84 <vPortEnterCritical+0x5c>)
 8105d44:	681b      	ldr	r3, [r3, #0]
 8105d46:	3301      	adds	r3, #1
 8105d48:	4a0e      	ldr	r2, [pc, #56]	@ (8105d84 <vPortEnterCritical+0x5c>)
 8105d4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8105d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8105d84 <vPortEnterCritical+0x5c>)
 8105d4e:	681b      	ldr	r3, [r3, #0]
 8105d50:	2b01      	cmp	r3, #1
 8105d52:	d110      	bne.n	8105d76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8105d54:	4b0c      	ldr	r3, [pc, #48]	@ (8105d88 <vPortEnterCritical+0x60>)
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	b2db      	uxtb	r3, r3
 8105d5a:	2b00      	cmp	r3, #0
 8105d5c:	d00b      	beq.n	8105d76 <vPortEnterCritical+0x4e>
	__asm volatile
 8105d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105d62:	f383 8811 	msr	BASEPRI, r3
 8105d66:	f3bf 8f6f 	isb	sy
 8105d6a:	f3bf 8f4f 	dsb	sy
 8105d6e:	603b      	str	r3, [r7, #0]
}
 8105d70:	bf00      	nop
 8105d72:	bf00      	nop
 8105d74:	e7fd      	b.n	8105d72 <vPortEnterCritical+0x4a>
	}
}
 8105d76:	bf00      	nop
 8105d78:	370c      	adds	r7, #12
 8105d7a:	46bd      	mov	sp, r7
 8105d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d80:	4770      	bx	lr
 8105d82:	bf00      	nop
 8105d84:	10000010 	.word	0x10000010
 8105d88:	e000ed04 	.word	0xe000ed04

08105d8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8105d8c:	b480      	push	{r7}
 8105d8e:	b083      	sub	sp, #12
 8105d90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8105d92:	4b12      	ldr	r3, [pc, #72]	@ (8105ddc <vPortExitCritical+0x50>)
 8105d94:	681b      	ldr	r3, [r3, #0]
 8105d96:	2b00      	cmp	r3, #0
 8105d98:	d10b      	bne.n	8105db2 <vPortExitCritical+0x26>
	__asm volatile
 8105d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105d9e:	f383 8811 	msr	BASEPRI, r3
 8105da2:	f3bf 8f6f 	isb	sy
 8105da6:	f3bf 8f4f 	dsb	sy
 8105daa:	607b      	str	r3, [r7, #4]
}
 8105dac:	bf00      	nop
 8105dae:	bf00      	nop
 8105db0:	e7fd      	b.n	8105dae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8105db2:	4b0a      	ldr	r3, [pc, #40]	@ (8105ddc <vPortExitCritical+0x50>)
 8105db4:	681b      	ldr	r3, [r3, #0]
 8105db6:	3b01      	subs	r3, #1
 8105db8:	4a08      	ldr	r2, [pc, #32]	@ (8105ddc <vPortExitCritical+0x50>)
 8105dba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8105dbc:	4b07      	ldr	r3, [pc, #28]	@ (8105ddc <vPortExitCritical+0x50>)
 8105dbe:	681b      	ldr	r3, [r3, #0]
 8105dc0:	2b00      	cmp	r3, #0
 8105dc2:	d105      	bne.n	8105dd0 <vPortExitCritical+0x44>
 8105dc4:	2300      	movs	r3, #0
 8105dc6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8105dc8:	683b      	ldr	r3, [r7, #0]
 8105dca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8105dce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8105dd0:	bf00      	nop
 8105dd2:	370c      	adds	r7, #12
 8105dd4:	46bd      	mov	sp, r7
 8105dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dda:	4770      	bx	lr
 8105ddc:	10000010 	.word	0x10000010

08105de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8105de0:	f3ef 8009 	mrs	r0, PSP
 8105de4:	f3bf 8f6f 	isb	sy
 8105de8:	4b15      	ldr	r3, [pc, #84]	@ (8105e40 <pxCurrentTCBConst>)
 8105dea:	681a      	ldr	r2, [r3, #0]
 8105dec:	f01e 0f10 	tst.w	lr, #16
 8105df0:	bf08      	it	eq
 8105df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8105df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105dfa:	6010      	str	r0, [r2, #0]
 8105dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8105e00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8105e04:	f380 8811 	msr	BASEPRI, r0
 8105e08:	f3bf 8f4f 	dsb	sy
 8105e0c:	f3bf 8f6f 	isb	sy
 8105e10:	f001 fd8e 	bl	8107930 <vTaskSwitchContext>
 8105e14:	f04f 0000 	mov.w	r0, #0
 8105e18:	f380 8811 	msr	BASEPRI, r0
 8105e1c:	bc09      	pop	{r0, r3}
 8105e1e:	6819      	ldr	r1, [r3, #0]
 8105e20:	6808      	ldr	r0, [r1, #0]
 8105e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105e26:	f01e 0f10 	tst.w	lr, #16
 8105e2a:	bf08      	it	eq
 8105e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8105e30:	f380 8809 	msr	PSP, r0
 8105e34:	f3bf 8f6f 	isb	sy
 8105e38:	4770      	bx	lr
 8105e3a:	bf00      	nop
 8105e3c:	f3af 8000 	nop.w

08105e40 <pxCurrentTCBConst>:
 8105e40:	1000462c 	.word	0x1000462c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8105e44:	bf00      	nop
 8105e46:	bf00      	nop

08105e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8105e48:	b580      	push	{r7, lr}
 8105e4a:	b082      	sub	sp, #8
 8105e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8105e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105e52:	f383 8811 	msr	BASEPRI, r3
 8105e56:	f3bf 8f6f 	isb	sy
 8105e5a:	f3bf 8f4f 	dsb	sy
 8105e5e:	607b      	str	r3, [r7, #4]
}
 8105e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8105e62:	f001 fcab 	bl	81077bc <xTaskIncrementTick>
 8105e66:	4603      	mov	r3, r0
 8105e68:	2b00      	cmp	r3, #0
 8105e6a:	d003      	beq.n	8105e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8105e6c:	4b06      	ldr	r3, [pc, #24]	@ (8105e88 <xPortSysTickHandler+0x40>)
 8105e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105e72:	601a      	str	r2, [r3, #0]
 8105e74:	2300      	movs	r3, #0
 8105e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8105e78:	683b      	ldr	r3, [r7, #0]
 8105e7a:	f383 8811 	msr	BASEPRI, r3
}
 8105e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8105e80:	bf00      	nop
 8105e82:	3708      	adds	r7, #8
 8105e84:	46bd      	mov	sp, r7
 8105e86:	bd80      	pop	{r7, pc}
 8105e88:	e000ed04 	.word	0xe000ed04

08105e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8105e8c:	b480      	push	{r7}
 8105e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8105e90:	4b0b      	ldr	r3, [pc, #44]	@ (8105ec0 <vPortSetupTimerInterrupt+0x34>)
 8105e92:	2200      	movs	r2, #0
 8105e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8105e96:	4b0b      	ldr	r3, [pc, #44]	@ (8105ec4 <vPortSetupTimerInterrupt+0x38>)
 8105e98:	2200      	movs	r2, #0
 8105e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8105e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8105ec8 <vPortSetupTimerInterrupt+0x3c>)
 8105e9e:	681b      	ldr	r3, [r3, #0]
 8105ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8105ecc <vPortSetupTimerInterrupt+0x40>)
 8105ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8105ea6:	099b      	lsrs	r3, r3, #6
 8105ea8:	4a09      	ldr	r2, [pc, #36]	@ (8105ed0 <vPortSetupTimerInterrupt+0x44>)
 8105eaa:	3b01      	subs	r3, #1
 8105eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8105eae:	4b04      	ldr	r3, [pc, #16]	@ (8105ec0 <vPortSetupTimerInterrupt+0x34>)
 8105eb0:	2207      	movs	r2, #7
 8105eb2:	601a      	str	r2, [r3, #0]
}
 8105eb4:	bf00      	nop
 8105eb6:	46bd      	mov	sp, r7
 8105eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ebc:	4770      	bx	lr
 8105ebe:	bf00      	nop
 8105ec0:	e000e010 	.word	0xe000e010
 8105ec4:	e000e018 	.word	0xe000e018
 8105ec8:	10000004 	.word	0x10000004
 8105ecc:	10624dd3 	.word	0x10624dd3
 8105ed0:	e000e014 	.word	0xe000e014

08105ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8105ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8105ee4 <vPortEnableVFP+0x10>
 8105ed8:	6801      	ldr	r1, [r0, #0]
 8105eda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8105ede:	6001      	str	r1, [r0, #0]
 8105ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8105ee2:	bf00      	nop
 8105ee4:	e000ed88 	.word	0xe000ed88

08105ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8105ee8:	b480      	push	{r7}
 8105eea:	b085      	sub	sp, #20
 8105eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8105eee:	f3ef 8305 	mrs	r3, IPSR
 8105ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8105ef4:	68fb      	ldr	r3, [r7, #12]
 8105ef6:	2b0f      	cmp	r3, #15
 8105ef8:	d915      	bls.n	8105f26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8105efa:	4a18      	ldr	r2, [pc, #96]	@ (8105f5c <vPortValidateInterruptPriority+0x74>)
 8105efc:	68fb      	ldr	r3, [r7, #12]
 8105efe:	4413      	add	r3, r2
 8105f00:	781b      	ldrb	r3, [r3, #0]
 8105f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8105f04:	4b16      	ldr	r3, [pc, #88]	@ (8105f60 <vPortValidateInterruptPriority+0x78>)
 8105f06:	781b      	ldrb	r3, [r3, #0]
 8105f08:	7afa      	ldrb	r2, [r7, #11]
 8105f0a:	429a      	cmp	r2, r3
 8105f0c:	d20b      	bcs.n	8105f26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8105f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105f12:	f383 8811 	msr	BASEPRI, r3
 8105f16:	f3bf 8f6f 	isb	sy
 8105f1a:	f3bf 8f4f 	dsb	sy
 8105f1e:	607b      	str	r3, [r7, #4]
}
 8105f20:	bf00      	nop
 8105f22:	bf00      	nop
 8105f24:	e7fd      	b.n	8105f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8105f26:	4b0f      	ldr	r3, [pc, #60]	@ (8105f64 <vPortValidateInterruptPriority+0x7c>)
 8105f28:	681b      	ldr	r3, [r3, #0]
 8105f2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8105f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8105f68 <vPortValidateInterruptPriority+0x80>)
 8105f30:	681b      	ldr	r3, [r3, #0]
 8105f32:	429a      	cmp	r2, r3
 8105f34:	d90b      	bls.n	8105f4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8105f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105f3a:	f383 8811 	msr	BASEPRI, r3
 8105f3e:	f3bf 8f6f 	isb	sy
 8105f42:	f3bf 8f4f 	dsb	sy
 8105f46:	603b      	str	r3, [r7, #0]
}
 8105f48:	bf00      	nop
 8105f4a:	bf00      	nop
 8105f4c:	e7fd      	b.n	8105f4a <vPortValidateInterruptPriority+0x62>
	}
 8105f4e:	bf00      	nop
 8105f50:	3714      	adds	r7, #20
 8105f52:	46bd      	mov	sp, r7
 8105f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f58:	4770      	bx	lr
 8105f5a:	bf00      	nop
 8105f5c:	e000e3f0 	.word	0xe000e3f0
 8105f60:	100045e4 	.word	0x100045e4
 8105f64:	e000ed0c 	.word	0xe000ed0c
 8105f68:	100045e8 	.word	0x100045e8

08105f6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8105f6c:	b580      	push	{r7, lr}
 8105f6e:	b084      	sub	sp, #16
 8105f70:	af00      	add	r7, sp, #0
 8105f72:	6078      	str	r0, [r7, #4]
 8105f74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8105f76:	687b      	ldr	r3, [r7, #4]
 8105f78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8105f7a:	68fb      	ldr	r3, [r7, #12]
 8105f7c:	2b00      	cmp	r3, #0
 8105f7e:	d10b      	bne.n	8105f98 <xQueueGenericReset+0x2c>
	__asm volatile
 8105f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105f84:	f383 8811 	msr	BASEPRI, r3
 8105f88:	f3bf 8f6f 	isb	sy
 8105f8c:	f3bf 8f4f 	dsb	sy
 8105f90:	60bb      	str	r3, [r7, #8]
}
 8105f92:	bf00      	nop
 8105f94:	bf00      	nop
 8105f96:	e7fd      	b.n	8105f94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8105f98:	f7ff fec6 	bl	8105d28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8105f9c:	68fb      	ldr	r3, [r7, #12]
 8105f9e:	681a      	ldr	r2, [r3, #0]
 8105fa0:	68fb      	ldr	r3, [r7, #12]
 8105fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105fa4:	68f9      	ldr	r1, [r7, #12]
 8105fa6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8105fa8:	fb01 f303 	mul.w	r3, r1, r3
 8105fac:	441a      	add	r2, r3
 8105fae:	68fb      	ldr	r3, [r7, #12]
 8105fb0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8105fb2:	68fb      	ldr	r3, [r7, #12]
 8105fb4:	2200      	movs	r2, #0
 8105fb6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8105fb8:	68fb      	ldr	r3, [r7, #12]
 8105fba:	681a      	ldr	r2, [r3, #0]
 8105fbc:	68fb      	ldr	r3, [r7, #12]
 8105fbe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8105fc0:	68fb      	ldr	r3, [r7, #12]
 8105fc2:	681a      	ldr	r2, [r3, #0]
 8105fc4:	68fb      	ldr	r3, [r7, #12]
 8105fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105fc8:	3b01      	subs	r3, #1
 8105fca:	68f9      	ldr	r1, [r7, #12]
 8105fcc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8105fce:	fb01 f303 	mul.w	r3, r1, r3
 8105fd2:	441a      	add	r2, r3
 8105fd4:	68fb      	ldr	r3, [r7, #12]
 8105fd6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8105fd8:	68fb      	ldr	r3, [r7, #12]
 8105fda:	22ff      	movs	r2, #255	@ 0xff
 8105fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8105fe0:	68fb      	ldr	r3, [r7, #12]
 8105fe2:	22ff      	movs	r2, #255	@ 0xff
 8105fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8105fe8:	683b      	ldr	r3, [r7, #0]
 8105fea:	2b00      	cmp	r3, #0
 8105fec:	d114      	bne.n	8106018 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8105fee:	68fb      	ldr	r3, [r7, #12]
 8105ff0:	691b      	ldr	r3, [r3, #16]
 8105ff2:	2b00      	cmp	r3, #0
 8105ff4:	d01a      	beq.n	810602c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8105ff6:	68fb      	ldr	r3, [r7, #12]
 8105ff8:	3310      	adds	r3, #16
 8105ffa:	4618      	mov	r0, r3
 8105ffc:	f001 fd50 	bl	8107aa0 <xTaskRemoveFromEventList>
 8106000:	4603      	mov	r3, r0
 8106002:	2b00      	cmp	r3, #0
 8106004:	d012      	beq.n	810602c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8106006:	4b0d      	ldr	r3, [pc, #52]	@ (810603c <xQueueGenericReset+0xd0>)
 8106008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810600c:	601a      	str	r2, [r3, #0]
 810600e:	f3bf 8f4f 	dsb	sy
 8106012:	f3bf 8f6f 	isb	sy
 8106016:	e009      	b.n	810602c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8106018:	68fb      	ldr	r3, [r7, #12]
 810601a:	3310      	adds	r3, #16
 810601c:	4618      	mov	r0, r3
 810601e:	f7ff fc9d 	bl	810595c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8106022:	68fb      	ldr	r3, [r7, #12]
 8106024:	3324      	adds	r3, #36	@ 0x24
 8106026:	4618      	mov	r0, r3
 8106028:	f7ff fc98 	bl	810595c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810602c:	f7ff feae 	bl	8105d8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8106030:	2301      	movs	r3, #1
}
 8106032:	4618      	mov	r0, r3
 8106034:	3710      	adds	r7, #16
 8106036:	46bd      	mov	sp, r7
 8106038:	bd80      	pop	{r7, pc}
 810603a:	bf00      	nop
 810603c:	e000ed04 	.word	0xe000ed04

08106040 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8106040:	b580      	push	{r7, lr}
 8106042:	b08e      	sub	sp, #56	@ 0x38
 8106044:	af02      	add	r7, sp, #8
 8106046:	60f8      	str	r0, [r7, #12]
 8106048:	60b9      	str	r1, [r7, #8]
 810604a:	607a      	str	r2, [r7, #4]
 810604c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810604e:	68fb      	ldr	r3, [r7, #12]
 8106050:	2b00      	cmp	r3, #0
 8106052:	d10b      	bne.n	810606c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8106054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106058:	f383 8811 	msr	BASEPRI, r3
 810605c:	f3bf 8f6f 	isb	sy
 8106060:	f3bf 8f4f 	dsb	sy
 8106064:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8106066:	bf00      	nop
 8106068:	bf00      	nop
 810606a:	e7fd      	b.n	8106068 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810606c:	683b      	ldr	r3, [r7, #0]
 810606e:	2b00      	cmp	r3, #0
 8106070:	d10b      	bne.n	810608a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8106072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106076:	f383 8811 	msr	BASEPRI, r3
 810607a:	f3bf 8f6f 	isb	sy
 810607e:	f3bf 8f4f 	dsb	sy
 8106082:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8106084:	bf00      	nop
 8106086:	bf00      	nop
 8106088:	e7fd      	b.n	8106086 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810608a:	687b      	ldr	r3, [r7, #4]
 810608c:	2b00      	cmp	r3, #0
 810608e:	d002      	beq.n	8106096 <xQueueGenericCreateStatic+0x56>
 8106090:	68bb      	ldr	r3, [r7, #8]
 8106092:	2b00      	cmp	r3, #0
 8106094:	d001      	beq.n	810609a <xQueueGenericCreateStatic+0x5a>
 8106096:	2301      	movs	r3, #1
 8106098:	e000      	b.n	810609c <xQueueGenericCreateStatic+0x5c>
 810609a:	2300      	movs	r3, #0
 810609c:	2b00      	cmp	r3, #0
 810609e:	d10b      	bne.n	81060b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 81060a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81060a4:	f383 8811 	msr	BASEPRI, r3
 81060a8:	f3bf 8f6f 	isb	sy
 81060ac:	f3bf 8f4f 	dsb	sy
 81060b0:	623b      	str	r3, [r7, #32]
}
 81060b2:	bf00      	nop
 81060b4:	bf00      	nop
 81060b6:	e7fd      	b.n	81060b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 81060b8:	687b      	ldr	r3, [r7, #4]
 81060ba:	2b00      	cmp	r3, #0
 81060bc:	d102      	bne.n	81060c4 <xQueueGenericCreateStatic+0x84>
 81060be:	68bb      	ldr	r3, [r7, #8]
 81060c0:	2b00      	cmp	r3, #0
 81060c2:	d101      	bne.n	81060c8 <xQueueGenericCreateStatic+0x88>
 81060c4:	2301      	movs	r3, #1
 81060c6:	e000      	b.n	81060ca <xQueueGenericCreateStatic+0x8a>
 81060c8:	2300      	movs	r3, #0
 81060ca:	2b00      	cmp	r3, #0
 81060cc:	d10b      	bne.n	81060e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 81060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81060d2:	f383 8811 	msr	BASEPRI, r3
 81060d6:	f3bf 8f6f 	isb	sy
 81060da:	f3bf 8f4f 	dsb	sy
 81060de:	61fb      	str	r3, [r7, #28]
}
 81060e0:	bf00      	nop
 81060e2:	bf00      	nop
 81060e4:	e7fd      	b.n	81060e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81060e6:	2350      	movs	r3, #80	@ 0x50
 81060e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81060ea:	697b      	ldr	r3, [r7, #20]
 81060ec:	2b50      	cmp	r3, #80	@ 0x50
 81060ee:	d00b      	beq.n	8106108 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 81060f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81060f4:	f383 8811 	msr	BASEPRI, r3
 81060f8:	f3bf 8f6f 	isb	sy
 81060fc:	f3bf 8f4f 	dsb	sy
 8106100:	61bb      	str	r3, [r7, #24]
}
 8106102:	bf00      	nop
 8106104:	bf00      	nop
 8106106:	e7fd      	b.n	8106104 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8106108:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810610a:	683b      	ldr	r3, [r7, #0]
 810610c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810610e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106110:	2b00      	cmp	r3, #0
 8106112:	d00d      	beq.n	8106130 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8106114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106116:	2201      	movs	r2, #1
 8106118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810611c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8106120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106122:	9300      	str	r3, [sp, #0]
 8106124:	4613      	mov	r3, r2
 8106126:	687a      	ldr	r2, [r7, #4]
 8106128:	68b9      	ldr	r1, [r7, #8]
 810612a:	68f8      	ldr	r0, [r7, #12]
 810612c:	f000 f840 	bl	81061b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8106130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8106132:	4618      	mov	r0, r3
 8106134:	3730      	adds	r7, #48	@ 0x30
 8106136:	46bd      	mov	sp, r7
 8106138:	bd80      	pop	{r7, pc}

0810613a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810613a:	b580      	push	{r7, lr}
 810613c:	b08a      	sub	sp, #40	@ 0x28
 810613e:	af02      	add	r7, sp, #8
 8106140:	60f8      	str	r0, [r7, #12]
 8106142:	60b9      	str	r1, [r7, #8]
 8106144:	4613      	mov	r3, r2
 8106146:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8106148:	68fb      	ldr	r3, [r7, #12]
 810614a:	2b00      	cmp	r3, #0
 810614c:	d10b      	bne.n	8106166 <xQueueGenericCreate+0x2c>
	__asm volatile
 810614e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106152:	f383 8811 	msr	BASEPRI, r3
 8106156:	f3bf 8f6f 	isb	sy
 810615a:	f3bf 8f4f 	dsb	sy
 810615e:	613b      	str	r3, [r7, #16]
}
 8106160:	bf00      	nop
 8106162:	bf00      	nop
 8106164:	e7fd      	b.n	8106162 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8106166:	68fb      	ldr	r3, [r7, #12]
 8106168:	68ba      	ldr	r2, [r7, #8]
 810616a:	fb02 f303 	mul.w	r3, r2, r3
 810616e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8106170:	69fb      	ldr	r3, [r7, #28]
 8106172:	3350      	adds	r3, #80	@ 0x50
 8106174:	4618      	mov	r0, r3
 8106176:	f7ff fa03 	bl	8105580 <pvPortMalloc>
 810617a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810617c:	69bb      	ldr	r3, [r7, #24]
 810617e:	2b00      	cmp	r3, #0
 8106180:	d011      	beq.n	81061a6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8106182:	69bb      	ldr	r3, [r7, #24]
 8106184:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8106186:	697b      	ldr	r3, [r7, #20]
 8106188:	3350      	adds	r3, #80	@ 0x50
 810618a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810618c:	69bb      	ldr	r3, [r7, #24]
 810618e:	2200      	movs	r2, #0
 8106190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8106194:	79fa      	ldrb	r2, [r7, #7]
 8106196:	69bb      	ldr	r3, [r7, #24]
 8106198:	9300      	str	r3, [sp, #0]
 810619a:	4613      	mov	r3, r2
 810619c:	697a      	ldr	r2, [r7, #20]
 810619e:	68b9      	ldr	r1, [r7, #8]
 81061a0:	68f8      	ldr	r0, [r7, #12]
 81061a2:	f000 f805 	bl	81061b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 81061a6:	69bb      	ldr	r3, [r7, #24]
	}
 81061a8:	4618      	mov	r0, r3
 81061aa:	3720      	adds	r7, #32
 81061ac:	46bd      	mov	sp, r7
 81061ae:	bd80      	pop	{r7, pc}

081061b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 81061b0:	b580      	push	{r7, lr}
 81061b2:	b084      	sub	sp, #16
 81061b4:	af00      	add	r7, sp, #0
 81061b6:	60f8      	str	r0, [r7, #12]
 81061b8:	60b9      	str	r1, [r7, #8]
 81061ba:	607a      	str	r2, [r7, #4]
 81061bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 81061be:	68bb      	ldr	r3, [r7, #8]
 81061c0:	2b00      	cmp	r3, #0
 81061c2:	d103      	bne.n	81061cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 81061c4:	69bb      	ldr	r3, [r7, #24]
 81061c6:	69ba      	ldr	r2, [r7, #24]
 81061c8:	601a      	str	r2, [r3, #0]
 81061ca:	e002      	b.n	81061d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 81061cc:	69bb      	ldr	r3, [r7, #24]
 81061ce:	687a      	ldr	r2, [r7, #4]
 81061d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 81061d2:	69bb      	ldr	r3, [r7, #24]
 81061d4:	68fa      	ldr	r2, [r7, #12]
 81061d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 81061d8:	69bb      	ldr	r3, [r7, #24]
 81061da:	68ba      	ldr	r2, [r7, #8]
 81061dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 81061de:	2101      	movs	r1, #1
 81061e0:	69b8      	ldr	r0, [r7, #24]
 81061e2:	f7ff fec3 	bl	8105f6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 81061e6:	69bb      	ldr	r3, [r7, #24]
 81061e8:	78fa      	ldrb	r2, [r7, #3]
 81061ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 81061ee:	bf00      	nop
 81061f0:	3710      	adds	r7, #16
 81061f2:	46bd      	mov	sp, r7
 81061f4:	bd80      	pop	{r7, pc}

081061f6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 81061f6:	b580      	push	{r7, lr}
 81061f8:	b08a      	sub	sp, #40	@ 0x28
 81061fa:	af02      	add	r7, sp, #8
 81061fc:	60f8      	str	r0, [r7, #12]
 81061fe:	60b9      	str	r1, [r7, #8]
 8106200:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8106202:	68fb      	ldr	r3, [r7, #12]
 8106204:	2b00      	cmp	r3, #0
 8106206:	d10b      	bne.n	8106220 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8106208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810620c:	f383 8811 	msr	BASEPRI, r3
 8106210:	f3bf 8f6f 	isb	sy
 8106214:	f3bf 8f4f 	dsb	sy
 8106218:	61bb      	str	r3, [r7, #24]
}
 810621a:	bf00      	nop
 810621c:	bf00      	nop
 810621e:	e7fd      	b.n	810621c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8106220:	68ba      	ldr	r2, [r7, #8]
 8106222:	68fb      	ldr	r3, [r7, #12]
 8106224:	429a      	cmp	r2, r3
 8106226:	d90b      	bls.n	8106240 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8106228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810622c:	f383 8811 	msr	BASEPRI, r3
 8106230:	f3bf 8f6f 	isb	sy
 8106234:	f3bf 8f4f 	dsb	sy
 8106238:	617b      	str	r3, [r7, #20]
}
 810623a:	bf00      	nop
 810623c:	bf00      	nop
 810623e:	e7fd      	b.n	810623c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8106240:	2302      	movs	r3, #2
 8106242:	9300      	str	r3, [sp, #0]
 8106244:	687b      	ldr	r3, [r7, #4]
 8106246:	2200      	movs	r2, #0
 8106248:	2100      	movs	r1, #0
 810624a:	68f8      	ldr	r0, [r7, #12]
 810624c:	f7ff fef8 	bl	8106040 <xQueueGenericCreateStatic>
 8106250:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8106252:	69fb      	ldr	r3, [r7, #28]
 8106254:	2b00      	cmp	r3, #0
 8106256:	d002      	beq.n	810625e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8106258:	69fb      	ldr	r3, [r7, #28]
 810625a:	68ba      	ldr	r2, [r7, #8]
 810625c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810625e:	69fb      	ldr	r3, [r7, #28]
	}
 8106260:	4618      	mov	r0, r3
 8106262:	3720      	adds	r7, #32
 8106264:	46bd      	mov	sp, r7
 8106266:	bd80      	pop	{r7, pc}

08106268 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8106268:	b580      	push	{r7, lr}
 810626a:	b086      	sub	sp, #24
 810626c:	af00      	add	r7, sp, #0
 810626e:	6078      	str	r0, [r7, #4]
 8106270:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8106272:	687b      	ldr	r3, [r7, #4]
 8106274:	2b00      	cmp	r3, #0
 8106276:	d10b      	bne.n	8106290 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8106278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810627c:	f383 8811 	msr	BASEPRI, r3
 8106280:	f3bf 8f6f 	isb	sy
 8106284:	f3bf 8f4f 	dsb	sy
 8106288:	613b      	str	r3, [r7, #16]
}
 810628a:	bf00      	nop
 810628c:	bf00      	nop
 810628e:	e7fd      	b.n	810628c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8106290:	683a      	ldr	r2, [r7, #0]
 8106292:	687b      	ldr	r3, [r7, #4]
 8106294:	429a      	cmp	r2, r3
 8106296:	d90b      	bls.n	81062b0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8106298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810629c:	f383 8811 	msr	BASEPRI, r3
 81062a0:	f3bf 8f6f 	isb	sy
 81062a4:	f3bf 8f4f 	dsb	sy
 81062a8:	60fb      	str	r3, [r7, #12]
}
 81062aa:	bf00      	nop
 81062ac:	bf00      	nop
 81062ae:	e7fd      	b.n	81062ac <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 81062b0:	2202      	movs	r2, #2
 81062b2:	2100      	movs	r1, #0
 81062b4:	6878      	ldr	r0, [r7, #4]
 81062b6:	f7ff ff40 	bl	810613a <xQueueGenericCreate>
 81062ba:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 81062bc:	697b      	ldr	r3, [r7, #20]
 81062be:	2b00      	cmp	r3, #0
 81062c0:	d002      	beq.n	81062c8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 81062c2:	697b      	ldr	r3, [r7, #20]
 81062c4:	683a      	ldr	r2, [r7, #0]
 81062c6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 81062c8:	697b      	ldr	r3, [r7, #20]
	}
 81062ca:	4618      	mov	r0, r3
 81062cc:	3718      	adds	r7, #24
 81062ce:	46bd      	mov	sp, r7
 81062d0:	bd80      	pop	{r7, pc}
	...

081062d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 81062d4:	b580      	push	{r7, lr}
 81062d6:	b08e      	sub	sp, #56	@ 0x38
 81062d8:	af00      	add	r7, sp, #0
 81062da:	60f8      	str	r0, [r7, #12]
 81062dc:	60b9      	str	r1, [r7, #8]
 81062de:	607a      	str	r2, [r7, #4]
 81062e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 81062e2:	2300      	movs	r3, #0
 81062e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81062e6:	68fb      	ldr	r3, [r7, #12]
 81062e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 81062ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062ec:	2b00      	cmp	r3, #0
 81062ee:	d10b      	bne.n	8106308 <xQueueGenericSend+0x34>
	__asm volatile
 81062f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81062f4:	f383 8811 	msr	BASEPRI, r3
 81062f8:	f3bf 8f6f 	isb	sy
 81062fc:	f3bf 8f4f 	dsb	sy
 8106300:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8106302:	bf00      	nop
 8106304:	bf00      	nop
 8106306:	e7fd      	b.n	8106304 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106308:	68bb      	ldr	r3, [r7, #8]
 810630a:	2b00      	cmp	r3, #0
 810630c:	d103      	bne.n	8106316 <xQueueGenericSend+0x42>
 810630e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106312:	2b00      	cmp	r3, #0
 8106314:	d101      	bne.n	810631a <xQueueGenericSend+0x46>
 8106316:	2301      	movs	r3, #1
 8106318:	e000      	b.n	810631c <xQueueGenericSend+0x48>
 810631a:	2300      	movs	r3, #0
 810631c:	2b00      	cmp	r3, #0
 810631e:	d10b      	bne.n	8106338 <xQueueGenericSend+0x64>
	__asm volatile
 8106320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106324:	f383 8811 	msr	BASEPRI, r3
 8106328:	f3bf 8f6f 	isb	sy
 810632c:	f3bf 8f4f 	dsb	sy
 8106330:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8106332:	bf00      	nop
 8106334:	bf00      	nop
 8106336:	e7fd      	b.n	8106334 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8106338:	683b      	ldr	r3, [r7, #0]
 810633a:	2b02      	cmp	r3, #2
 810633c:	d103      	bne.n	8106346 <xQueueGenericSend+0x72>
 810633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106342:	2b01      	cmp	r3, #1
 8106344:	d101      	bne.n	810634a <xQueueGenericSend+0x76>
 8106346:	2301      	movs	r3, #1
 8106348:	e000      	b.n	810634c <xQueueGenericSend+0x78>
 810634a:	2300      	movs	r3, #0
 810634c:	2b00      	cmp	r3, #0
 810634e:	d10b      	bne.n	8106368 <xQueueGenericSend+0x94>
	__asm volatile
 8106350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106354:	f383 8811 	msr	BASEPRI, r3
 8106358:	f3bf 8f6f 	isb	sy
 810635c:	f3bf 8f4f 	dsb	sy
 8106360:	623b      	str	r3, [r7, #32]
}
 8106362:	bf00      	nop
 8106364:	bf00      	nop
 8106366:	e7fd      	b.n	8106364 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8106368:	f001 fd60 	bl	8107e2c <xTaskGetSchedulerState>
 810636c:	4603      	mov	r3, r0
 810636e:	2b00      	cmp	r3, #0
 8106370:	d102      	bne.n	8106378 <xQueueGenericSend+0xa4>
 8106372:	687b      	ldr	r3, [r7, #4]
 8106374:	2b00      	cmp	r3, #0
 8106376:	d101      	bne.n	810637c <xQueueGenericSend+0xa8>
 8106378:	2301      	movs	r3, #1
 810637a:	e000      	b.n	810637e <xQueueGenericSend+0xaa>
 810637c:	2300      	movs	r3, #0
 810637e:	2b00      	cmp	r3, #0
 8106380:	d10b      	bne.n	810639a <xQueueGenericSend+0xc6>
	__asm volatile
 8106382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106386:	f383 8811 	msr	BASEPRI, r3
 810638a:	f3bf 8f6f 	isb	sy
 810638e:	f3bf 8f4f 	dsb	sy
 8106392:	61fb      	str	r3, [r7, #28]
}
 8106394:	bf00      	nop
 8106396:	bf00      	nop
 8106398:	e7fd      	b.n	8106396 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810639a:	f7ff fcc5 	bl	8105d28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81063a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81063a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81063a6:	429a      	cmp	r2, r3
 81063a8:	d302      	bcc.n	81063b0 <xQueueGenericSend+0xdc>
 81063aa:	683b      	ldr	r3, [r7, #0]
 81063ac:	2b02      	cmp	r3, #2
 81063ae:	d129      	bne.n	8106404 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81063b0:	683a      	ldr	r2, [r7, #0]
 81063b2:	68b9      	ldr	r1, [r7, #8]
 81063b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81063b6:	f000 fc6d 	bl	8106c94 <prvCopyDataToQueue>
 81063ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81063bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81063be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81063c0:	2b00      	cmp	r3, #0
 81063c2:	d010      	beq.n	81063e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81063c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81063c6:	3324      	adds	r3, #36	@ 0x24
 81063c8:	4618      	mov	r0, r3
 81063ca:	f001 fb69 	bl	8107aa0 <xTaskRemoveFromEventList>
 81063ce:	4603      	mov	r3, r0
 81063d0:	2b00      	cmp	r3, #0
 81063d2:	d013      	beq.n	81063fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 81063d4:	4b3f      	ldr	r3, [pc, #252]	@ (81064d4 <xQueueGenericSend+0x200>)
 81063d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81063da:	601a      	str	r2, [r3, #0]
 81063dc:	f3bf 8f4f 	dsb	sy
 81063e0:	f3bf 8f6f 	isb	sy
 81063e4:	e00a      	b.n	81063fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 81063e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81063e8:	2b00      	cmp	r3, #0
 81063ea:	d007      	beq.n	81063fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 81063ec:	4b39      	ldr	r3, [pc, #228]	@ (81064d4 <xQueueGenericSend+0x200>)
 81063ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81063f2:	601a      	str	r2, [r3, #0]
 81063f4:	f3bf 8f4f 	dsb	sy
 81063f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 81063fc:	f7ff fcc6 	bl	8105d8c <vPortExitCritical>
				return pdPASS;
 8106400:	2301      	movs	r3, #1
 8106402:	e063      	b.n	81064cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8106404:	687b      	ldr	r3, [r7, #4]
 8106406:	2b00      	cmp	r3, #0
 8106408:	d103      	bne.n	8106412 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810640a:	f7ff fcbf 	bl	8105d8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810640e:	2300      	movs	r3, #0
 8106410:	e05c      	b.n	81064cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8106412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106414:	2b00      	cmp	r3, #0
 8106416:	d106      	bne.n	8106426 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8106418:	f107 0314 	add.w	r3, r7, #20
 810641c:	4618      	mov	r0, r3
 810641e:	f001 fba3 	bl	8107b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8106422:	2301      	movs	r3, #1
 8106424:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8106426:	f7ff fcb1 	bl	8105d8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810642a:	f001 f90b 	bl	8107644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810642e:	f7ff fc7b 	bl	8105d28 <vPortEnterCritical>
 8106432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106434:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106438:	b25b      	sxtb	r3, r3
 810643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810643e:	d103      	bne.n	8106448 <xQueueGenericSend+0x174>
 8106440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106442:	2200      	movs	r2, #0
 8106444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810644a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810644e:	b25b      	sxtb	r3, r3
 8106450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106454:	d103      	bne.n	810645e <xQueueGenericSend+0x18a>
 8106456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106458:	2200      	movs	r2, #0
 810645a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810645e:	f7ff fc95 	bl	8105d8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8106462:	1d3a      	adds	r2, r7, #4
 8106464:	f107 0314 	add.w	r3, r7, #20
 8106468:	4611      	mov	r1, r2
 810646a:	4618      	mov	r0, r3
 810646c:	f001 fb92 	bl	8107b94 <xTaskCheckForTimeOut>
 8106470:	4603      	mov	r3, r0
 8106472:	2b00      	cmp	r3, #0
 8106474:	d124      	bne.n	81064c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8106476:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106478:	f000 fd04 	bl	8106e84 <prvIsQueueFull>
 810647c:	4603      	mov	r3, r0
 810647e:	2b00      	cmp	r3, #0
 8106480:	d018      	beq.n	81064b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8106482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106484:	3310      	adds	r3, #16
 8106486:	687a      	ldr	r2, [r7, #4]
 8106488:	4611      	mov	r1, r2
 810648a:	4618      	mov	r0, r3
 810648c:	f001 fab6 	bl	81079fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8106490:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106492:	f000 fc8f 	bl	8106db4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8106496:	f001 f8e3 	bl	8107660 <xTaskResumeAll>
 810649a:	4603      	mov	r3, r0
 810649c:	2b00      	cmp	r3, #0
 810649e:	f47f af7c 	bne.w	810639a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 81064a2:	4b0c      	ldr	r3, [pc, #48]	@ (81064d4 <xQueueGenericSend+0x200>)
 81064a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81064a8:	601a      	str	r2, [r3, #0]
 81064aa:	f3bf 8f4f 	dsb	sy
 81064ae:	f3bf 8f6f 	isb	sy
 81064b2:	e772      	b.n	810639a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 81064b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81064b6:	f000 fc7d 	bl	8106db4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81064ba:	f001 f8d1 	bl	8107660 <xTaskResumeAll>
 81064be:	e76c      	b.n	810639a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 81064c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81064c2:	f000 fc77 	bl	8106db4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81064c6:	f001 f8cb 	bl	8107660 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 81064ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 81064cc:	4618      	mov	r0, r3
 81064ce:	3738      	adds	r7, #56	@ 0x38
 81064d0:	46bd      	mov	sp, r7
 81064d2:	bd80      	pop	{r7, pc}
 81064d4:	e000ed04 	.word	0xe000ed04

081064d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 81064d8:	b580      	push	{r7, lr}
 81064da:	b090      	sub	sp, #64	@ 0x40
 81064dc:	af00      	add	r7, sp, #0
 81064de:	60f8      	str	r0, [r7, #12]
 81064e0:	60b9      	str	r1, [r7, #8]
 81064e2:	607a      	str	r2, [r7, #4]
 81064e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 81064e6:	68fb      	ldr	r3, [r7, #12]
 81064e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 81064ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81064ec:	2b00      	cmp	r3, #0
 81064ee:	d10b      	bne.n	8106508 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 81064f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81064f4:	f383 8811 	msr	BASEPRI, r3
 81064f8:	f3bf 8f6f 	isb	sy
 81064fc:	f3bf 8f4f 	dsb	sy
 8106500:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8106502:	bf00      	nop
 8106504:	bf00      	nop
 8106506:	e7fd      	b.n	8106504 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106508:	68bb      	ldr	r3, [r7, #8]
 810650a:	2b00      	cmp	r3, #0
 810650c:	d103      	bne.n	8106516 <xQueueGenericSendFromISR+0x3e>
 810650e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106512:	2b00      	cmp	r3, #0
 8106514:	d101      	bne.n	810651a <xQueueGenericSendFromISR+0x42>
 8106516:	2301      	movs	r3, #1
 8106518:	e000      	b.n	810651c <xQueueGenericSendFromISR+0x44>
 810651a:	2300      	movs	r3, #0
 810651c:	2b00      	cmp	r3, #0
 810651e:	d10b      	bne.n	8106538 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8106520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106524:	f383 8811 	msr	BASEPRI, r3
 8106528:	f3bf 8f6f 	isb	sy
 810652c:	f3bf 8f4f 	dsb	sy
 8106530:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8106532:	bf00      	nop
 8106534:	bf00      	nop
 8106536:	e7fd      	b.n	8106534 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8106538:	683b      	ldr	r3, [r7, #0]
 810653a:	2b02      	cmp	r3, #2
 810653c:	d103      	bne.n	8106546 <xQueueGenericSendFromISR+0x6e>
 810653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106542:	2b01      	cmp	r3, #1
 8106544:	d101      	bne.n	810654a <xQueueGenericSendFromISR+0x72>
 8106546:	2301      	movs	r3, #1
 8106548:	e000      	b.n	810654c <xQueueGenericSendFromISR+0x74>
 810654a:	2300      	movs	r3, #0
 810654c:	2b00      	cmp	r3, #0
 810654e:	d10b      	bne.n	8106568 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8106550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106554:	f383 8811 	msr	BASEPRI, r3
 8106558:	f3bf 8f6f 	isb	sy
 810655c:	f3bf 8f4f 	dsb	sy
 8106560:	623b      	str	r3, [r7, #32]
}
 8106562:	bf00      	nop
 8106564:	bf00      	nop
 8106566:	e7fd      	b.n	8106564 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8106568:	f7ff fcbe 	bl	8105ee8 <vPortValidateInterruptPriority>
	__asm volatile
 810656c:	f3ef 8211 	mrs	r2, BASEPRI
 8106570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106574:	f383 8811 	msr	BASEPRI, r3
 8106578:	f3bf 8f6f 	isb	sy
 810657c:	f3bf 8f4f 	dsb	sy
 8106580:	61fa      	str	r2, [r7, #28]
 8106582:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8106584:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8106586:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8106588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810658a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810658c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810658e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106590:	429a      	cmp	r2, r3
 8106592:	d302      	bcc.n	810659a <xQueueGenericSendFromISR+0xc2>
 8106594:	683b      	ldr	r3, [r7, #0]
 8106596:	2b02      	cmp	r3, #2
 8106598:	d12f      	bne.n	81065fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810659a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810659c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81065a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 81065a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81065a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81065a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81065aa:	683a      	ldr	r2, [r7, #0]
 81065ac:	68b9      	ldr	r1, [r7, #8]
 81065ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 81065b0:	f000 fb70 	bl	8106c94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 81065b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 81065b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81065bc:	d112      	bne.n	81065e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81065be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81065c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81065c2:	2b00      	cmp	r3, #0
 81065c4:	d016      	beq.n	81065f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81065c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81065c8:	3324      	adds	r3, #36	@ 0x24
 81065ca:	4618      	mov	r0, r3
 81065cc:	f001 fa68 	bl	8107aa0 <xTaskRemoveFromEventList>
 81065d0:	4603      	mov	r3, r0
 81065d2:	2b00      	cmp	r3, #0
 81065d4:	d00e      	beq.n	81065f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 81065d6:	687b      	ldr	r3, [r7, #4]
 81065d8:	2b00      	cmp	r3, #0
 81065da:	d00b      	beq.n	81065f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 81065dc:	687b      	ldr	r3, [r7, #4]
 81065de:	2201      	movs	r2, #1
 81065e0:	601a      	str	r2, [r3, #0]
 81065e2:	e007      	b.n	81065f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 81065e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 81065e8:	3301      	adds	r3, #1
 81065ea:	b2db      	uxtb	r3, r3
 81065ec:	b25a      	sxtb	r2, r3
 81065ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81065f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 81065f4:	2301      	movs	r3, #1
 81065f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 81065f8:	e001      	b.n	81065fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 81065fa:	2300      	movs	r3, #0
 81065fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81065fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106600:	617b      	str	r3, [r7, #20]
	__asm volatile
 8106602:	697b      	ldr	r3, [r7, #20]
 8106604:	f383 8811 	msr	BASEPRI, r3
}
 8106608:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810660a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810660c:	4618      	mov	r0, r3
 810660e:	3740      	adds	r7, #64	@ 0x40
 8106610:	46bd      	mov	sp, r7
 8106612:	bd80      	pop	{r7, pc}

08106614 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8106614:	b580      	push	{r7, lr}
 8106616:	b08e      	sub	sp, #56	@ 0x38
 8106618:	af00      	add	r7, sp, #0
 810661a:	6078      	str	r0, [r7, #4]
 810661c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810661e:	687b      	ldr	r3, [r7, #4]
 8106620:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8106622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106624:	2b00      	cmp	r3, #0
 8106626:	d10b      	bne.n	8106640 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8106628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810662c:	f383 8811 	msr	BASEPRI, r3
 8106630:	f3bf 8f6f 	isb	sy
 8106634:	f3bf 8f4f 	dsb	sy
 8106638:	623b      	str	r3, [r7, #32]
}
 810663a:	bf00      	nop
 810663c:	bf00      	nop
 810663e:	e7fd      	b.n	810663c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8106640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106644:	2b00      	cmp	r3, #0
 8106646:	d00b      	beq.n	8106660 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8106648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810664c:	f383 8811 	msr	BASEPRI, r3
 8106650:	f3bf 8f6f 	isb	sy
 8106654:	f3bf 8f4f 	dsb	sy
 8106658:	61fb      	str	r3, [r7, #28]
}
 810665a:	bf00      	nop
 810665c:	bf00      	nop
 810665e:	e7fd      	b.n	810665c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8106660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106662:	681b      	ldr	r3, [r3, #0]
 8106664:	2b00      	cmp	r3, #0
 8106666:	d103      	bne.n	8106670 <xQueueGiveFromISR+0x5c>
 8106668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810666a:	689b      	ldr	r3, [r3, #8]
 810666c:	2b00      	cmp	r3, #0
 810666e:	d101      	bne.n	8106674 <xQueueGiveFromISR+0x60>
 8106670:	2301      	movs	r3, #1
 8106672:	e000      	b.n	8106676 <xQueueGiveFromISR+0x62>
 8106674:	2300      	movs	r3, #0
 8106676:	2b00      	cmp	r3, #0
 8106678:	d10b      	bne.n	8106692 <xQueueGiveFromISR+0x7e>
	__asm volatile
 810667a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810667e:	f383 8811 	msr	BASEPRI, r3
 8106682:	f3bf 8f6f 	isb	sy
 8106686:	f3bf 8f4f 	dsb	sy
 810668a:	61bb      	str	r3, [r7, #24]
}
 810668c:	bf00      	nop
 810668e:	bf00      	nop
 8106690:	e7fd      	b.n	810668e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8106692:	f7ff fc29 	bl	8105ee8 <vPortValidateInterruptPriority>
	__asm volatile
 8106696:	f3ef 8211 	mrs	r2, BASEPRI
 810669a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810669e:	f383 8811 	msr	BASEPRI, r3
 81066a2:	f3bf 8f6f 	isb	sy
 81066a6:	f3bf 8f4f 	dsb	sy
 81066aa:	617a      	str	r2, [r7, #20]
 81066ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 81066ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81066b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81066b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81066b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 81066b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81066ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81066bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81066be:	429a      	cmp	r2, r3
 81066c0:	d22b      	bcs.n	810671a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 81066c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81066c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81066c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81066cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81066ce:	1c5a      	adds	r2, r3, #1
 81066d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81066d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 81066d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 81066d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81066dc:	d112      	bne.n	8106704 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81066de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81066e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81066e2:	2b00      	cmp	r3, #0
 81066e4:	d016      	beq.n	8106714 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81066e8:	3324      	adds	r3, #36	@ 0x24
 81066ea:	4618      	mov	r0, r3
 81066ec:	f001 f9d8 	bl	8107aa0 <xTaskRemoveFromEventList>
 81066f0:	4603      	mov	r3, r0
 81066f2:	2b00      	cmp	r3, #0
 81066f4:	d00e      	beq.n	8106714 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 81066f6:	683b      	ldr	r3, [r7, #0]
 81066f8:	2b00      	cmp	r3, #0
 81066fa:	d00b      	beq.n	8106714 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 81066fc:	683b      	ldr	r3, [r7, #0]
 81066fe:	2201      	movs	r2, #1
 8106700:	601a      	str	r2, [r3, #0]
 8106702:	e007      	b.n	8106714 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8106704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8106708:	3301      	adds	r3, #1
 810670a:	b2db      	uxtb	r3, r3
 810670c:	b25a      	sxtb	r2, r3
 810670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8106714:	2301      	movs	r3, #1
 8106716:	637b      	str	r3, [r7, #52]	@ 0x34
 8106718:	e001      	b.n	810671e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810671a:	2300      	movs	r3, #0
 810671c:	637b      	str	r3, [r7, #52]	@ 0x34
 810671e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106720:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8106722:	68fb      	ldr	r3, [r7, #12]
 8106724:	f383 8811 	msr	BASEPRI, r3
}
 8106728:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810672a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 810672c:	4618      	mov	r0, r3
 810672e:	3738      	adds	r7, #56	@ 0x38
 8106730:	46bd      	mov	sp, r7
 8106732:	bd80      	pop	{r7, pc}

08106734 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8106734:	b580      	push	{r7, lr}
 8106736:	b08c      	sub	sp, #48	@ 0x30
 8106738:	af00      	add	r7, sp, #0
 810673a:	60f8      	str	r0, [r7, #12]
 810673c:	60b9      	str	r1, [r7, #8]
 810673e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8106740:	2300      	movs	r3, #0
 8106742:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8106744:	68fb      	ldr	r3, [r7, #12]
 8106746:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8106748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810674a:	2b00      	cmp	r3, #0
 810674c:	d10b      	bne.n	8106766 <xQueueReceive+0x32>
	__asm volatile
 810674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106752:	f383 8811 	msr	BASEPRI, r3
 8106756:	f3bf 8f6f 	isb	sy
 810675a:	f3bf 8f4f 	dsb	sy
 810675e:	623b      	str	r3, [r7, #32]
}
 8106760:	bf00      	nop
 8106762:	bf00      	nop
 8106764:	e7fd      	b.n	8106762 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106766:	68bb      	ldr	r3, [r7, #8]
 8106768:	2b00      	cmp	r3, #0
 810676a:	d103      	bne.n	8106774 <xQueueReceive+0x40>
 810676c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810676e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106770:	2b00      	cmp	r3, #0
 8106772:	d101      	bne.n	8106778 <xQueueReceive+0x44>
 8106774:	2301      	movs	r3, #1
 8106776:	e000      	b.n	810677a <xQueueReceive+0x46>
 8106778:	2300      	movs	r3, #0
 810677a:	2b00      	cmp	r3, #0
 810677c:	d10b      	bne.n	8106796 <xQueueReceive+0x62>
	__asm volatile
 810677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106782:	f383 8811 	msr	BASEPRI, r3
 8106786:	f3bf 8f6f 	isb	sy
 810678a:	f3bf 8f4f 	dsb	sy
 810678e:	61fb      	str	r3, [r7, #28]
}
 8106790:	bf00      	nop
 8106792:	bf00      	nop
 8106794:	e7fd      	b.n	8106792 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8106796:	f001 fb49 	bl	8107e2c <xTaskGetSchedulerState>
 810679a:	4603      	mov	r3, r0
 810679c:	2b00      	cmp	r3, #0
 810679e:	d102      	bne.n	81067a6 <xQueueReceive+0x72>
 81067a0:	687b      	ldr	r3, [r7, #4]
 81067a2:	2b00      	cmp	r3, #0
 81067a4:	d101      	bne.n	81067aa <xQueueReceive+0x76>
 81067a6:	2301      	movs	r3, #1
 81067a8:	e000      	b.n	81067ac <xQueueReceive+0x78>
 81067aa:	2300      	movs	r3, #0
 81067ac:	2b00      	cmp	r3, #0
 81067ae:	d10b      	bne.n	81067c8 <xQueueReceive+0x94>
	__asm volatile
 81067b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81067b4:	f383 8811 	msr	BASEPRI, r3
 81067b8:	f3bf 8f6f 	isb	sy
 81067bc:	f3bf 8f4f 	dsb	sy
 81067c0:	61bb      	str	r3, [r7, #24]
}
 81067c2:	bf00      	nop
 81067c4:	bf00      	nop
 81067c6:	e7fd      	b.n	81067c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81067c8:	f7ff faae 	bl	8105d28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81067cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81067ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81067d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81067d4:	2b00      	cmp	r3, #0
 81067d6:	d01f      	beq.n	8106818 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 81067d8:	68b9      	ldr	r1, [r7, #8]
 81067da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81067dc:	f000 fac4 	bl	8106d68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 81067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81067e2:	1e5a      	subs	r2, r3, #1
 81067e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81067e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81067e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81067ea:	691b      	ldr	r3, [r3, #16]
 81067ec:	2b00      	cmp	r3, #0
 81067ee:	d00f      	beq.n	8106810 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81067f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81067f2:	3310      	adds	r3, #16
 81067f4:	4618      	mov	r0, r3
 81067f6:	f001 f953 	bl	8107aa0 <xTaskRemoveFromEventList>
 81067fa:	4603      	mov	r3, r0
 81067fc:	2b00      	cmp	r3, #0
 81067fe:	d007      	beq.n	8106810 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8106800:	4b3c      	ldr	r3, [pc, #240]	@ (81068f4 <xQueueReceive+0x1c0>)
 8106802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106806:	601a      	str	r2, [r3, #0]
 8106808:	f3bf 8f4f 	dsb	sy
 810680c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8106810:	f7ff fabc 	bl	8105d8c <vPortExitCritical>
				return pdPASS;
 8106814:	2301      	movs	r3, #1
 8106816:	e069      	b.n	81068ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	2b00      	cmp	r3, #0
 810681c:	d103      	bne.n	8106826 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810681e:	f7ff fab5 	bl	8105d8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8106822:	2300      	movs	r3, #0
 8106824:	e062      	b.n	81068ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8106826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106828:	2b00      	cmp	r3, #0
 810682a:	d106      	bne.n	810683a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810682c:	f107 0310 	add.w	r3, r7, #16
 8106830:	4618      	mov	r0, r3
 8106832:	f001 f999 	bl	8107b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8106836:	2301      	movs	r3, #1
 8106838:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810683a:	f7ff faa7 	bl	8105d8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810683e:	f000 ff01 	bl	8107644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8106842:	f7ff fa71 	bl	8105d28 <vPortEnterCritical>
 8106846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106848:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810684c:	b25b      	sxtb	r3, r3
 810684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106852:	d103      	bne.n	810685c <xQueueReceive+0x128>
 8106854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106856:	2200      	movs	r2, #0
 8106858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810685c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810685e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106862:	b25b      	sxtb	r3, r3
 8106864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106868:	d103      	bne.n	8106872 <xQueueReceive+0x13e>
 810686a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810686c:	2200      	movs	r2, #0
 810686e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106872:	f7ff fa8b 	bl	8105d8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8106876:	1d3a      	adds	r2, r7, #4
 8106878:	f107 0310 	add.w	r3, r7, #16
 810687c:	4611      	mov	r1, r2
 810687e:	4618      	mov	r0, r3
 8106880:	f001 f988 	bl	8107b94 <xTaskCheckForTimeOut>
 8106884:	4603      	mov	r3, r0
 8106886:	2b00      	cmp	r3, #0
 8106888:	d123      	bne.n	81068d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810688a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810688c:	f000 fae4 	bl	8106e58 <prvIsQueueEmpty>
 8106890:	4603      	mov	r3, r0
 8106892:	2b00      	cmp	r3, #0
 8106894:	d017      	beq.n	81068c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8106896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106898:	3324      	adds	r3, #36	@ 0x24
 810689a:	687a      	ldr	r2, [r7, #4]
 810689c:	4611      	mov	r1, r2
 810689e:	4618      	mov	r0, r3
 81068a0:	f001 f8ac 	bl	81079fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81068a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81068a6:	f000 fa85 	bl	8106db4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81068aa:	f000 fed9 	bl	8107660 <xTaskResumeAll>
 81068ae:	4603      	mov	r3, r0
 81068b0:	2b00      	cmp	r3, #0
 81068b2:	d189      	bne.n	81067c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 81068b4:	4b0f      	ldr	r3, [pc, #60]	@ (81068f4 <xQueueReceive+0x1c0>)
 81068b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81068ba:	601a      	str	r2, [r3, #0]
 81068bc:	f3bf 8f4f 	dsb	sy
 81068c0:	f3bf 8f6f 	isb	sy
 81068c4:	e780      	b.n	81067c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 81068c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81068c8:	f000 fa74 	bl	8106db4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81068cc:	f000 fec8 	bl	8107660 <xTaskResumeAll>
 81068d0:	e77a      	b.n	81067c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 81068d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81068d4:	f000 fa6e 	bl	8106db4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81068d8:	f000 fec2 	bl	8107660 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81068dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81068de:	f000 fabb 	bl	8106e58 <prvIsQueueEmpty>
 81068e2:	4603      	mov	r3, r0
 81068e4:	2b00      	cmp	r3, #0
 81068e6:	f43f af6f 	beq.w	81067c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 81068ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 81068ec:	4618      	mov	r0, r3
 81068ee:	3730      	adds	r7, #48	@ 0x30
 81068f0:	46bd      	mov	sp, r7
 81068f2:	bd80      	pop	{r7, pc}
 81068f4:	e000ed04 	.word	0xe000ed04

081068f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 81068f8:	b580      	push	{r7, lr}
 81068fa:	b08e      	sub	sp, #56	@ 0x38
 81068fc:	af00      	add	r7, sp, #0
 81068fe:	6078      	str	r0, [r7, #4]
 8106900:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8106902:	2300      	movs	r3, #0
 8106904:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 810690a:	2300      	movs	r3, #0
 810690c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810690e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106910:	2b00      	cmp	r3, #0
 8106912:	d10b      	bne.n	810692c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8106914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106918:	f383 8811 	msr	BASEPRI, r3
 810691c:	f3bf 8f6f 	isb	sy
 8106920:	f3bf 8f4f 	dsb	sy
 8106924:	623b      	str	r3, [r7, #32]
}
 8106926:	bf00      	nop
 8106928:	bf00      	nop
 810692a:	e7fd      	b.n	8106928 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810692c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810692e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106930:	2b00      	cmp	r3, #0
 8106932:	d00b      	beq.n	810694c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8106934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106938:	f383 8811 	msr	BASEPRI, r3
 810693c:	f3bf 8f6f 	isb	sy
 8106940:	f3bf 8f4f 	dsb	sy
 8106944:	61fb      	str	r3, [r7, #28]
}
 8106946:	bf00      	nop
 8106948:	bf00      	nop
 810694a:	e7fd      	b.n	8106948 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810694c:	f001 fa6e 	bl	8107e2c <xTaskGetSchedulerState>
 8106950:	4603      	mov	r3, r0
 8106952:	2b00      	cmp	r3, #0
 8106954:	d102      	bne.n	810695c <xQueueSemaphoreTake+0x64>
 8106956:	683b      	ldr	r3, [r7, #0]
 8106958:	2b00      	cmp	r3, #0
 810695a:	d101      	bne.n	8106960 <xQueueSemaphoreTake+0x68>
 810695c:	2301      	movs	r3, #1
 810695e:	e000      	b.n	8106962 <xQueueSemaphoreTake+0x6a>
 8106960:	2300      	movs	r3, #0
 8106962:	2b00      	cmp	r3, #0
 8106964:	d10b      	bne.n	810697e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8106966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810696a:	f383 8811 	msr	BASEPRI, r3
 810696e:	f3bf 8f6f 	isb	sy
 8106972:	f3bf 8f4f 	dsb	sy
 8106976:	61bb      	str	r3, [r7, #24]
}
 8106978:	bf00      	nop
 810697a:	bf00      	nop
 810697c:	e7fd      	b.n	810697a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810697e:	f7ff f9d3 	bl	8105d28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8106982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106986:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8106988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810698a:	2b00      	cmp	r3, #0
 810698c:	d024      	beq.n	81069d8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 810698e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106990:	1e5a      	subs	r2, r3, #1
 8106992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106994:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8106996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106998:	681b      	ldr	r3, [r3, #0]
 810699a:	2b00      	cmp	r3, #0
 810699c:	d104      	bne.n	81069a8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 810699e:	f001 fbbf 	bl	8108120 <pvTaskIncrementMutexHeldCount>
 81069a2:	4602      	mov	r2, r0
 81069a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81069a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81069a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81069aa:	691b      	ldr	r3, [r3, #16]
 81069ac:	2b00      	cmp	r3, #0
 81069ae:	d00f      	beq.n	81069d0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81069b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81069b2:	3310      	adds	r3, #16
 81069b4:	4618      	mov	r0, r3
 81069b6:	f001 f873 	bl	8107aa0 <xTaskRemoveFromEventList>
 81069ba:	4603      	mov	r3, r0
 81069bc:	2b00      	cmp	r3, #0
 81069be:	d007      	beq.n	81069d0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 81069c0:	4b54      	ldr	r3, [pc, #336]	@ (8106b14 <xQueueSemaphoreTake+0x21c>)
 81069c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81069c6:	601a      	str	r2, [r3, #0]
 81069c8:	f3bf 8f4f 	dsb	sy
 81069cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 81069d0:	f7ff f9dc 	bl	8105d8c <vPortExitCritical>
				return pdPASS;
 81069d4:	2301      	movs	r3, #1
 81069d6:	e098      	b.n	8106b0a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81069d8:	683b      	ldr	r3, [r7, #0]
 81069da:	2b00      	cmp	r3, #0
 81069dc:	d112      	bne.n	8106a04 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 81069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81069e0:	2b00      	cmp	r3, #0
 81069e2:	d00b      	beq.n	81069fc <xQueueSemaphoreTake+0x104>
	__asm volatile
 81069e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81069e8:	f383 8811 	msr	BASEPRI, r3
 81069ec:	f3bf 8f6f 	isb	sy
 81069f0:	f3bf 8f4f 	dsb	sy
 81069f4:	617b      	str	r3, [r7, #20]
}
 81069f6:	bf00      	nop
 81069f8:	bf00      	nop
 81069fa:	e7fd      	b.n	81069f8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 81069fc:	f7ff f9c6 	bl	8105d8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8106a00:	2300      	movs	r3, #0
 8106a02:	e082      	b.n	8106b0a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8106a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106a06:	2b00      	cmp	r3, #0
 8106a08:	d106      	bne.n	8106a18 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8106a0a:	f107 030c 	add.w	r3, r7, #12
 8106a0e:	4618      	mov	r0, r3
 8106a10:	f001 f8aa 	bl	8107b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8106a14:	2301      	movs	r3, #1
 8106a16:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8106a18:	f7ff f9b8 	bl	8105d8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8106a1c:	f000 fe12 	bl	8107644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8106a20:	f7ff f982 	bl	8105d28 <vPortEnterCritical>
 8106a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106a26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106a2a:	b25b      	sxtb	r3, r3
 8106a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106a30:	d103      	bne.n	8106a3a <xQueueSemaphoreTake+0x142>
 8106a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106a34:	2200      	movs	r2, #0
 8106a36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106a40:	b25b      	sxtb	r3, r3
 8106a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106a46:	d103      	bne.n	8106a50 <xQueueSemaphoreTake+0x158>
 8106a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106a4a:	2200      	movs	r2, #0
 8106a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106a50:	f7ff f99c 	bl	8105d8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8106a54:	463a      	mov	r2, r7
 8106a56:	f107 030c 	add.w	r3, r7, #12
 8106a5a:	4611      	mov	r1, r2
 8106a5c:	4618      	mov	r0, r3
 8106a5e:	f001 f899 	bl	8107b94 <xTaskCheckForTimeOut>
 8106a62:	4603      	mov	r3, r0
 8106a64:	2b00      	cmp	r3, #0
 8106a66:	d132      	bne.n	8106ace <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8106a68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8106a6a:	f000 f9f5 	bl	8106e58 <prvIsQueueEmpty>
 8106a6e:	4603      	mov	r3, r0
 8106a70:	2b00      	cmp	r3, #0
 8106a72:	d026      	beq.n	8106ac2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8106a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106a76:	681b      	ldr	r3, [r3, #0]
 8106a78:	2b00      	cmp	r3, #0
 8106a7a:	d109      	bne.n	8106a90 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8106a7c:	f7ff f954 	bl	8105d28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8106a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106a82:	689b      	ldr	r3, [r3, #8]
 8106a84:	4618      	mov	r0, r3
 8106a86:	f001 f9ef 	bl	8107e68 <xTaskPriorityInherit>
 8106a8a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8106a8c:	f7ff f97e 	bl	8105d8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8106a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106a92:	3324      	adds	r3, #36	@ 0x24
 8106a94:	683a      	ldr	r2, [r7, #0]
 8106a96:	4611      	mov	r1, r2
 8106a98:	4618      	mov	r0, r3
 8106a9a:	f000 ffaf 	bl	81079fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8106a9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8106aa0:	f000 f988 	bl	8106db4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8106aa4:	f000 fddc 	bl	8107660 <xTaskResumeAll>
 8106aa8:	4603      	mov	r3, r0
 8106aaa:	2b00      	cmp	r3, #0
 8106aac:	f47f af67 	bne.w	810697e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8106ab0:	4b18      	ldr	r3, [pc, #96]	@ (8106b14 <xQueueSemaphoreTake+0x21c>)
 8106ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106ab6:	601a      	str	r2, [r3, #0]
 8106ab8:	f3bf 8f4f 	dsb	sy
 8106abc:	f3bf 8f6f 	isb	sy
 8106ac0:	e75d      	b.n	810697e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8106ac2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8106ac4:	f000 f976 	bl	8106db4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8106ac8:	f000 fdca 	bl	8107660 <xTaskResumeAll>
 8106acc:	e757      	b.n	810697e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8106ace:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8106ad0:	f000 f970 	bl	8106db4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8106ad4:	f000 fdc4 	bl	8107660 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8106ad8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8106ada:	f000 f9bd 	bl	8106e58 <prvIsQueueEmpty>
 8106ade:	4603      	mov	r3, r0
 8106ae0:	2b00      	cmp	r3, #0
 8106ae2:	f43f af4c 	beq.w	810697e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8106ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106ae8:	2b00      	cmp	r3, #0
 8106aea:	d00d      	beq.n	8106b08 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8106aec:	f7ff f91c 	bl	8105d28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8106af0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8106af2:	f000 f8b7 	bl	8106c64 <prvGetDisinheritPriorityAfterTimeout>
 8106af6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8106af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106afa:	689b      	ldr	r3, [r3, #8]
 8106afc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8106afe:	4618      	mov	r0, r3
 8106b00:	f001 fa8a 	bl	8108018 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8106b04:	f7ff f942 	bl	8105d8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8106b08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8106b0a:	4618      	mov	r0, r3
 8106b0c:	3738      	adds	r7, #56	@ 0x38
 8106b0e:	46bd      	mov	sp, r7
 8106b10:	bd80      	pop	{r7, pc}
 8106b12:	bf00      	nop
 8106b14:	e000ed04 	.word	0xe000ed04

08106b18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8106b18:	b580      	push	{r7, lr}
 8106b1a:	b08e      	sub	sp, #56	@ 0x38
 8106b1c:	af00      	add	r7, sp, #0
 8106b1e:	60f8      	str	r0, [r7, #12]
 8106b20:	60b9      	str	r1, [r7, #8]
 8106b22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8106b24:	68fb      	ldr	r3, [r7, #12]
 8106b26:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8106b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106b2a:	2b00      	cmp	r3, #0
 8106b2c:	d10b      	bne.n	8106b46 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8106b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106b32:	f383 8811 	msr	BASEPRI, r3
 8106b36:	f3bf 8f6f 	isb	sy
 8106b3a:	f3bf 8f4f 	dsb	sy
 8106b3e:	623b      	str	r3, [r7, #32]
}
 8106b40:	bf00      	nop
 8106b42:	bf00      	nop
 8106b44:	e7fd      	b.n	8106b42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106b46:	68bb      	ldr	r3, [r7, #8]
 8106b48:	2b00      	cmp	r3, #0
 8106b4a:	d103      	bne.n	8106b54 <xQueueReceiveFromISR+0x3c>
 8106b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106b50:	2b00      	cmp	r3, #0
 8106b52:	d101      	bne.n	8106b58 <xQueueReceiveFromISR+0x40>
 8106b54:	2301      	movs	r3, #1
 8106b56:	e000      	b.n	8106b5a <xQueueReceiveFromISR+0x42>
 8106b58:	2300      	movs	r3, #0
 8106b5a:	2b00      	cmp	r3, #0
 8106b5c:	d10b      	bne.n	8106b76 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8106b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106b62:	f383 8811 	msr	BASEPRI, r3
 8106b66:	f3bf 8f6f 	isb	sy
 8106b6a:	f3bf 8f4f 	dsb	sy
 8106b6e:	61fb      	str	r3, [r7, #28]
}
 8106b70:	bf00      	nop
 8106b72:	bf00      	nop
 8106b74:	e7fd      	b.n	8106b72 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8106b76:	f7ff f9b7 	bl	8105ee8 <vPortValidateInterruptPriority>
	__asm volatile
 8106b7a:	f3ef 8211 	mrs	r2, BASEPRI
 8106b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106b82:	f383 8811 	msr	BASEPRI, r3
 8106b86:	f3bf 8f6f 	isb	sy
 8106b8a:	f3bf 8f4f 	dsb	sy
 8106b8e:	61ba      	str	r2, [r7, #24]
 8106b90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8106b92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8106b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8106b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106b9a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8106b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106b9e:	2b00      	cmp	r3, #0
 8106ba0:	d02f      	beq.n	8106c02 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8106ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106ba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8106bac:	68b9      	ldr	r1, [r7, #8]
 8106bae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106bb0:	f000 f8da 	bl	8106d68 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8106bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106bb6:	1e5a      	subs	r2, r3, #1
 8106bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106bba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8106bbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8106bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106bc4:	d112      	bne.n	8106bec <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8106bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106bc8:	691b      	ldr	r3, [r3, #16]
 8106bca:	2b00      	cmp	r3, #0
 8106bcc:	d016      	beq.n	8106bfc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8106bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106bd0:	3310      	adds	r3, #16
 8106bd2:	4618      	mov	r0, r3
 8106bd4:	f000 ff64 	bl	8107aa0 <xTaskRemoveFromEventList>
 8106bd8:	4603      	mov	r3, r0
 8106bda:	2b00      	cmp	r3, #0
 8106bdc:	d00e      	beq.n	8106bfc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8106bde:	687b      	ldr	r3, [r7, #4]
 8106be0:	2b00      	cmp	r3, #0
 8106be2:	d00b      	beq.n	8106bfc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8106be4:	687b      	ldr	r3, [r7, #4]
 8106be6:	2201      	movs	r2, #1
 8106be8:	601a      	str	r2, [r3, #0]
 8106bea:	e007      	b.n	8106bfc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8106bec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8106bf0:	3301      	adds	r3, #1
 8106bf2:	b2db      	uxtb	r3, r3
 8106bf4:	b25a      	sxtb	r2, r3
 8106bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8106bfc:	2301      	movs	r3, #1
 8106bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8106c00:	e001      	b.n	8106c06 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8106c02:	2300      	movs	r3, #0
 8106c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8106c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106c08:	613b      	str	r3, [r7, #16]
	__asm volatile
 8106c0a:	693b      	ldr	r3, [r7, #16]
 8106c0c:	f383 8811 	msr	BASEPRI, r3
}
 8106c10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8106c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8106c14:	4618      	mov	r0, r3
 8106c16:	3738      	adds	r7, #56	@ 0x38
 8106c18:	46bd      	mov	sp, r7
 8106c1a:	bd80      	pop	{r7, pc}

08106c1c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8106c1c:	b580      	push	{r7, lr}
 8106c1e:	b084      	sub	sp, #16
 8106c20:	af00      	add	r7, sp, #0
 8106c22:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8106c24:	687b      	ldr	r3, [r7, #4]
 8106c26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8106c28:	68fb      	ldr	r3, [r7, #12]
 8106c2a:	2b00      	cmp	r3, #0
 8106c2c:	d10b      	bne.n	8106c46 <vQueueDelete+0x2a>
	__asm volatile
 8106c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106c32:	f383 8811 	msr	BASEPRI, r3
 8106c36:	f3bf 8f6f 	isb	sy
 8106c3a:	f3bf 8f4f 	dsb	sy
 8106c3e:	60bb      	str	r3, [r7, #8]
}
 8106c40:	bf00      	nop
 8106c42:	bf00      	nop
 8106c44:	e7fd      	b.n	8106c42 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8106c46:	68f8      	ldr	r0, [r7, #12]
 8106c48:	f000 f95e 	bl	8106f08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8106c4c:	68fb      	ldr	r3, [r7, #12]
 8106c4e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8106c52:	2b00      	cmp	r3, #0
 8106c54:	d102      	bne.n	8106c5c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8106c56:	68f8      	ldr	r0, [r7, #12]
 8106c58:	f7fe fd60 	bl	810571c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8106c5c:	bf00      	nop
 8106c5e:	3710      	adds	r7, #16
 8106c60:	46bd      	mov	sp, r7
 8106c62:	bd80      	pop	{r7, pc}

08106c64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8106c64:	b480      	push	{r7}
 8106c66:	b085      	sub	sp, #20
 8106c68:	af00      	add	r7, sp, #0
 8106c6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8106c6c:	687b      	ldr	r3, [r7, #4]
 8106c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106c70:	2b00      	cmp	r3, #0
 8106c72:	d006      	beq.n	8106c82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8106c74:	687b      	ldr	r3, [r7, #4]
 8106c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106c78:	681b      	ldr	r3, [r3, #0]
 8106c7a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8106c7e:	60fb      	str	r3, [r7, #12]
 8106c80:	e001      	b.n	8106c86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8106c82:	2300      	movs	r3, #0
 8106c84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8106c86:	68fb      	ldr	r3, [r7, #12]
	}
 8106c88:	4618      	mov	r0, r3
 8106c8a:	3714      	adds	r7, #20
 8106c8c:	46bd      	mov	sp, r7
 8106c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c92:	4770      	bx	lr

08106c94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8106c94:	b580      	push	{r7, lr}
 8106c96:	b086      	sub	sp, #24
 8106c98:	af00      	add	r7, sp, #0
 8106c9a:	60f8      	str	r0, [r7, #12]
 8106c9c:	60b9      	str	r1, [r7, #8]
 8106c9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8106ca0:	2300      	movs	r3, #0
 8106ca2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8106ca4:	68fb      	ldr	r3, [r7, #12]
 8106ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106ca8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8106caa:	68fb      	ldr	r3, [r7, #12]
 8106cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106cae:	2b00      	cmp	r3, #0
 8106cb0:	d10d      	bne.n	8106cce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8106cb2:	68fb      	ldr	r3, [r7, #12]
 8106cb4:	681b      	ldr	r3, [r3, #0]
 8106cb6:	2b00      	cmp	r3, #0
 8106cb8:	d14d      	bne.n	8106d56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8106cba:	68fb      	ldr	r3, [r7, #12]
 8106cbc:	689b      	ldr	r3, [r3, #8]
 8106cbe:	4618      	mov	r0, r3
 8106cc0:	f001 f93a 	bl	8107f38 <xTaskPriorityDisinherit>
 8106cc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8106cc6:	68fb      	ldr	r3, [r7, #12]
 8106cc8:	2200      	movs	r2, #0
 8106cca:	609a      	str	r2, [r3, #8]
 8106ccc:	e043      	b.n	8106d56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8106cce:	687b      	ldr	r3, [r7, #4]
 8106cd0:	2b00      	cmp	r3, #0
 8106cd2:	d119      	bne.n	8106d08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8106cd4:	68fb      	ldr	r3, [r7, #12]
 8106cd6:	6858      	ldr	r0, [r3, #4]
 8106cd8:	68fb      	ldr	r3, [r7, #12]
 8106cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106cdc:	461a      	mov	r2, r3
 8106cde:	68b9      	ldr	r1, [r7, #8]
 8106ce0:	f004 fcc9 	bl	810b676 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8106ce4:	68fb      	ldr	r3, [r7, #12]
 8106ce6:	685a      	ldr	r2, [r3, #4]
 8106ce8:	68fb      	ldr	r3, [r7, #12]
 8106cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106cec:	441a      	add	r2, r3
 8106cee:	68fb      	ldr	r3, [r7, #12]
 8106cf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8106cf2:	68fb      	ldr	r3, [r7, #12]
 8106cf4:	685a      	ldr	r2, [r3, #4]
 8106cf6:	68fb      	ldr	r3, [r7, #12]
 8106cf8:	689b      	ldr	r3, [r3, #8]
 8106cfa:	429a      	cmp	r2, r3
 8106cfc:	d32b      	bcc.n	8106d56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8106cfe:	68fb      	ldr	r3, [r7, #12]
 8106d00:	681a      	ldr	r2, [r3, #0]
 8106d02:	68fb      	ldr	r3, [r7, #12]
 8106d04:	605a      	str	r2, [r3, #4]
 8106d06:	e026      	b.n	8106d56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8106d08:	68fb      	ldr	r3, [r7, #12]
 8106d0a:	68d8      	ldr	r0, [r3, #12]
 8106d0c:	68fb      	ldr	r3, [r7, #12]
 8106d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106d10:	461a      	mov	r2, r3
 8106d12:	68b9      	ldr	r1, [r7, #8]
 8106d14:	f004 fcaf 	bl	810b676 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8106d18:	68fb      	ldr	r3, [r7, #12]
 8106d1a:	68da      	ldr	r2, [r3, #12]
 8106d1c:	68fb      	ldr	r3, [r7, #12]
 8106d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106d20:	425b      	negs	r3, r3
 8106d22:	441a      	add	r2, r3
 8106d24:	68fb      	ldr	r3, [r7, #12]
 8106d26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8106d28:	68fb      	ldr	r3, [r7, #12]
 8106d2a:	68da      	ldr	r2, [r3, #12]
 8106d2c:	68fb      	ldr	r3, [r7, #12]
 8106d2e:	681b      	ldr	r3, [r3, #0]
 8106d30:	429a      	cmp	r2, r3
 8106d32:	d207      	bcs.n	8106d44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8106d34:	68fb      	ldr	r3, [r7, #12]
 8106d36:	689a      	ldr	r2, [r3, #8]
 8106d38:	68fb      	ldr	r3, [r7, #12]
 8106d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106d3c:	425b      	negs	r3, r3
 8106d3e:	441a      	add	r2, r3
 8106d40:	68fb      	ldr	r3, [r7, #12]
 8106d42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8106d44:	687b      	ldr	r3, [r7, #4]
 8106d46:	2b02      	cmp	r3, #2
 8106d48:	d105      	bne.n	8106d56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8106d4a:	693b      	ldr	r3, [r7, #16]
 8106d4c:	2b00      	cmp	r3, #0
 8106d4e:	d002      	beq.n	8106d56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8106d50:	693b      	ldr	r3, [r7, #16]
 8106d52:	3b01      	subs	r3, #1
 8106d54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8106d56:	693b      	ldr	r3, [r7, #16]
 8106d58:	1c5a      	adds	r2, r3, #1
 8106d5a:	68fb      	ldr	r3, [r7, #12]
 8106d5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8106d5e:	697b      	ldr	r3, [r7, #20]
}
 8106d60:	4618      	mov	r0, r3
 8106d62:	3718      	adds	r7, #24
 8106d64:	46bd      	mov	sp, r7
 8106d66:	bd80      	pop	{r7, pc}

08106d68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8106d68:	b580      	push	{r7, lr}
 8106d6a:	b082      	sub	sp, #8
 8106d6c:	af00      	add	r7, sp, #0
 8106d6e:	6078      	str	r0, [r7, #4]
 8106d70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8106d72:	687b      	ldr	r3, [r7, #4]
 8106d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106d76:	2b00      	cmp	r3, #0
 8106d78:	d018      	beq.n	8106dac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8106d7a:	687b      	ldr	r3, [r7, #4]
 8106d7c:	68da      	ldr	r2, [r3, #12]
 8106d7e:	687b      	ldr	r3, [r7, #4]
 8106d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106d82:	441a      	add	r2, r3
 8106d84:	687b      	ldr	r3, [r7, #4]
 8106d86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8106d88:	687b      	ldr	r3, [r7, #4]
 8106d8a:	68da      	ldr	r2, [r3, #12]
 8106d8c:	687b      	ldr	r3, [r7, #4]
 8106d8e:	689b      	ldr	r3, [r3, #8]
 8106d90:	429a      	cmp	r2, r3
 8106d92:	d303      	bcc.n	8106d9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8106d94:	687b      	ldr	r3, [r7, #4]
 8106d96:	681a      	ldr	r2, [r3, #0]
 8106d98:	687b      	ldr	r3, [r7, #4]
 8106d9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8106d9c:	687b      	ldr	r3, [r7, #4]
 8106d9e:	68d9      	ldr	r1, [r3, #12]
 8106da0:	687b      	ldr	r3, [r7, #4]
 8106da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106da4:	461a      	mov	r2, r3
 8106da6:	6838      	ldr	r0, [r7, #0]
 8106da8:	f004 fc65 	bl	810b676 <memcpy>
	}
}
 8106dac:	bf00      	nop
 8106dae:	3708      	adds	r7, #8
 8106db0:	46bd      	mov	sp, r7
 8106db2:	bd80      	pop	{r7, pc}

08106db4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8106db4:	b580      	push	{r7, lr}
 8106db6:	b084      	sub	sp, #16
 8106db8:	af00      	add	r7, sp, #0
 8106dba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8106dbc:	f7fe ffb4 	bl	8105d28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8106dc0:	687b      	ldr	r3, [r7, #4]
 8106dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106dc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8106dc8:	e011      	b.n	8106dee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8106dca:	687b      	ldr	r3, [r7, #4]
 8106dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106dce:	2b00      	cmp	r3, #0
 8106dd0:	d012      	beq.n	8106df8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8106dd2:	687b      	ldr	r3, [r7, #4]
 8106dd4:	3324      	adds	r3, #36	@ 0x24
 8106dd6:	4618      	mov	r0, r3
 8106dd8:	f000 fe62 	bl	8107aa0 <xTaskRemoveFromEventList>
 8106ddc:	4603      	mov	r3, r0
 8106dde:	2b00      	cmp	r3, #0
 8106de0:	d001      	beq.n	8106de6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8106de2:	f000 ff3b 	bl	8107c5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8106de6:	7bfb      	ldrb	r3, [r7, #15]
 8106de8:	3b01      	subs	r3, #1
 8106dea:	b2db      	uxtb	r3, r3
 8106dec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8106dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8106df2:	2b00      	cmp	r3, #0
 8106df4:	dce9      	bgt.n	8106dca <prvUnlockQueue+0x16>
 8106df6:	e000      	b.n	8106dfa <prvUnlockQueue+0x46>
					break;
 8106df8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8106dfa:	687b      	ldr	r3, [r7, #4]
 8106dfc:	22ff      	movs	r2, #255	@ 0xff
 8106dfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8106e02:	f7fe ffc3 	bl	8105d8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8106e06:	f7fe ff8f 	bl	8105d28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8106e0a:	687b      	ldr	r3, [r7, #4]
 8106e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106e10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8106e12:	e011      	b.n	8106e38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8106e14:	687b      	ldr	r3, [r7, #4]
 8106e16:	691b      	ldr	r3, [r3, #16]
 8106e18:	2b00      	cmp	r3, #0
 8106e1a:	d012      	beq.n	8106e42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8106e1c:	687b      	ldr	r3, [r7, #4]
 8106e1e:	3310      	adds	r3, #16
 8106e20:	4618      	mov	r0, r3
 8106e22:	f000 fe3d 	bl	8107aa0 <xTaskRemoveFromEventList>
 8106e26:	4603      	mov	r3, r0
 8106e28:	2b00      	cmp	r3, #0
 8106e2a:	d001      	beq.n	8106e30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8106e2c:	f000 ff16 	bl	8107c5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8106e30:	7bbb      	ldrb	r3, [r7, #14]
 8106e32:	3b01      	subs	r3, #1
 8106e34:	b2db      	uxtb	r3, r3
 8106e36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8106e38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8106e3c:	2b00      	cmp	r3, #0
 8106e3e:	dce9      	bgt.n	8106e14 <prvUnlockQueue+0x60>
 8106e40:	e000      	b.n	8106e44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8106e42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8106e44:	687b      	ldr	r3, [r7, #4]
 8106e46:	22ff      	movs	r2, #255	@ 0xff
 8106e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8106e4c:	f7fe ff9e 	bl	8105d8c <vPortExitCritical>
}
 8106e50:	bf00      	nop
 8106e52:	3710      	adds	r7, #16
 8106e54:	46bd      	mov	sp, r7
 8106e56:	bd80      	pop	{r7, pc}

08106e58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8106e58:	b580      	push	{r7, lr}
 8106e5a:	b084      	sub	sp, #16
 8106e5c:	af00      	add	r7, sp, #0
 8106e5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8106e60:	f7fe ff62 	bl	8105d28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8106e64:	687b      	ldr	r3, [r7, #4]
 8106e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106e68:	2b00      	cmp	r3, #0
 8106e6a:	d102      	bne.n	8106e72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8106e6c:	2301      	movs	r3, #1
 8106e6e:	60fb      	str	r3, [r7, #12]
 8106e70:	e001      	b.n	8106e76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8106e72:	2300      	movs	r3, #0
 8106e74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8106e76:	f7fe ff89 	bl	8105d8c <vPortExitCritical>

	return xReturn;
 8106e7a:	68fb      	ldr	r3, [r7, #12]
}
 8106e7c:	4618      	mov	r0, r3
 8106e7e:	3710      	adds	r7, #16
 8106e80:	46bd      	mov	sp, r7
 8106e82:	bd80      	pop	{r7, pc}

08106e84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8106e84:	b580      	push	{r7, lr}
 8106e86:	b084      	sub	sp, #16
 8106e88:	af00      	add	r7, sp, #0
 8106e8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8106e8c:	f7fe ff4c 	bl	8105d28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8106e90:	687b      	ldr	r3, [r7, #4]
 8106e92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8106e94:	687b      	ldr	r3, [r7, #4]
 8106e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106e98:	429a      	cmp	r2, r3
 8106e9a:	d102      	bne.n	8106ea2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8106e9c:	2301      	movs	r3, #1
 8106e9e:	60fb      	str	r3, [r7, #12]
 8106ea0:	e001      	b.n	8106ea6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8106ea2:	2300      	movs	r3, #0
 8106ea4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8106ea6:	f7fe ff71 	bl	8105d8c <vPortExitCritical>

	return xReturn;
 8106eaa:	68fb      	ldr	r3, [r7, #12]
}
 8106eac:	4618      	mov	r0, r3
 8106eae:	3710      	adds	r7, #16
 8106eb0:	46bd      	mov	sp, r7
 8106eb2:	bd80      	pop	{r7, pc}

08106eb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8106eb4:	b480      	push	{r7}
 8106eb6:	b085      	sub	sp, #20
 8106eb8:	af00      	add	r7, sp, #0
 8106eba:	6078      	str	r0, [r7, #4]
 8106ebc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8106ebe:	2300      	movs	r3, #0
 8106ec0:	60fb      	str	r3, [r7, #12]
 8106ec2:	e014      	b.n	8106eee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8106ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8106f04 <vQueueAddToRegistry+0x50>)
 8106ec6:	68fb      	ldr	r3, [r7, #12]
 8106ec8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8106ecc:	2b00      	cmp	r3, #0
 8106ece:	d10b      	bne.n	8106ee8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8106ed0:	490c      	ldr	r1, [pc, #48]	@ (8106f04 <vQueueAddToRegistry+0x50>)
 8106ed2:	68fb      	ldr	r3, [r7, #12]
 8106ed4:	683a      	ldr	r2, [r7, #0]
 8106ed6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8106eda:	4a0a      	ldr	r2, [pc, #40]	@ (8106f04 <vQueueAddToRegistry+0x50>)
 8106edc:	68fb      	ldr	r3, [r7, #12]
 8106ede:	00db      	lsls	r3, r3, #3
 8106ee0:	4413      	add	r3, r2
 8106ee2:	687a      	ldr	r2, [r7, #4]
 8106ee4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8106ee6:	e006      	b.n	8106ef6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8106ee8:	68fb      	ldr	r3, [r7, #12]
 8106eea:	3301      	adds	r3, #1
 8106eec:	60fb      	str	r3, [r7, #12]
 8106eee:	68fb      	ldr	r3, [r7, #12]
 8106ef0:	2b07      	cmp	r3, #7
 8106ef2:	d9e7      	bls.n	8106ec4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8106ef4:	bf00      	nop
 8106ef6:	bf00      	nop
 8106ef8:	3714      	adds	r7, #20
 8106efa:	46bd      	mov	sp, r7
 8106efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f00:	4770      	bx	lr
 8106f02:	bf00      	nop
 8106f04:	100045ec 	.word	0x100045ec

08106f08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8106f08:	b480      	push	{r7}
 8106f0a:	b085      	sub	sp, #20
 8106f0c:	af00      	add	r7, sp, #0
 8106f0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8106f10:	2300      	movs	r3, #0
 8106f12:	60fb      	str	r3, [r7, #12]
 8106f14:	e016      	b.n	8106f44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8106f16:	4a10      	ldr	r2, [pc, #64]	@ (8106f58 <vQueueUnregisterQueue+0x50>)
 8106f18:	68fb      	ldr	r3, [r7, #12]
 8106f1a:	00db      	lsls	r3, r3, #3
 8106f1c:	4413      	add	r3, r2
 8106f1e:	685b      	ldr	r3, [r3, #4]
 8106f20:	687a      	ldr	r2, [r7, #4]
 8106f22:	429a      	cmp	r2, r3
 8106f24:	d10b      	bne.n	8106f3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8106f26:	4a0c      	ldr	r2, [pc, #48]	@ (8106f58 <vQueueUnregisterQueue+0x50>)
 8106f28:	68fb      	ldr	r3, [r7, #12]
 8106f2a:	2100      	movs	r1, #0
 8106f2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8106f30:	4a09      	ldr	r2, [pc, #36]	@ (8106f58 <vQueueUnregisterQueue+0x50>)
 8106f32:	68fb      	ldr	r3, [r7, #12]
 8106f34:	00db      	lsls	r3, r3, #3
 8106f36:	4413      	add	r3, r2
 8106f38:	2200      	movs	r2, #0
 8106f3a:	605a      	str	r2, [r3, #4]
				break;
 8106f3c:	e006      	b.n	8106f4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8106f3e:	68fb      	ldr	r3, [r7, #12]
 8106f40:	3301      	adds	r3, #1
 8106f42:	60fb      	str	r3, [r7, #12]
 8106f44:	68fb      	ldr	r3, [r7, #12]
 8106f46:	2b07      	cmp	r3, #7
 8106f48:	d9e5      	bls.n	8106f16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8106f4a:	bf00      	nop
 8106f4c:	bf00      	nop
 8106f4e:	3714      	adds	r7, #20
 8106f50:	46bd      	mov	sp, r7
 8106f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f56:	4770      	bx	lr
 8106f58:	100045ec 	.word	0x100045ec

08106f5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8106f5c:	b580      	push	{r7, lr}
 8106f5e:	b086      	sub	sp, #24
 8106f60:	af00      	add	r7, sp, #0
 8106f62:	60f8      	str	r0, [r7, #12]
 8106f64:	60b9      	str	r1, [r7, #8]
 8106f66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8106f68:	68fb      	ldr	r3, [r7, #12]
 8106f6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8106f6c:	f7fe fedc 	bl	8105d28 <vPortEnterCritical>
 8106f70:	697b      	ldr	r3, [r7, #20]
 8106f72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106f76:	b25b      	sxtb	r3, r3
 8106f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106f7c:	d103      	bne.n	8106f86 <vQueueWaitForMessageRestricted+0x2a>
 8106f7e:	697b      	ldr	r3, [r7, #20]
 8106f80:	2200      	movs	r2, #0
 8106f82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106f86:	697b      	ldr	r3, [r7, #20]
 8106f88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106f8c:	b25b      	sxtb	r3, r3
 8106f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106f92:	d103      	bne.n	8106f9c <vQueueWaitForMessageRestricted+0x40>
 8106f94:	697b      	ldr	r3, [r7, #20]
 8106f96:	2200      	movs	r2, #0
 8106f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106f9c:	f7fe fef6 	bl	8105d8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8106fa0:	697b      	ldr	r3, [r7, #20]
 8106fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106fa4:	2b00      	cmp	r3, #0
 8106fa6:	d106      	bne.n	8106fb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8106fa8:	697b      	ldr	r3, [r7, #20]
 8106faa:	3324      	adds	r3, #36	@ 0x24
 8106fac:	687a      	ldr	r2, [r7, #4]
 8106fae:	68b9      	ldr	r1, [r7, #8]
 8106fb0:	4618      	mov	r0, r3
 8106fb2:	f000 fd49 	bl	8107a48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8106fb6:	6978      	ldr	r0, [r7, #20]
 8106fb8:	f7ff fefc 	bl	8106db4 <prvUnlockQueue>
	}
 8106fbc:	bf00      	nop
 8106fbe:	3718      	adds	r7, #24
 8106fc0:	46bd      	mov	sp, r7
 8106fc2:	bd80      	pop	{r7, pc}

08106fc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8106fc4:	b580      	push	{r7, lr}
 8106fc6:	b08e      	sub	sp, #56	@ 0x38
 8106fc8:	af04      	add	r7, sp, #16
 8106fca:	60f8      	str	r0, [r7, #12]
 8106fcc:	60b9      	str	r1, [r7, #8]
 8106fce:	607a      	str	r2, [r7, #4]
 8106fd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8106fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106fd4:	2b00      	cmp	r3, #0
 8106fd6:	d10b      	bne.n	8106ff0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8106fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106fdc:	f383 8811 	msr	BASEPRI, r3
 8106fe0:	f3bf 8f6f 	isb	sy
 8106fe4:	f3bf 8f4f 	dsb	sy
 8106fe8:	623b      	str	r3, [r7, #32]
}
 8106fea:	bf00      	nop
 8106fec:	bf00      	nop
 8106fee:	e7fd      	b.n	8106fec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8106ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106ff2:	2b00      	cmp	r3, #0
 8106ff4:	d10b      	bne.n	810700e <xTaskCreateStatic+0x4a>
	__asm volatile
 8106ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106ffa:	f383 8811 	msr	BASEPRI, r3
 8106ffe:	f3bf 8f6f 	isb	sy
 8107002:	f3bf 8f4f 	dsb	sy
 8107006:	61fb      	str	r3, [r7, #28]
}
 8107008:	bf00      	nop
 810700a:	bf00      	nop
 810700c:	e7fd      	b.n	810700a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810700e:	23a8      	movs	r3, #168	@ 0xa8
 8107010:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8107012:	693b      	ldr	r3, [r7, #16]
 8107014:	2ba8      	cmp	r3, #168	@ 0xa8
 8107016:	d00b      	beq.n	8107030 <xTaskCreateStatic+0x6c>
	__asm volatile
 8107018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810701c:	f383 8811 	msr	BASEPRI, r3
 8107020:	f3bf 8f6f 	isb	sy
 8107024:	f3bf 8f4f 	dsb	sy
 8107028:	61bb      	str	r3, [r7, #24]
}
 810702a:	bf00      	nop
 810702c:	bf00      	nop
 810702e:	e7fd      	b.n	810702c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8107030:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8107032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107034:	2b00      	cmp	r3, #0
 8107036:	d01e      	beq.n	8107076 <xTaskCreateStatic+0xb2>
 8107038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810703a:	2b00      	cmp	r3, #0
 810703c:	d01b      	beq.n	8107076 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810703e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107040:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8107042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107044:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8107046:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8107048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810704a:	2202      	movs	r2, #2
 810704c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8107050:	2300      	movs	r3, #0
 8107052:	9303      	str	r3, [sp, #12]
 8107054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107056:	9302      	str	r3, [sp, #8]
 8107058:	f107 0314 	add.w	r3, r7, #20
 810705c:	9301      	str	r3, [sp, #4]
 810705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107060:	9300      	str	r3, [sp, #0]
 8107062:	683b      	ldr	r3, [r7, #0]
 8107064:	687a      	ldr	r2, [r7, #4]
 8107066:	68b9      	ldr	r1, [r7, #8]
 8107068:	68f8      	ldr	r0, [r7, #12]
 810706a:	f000 f851 	bl	8107110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810706e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8107070:	f000 f8f6 	bl	8107260 <prvAddNewTaskToReadyList>
 8107074:	e001      	b.n	810707a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8107076:	2300      	movs	r3, #0
 8107078:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810707a:	697b      	ldr	r3, [r7, #20]
	}
 810707c:	4618      	mov	r0, r3
 810707e:	3728      	adds	r7, #40	@ 0x28
 8107080:	46bd      	mov	sp, r7
 8107082:	bd80      	pop	{r7, pc}

08107084 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8107084:	b580      	push	{r7, lr}
 8107086:	b08c      	sub	sp, #48	@ 0x30
 8107088:	af04      	add	r7, sp, #16
 810708a:	60f8      	str	r0, [r7, #12]
 810708c:	60b9      	str	r1, [r7, #8]
 810708e:	603b      	str	r3, [r7, #0]
 8107090:	4613      	mov	r3, r2
 8107092:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8107094:	88fb      	ldrh	r3, [r7, #6]
 8107096:	009b      	lsls	r3, r3, #2
 8107098:	4618      	mov	r0, r3
 810709a:	f7fe fa71 	bl	8105580 <pvPortMalloc>
 810709e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 81070a0:	697b      	ldr	r3, [r7, #20]
 81070a2:	2b00      	cmp	r3, #0
 81070a4:	d00e      	beq.n	81070c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 81070a6:	20a8      	movs	r0, #168	@ 0xa8
 81070a8:	f7fe fa6a 	bl	8105580 <pvPortMalloc>
 81070ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 81070ae:	69fb      	ldr	r3, [r7, #28]
 81070b0:	2b00      	cmp	r3, #0
 81070b2:	d003      	beq.n	81070bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 81070b4:	69fb      	ldr	r3, [r7, #28]
 81070b6:	697a      	ldr	r2, [r7, #20]
 81070b8:	631a      	str	r2, [r3, #48]	@ 0x30
 81070ba:	e005      	b.n	81070c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 81070bc:	6978      	ldr	r0, [r7, #20]
 81070be:	f7fe fb2d 	bl	810571c <vPortFree>
 81070c2:	e001      	b.n	81070c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 81070c4:	2300      	movs	r3, #0
 81070c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 81070c8:	69fb      	ldr	r3, [r7, #28]
 81070ca:	2b00      	cmp	r3, #0
 81070cc:	d017      	beq.n	81070fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 81070ce:	69fb      	ldr	r3, [r7, #28]
 81070d0:	2200      	movs	r2, #0
 81070d2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 81070d6:	88fa      	ldrh	r2, [r7, #6]
 81070d8:	2300      	movs	r3, #0
 81070da:	9303      	str	r3, [sp, #12]
 81070dc:	69fb      	ldr	r3, [r7, #28]
 81070de:	9302      	str	r3, [sp, #8]
 81070e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81070e2:	9301      	str	r3, [sp, #4]
 81070e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81070e6:	9300      	str	r3, [sp, #0]
 81070e8:	683b      	ldr	r3, [r7, #0]
 81070ea:	68b9      	ldr	r1, [r7, #8]
 81070ec:	68f8      	ldr	r0, [r7, #12]
 81070ee:	f000 f80f 	bl	8107110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81070f2:	69f8      	ldr	r0, [r7, #28]
 81070f4:	f000 f8b4 	bl	8107260 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81070f8:	2301      	movs	r3, #1
 81070fa:	61bb      	str	r3, [r7, #24]
 81070fc:	e002      	b.n	8107104 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81070fe:	f04f 33ff 	mov.w	r3, #4294967295
 8107102:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8107104:	69bb      	ldr	r3, [r7, #24]
	}
 8107106:	4618      	mov	r0, r3
 8107108:	3720      	adds	r7, #32
 810710a:	46bd      	mov	sp, r7
 810710c:	bd80      	pop	{r7, pc}
	...

08107110 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8107110:	b580      	push	{r7, lr}
 8107112:	b088      	sub	sp, #32
 8107114:	af00      	add	r7, sp, #0
 8107116:	60f8      	str	r0, [r7, #12]
 8107118:	60b9      	str	r1, [r7, #8]
 810711a:	607a      	str	r2, [r7, #4]
 810711c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810711e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107120:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8107122:	687b      	ldr	r3, [r7, #4]
 8107124:	009b      	lsls	r3, r3, #2
 8107126:	461a      	mov	r2, r3
 8107128:	21a5      	movs	r1, #165	@ 0xa5
 810712a:	f004 f99e 	bl	810b46a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810712e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8107132:	687b      	ldr	r3, [r7, #4]
 8107134:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8107138:	3b01      	subs	r3, #1
 810713a:	009b      	lsls	r3, r3, #2
 810713c:	4413      	add	r3, r2
 810713e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8107140:	69bb      	ldr	r3, [r7, #24]
 8107142:	f023 0307 	bic.w	r3, r3, #7
 8107146:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8107148:	69bb      	ldr	r3, [r7, #24]
 810714a:	f003 0307 	and.w	r3, r3, #7
 810714e:	2b00      	cmp	r3, #0
 8107150:	d00b      	beq.n	810716a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8107152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107156:	f383 8811 	msr	BASEPRI, r3
 810715a:	f3bf 8f6f 	isb	sy
 810715e:	f3bf 8f4f 	dsb	sy
 8107162:	617b      	str	r3, [r7, #20]
}
 8107164:	bf00      	nop
 8107166:	bf00      	nop
 8107168:	e7fd      	b.n	8107166 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810716a:	68bb      	ldr	r3, [r7, #8]
 810716c:	2b00      	cmp	r3, #0
 810716e:	d01f      	beq.n	81071b0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8107170:	2300      	movs	r3, #0
 8107172:	61fb      	str	r3, [r7, #28]
 8107174:	e012      	b.n	810719c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8107176:	68ba      	ldr	r2, [r7, #8]
 8107178:	69fb      	ldr	r3, [r7, #28]
 810717a:	4413      	add	r3, r2
 810717c:	7819      	ldrb	r1, [r3, #0]
 810717e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8107180:	69fb      	ldr	r3, [r7, #28]
 8107182:	4413      	add	r3, r2
 8107184:	3334      	adds	r3, #52	@ 0x34
 8107186:	460a      	mov	r2, r1
 8107188:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810718a:	68ba      	ldr	r2, [r7, #8]
 810718c:	69fb      	ldr	r3, [r7, #28]
 810718e:	4413      	add	r3, r2
 8107190:	781b      	ldrb	r3, [r3, #0]
 8107192:	2b00      	cmp	r3, #0
 8107194:	d006      	beq.n	81071a4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8107196:	69fb      	ldr	r3, [r7, #28]
 8107198:	3301      	adds	r3, #1
 810719a:	61fb      	str	r3, [r7, #28]
 810719c:	69fb      	ldr	r3, [r7, #28]
 810719e:	2b0f      	cmp	r3, #15
 81071a0:	d9e9      	bls.n	8107176 <prvInitialiseNewTask+0x66>
 81071a2:	e000      	b.n	81071a6 <prvInitialiseNewTask+0x96>
			{
				break;
 81071a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 81071a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071a8:	2200      	movs	r2, #0
 81071aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 81071ae:	e003      	b.n	81071b8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 81071b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071b2:	2200      	movs	r2, #0
 81071b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 81071b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81071ba:	2b37      	cmp	r3, #55	@ 0x37
 81071bc:	d901      	bls.n	81071c2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 81071be:	2337      	movs	r3, #55	@ 0x37
 81071c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 81071c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81071c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 81071c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81071cc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 81071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071d0:	2200      	movs	r2, #0
 81071d2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 81071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071d6:	3304      	adds	r3, #4
 81071d8:	4618      	mov	r0, r3
 81071da:	f7fe fbdf 	bl	810599c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 81071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071e0:	3318      	adds	r3, #24
 81071e2:	4618      	mov	r0, r3
 81071e4:	f7fe fbda 	bl	810599c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 81071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81071ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81071ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81071f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 81071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81071f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81071fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81071fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107200:	2200      	movs	r2, #0
 8107202:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8107206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107208:	2200      	movs	r2, #0
 810720a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 810720e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107210:	3354      	adds	r3, #84	@ 0x54
 8107212:	224c      	movs	r2, #76	@ 0x4c
 8107214:	2100      	movs	r1, #0
 8107216:	4618      	mov	r0, r3
 8107218:	f004 f927 	bl	810b46a <memset>
 810721c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810721e:	4a0d      	ldr	r2, [pc, #52]	@ (8107254 <prvInitialiseNewTask+0x144>)
 8107220:	659a      	str	r2, [r3, #88]	@ 0x58
 8107222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107224:	4a0c      	ldr	r2, [pc, #48]	@ (8107258 <prvInitialiseNewTask+0x148>)
 8107226:	65da      	str	r2, [r3, #92]	@ 0x5c
 8107228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810722a:	4a0c      	ldr	r2, [pc, #48]	@ (810725c <prvInitialiseNewTask+0x14c>)
 810722c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810722e:	683a      	ldr	r2, [r7, #0]
 8107230:	68f9      	ldr	r1, [r7, #12]
 8107232:	69b8      	ldr	r0, [r7, #24]
 8107234:	f7fe fc46 	bl	8105ac4 <pxPortInitialiseStack>
 8107238:	4602      	mov	r2, r0
 810723a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810723c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810723e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107240:	2b00      	cmp	r3, #0
 8107242:	d002      	beq.n	810724a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8107244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8107248:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810724a:	bf00      	nop
 810724c:	3720      	adds	r7, #32
 810724e:	46bd      	mov	sp, r7
 8107250:	bd80      	pop	{r7, pc}
 8107252:	bf00      	nop
 8107254:	10004d18 	.word	0x10004d18
 8107258:	10004d80 	.word	0x10004d80
 810725c:	10004de8 	.word	0x10004de8

08107260 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8107260:	b580      	push	{r7, lr}
 8107262:	b082      	sub	sp, #8
 8107264:	af00      	add	r7, sp, #0
 8107266:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8107268:	f7fe fd5e 	bl	8105d28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810726c:	4b2d      	ldr	r3, [pc, #180]	@ (8107324 <prvAddNewTaskToReadyList+0xc4>)
 810726e:	681b      	ldr	r3, [r3, #0]
 8107270:	3301      	adds	r3, #1
 8107272:	4a2c      	ldr	r2, [pc, #176]	@ (8107324 <prvAddNewTaskToReadyList+0xc4>)
 8107274:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8107276:	4b2c      	ldr	r3, [pc, #176]	@ (8107328 <prvAddNewTaskToReadyList+0xc8>)
 8107278:	681b      	ldr	r3, [r3, #0]
 810727a:	2b00      	cmp	r3, #0
 810727c:	d109      	bne.n	8107292 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810727e:	4a2a      	ldr	r2, [pc, #168]	@ (8107328 <prvAddNewTaskToReadyList+0xc8>)
 8107280:	687b      	ldr	r3, [r7, #4]
 8107282:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8107284:	4b27      	ldr	r3, [pc, #156]	@ (8107324 <prvAddNewTaskToReadyList+0xc4>)
 8107286:	681b      	ldr	r3, [r3, #0]
 8107288:	2b01      	cmp	r3, #1
 810728a:	d110      	bne.n	81072ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810728c:	f000 fd0a 	bl	8107ca4 <prvInitialiseTaskLists>
 8107290:	e00d      	b.n	81072ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8107292:	4b26      	ldr	r3, [pc, #152]	@ (810732c <prvAddNewTaskToReadyList+0xcc>)
 8107294:	681b      	ldr	r3, [r3, #0]
 8107296:	2b00      	cmp	r3, #0
 8107298:	d109      	bne.n	81072ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810729a:	4b23      	ldr	r3, [pc, #140]	@ (8107328 <prvAddNewTaskToReadyList+0xc8>)
 810729c:	681b      	ldr	r3, [r3, #0]
 810729e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81072a0:	687b      	ldr	r3, [r7, #4]
 81072a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81072a4:	429a      	cmp	r2, r3
 81072a6:	d802      	bhi.n	81072ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 81072a8:	4a1f      	ldr	r2, [pc, #124]	@ (8107328 <prvAddNewTaskToReadyList+0xc8>)
 81072aa:	687b      	ldr	r3, [r7, #4]
 81072ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 81072ae:	4b20      	ldr	r3, [pc, #128]	@ (8107330 <prvAddNewTaskToReadyList+0xd0>)
 81072b0:	681b      	ldr	r3, [r3, #0]
 81072b2:	3301      	adds	r3, #1
 81072b4:	4a1e      	ldr	r2, [pc, #120]	@ (8107330 <prvAddNewTaskToReadyList+0xd0>)
 81072b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 81072b8:	4b1d      	ldr	r3, [pc, #116]	@ (8107330 <prvAddNewTaskToReadyList+0xd0>)
 81072ba:	681a      	ldr	r2, [r3, #0]
 81072bc:	687b      	ldr	r3, [r7, #4]
 81072be:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 81072c0:	687b      	ldr	r3, [r7, #4]
 81072c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81072c4:	4b1b      	ldr	r3, [pc, #108]	@ (8107334 <prvAddNewTaskToReadyList+0xd4>)
 81072c6:	681b      	ldr	r3, [r3, #0]
 81072c8:	429a      	cmp	r2, r3
 81072ca:	d903      	bls.n	81072d4 <prvAddNewTaskToReadyList+0x74>
 81072cc:	687b      	ldr	r3, [r7, #4]
 81072ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81072d0:	4a18      	ldr	r2, [pc, #96]	@ (8107334 <prvAddNewTaskToReadyList+0xd4>)
 81072d2:	6013      	str	r3, [r2, #0]
 81072d4:	687b      	ldr	r3, [r7, #4]
 81072d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81072d8:	4613      	mov	r3, r2
 81072da:	009b      	lsls	r3, r3, #2
 81072dc:	4413      	add	r3, r2
 81072de:	009b      	lsls	r3, r3, #2
 81072e0:	4a15      	ldr	r2, [pc, #84]	@ (8107338 <prvAddNewTaskToReadyList+0xd8>)
 81072e2:	441a      	add	r2, r3
 81072e4:	687b      	ldr	r3, [r7, #4]
 81072e6:	3304      	adds	r3, #4
 81072e8:	4619      	mov	r1, r3
 81072ea:	4610      	mov	r0, r2
 81072ec:	f7fe fb63 	bl	81059b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 81072f0:	f7fe fd4c 	bl	8105d8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 81072f4:	4b0d      	ldr	r3, [pc, #52]	@ (810732c <prvAddNewTaskToReadyList+0xcc>)
 81072f6:	681b      	ldr	r3, [r3, #0]
 81072f8:	2b00      	cmp	r3, #0
 81072fa:	d00e      	beq.n	810731a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 81072fc:	4b0a      	ldr	r3, [pc, #40]	@ (8107328 <prvAddNewTaskToReadyList+0xc8>)
 81072fe:	681b      	ldr	r3, [r3, #0]
 8107300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107302:	687b      	ldr	r3, [r7, #4]
 8107304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107306:	429a      	cmp	r2, r3
 8107308:	d207      	bcs.n	810731a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810730a:	4b0c      	ldr	r3, [pc, #48]	@ (810733c <prvAddNewTaskToReadyList+0xdc>)
 810730c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107310:	601a      	str	r2, [r3, #0]
 8107312:	f3bf 8f4f 	dsb	sy
 8107316:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810731a:	bf00      	nop
 810731c:	3708      	adds	r7, #8
 810731e:	46bd      	mov	sp, r7
 8107320:	bd80      	pop	{r7, pc}
 8107322:	bf00      	nop
 8107324:	10004b00 	.word	0x10004b00
 8107328:	1000462c 	.word	0x1000462c
 810732c:	10004b0c 	.word	0x10004b0c
 8107330:	10004b1c 	.word	0x10004b1c
 8107334:	10004b08 	.word	0x10004b08
 8107338:	10004630 	.word	0x10004630
 810733c:	e000ed04 	.word	0xe000ed04

08107340 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8107340:	b580      	push	{r7, lr}
 8107342:	b084      	sub	sp, #16
 8107344:	af00      	add	r7, sp, #0
 8107346:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8107348:	f7fe fcee 	bl	8105d28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 810734c:	687b      	ldr	r3, [r7, #4]
 810734e:	2b00      	cmp	r3, #0
 8107350:	d102      	bne.n	8107358 <vTaskDelete+0x18>
 8107352:	4b2d      	ldr	r3, [pc, #180]	@ (8107408 <vTaskDelete+0xc8>)
 8107354:	681b      	ldr	r3, [r3, #0]
 8107356:	e000      	b.n	810735a <vTaskDelete+0x1a>
 8107358:	687b      	ldr	r3, [r7, #4]
 810735a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810735c:	68fb      	ldr	r3, [r7, #12]
 810735e:	3304      	adds	r3, #4
 8107360:	4618      	mov	r0, r3
 8107362:	f7fe fb85 	bl	8105a70 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8107366:	68fb      	ldr	r3, [r7, #12]
 8107368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810736a:	2b00      	cmp	r3, #0
 810736c:	d004      	beq.n	8107378 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810736e:	68fb      	ldr	r3, [r7, #12]
 8107370:	3318      	adds	r3, #24
 8107372:	4618      	mov	r0, r3
 8107374:	f7fe fb7c 	bl	8105a70 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8107378:	4b24      	ldr	r3, [pc, #144]	@ (810740c <vTaskDelete+0xcc>)
 810737a:	681b      	ldr	r3, [r3, #0]
 810737c:	3301      	adds	r3, #1
 810737e:	4a23      	ldr	r2, [pc, #140]	@ (810740c <vTaskDelete+0xcc>)
 8107380:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8107382:	4b21      	ldr	r3, [pc, #132]	@ (8107408 <vTaskDelete+0xc8>)
 8107384:	681b      	ldr	r3, [r3, #0]
 8107386:	68fa      	ldr	r2, [r7, #12]
 8107388:	429a      	cmp	r2, r3
 810738a:	d10b      	bne.n	81073a4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 810738c:	68fb      	ldr	r3, [r7, #12]
 810738e:	3304      	adds	r3, #4
 8107390:	4619      	mov	r1, r3
 8107392:	481f      	ldr	r0, [pc, #124]	@ (8107410 <vTaskDelete+0xd0>)
 8107394:	f7fe fb0f 	bl	81059b6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8107398:	4b1e      	ldr	r3, [pc, #120]	@ (8107414 <vTaskDelete+0xd4>)
 810739a:	681b      	ldr	r3, [r3, #0]
 810739c:	3301      	adds	r3, #1
 810739e:	4a1d      	ldr	r2, [pc, #116]	@ (8107414 <vTaskDelete+0xd4>)
 81073a0:	6013      	str	r3, [r2, #0]
 81073a2:	e009      	b.n	81073b8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 81073a4:	4b1c      	ldr	r3, [pc, #112]	@ (8107418 <vTaskDelete+0xd8>)
 81073a6:	681b      	ldr	r3, [r3, #0]
 81073a8:	3b01      	subs	r3, #1
 81073aa:	4a1b      	ldr	r2, [pc, #108]	@ (8107418 <vTaskDelete+0xd8>)
 81073ac:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 81073ae:	68f8      	ldr	r0, [r7, #12]
 81073b0:	f000 fce6 	bl	8107d80 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 81073b4:	f000 fd1a 	bl	8107dec <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 81073b8:	f7fe fce8 	bl	8105d8c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 81073bc:	4b17      	ldr	r3, [pc, #92]	@ (810741c <vTaskDelete+0xdc>)
 81073be:	681b      	ldr	r3, [r3, #0]
 81073c0:	2b00      	cmp	r3, #0
 81073c2:	d01c      	beq.n	81073fe <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 81073c4:	4b10      	ldr	r3, [pc, #64]	@ (8107408 <vTaskDelete+0xc8>)
 81073c6:	681b      	ldr	r3, [r3, #0]
 81073c8:	68fa      	ldr	r2, [r7, #12]
 81073ca:	429a      	cmp	r2, r3
 81073cc:	d117      	bne.n	81073fe <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 81073ce:	4b14      	ldr	r3, [pc, #80]	@ (8107420 <vTaskDelete+0xe0>)
 81073d0:	681b      	ldr	r3, [r3, #0]
 81073d2:	2b00      	cmp	r3, #0
 81073d4:	d00b      	beq.n	81073ee <vTaskDelete+0xae>
	__asm volatile
 81073d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81073da:	f383 8811 	msr	BASEPRI, r3
 81073de:	f3bf 8f6f 	isb	sy
 81073e2:	f3bf 8f4f 	dsb	sy
 81073e6:	60bb      	str	r3, [r7, #8]
}
 81073e8:	bf00      	nop
 81073ea:	bf00      	nop
 81073ec:	e7fd      	b.n	81073ea <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 81073ee:	4b0d      	ldr	r3, [pc, #52]	@ (8107424 <vTaskDelete+0xe4>)
 81073f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81073f4:	601a      	str	r2, [r3, #0]
 81073f6:	f3bf 8f4f 	dsb	sy
 81073fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 81073fe:	bf00      	nop
 8107400:	3710      	adds	r7, #16
 8107402:	46bd      	mov	sp, r7
 8107404:	bd80      	pop	{r7, pc}
 8107406:	bf00      	nop
 8107408:	1000462c 	.word	0x1000462c
 810740c:	10004b1c 	.word	0x10004b1c
 8107410:	10004ad4 	.word	0x10004ad4
 8107414:	10004ae8 	.word	0x10004ae8
 8107418:	10004b00 	.word	0x10004b00
 810741c:	10004b0c 	.word	0x10004b0c
 8107420:	10004b28 	.word	0x10004b28
 8107424:	e000ed04 	.word	0xe000ed04

08107428 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8107428:	b580      	push	{r7, lr}
 810742a:	b084      	sub	sp, #16
 810742c:	af00      	add	r7, sp, #0
 810742e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8107430:	2300      	movs	r3, #0
 8107432:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8107434:	687b      	ldr	r3, [r7, #4]
 8107436:	2b00      	cmp	r3, #0
 8107438:	d018      	beq.n	810746c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810743a:	4b14      	ldr	r3, [pc, #80]	@ (810748c <vTaskDelay+0x64>)
 810743c:	681b      	ldr	r3, [r3, #0]
 810743e:	2b00      	cmp	r3, #0
 8107440:	d00b      	beq.n	810745a <vTaskDelay+0x32>
	__asm volatile
 8107442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107446:	f383 8811 	msr	BASEPRI, r3
 810744a:	f3bf 8f6f 	isb	sy
 810744e:	f3bf 8f4f 	dsb	sy
 8107452:	60bb      	str	r3, [r7, #8]
}
 8107454:	bf00      	nop
 8107456:	bf00      	nop
 8107458:	e7fd      	b.n	8107456 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810745a:	f000 f8f3 	bl	8107644 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810745e:	2100      	movs	r1, #0
 8107460:	6878      	ldr	r0, [r7, #4]
 8107462:	f000 fe71 	bl	8108148 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8107466:	f000 f8fb 	bl	8107660 <xTaskResumeAll>
 810746a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810746c:	68fb      	ldr	r3, [r7, #12]
 810746e:	2b00      	cmp	r3, #0
 8107470:	d107      	bne.n	8107482 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8107472:	4b07      	ldr	r3, [pc, #28]	@ (8107490 <vTaskDelay+0x68>)
 8107474:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107478:	601a      	str	r2, [r3, #0]
 810747a:	f3bf 8f4f 	dsb	sy
 810747e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8107482:	bf00      	nop
 8107484:	3710      	adds	r7, #16
 8107486:	46bd      	mov	sp, r7
 8107488:	bd80      	pop	{r7, pc}
 810748a:	bf00      	nop
 810748c:	10004b28 	.word	0x10004b28
 8107490:	e000ed04 	.word	0xe000ed04

08107494 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8107494:	b580      	push	{r7, lr}
 8107496:	b088      	sub	sp, #32
 8107498:	af00      	add	r7, sp, #0
 810749a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 810749c:	687b      	ldr	r3, [r7, #4]
 810749e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 81074a0:	69bb      	ldr	r3, [r7, #24]
 81074a2:	2b00      	cmp	r3, #0
 81074a4:	d10b      	bne.n	81074be <eTaskGetState+0x2a>
	__asm volatile
 81074a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81074aa:	f383 8811 	msr	BASEPRI, r3
 81074ae:	f3bf 8f6f 	isb	sy
 81074b2:	f3bf 8f4f 	dsb	sy
 81074b6:	60bb      	str	r3, [r7, #8]
}
 81074b8:	bf00      	nop
 81074ba:	bf00      	nop
 81074bc:	e7fd      	b.n	81074ba <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 81074be:	4b24      	ldr	r3, [pc, #144]	@ (8107550 <eTaskGetState+0xbc>)
 81074c0:	681b      	ldr	r3, [r3, #0]
 81074c2:	69ba      	ldr	r2, [r7, #24]
 81074c4:	429a      	cmp	r2, r3
 81074c6:	d102      	bne.n	81074ce <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 81074c8:	2300      	movs	r3, #0
 81074ca:	77fb      	strb	r3, [r7, #31]
 81074cc:	e03a      	b.n	8107544 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 81074ce:	f7fe fc2b 	bl	8105d28 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 81074d2:	69bb      	ldr	r3, [r7, #24]
 81074d4:	695b      	ldr	r3, [r3, #20]
 81074d6:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 81074d8:	4b1e      	ldr	r3, [pc, #120]	@ (8107554 <eTaskGetState+0xc0>)
 81074da:	681b      	ldr	r3, [r3, #0]
 81074dc:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 81074de:	4b1e      	ldr	r3, [pc, #120]	@ (8107558 <eTaskGetState+0xc4>)
 81074e0:	681b      	ldr	r3, [r3, #0]
 81074e2:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 81074e4:	f7fe fc52 	bl	8105d8c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 81074e8:	697a      	ldr	r2, [r7, #20]
 81074ea:	693b      	ldr	r3, [r7, #16]
 81074ec:	429a      	cmp	r2, r3
 81074ee:	d003      	beq.n	81074f8 <eTaskGetState+0x64>
 81074f0:	697a      	ldr	r2, [r7, #20]
 81074f2:	68fb      	ldr	r3, [r7, #12]
 81074f4:	429a      	cmp	r2, r3
 81074f6:	d102      	bne.n	81074fe <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 81074f8:	2302      	movs	r3, #2
 81074fa:	77fb      	strb	r3, [r7, #31]
 81074fc:	e022      	b.n	8107544 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 81074fe:	697b      	ldr	r3, [r7, #20]
 8107500:	4a16      	ldr	r2, [pc, #88]	@ (810755c <eTaskGetState+0xc8>)
 8107502:	4293      	cmp	r3, r2
 8107504:	d112      	bne.n	810752c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8107506:	69bb      	ldr	r3, [r7, #24]
 8107508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810750a:	2b00      	cmp	r3, #0
 810750c:	d10b      	bne.n	8107526 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 810750e:	69bb      	ldr	r3, [r7, #24]
 8107510:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8107514:	b2db      	uxtb	r3, r3
 8107516:	2b01      	cmp	r3, #1
 8107518:	d102      	bne.n	8107520 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 810751a:	2302      	movs	r3, #2
 810751c:	77fb      	strb	r3, [r7, #31]
 810751e:	e011      	b.n	8107544 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8107520:	2303      	movs	r3, #3
 8107522:	77fb      	strb	r3, [r7, #31]
 8107524:	e00e      	b.n	8107544 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8107526:	2302      	movs	r3, #2
 8107528:	77fb      	strb	r3, [r7, #31]
 810752a:	e00b      	b.n	8107544 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 810752c:	697b      	ldr	r3, [r7, #20]
 810752e:	4a0c      	ldr	r2, [pc, #48]	@ (8107560 <eTaskGetState+0xcc>)
 8107530:	4293      	cmp	r3, r2
 8107532:	d002      	beq.n	810753a <eTaskGetState+0xa6>
 8107534:	697b      	ldr	r3, [r7, #20]
 8107536:	2b00      	cmp	r3, #0
 8107538:	d102      	bne.n	8107540 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 810753a:	2304      	movs	r3, #4
 810753c:	77fb      	strb	r3, [r7, #31]
 810753e:	e001      	b.n	8107544 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8107540:	2301      	movs	r3, #1
 8107542:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8107544:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8107546:	4618      	mov	r0, r3
 8107548:	3720      	adds	r7, #32
 810754a:	46bd      	mov	sp, r7
 810754c:	bd80      	pop	{r7, pc}
 810754e:	bf00      	nop
 8107550:	1000462c 	.word	0x1000462c
 8107554:	10004ab8 	.word	0x10004ab8
 8107558:	10004abc 	.word	0x10004abc
 810755c:	10004aec 	.word	0x10004aec
 8107560:	10004ad4 	.word	0x10004ad4

08107564 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8107564:	b580      	push	{r7, lr}
 8107566:	b08a      	sub	sp, #40	@ 0x28
 8107568:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810756a:	2300      	movs	r3, #0
 810756c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810756e:	2300      	movs	r3, #0
 8107570:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8107572:	463a      	mov	r2, r7
 8107574:	1d39      	adds	r1, r7, #4
 8107576:	f107 0308 	add.w	r3, r7, #8
 810757a:	4618      	mov	r0, r3
 810757c:	f7fd ffcc 	bl	8105518 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8107580:	6839      	ldr	r1, [r7, #0]
 8107582:	687b      	ldr	r3, [r7, #4]
 8107584:	68ba      	ldr	r2, [r7, #8]
 8107586:	9202      	str	r2, [sp, #8]
 8107588:	9301      	str	r3, [sp, #4]
 810758a:	2300      	movs	r3, #0
 810758c:	9300      	str	r3, [sp, #0]
 810758e:	2300      	movs	r3, #0
 8107590:	460a      	mov	r2, r1
 8107592:	4924      	ldr	r1, [pc, #144]	@ (8107624 <vTaskStartScheduler+0xc0>)
 8107594:	4824      	ldr	r0, [pc, #144]	@ (8107628 <vTaskStartScheduler+0xc4>)
 8107596:	f7ff fd15 	bl	8106fc4 <xTaskCreateStatic>
 810759a:	4603      	mov	r3, r0
 810759c:	4a23      	ldr	r2, [pc, #140]	@ (810762c <vTaskStartScheduler+0xc8>)
 810759e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 81075a0:	4b22      	ldr	r3, [pc, #136]	@ (810762c <vTaskStartScheduler+0xc8>)
 81075a2:	681b      	ldr	r3, [r3, #0]
 81075a4:	2b00      	cmp	r3, #0
 81075a6:	d002      	beq.n	81075ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 81075a8:	2301      	movs	r3, #1
 81075aa:	617b      	str	r3, [r7, #20]
 81075ac:	e001      	b.n	81075b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 81075ae:	2300      	movs	r3, #0
 81075b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 81075b2:	697b      	ldr	r3, [r7, #20]
 81075b4:	2b01      	cmp	r3, #1
 81075b6:	d102      	bne.n	81075be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 81075b8:	f000 fe1a 	bl	81081f0 <xTimerCreateTimerTask>
 81075bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 81075be:	697b      	ldr	r3, [r7, #20]
 81075c0:	2b01      	cmp	r3, #1
 81075c2:	d11b      	bne.n	81075fc <vTaskStartScheduler+0x98>
	__asm volatile
 81075c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81075c8:	f383 8811 	msr	BASEPRI, r3
 81075cc:	f3bf 8f6f 	isb	sy
 81075d0:	f3bf 8f4f 	dsb	sy
 81075d4:	613b      	str	r3, [r7, #16]
}
 81075d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 81075d8:	4b15      	ldr	r3, [pc, #84]	@ (8107630 <vTaskStartScheduler+0xcc>)
 81075da:	681b      	ldr	r3, [r3, #0]
 81075dc:	3354      	adds	r3, #84	@ 0x54
 81075de:	4a15      	ldr	r2, [pc, #84]	@ (8107634 <vTaskStartScheduler+0xd0>)
 81075e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 81075e2:	4b15      	ldr	r3, [pc, #84]	@ (8107638 <vTaskStartScheduler+0xd4>)
 81075e4:	f04f 32ff 	mov.w	r2, #4294967295
 81075e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 81075ea:	4b14      	ldr	r3, [pc, #80]	@ (810763c <vTaskStartScheduler+0xd8>)
 81075ec:	2201      	movs	r2, #1
 81075ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 81075f0:	4b13      	ldr	r3, [pc, #76]	@ (8107640 <vTaskStartScheduler+0xdc>)
 81075f2:	2200      	movs	r2, #0
 81075f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81075f6:	f7fe faf3 	bl	8105be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81075fa:	e00f      	b.n	810761c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81075fc:	697b      	ldr	r3, [r7, #20]
 81075fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107602:	d10b      	bne.n	810761c <vTaskStartScheduler+0xb8>
	__asm volatile
 8107604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107608:	f383 8811 	msr	BASEPRI, r3
 810760c:	f3bf 8f6f 	isb	sy
 8107610:	f3bf 8f4f 	dsb	sy
 8107614:	60fb      	str	r3, [r7, #12]
}
 8107616:	bf00      	nop
 8107618:	bf00      	nop
 810761a:	e7fd      	b.n	8107618 <vTaskStartScheduler+0xb4>
}
 810761c:	bf00      	nop
 810761e:	3718      	adds	r7, #24
 8107620:	46bd      	mov	sp, r7
 8107622:	bd80      	pop	{r7, pc}
 8107624:	0810c47c 	.word	0x0810c47c
 8107628:	08107c75 	.word	0x08107c75
 810762c:	10004b24 	.word	0x10004b24
 8107630:	1000462c 	.word	0x1000462c
 8107634:	100000c8 	.word	0x100000c8
 8107638:	10004b20 	.word	0x10004b20
 810763c:	10004b0c 	.word	0x10004b0c
 8107640:	10004b04 	.word	0x10004b04

08107644 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8107644:	b480      	push	{r7}
 8107646:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8107648:	4b04      	ldr	r3, [pc, #16]	@ (810765c <vTaskSuspendAll+0x18>)
 810764a:	681b      	ldr	r3, [r3, #0]
 810764c:	3301      	adds	r3, #1
 810764e:	4a03      	ldr	r2, [pc, #12]	@ (810765c <vTaskSuspendAll+0x18>)
 8107650:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8107652:	bf00      	nop
 8107654:	46bd      	mov	sp, r7
 8107656:	f85d 7b04 	ldr.w	r7, [sp], #4
 810765a:	4770      	bx	lr
 810765c:	10004b28 	.word	0x10004b28

08107660 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8107660:	b580      	push	{r7, lr}
 8107662:	b084      	sub	sp, #16
 8107664:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8107666:	2300      	movs	r3, #0
 8107668:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810766a:	2300      	movs	r3, #0
 810766c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810766e:	4b42      	ldr	r3, [pc, #264]	@ (8107778 <xTaskResumeAll+0x118>)
 8107670:	681b      	ldr	r3, [r3, #0]
 8107672:	2b00      	cmp	r3, #0
 8107674:	d10b      	bne.n	810768e <xTaskResumeAll+0x2e>
	__asm volatile
 8107676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810767a:	f383 8811 	msr	BASEPRI, r3
 810767e:	f3bf 8f6f 	isb	sy
 8107682:	f3bf 8f4f 	dsb	sy
 8107686:	603b      	str	r3, [r7, #0]
}
 8107688:	bf00      	nop
 810768a:	bf00      	nop
 810768c:	e7fd      	b.n	810768a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810768e:	f7fe fb4b 	bl	8105d28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8107692:	4b39      	ldr	r3, [pc, #228]	@ (8107778 <xTaskResumeAll+0x118>)
 8107694:	681b      	ldr	r3, [r3, #0]
 8107696:	3b01      	subs	r3, #1
 8107698:	4a37      	ldr	r2, [pc, #220]	@ (8107778 <xTaskResumeAll+0x118>)
 810769a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810769c:	4b36      	ldr	r3, [pc, #216]	@ (8107778 <xTaskResumeAll+0x118>)
 810769e:	681b      	ldr	r3, [r3, #0]
 81076a0:	2b00      	cmp	r3, #0
 81076a2:	d162      	bne.n	810776a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 81076a4:	4b35      	ldr	r3, [pc, #212]	@ (810777c <xTaskResumeAll+0x11c>)
 81076a6:	681b      	ldr	r3, [r3, #0]
 81076a8:	2b00      	cmp	r3, #0
 81076aa:	d05e      	beq.n	810776a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81076ac:	e02f      	b.n	810770e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81076ae:	4b34      	ldr	r3, [pc, #208]	@ (8107780 <xTaskResumeAll+0x120>)
 81076b0:	68db      	ldr	r3, [r3, #12]
 81076b2:	68db      	ldr	r3, [r3, #12]
 81076b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81076b6:	68fb      	ldr	r3, [r7, #12]
 81076b8:	3318      	adds	r3, #24
 81076ba:	4618      	mov	r0, r3
 81076bc:	f7fe f9d8 	bl	8105a70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81076c0:	68fb      	ldr	r3, [r7, #12]
 81076c2:	3304      	adds	r3, #4
 81076c4:	4618      	mov	r0, r3
 81076c6:	f7fe f9d3 	bl	8105a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 81076ca:	68fb      	ldr	r3, [r7, #12]
 81076cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81076ce:	4b2d      	ldr	r3, [pc, #180]	@ (8107784 <xTaskResumeAll+0x124>)
 81076d0:	681b      	ldr	r3, [r3, #0]
 81076d2:	429a      	cmp	r2, r3
 81076d4:	d903      	bls.n	81076de <xTaskResumeAll+0x7e>
 81076d6:	68fb      	ldr	r3, [r7, #12]
 81076d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81076da:	4a2a      	ldr	r2, [pc, #168]	@ (8107784 <xTaskResumeAll+0x124>)
 81076dc:	6013      	str	r3, [r2, #0]
 81076de:	68fb      	ldr	r3, [r7, #12]
 81076e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81076e2:	4613      	mov	r3, r2
 81076e4:	009b      	lsls	r3, r3, #2
 81076e6:	4413      	add	r3, r2
 81076e8:	009b      	lsls	r3, r3, #2
 81076ea:	4a27      	ldr	r2, [pc, #156]	@ (8107788 <xTaskResumeAll+0x128>)
 81076ec:	441a      	add	r2, r3
 81076ee:	68fb      	ldr	r3, [r7, #12]
 81076f0:	3304      	adds	r3, #4
 81076f2:	4619      	mov	r1, r3
 81076f4:	4610      	mov	r0, r2
 81076f6:	f7fe f95e 	bl	81059b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81076fa:	68fb      	ldr	r3, [r7, #12]
 81076fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81076fe:	4b23      	ldr	r3, [pc, #140]	@ (810778c <xTaskResumeAll+0x12c>)
 8107700:	681b      	ldr	r3, [r3, #0]
 8107702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107704:	429a      	cmp	r2, r3
 8107706:	d302      	bcc.n	810770e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8107708:	4b21      	ldr	r3, [pc, #132]	@ (8107790 <xTaskResumeAll+0x130>)
 810770a:	2201      	movs	r2, #1
 810770c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810770e:	4b1c      	ldr	r3, [pc, #112]	@ (8107780 <xTaskResumeAll+0x120>)
 8107710:	681b      	ldr	r3, [r3, #0]
 8107712:	2b00      	cmp	r3, #0
 8107714:	d1cb      	bne.n	81076ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8107716:	68fb      	ldr	r3, [r7, #12]
 8107718:	2b00      	cmp	r3, #0
 810771a:	d001      	beq.n	8107720 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810771c:	f000 fb66 	bl	8107dec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8107720:	4b1c      	ldr	r3, [pc, #112]	@ (8107794 <xTaskResumeAll+0x134>)
 8107722:	681b      	ldr	r3, [r3, #0]
 8107724:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8107726:	687b      	ldr	r3, [r7, #4]
 8107728:	2b00      	cmp	r3, #0
 810772a:	d010      	beq.n	810774e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810772c:	f000 f846 	bl	81077bc <xTaskIncrementTick>
 8107730:	4603      	mov	r3, r0
 8107732:	2b00      	cmp	r3, #0
 8107734:	d002      	beq.n	810773c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8107736:	4b16      	ldr	r3, [pc, #88]	@ (8107790 <xTaskResumeAll+0x130>)
 8107738:	2201      	movs	r2, #1
 810773a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810773c:	687b      	ldr	r3, [r7, #4]
 810773e:	3b01      	subs	r3, #1
 8107740:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8107742:	687b      	ldr	r3, [r7, #4]
 8107744:	2b00      	cmp	r3, #0
 8107746:	d1f1      	bne.n	810772c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8107748:	4b12      	ldr	r3, [pc, #72]	@ (8107794 <xTaskResumeAll+0x134>)
 810774a:	2200      	movs	r2, #0
 810774c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810774e:	4b10      	ldr	r3, [pc, #64]	@ (8107790 <xTaskResumeAll+0x130>)
 8107750:	681b      	ldr	r3, [r3, #0]
 8107752:	2b00      	cmp	r3, #0
 8107754:	d009      	beq.n	810776a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8107756:	2301      	movs	r3, #1
 8107758:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810775a:	4b0f      	ldr	r3, [pc, #60]	@ (8107798 <xTaskResumeAll+0x138>)
 810775c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107760:	601a      	str	r2, [r3, #0]
 8107762:	f3bf 8f4f 	dsb	sy
 8107766:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810776a:	f7fe fb0f 	bl	8105d8c <vPortExitCritical>

	return xAlreadyYielded;
 810776e:	68bb      	ldr	r3, [r7, #8]
}
 8107770:	4618      	mov	r0, r3
 8107772:	3710      	adds	r7, #16
 8107774:	46bd      	mov	sp, r7
 8107776:	bd80      	pop	{r7, pc}
 8107778:	10004b28 	.word	0x10004b28
 810777c:	10004b00 	.word	0x10004b00
 8107780:	10004ac0 	.word	0x10004ac0
 8107784:	10004b08 	.word	0x10004b08
 8107788:	10004630 	.word	0x10004630
 810778c:	1000462c 	.word	0x1000462c
 8107790:	10004b14 	.word	0x10004b14
 8107794:	10004b10 	.word	0x10004b10
 8107798:	e000ed04 	.word	0xe000ed04

0810779c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810779c:	b480      	push	{r7}
 810779e:	b083      	sub	sp, #12
 81077a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 81077a2:	4b05      	ldr	r3, [pc, #20]	@ (81077b8 <xTaskGetTickCount+0x1c>)
 81077a4:	681b      	ldr	r3, [r3, #0]
 81077a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 81077a8:	687b      	ldr	r3, [r7, #4]
}
 81077aa:	4618      	mov	r0, r3
 81077ac:	370c      	adds	r7, #12
 81077ae:	46bd      	mov	sp, r7
 81077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077b4:	4770      	bx	lr
 81077b6:	bf00      	nop
 81077b8:	10004b04 	.word	0x10004b04

081077bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81077bc:	b580      	push	{r7, lr}
 81077be:	b086      	sub	sp, #24
 81077c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81077c2:	2300      	movs	r3, #0
 81077c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81077c6:	4b4f      	ldr	r3, [pc, #316]	@ (8107904 <xTaskIncrementTick+0x148>)
 81077c8:	681b      	ldr	r3, [r3, #0]
 81077ca:	2b00      	cmp	r3, #0
 81077cc:	f040 8090 	bne.w	81078f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 81077d0:	4b4d      	ldr	r3, [pc, #308]	@ (8107908 <xTaskIncrementTick+0x14c>)
 81077d2:	681b      	ldr	r3, [r3, #0]
 81077d4:	3301      	adds	r3, #1
 81077d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 81077d8:	4a4b      	ldr	r2, [pc, #300]	@ (8107908 <xTaskIncrementTick+0x14c>)
 81077da:	693b      	ldr	r3, [r7, #16]
 81077dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 81077de:	693b      	ldr	r3, [r7, #16]
 81077e0:	2b00      	cmp	r3, #0
 81077e2:	d121      	bne.n	8107828 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 81077e4:	4b49      	ldr	r3, [pc, #292]	@ (810790c <xTaskIncrementTick+0x150>)
 81077e6:	681b      	ldr	r3, [r3, #0]
 81077e8:	681b      	ldr	r3, [r3, #0]
 81077ea:	2b00      	cmp	r3, #0
 81077ec:	d00b      	beq.n	8107806 <xTaskIncrementTick+0x4a>
	__asm volatile
 81077ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81077f2:	f383 8811 	msr	BASEPRI, r3
 81077f6:	f3bf 8f6f 	isb	sy
 81077fa:	f3bf 8f4f 	dsb	sy
 81077fe:	603b      	str	r3, [r7, #0]
}
 8107800:	bf00      	nop
 8107802:	bf00      	nop
 8107804:	e7fd      	b.n	8107802 <xTaskIncrementTick+0x46>
 8107806:	4b41      	ldr	r3, [pc, #260]	@ (810790c <xTaskIncrementTick+0x150>)
 8107808:	681b      	ldr	r3, [r3, #0]
 810780a:	60fb      	str	r3, [r7, #12]
 810780c:	4b40      	ldr	r3, [pc, #256]	@ (8107910 <xTaskIncrementTick+0x154>)
 810780e:	681b      	ldr	r3, [r3, #0]
 8107810:	4a3e      	ldr	r2, [pc, #248]	@ (810790c <xTaskIncrementTick+0x150>)
 8107812:	6013      	str	r3, [r2, #0]
 8107814:	4a3e      	ldr	r2, [pc, #248]	@ (8107910 <xTaskIncrementTick+0x154>)
 8107816:	68fb      	ldr	r3, [r7, #12]
 8107818:	6013      	str	r3, [r2, #0]
 810781a:	4b3e      	ldr	r3, [pc, #248]	@ (8107914 <xTaskIncrementTick+0x158>)
 810781c:	681b      	ldr	r3, [r3, #0]
 810781e:	3301      	adds	r3, #1
 8107820:	4a3c      	ldr	r2, [pc, #240]	@ (8107914 <xTaskIncrementTick+0x158>)
 8107822:	6013      	str	r3, [r2, #0]
 8107824:	f000 fae2 	bl	8107dec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8107828:	4b3b      	ldr	r3, [pc, #236]	@ (8107918 <xTaskIncrementTick+0x15c>)
 810782a:	681b      	ldr	r3, [r3, #0]
 810782c:	693a      	ldr	r2, [r7, #16]
 810782e:	429a      	cmp	r2, r3
 8107830:	d349      	bcc.n	81078c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107832:	4b36      	ldr	r3, [pc, #216]	@ (810790c <xTaskIncrementTick+0x150>)
 8107834:	681b      	ldr	r3, [r3, #0]
 8107836:	681b      	ldr	r3, [r3, #0]
 8107838:	2b00      	cmp	r3, #0
 810783a:	d104      	bne.n	8107846 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810783c:	4b36      	ldr	r3, [pc, #216]	@ (8107918 <xTaskIncrementTick+0x15c>)
 810783e:	f04f 32ff 	mov.w	r2, #4294967295
 8107842:	601a      	str	r2, [r3, #0]
					break;
 8107844:	e03f      	b.n	81078c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107846:	4b31      	ldr	r3, [pc, #196]	@ (810790c <xTaskIncrementTick+0x150>)
 8107848:	681b      	ldr	r3, [r3, #0]
 810784a:	68db      	ldr	r3, [r3, #12]
 810784c:	68db      	ldr	r3, [r3, #12]
 810784e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8107850:	68bb      	ldr	r3, [r7, #8]
 8107852:	685b      	ldr	r3, [r3, #4]
 8107854:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8107856:	693a      	ldr	r2, [r7, #16]
 8107858:	687b      	ldr	r3, [r7, #4]
 810785a:	429a      	cmp	r2, r3
 810785c:	d203      	bcs.n	8107866 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810785e:	4a2e      	ldr	r2, [pc, #184]	@ (8107918 <xTaskIncrementTick+0x15c>)
 8107860:	687b      	ldr	r3, [r7, #4]
 8107862:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8107864:	e02f      	b.n	81078c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107866:	68bb      	ldr	r3, [r7, #8]
 8107868:	3304      	adds	r3, #4
 810786a:	4618      	mov	r0, r3
 810786c:	f7fe f900 	bl	8105a70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8107870:	68bb      	ldr	r3, [r7, #8]
 8107872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107874:	2b00      	cmp	r3, #0
 8107876:	d004      	beq.n	8107882 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8107878:	68bb      	ldr	r3, [r7, #8]
 810787a:	3318      	adds	r3, #24
 810787c:	4618      	mov	r0, r3
 810787e:	f7fe f8f7 	bl	8105a70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8107882:	68bb      	ldr	r3, [r7, #8]
 8107884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107886:	4b25      	ldr	r3, [pc, #148]	@ (810791c <xTaskIncrementTick+0x160>)
 8107888:	681b      	ldr	r3, [r3, #0]
 810788a:	429a      	cmp	r2, r3
 810788c:	d903      	bls.n	8107896 <xTaskIncrementTick+0xda>
 810788e:	68bb      	ldr	r3, [r7, #8]
 8107890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107892:	4a22      	ldr	r2, [pc, #136]	@ (810791c <xTaskIncrementTick+0x160>)
 8107894:	6013      	str	r3, [r2, #0]
 8107896:	68bb      	ldr	r3, [r7, #8]
 8107898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810789a:	4613      	mov	r3, r2
 810789c:	009b      	lsls	r3, r3, #2
 810789e:	4413      	add	r3, r2
 81078a0:	009b      	lsls	r3, r3, #2
 81078a2:	4a1f      	ldr	r2, [pc, #124]	@ (8107920 <xTaskIncrementTick+0x164>)
 81078a4:	441a      	add	r2, r3
 81078a6:	68bb      	ldr	r3, [r7, #8]
 81078a8:	3304      	adds	r3, #4
 81078aa:	4619      	mov	r1, r3
 81078ac:	4610      	mov	r0, r2
 81078ae:	f7fe f882 	bl	81059b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81078b2:	68bb      	ldr	r3, [r7, #8]
 81078b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81078b6:	4b1b      	ldr	r3, [pc, #108]	@ (8107924 <xTaskIncrementTick+0x168>)
 81078b8:	681b      	ldr	r3, [r3, #0]
 81078ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81078bc:	429a      	cmp	r2, r3
 81078be:	d3b8      	bcc.n	8107832 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 81078c0:	2301      	movs	r3, #1
 81078c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81078c4:	e7b5      	b.n	8107832 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81078c6:	4b17      	ldr	r3, [pc, #92]	@ (8107924 <xTaskIncrementTick+0x168>)
 81078c8:	681b      	ldr	r3, [r3, #0]
 81078ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81078cc:	4914      	ldr	r1, [pc, #80]	@ (8107920 <xTaskIncrementTick+0x164>)
 81078ce:	4613      	mov	r3, r2
 81078d0:	009b      	lsls	r3, r3, #2
 81078d2:	4413      	add	r3, r2
 81078d4:	009b      	lsls	r3, r3, #2
 81078d6:	440b      	add	r3, r1
 81078d8:	681b      	ldr	r3, [r3, #0]
 81078da:	2b01      	cmp	r3, #1
 81078dc:	d901      	bls.n	81078e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 81078de:	2301      	movs	r3, #1
 81078e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 81078e2:	4b11      	ldr	r3, [pc, #68]	@ (8107928 <xTaskIncrementTick+0x16c>)
 81078e4:	681b      	ldr	r3, [r3, #0]
 81078e6:	2b00      	cmp	r3, #0
 81078e8:	d007      	beq.n	81078fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 81078ea:	2301      	movs	r3, #1
 81078ec:	617b      	str	r3, [r7, #20]
 81078ee:	e004      	b.n	81078fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81078f0:	4b0e      	ldr	r3, [pc, #56]	@ (810792c <xTaskIncrementTick+0x170>)
 81078f2:	681b      	ldr	r3, [r3, #0]
 81078f4:	3301      	adds	r3, #1
 81078f6:	4a0d      	ldr	r2, [pc, #52]	@ (810792c <xTaskIncrementTick+0x170>)
 81078f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81078fa:	697b      	ldr	r3, [r7, #20]
}
 81078fc:	4618      	mov	r0, r3
 81078fe:	3718      	adds	r7, #24
 8107900:	46bd      	mov	sp, r7
 8107902:	bd80      	pop	{r7, pc}
 8107904:	10004b28 	.word	0x10004b28
 8107908:	10004b04 	.word	0x10004b04
 810790c:	10004ab8 	.word	0x10004ab8
 8107910:	10004abc 	.word	0x10004abc
 8107914:	10004b18 	.word	0x10004b18
 8107918:	10004b20 	.word	0x10004b20
 810791c:	10004b08 	.word	0x10004b08
 8107920:	10004630 	.word	0x10004630
 8107924:	1000462c 	.word	0x1000462c
 8107928:	10004b14 	.word	0x10004b14
 810792c:	10004b10 	.word	0x10004b10

08107930 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8107930:	b480      	push	{r7}
 8107932:	b085      	sub	sp, #20
 8107934:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8107936:	4b2b      	ldr	r3, [pc, #172]	@ (81079e4 <vTaskSwitchContext+0xb4>)
 8107938:	681b      	ldr	r3, [r3, #0]
 810793a:	2b00      	cmp	r3, #0
 810793c:	d003      	beq.n	8107946 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810793e:	4b2a      	ldr	r3, [pc, #168]	@ (81079e8 <vTaskSwitchContext+0xb8>)
 8107940:	2201      	movs	r2, #1
 8107942:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8107944:	e047      	b.n	81079d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8107946:	4b28      	ldr	r3, [pc, #160]	@ (81079e8 <vTaskSwitchContext+0xb8>)
 8107948:	2200      	movs	r2, #0
 810794a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810794c:	4b27      	ldr	r3, [pc, #156]	@ (81079ec <vTaskSwitchContext+0xbc>)
 810794e:	681b      	ldr	r3, [r3, #0]
 8107950:	60fb      	str	r3, [r7, #12]
 8107952:	e011      	b.n	8107978 <vTaskSwitchContext+0x48>
 8107954:	68fb      	ldr	r3, [r7, #12]
 8107956:	2b00      	cmp	r3, #0
 8107958:	d10b      	bne.n	8107972 <vTaskSwitchContext+0x42>
	__asm volatile
 810795a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810795e:	f383 8811 	msr	BASEPRI, r3
 8107962:	f3bf 8f6f 	isb	sy
 8107966:	f3bf 8f4f 	dsb	sy
 810796a:	607b      	str	r3, [r7, #4]
}
 810796c:	bf00      	nop
 810796e:	bf00      	nop
 8107970:	e7fd      	b.n	810796e <vTaskSwitchContext+0x3e>
 8107972:	68fb      	ldr	r3, [r7, #12]
 8107974:	3b01      	subs	r3, #1
 8107976:	60fb      	str	r3, [r7, #12]
 8107978:	491d      	ldr	r1, [pc, #116]	@ (81079f0 <vTaskSwitchContext+0xc0>)
 810797a:	68fa      	ldr	r2, [r7, #12]
 810797c:	4613      	mov	r3, r2
 810797e:	009b      	lsls	r3, r3, #2
 8107980:	4413      	add	r3, r2
 8107982:	009b      	lsls	r3, r3, #2
 8107984:	440b      	add	r3, r1
 8107986:	681b      	ldr	r3, [r3, #0]
 8107988:	2b00      	cmp	r3, #0
 810798a:	d0e3      	beq.n	8107954 <vTaskSwitchContext+0x24>
 810798c:	68fa      	ldr	r2, [r7, #12]
 810798e:	4613      	mov	r3, r2
 8107990:	009b      	lsls	r3, r3, #2
 8107992:	4413      	add	r3, r2
 8107994:	009b      	lsls	r3, r3, #2
 8107996:	4a16      	ldr	r2, [pc, #88]	@ (81079f0 <vTaskSwitchContext+0xc0>)
 8107998:	4413      	add	r3, r2
 810799a:	60bb      	str	r3, [r7, #8]
 810799c:	68bb      	ldr	r3, [r7, #8]
 810799e:	685b      	ldr	r3, [r3, #4]
 81079a0:	685a      	ldr	r2, [r3, #4]
 81079a2:	68bb      	ldr	r3, [r7, #8]
 81079a4:	605a      	str	r2, [r3, #4]
 81079a6:	68bb      	ldr	r3, [r7, #8]
 81079a8:	685a      	ldr	r2, [r3, #4]
 81079aa:	68bb      	ldr	r3, [r7, #8]
 81079ac:	3308      	adds	r3, #8
 81079ae:	429a      	cmp	r2, r3
 81079b0:	d104      	bne.n	81079bc <vTaskSwitchContext+0x8c>
 81079b2:	68bb      	ldr	r3, [r7, #8]
 81079b4:	685b      	ldr	r3, [r3, #4]
 81079b6:	685a      	ldr	r2, [r3, #4]
 81079b8:	68bb      	ldr	r3, [r7, #8]
 81079ba:	605a      	str	r2, [r3, #4]
 81079bc:	68bb      	ldr	r3, [r7, #8]
 81079be:	685b      	ldr	r3, [r3, #4]
 81079c0:	68db      	ldr	r3, [r3, #12]
 81079c2:	4a0c      	ldr	r2, [pc, #48]	@ (81079f4 <vTaskSwitchContext+0xc4>)
 81079c4:	6013      	str	r3, [r2, #0]
 81079c6:	4a09      	ldr	r2, [pc, #36]	@ (81079ec <vTaskSwitchContext+0xbc>)
 81079c8:	68fb      	ldr	r3, [r7, #12]
 81079ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 81079cc:	4b09      	ldr	r3, [pc, #36]	@ (81079f4 <vTaskSwitchContext+0xc4>)
 81079ce:	681b      	ldr	r3, [r3, #0]
 81079d0:	3354      	adds	r3, #84	@ 0x54
 81079d2:	4a09      	ldr	r2, [pc, #36]	@ (81079f8 <vTaskSwitchContext+0xc8>)
 81079d4:	6013      	str	r3, [r2, #0]
}
 81079d6:	bf00      	nop
 81079d8:	3714      	adds	r7, #20
 81079da:	46bd      	mov	sp, r7
 81079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079e0:	4770      	bx	lr
 81079e2:	bf00      	nop
 81079e4:	10004b28 	.word	0x10004b28
 81079e8:	10004b14 	.word	0x10004b14
 81079ec:	10004b08 	.word	0x10004b08
 81079f0:	10004630 	.word	0x10004630
 81079f4:	1000462c 	.word	0x1000462c
 81079f8:	100000c8 	.word	0x100000c8

081079fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 81079fc:	b580      	push	{r7, lr}
 81079fe:	b084      	sub	sp, #16
 8107a00:	af00      	add	r7, sp, #0
 8107a02:	6078      	str	r0, [r7, #4]
 8107a04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8107a06:	687b      	ldr	r3, [r7, #4]
 8107a08:	2b00      	cmp	r3, #0
 8107a0a:	d10b      	bne.n	8107a24 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8107a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107a10:	f383 8811 	msr	BASEPRI, r3
 8107a14:	f3bf 8f6f 	isb	sy
 8107a18:	f3bf 8f4f 	dsb	sy
 8107a1c:	60fb      	str	r3, [r7, #12]
}
 8107a1e:	bf00      	nop
 8107a20:	bf00      	nop
 8107a22:	e7fd      	b.n	8107a20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8107a24:	4b07      	ldr	r3, [pc, #28]	@ (8107a44 <vTaskPlaceOnEventList+0x48>)
 8107a26:	681b      	ldr	r3, [r3, #0]
 8107a28:	3318      	adds	r3, #24
 8107a2a:	4619      	mov	r1, r3
 8107a2c:	6878      	ldr	r0, [r7, #4]
 8107a2e:	f7fd ffe6 	bl	81059fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8107a32:	2101      	movs	r1, #1
 8107a34:	6838      	ldr	r0, [r7, #0]
 8107a36:	f000 fb87 	bl	8108148 <prvAddCurrentTaskToDelayedList>
}
 8107a3a:	bf00      	nop
 8107a3c:	3710      	adds	r7, #16
 8107a3e:	46bd      	mov	sp, r7
 8107a40:	bd80      	pop	{r7, pc}
 8107a42:	bf00      	nop
 8107a44:	1000462c 	.word	0x1000462c

08107a48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8107a48:	b580      	push	{r7, lr}
 8107a4a:	b086      	sub	sp, #24
 8107a4c:	af00      	add	r7, sp, #0
 8107a4e:	60f8      	str	r0, [r7, #12]
 8107a50:	60b9      	str	r1, [r7, #8]
 8107a52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8107a54:	68fb      	ldr	r3, [r7, #12]
 8107a56:	2b00      	cmp	r3, #0
 8107a58:	d10b      	bne.n	8107a72 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8107a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107a5e:	f383 8811 	msr	BASEPRI, r3
 8107a62:	f3bf 8f6f 	isb	sy
 8107a66:	f3bf 8f4f 	dsb	sy
 8107a6a:	617b      	str	r3, [r7, #20]
}
 8107a6c:	bf00      	nop
 8107a6e:	bf00      	nop
 8107a70:	e7fd      	b.n	8107a6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8107a72:	4b0a      	ldr	r3, [pc, #40]	@ (8107a9c <vTaskPlaceOnEventListRestricted+0x54>)
 8107a74:	681b      	ldr	r3, [r3, #0]
 8107a76:	3318      	adds	r3, #24
 8107a78:	4619      	mov	r1, r3
 8107a7a:	68f8      	ldr	r0, [r7, #12]
 8107a7c:	f7fd ff9b 	bl	81059b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8107a80:	687b      	ldr	r3, [r7, #4]
 8107a82:	2b00      	cmp	r3, #0
 8107a84:	d002      	beq.n	8107a8c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8107a86:	f04f 33ff 	mov.w	r3, #4294967295
 8107a8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8107a8c:	6879      	ldr	r1, [r7, #4]
 8107a8e:	68b8      	ldr	r0, [r7, #8]
 8107a90:	f000 fb5a 	bl	8108148 <prvAddCurrentTaskToDelayedList>
	}
 8107a94:	bf00      	nop
 8107a96:	3718      	adds	r7, #24
 8107a98:	46bd      	mov	sp, r7
 8107a9a:	bd80      	pop	{r7, pc}
 8107a9c:	1000462c 	.word	0x1000462c

08107aa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8107aa0:	b580      	push	{r7, lr}
 8107aa2:	b086      	sub	sp, #24
 8107aa4:	af00      	add	r7, sp, #0
 8107aa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107aa8:	687b      	ldr	r3, [r7, #4]
 8107aaa:	68db      	ldr	r3, [r3, #12]
 8107aac:	68db      	ldr	r3, [r3, #12]
 8107aae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8107ab0:	693b      	ldr	r3, [r7, #16]
 8107ab2:	2b00      	cmp	r3, #0
 8107ab4:	d10b      	bne.n	8107ace <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8107ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107aba:	f383 8811 	msr	BASEPRI, r3
 8107abe:	f3bf 8f6f 	isb	sy
 8107ac2:	f3bf 8f4f 	dsb	sy
 8107ac6:	60fb      	str	r3, [r7, #12]
}
 8107ac8:	bf00      	nop
 8107aca:	bf00      	nop
 8107acc:	e7fd      	b.n	8107aca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8107ace:	693b      	ldr	r3, [r7, #16]
 8107ad0:	3318      	adds	r3, #24
 8107ad2:	4618      	mov	r0, r3
 8107ad4:	f7fd ffcc 	bl	8105a70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8107b50 <xTaskRemoveFromEventList+0xb0>)
 8107ada:	681b      	ldr	r3, [r3, #0]
 8107adc:	2b00      	cmp	r3, #0
 8107ade:	d11d      	bne.n	8107b1c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8107ae0:	693b      	ldr	r3, [r7, #16]
 8107ae2:	3304      	adds	r3, #4
 8107ae4:	4618      	mov	r0, r3
 8107ae6:	f7fd ffc3 	bl	8105a70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8107aea:	693b      	ldr	r3, [r7, #16]
 8107aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107aee:	4b19      	ldr	r3, [pc, #100]	@ (8107b54 <xTaskRemoveFromEventList+0xb4>)
 8107af0:	681b      	ldr	r3, [r3, #0]
 8107af2:	429a      	cmp	r2, r3
 8107af4:	d903      	bls.n	8107afe <xTaskRemoveFromEventList+0x5e>
 8107af6:	693b      	ldr	r3, [r7, #16]
 8107af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107afa:	4a16      	ldr	r2, [pc, #88]	@ (8107b54 <xTaskRemoveFromEventList+0xb4>)
 8107afc:	6013      	str	r3, [r2, #0]
 8107afe:	693b      	ldr	r3, [r7, #16]
 8107b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107b02:	4613      	mov	r3, r2
 8107b04:	009b      	lsls	r3, r3, #2
 8107b06:	4413      	add	r3, r2
 8107b08:	009b      	lsls	r3, r3, #2
 8107b0a:	4a13      	ldr	r2, [pc, #76]	@ (8107b58 <xTaskRemoveFromEventList+0xb8>)
 8107b0c:	441a      	add	r2, r3
 8107b0e:	693b      	ldr	r3, [r7, #16]
 8107b10:	3304      	adds	r3, #4
 8107b12:	4619      	mov	r1, r3
 8107b14:	4610      	mov	r0, r2
 8107b16:	f7fd ff4e 	bl	81059b6 <vListInsertEnd>
 8107b1a:	e005      	b.n	8107b28 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8107b1c:	693b      	ldr	r3, [r7, #16]
 8107b1e:	3318      	adds	r3, #24
 8107b20:	4619      	mov	r1, r3
 8107b22:	480e      	ldr	r0, [pc, #56]	@ (8107b5c <xTaskRemoveFromEventList+0xbc>)
 8107b24:	f7fd ff47 	bl	81059b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8107b28:	693b      	ldr	r3, [r7, #16]
 8107b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8107b60 <xTaskRemoveFromEventList+0xc0>)
 8107b2e:	681b      	ldr	r3, [r3, #0]
 8107b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107b32:	429a      	cmp	r2, r3
 8107b34:	d905      	bls.n	8107b42 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8107b36:	2301      	movs	r3, #1
 8107b38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8107b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8107b64 <xTaskRemoveFromEventList+0xc4>)
 8107b3c:	2201      	movs	r2, #1
 8107b3e:	601a      	str	r2, [r3, #0]
 8107b40:	e001      	b.n	8107b46 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8107b42:	2300      	movs	r3, #0
 8107b44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8107b46:	697b      	ldr	r3, [r7, #20]
}
 8107b48:	4618      	mov	r0, r3
 8107b4a:	3718      	adds	r7, #24
 8107b4c:	46bd      	mov	sp, r7
 8107b4e:	bd80      	pop	{r7, pc}
 8107b50:	10004b28 	.word	0x10004b28
 8107b54:	10004b08 	.word	0x10004b08
 8107b58:	10004630 	.word	0x10004630
 8107b5c:	10004ac0 	.word	0x10004ac0
 8107b60:	1000462c 	.word	0x1000462c
 8107b64:	10004b14 	.word	0x10004b14

08107b68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8107b68:	b480      	push	{r7}
 8107b6a:	b083      	sub	sp, #12
 8107b6c:	af00      	add	r7, sp, #0
 8107b6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8107b70:	4b06      	ldr	r3, [pc, #24]	@ (8107b8c <vTaskInternalSetTimeOutState+0x24>)
 8107b72:	681a      	ldr	r2, [r3, #0]
 8107b74:	687b      	ldr	r3, [r7, #4]
 8107b76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8107b78:	4b05      	ldr	r3, [pc, #20]	@ (8107b90 <vTaskInternalSetTimeOutState+0x28>)
 8107b7a:	681a      	ldr	r2, [r3, #0]
 8107b7c:	687b      	ldr	r3, [r7, #4]
 8107b7e:	605a      	str	r2, [r3, #4]
}
 8107b80:	bf00      	nop
 8107b82:	370c      	adds	r7, #12
 8107b84:	46bd      	mov	sp, r7
 8107b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b8a:	4770      	bx	lr
 8107b8c:	10004b18 	.word	0x10004b18
 8107b90:	10004b04 	.word	0x10004b04

08107b94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8107b94:	b580      	push	{r7, lr}
 8107b96:	b088      	sub	sp, #32
 8107b98:	af00      	add	r7, sp, #0
 8107b9a:	6078      	str	r0, [r7, #4]
 8107b9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8107b9e:	687b      	ldr	r3, [r7, #4]
 8107ba0:	2b00      	cmp	r3, #0
 8107ba2:	d10b      	bne.n	8107bbc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8107ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107ba8:	f383 8811 	msr	BASEPRI, r3
 8107bac:	f3bf 8f6f 	isb	sy
 8107bb0:	f3bf 8f4f 	dsb	sy
 8107bb4:	613b      	str	r3, [r7, #16]
}
 8107bb6:	bf00      	nop
 8107bb8:	bf00      	nop
 8107bba:	e7fd      	b.n	8107bb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8107bbc:	683b      	ldr	r3, [r7, #0]
 8107bbe:	2b00      	cmp	r3, #0
 8107bc0:	d10b      	bne.n	8107bda <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8107bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107bc6:	f383 8811 	msr	BASEPRI, r3
 8107bca:	f3bf 8f6f 	isb	sy
 8107bce:	f3bf 8f4f 	dsb	sy
 8107bd2:	60fb      	str	r3, [r7, #12]
}
 8107bd4:	bf00      	nop
 8107bd6:	bf00      	nop
 8107bd8:	e7fd      	b.n	8107bd6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8107bda:	f7fe f8a5 	bl	8105d28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8107bde:	4b1d      	ldr	r3, [pc, #116]	@ (8107c54 <xTaskCheckForTimeOut+0xc0>)
 8107be0:	681b      	ldr	r3, [r3, #0]
 8107be2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8107be4:	687b      	ldr	r3, [r7, #4]
 8107be6:	685b      	ldr	r3, [r3, #4]
 8107be8:	69ba      	ldr	r2, [r7, #24]
 8107bea:	1ad3      	subs	r3, r2, r3
 8107bec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8107bee:	683b      	ldr	r3, [r7, #0]
 8107bf0:	681b      	ldr	r3, [r3, #0]
 8107bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107bf6:	d102      	bne.n	8107bfe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8107bf8:	2300      	movs	r3, #0
 8107bfa:	61fb      	str	r3, [r7, #28]
 8107bfc:	e023      	b.n	8107c46 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8107bfe:	687b      	ldr	r3, [r7, #4]
 8107c00:	681a      	ldr	r2, [r3, #0]
 8107c02:	4b15      	ldr	r3, [pc, #84]	@ (8107c58 <xTaskCheckForTimeOut+0xc4>)
 8107c04:	681b      	ldr	r3, [r3, #0]
 8107c06:	429a      	cmp	r2, r3
 8107c08:	d007      	beq.n	8107c1a <xTaskCheckForTimeOut+0x86>
 8107c0a:	687b      	ldr	r3, [r7, #4]
 8107c0c:	685b      	ldr	r3, [r3, #4]
 8107c0e:	69ba      	ldr	r2, [r7, #24]
 8107c10:	429a      	cmp	r2, r3
 8107c12:	d302      	bcc.n	8107c1a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8107c14:	2301      	movs	r3, #1
 8107c16:	61fb      	str	r3, [r7, #28]
 8107c18:	e015      	b.n	8107c46 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8107c1a:	683b      	ldr	r3, [r7, #0]
 8107c1c:	681b      	ldr	r3, [r3, #0]
 8107c1e:	697a      	ldr	r2, [r7, #20]
 8107c20:	429a      	cmp	r2, r3
 8107c22:	d20b      	bcs.n	8107c3c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8107c24:	683b      	ldr	r3, [r7, #0]
 8107c26:	681a      	ldr	r2, [r3, #0]
 8107c28:	697b      	ldr	r3, [r7, #20]
 8107c2a:	1ad2      	subs	r2, r2, r3
 8107c2c:	683b      	ldr	r3, [r7, #0]
 8107c2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8107c30:	6878      	ldr	r0, [r7, #4]
 8107c32:	f7ff ff99 	bl	8107b68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8107c36:	2300      	movs	r3, #0
 8107c38:	61fb      	str	r3, [r7, #28]
 8107c3a:	e004      	b.n	8107c46 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8107c3c:	683b      	ldr	r3, [r7, #0]
 8107c3e:	2200      	movs	r2, #0
 8107c40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8107c42:	2301      	movs	r3, #1
 8107c44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8107c46:	f7fe f8a1 	bl	8105d8c <vPortExitCritical>

	return xReturn;
 8107c4a:	69fb      	ldr	r3, [r7, #28]
}
 8107c4c:	4618      	mov	r0, r3
 8107c4e:	3720      	adds	r7, #32
 8107c50:	46bd      	mov	sp, r7
 8107c52:	bd80      	pop	{r7, pc}
 8107c54:	10004b04 	.word	0x10004b04
 8107c58:	10004b18 	.word	0x10004b18

08107c5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8107c5c:	b480      	push	{r7}
 8107c5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8107c60:	4b03      	ldr	r3, [pc, #12]	@ (8107c70 <vTaskMissedYield+0x14>)
 8107c62:	2201      	movs	r2, #1
 8107c64:	601a      	str	r2, [r3, #0]
}
 8107c66:	bf00      	nop
 8107c68:	46bd      	mov	sp, r7
 8107c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c6e:	4770      	bx	lr
 8107c70:	10004b14 	.word	0x10004b14

08107c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8107c74:	b580      	push	{r7, lr}
 8107c76:	b082      	sub	sp, #8
 8107c78:	af00      	add	r7, sp, #0
 8107c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8107c7c:	f000 f852 	bl	8107d24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8107c80:	4b06      	ldr	r3, [pc, #24]	@ (8107c9c <prvIdleTask+0x28>)
 8107c82:	681b      	ldr	r3, [r3, #0]
 8107c84:	2b01      	cmp	r3, #1
 8107c86:	d9f9      	bls.n	8107c7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8107c88:	4b05      	ldr	r3, [pc, #20]	@ (8107ca0 <prvIdleTask+0x2c>)
 8107c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107c8e:	601a      	str	r2, [r3, #0]
 8107c90:	f3bf 8f4f 	dsb	sy
 8107c94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8107c98:	e7f0      	b.n	8107c7c <prvIdleTask+0x8>
 8107c9a:	bf00      	nop
 8107c9c:	10004630 	.word	0x10004630
 8107ca0:	e000ed04 	.word	0xe000ed04

08107ca4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8107ca4:	b580      	push	{r7, lr}
 8107ca6:	b082      	sub	sp, #8
 8107ca8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8107caa:	2300      	movs	r3, #0
 8107cac:	607b      	str	r3, [r7, #4]
 8107cae:	e00c      	b.n	8107cca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8107cb0:	687a      	ldr	r2, [r7, #4]
 8107cb2:	4613      	mov	r3, r2
 8107cb4:	009b      	lsls	r3, r3, #2
 8107cb6:	4413      	add	r3, r2
 8107cb8:	009b      	lsls	r3, r3, #2
 8107cba:	4a12      	ldr	r2, [pc, #72]	@ (8107d04 <prvInitialiseTaskLists+0x60>)
 8107cbc:	4413      	add	r3, r2
 8107cbe:	4618      	mov	r0, r3
 8107cc0:	f7fd fe4c 	bl	810595c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8107cc4:	687b      	ldr	r3, [r7, #4]
 8107cc6:	3301      	adds	r3, #1
 8107cc8:	607b      	str	r3, [r7, #4]
 8107cca:	687b      	ldr	r3, [r7, #4]
 8107ccc:	2b37      	cmp	r3, #55	@ 0x37
 8107cce:	d9ef      	bls.n	8107cb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8107cd0:	480d      	ldr	r0, [pc, #52]	@ (8107d08 <prvInitialiseTaskLists+0x64>)
 8107cd2:	f7fd fe43 	bl	810595c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8107cd6:	480d      	ldr	r0, [pc, #52]	@ (8107d0c <prvInitialiseTaskLists+0x68>)
 8107cd8:	f7fd fe40 	bl	810595c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8107cdc:	480c      	ldr	r0, [pc, #48]	@ (8107d10 <prvInitialiseTaskLists+0x6c>)
 8107cde:	f7fd fe3d 	bl	810595c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8107ce2:	480c      	ldr	r0, [pc, #48]	@ (8107d14 <prvInitialiseTaskLists+0x70>)
 8107ce4:	f7fd fe3a 	bl	810595c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8107ce8:	480b      	ldr	r0, [pc, #44]	@ (8107d18 <prvInitialiseTaskLists+0x74>)
 8107cea:	f7fd fe37 	bl	810595c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8107cee:	4b0b      	ldr	r3, [pc, #44]	@ (8107d1c <prvInitialiseTaskLists+0x78>)
 8107cf0:	4a05      	ldr	r2, [pc, #20]	@ (8107d08 <prvInitialiseTaskLists+0x64>)
 8107cf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8107cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8107d20 <prvInitialiseTaskLists+0x7c>)
 8107cf6:	4a05      	ldr	r2, [pc, #20]	@ (8107d0c <prvInitialiseTaskLists+0x68>)
 8107cf8:	601a      	str	r2, [r3, #0]
}
 8107cfa:	bf00      	nop
 8107cfc:	3708      	adds	r7, #8
 8107cfe:	46bd      	mov	sp, r7
 8107d00:	bd80      	pop	{r7, pc}
 8107d02:	bf00      	nop
 8107d04:	10004630 	.word	0x10004630
 8107d08:	10004a90 	.word	0x10004a90
 8107d0c:	10004aa4 	.word	0x10004aa4
 8107d10:	10004ac0 	.word	0x10004ac0
 8107d14:	10004ad4 	.word	0x10004ad4
 8107d18:	10004aec 	.word	0x10004aec
 8107d1c:	10004ab8 	.word	0x10004ab8
 8107d20:	10004abc 	.word	0x10004abc

08107d24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8107d24:	b580      	push	{r7, lr}
 8107d26:	b082      	sub	sp, #8
 8107d28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8107d2a:	e019      	b.n	8107d60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8107d2c:	f7fd fffc 	bl	8105d28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107d30:	4b10      	ldr	r3, [pc, #64]	@ (8107d74 <prvCheckTasksWaitingTermination+0x50>)
 8107d32:	68db      	ldr	r3, [r3, #12]
 8107d34:	68db      	ldr	r3, [r3, #12]
 8107d36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107d38:	687b      	ldr	r3, [r7, #4]
 8107d3a:	3304      	adds	r3, #4
 8107d3c:	4618      	mov	r0, r3
 8107d3e:	f7fd fe97 	bl	8105a70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8107d42:	4b0d      	ldr	r3, [pc, #52]	@ (8107d78 <prvCheckTasksWaitingTermination+0x54>)
 8107d44:	681b      	ldr	r3, [r3, #0]
 8107d46:	3b01      	subs	r3, #1
 8107d48:	4a0b      	ldr	r2, [pc, #44]	@ (8107d78 <prvCheckTasksWaitingTermination+0x54>)
 8107d4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8107d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8107d7c <prvCheckTasksWaitingTermination+0x58>)
 8107d4e:	681b      	ldr	r3, [r3, #0]
 8107d50:	3b01      	subs	r3, #1
 8107d52:	4a0a      	ldr	r2, [pc, #40]	@ (8107d7c <prvCheckTasksWaitingTermination+0x58>)
 8107d54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8107d56:	f7fe f819 	bl	8105d8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8107d5a:	6878      	ldr	r0, [r7, #4]
 8107d5c:	f000 f810 	bl	8107d80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8107d60:	4b06      	ldr	r3, [pc, #24]	@ (8107d7c <prvCheckTasksWaitingTermination+0x58>)
 8107d62:	681b      	ldr	r3, [r3, #0]
 8107d64:	2b00      	cmp	r3, #0
 8107d66:	d1e1      	bne.n	8107d2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8107d68:	bf00      	nop
 8107d6a:	bf00      	nop
 8107d6c:	3708      	adds	r7, #8
 8107d6e:	46bd      	mov	sp, r7
 8107d70:	bd80      	pop	{r7, pc}
 8107d72:	bf00      	nop
 8107d74:	10004ad4 	.word	0x10004ad4
 8107d78:	10004b00 	.word	0x10004b00
 8107d7c:	10004ae8 	.word	0x10004ae8

08107d80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8107d80:	b580      	push	{r7, lr}
 8107d82:	b084      	sub	sp, #16
 8107d84:	af00      	add	r7, sp, #0
 8107d86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8107d88:	687b      	ldr	r3, [r7, #4]
 8107d8a:	3354      	adds	r3, #84	@ 0x54
 8107d8c:	4618      	mov	r0, r3
 8107d8e:	f003 fba9 	bl	810b4e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8107d92:	687b      	ldr	r3, [r7, #4]
 8107d94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8107d98:	2b00      	cmp	r3, #0
 8107d9a:	d108      	bne.n	8107dae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8107d9c:	687b      	ldr	r3, [r7, #4]
 8107d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107da0:	4618      	mov	r0, r3
 8107da2:	f7fd fcbb 	bl	810571c <vPortFree>
				vPortFree( pxTCB );
 8107da6:	6878      	ldr	r0, [r7, #4]
 8107da8:	f7fd fcb8 	bl	810571c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8107dac:	e019      	b.n	8107de2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8107dae:	687b      	ldr	r3, [r7, #4]
 8107db0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8107db4:	2b01      	cmp	r3, #1
 8107db6:	d103      	bne.n	8107dc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8107db8:	6878      	ldr	r0, [r7, #4]
 8107dba:	f7fd fcaf 	bl	810571c <vPortFree>
	}
 8107dbe:	e010      	b.n	8107de2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8107dc0:	687b      	ldr	r3, [r7, #4]
 8107dc2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8107dc6:	2b02      	cmp	r3, #2
 8107dc8:	d00b      	beq.n	8107de2 <prvDeleteTCB+0x62>
	__asm volatile
 8107dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107dce:	f383 8811 	msr	BASEPRI, r3
 8107dd2:	f3bf 8f6f 	isb	sy
 8107dd6:	f3bf 8f4f 	dsb	sy
 8107dda:	60fb      	str	r3, [r7, #12]
}
 8107ddc:	bf00      	nop
 8107dde:	bf00      	nop
 8107de0:	e7fd      	b.n	8107dde <prvDeleteTCB+0x5e>
	}
 8107de2:	bf00      	nop
 8107de4:	3710      	adds	r7, #16
 8107de6:	46bd      	mov	sp, r7
 8107de8:	bd80      	pop	{r7, pc}
	...

08107dec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8107dec:	b480      	push	{r7}
 8107dee:	b083      	sub	sp, #12
 8107df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107df2:	4b0c      	ldr	r3, [pc, #48]	@ (8107e24 <prvResetNextTaskUnblockTime+0x38>)
 8107df4:	681b      	ldr	r3, [r3, #0]
 8107df6:	681b      	ldr	r3, [r3, #0]
 8107df8:	2b00      	cmp	r3, #0
 8107dfa:	d104      	bne.n	8107e06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8107dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8107e28 <prvResetNextTaskUnblockTime+0x3c>)
 8107dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8107e02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8107e04:	e008      	b.n	8107e18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107e06:	4b07      	ldr	r3, [pc, #28]	@ (8107e24 <prvResetNextTaskUnblockTime+0x38>)
 8107e08:	681b      	ldr	r3, [r3, #0]
 8107e0a:	68db      	ldr	r3, [r3, #12]
 8107e0c:	68db      	ldr	r3, [r3, #12]
 8107e0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8107e10:	687b      	ldr	r3, [r7, #4]
 8107e12:	685b      	ldr	r3, [r3, #4]
 8107e14:	4a04      	ldr	r2, [pc, #16]	@ (8107e28 <prvResetNextTaskUnblockTime+0x3c>)
 8107e16:	6013      	str	r3, [r2, #0]
}
 8107e18:	bf00      	nop
 8107e1a:	370c      	adds	r7, #12
 8107e1c:	46bd      	mov	sp, r7
 8107e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e22:	4770      	bx	lr
 8107e24:	10004ab8 	.word	0x10004ab8
 8107e28:	10004b20 	.word	0x10004b20

08107e2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8107e2c:	b480      	push	{r7}
 8107e2e:	b083      	sub	sp, #12
 8107e30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8107e32:	4b0b      	ldr	r3, [pc, #44]	@ (8107e60 <xTaskGetSchedulerState+0x34>)
 8107e34:	681b      	ldr	r3, [r3, #0]
 8107e36:	2b00      	cmp	r3, #0
 8107e38:	d102      	bne.n	8107e40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8107e3a:	2301      	movs	r3, #1
 8107e3c:	607b      	str	r3, [r7, #4]
 8107e3e:	e008      	b.n	8107e52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107e40:	4b08      	ldr	r3, [pc, #32]	@ (8107e64 <xTaskGetSchedulerState+0x38>)
 8107e42:	681b      	ldr	r3, [r3, #0]
 8107e44:	2b00      	cmp	r3, #0
 8107e46:	d102      	bne.n	8107e4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8107e48:	2302      	movs	r3, #2
 8107e4a:	607b      	str	r3, [r7, #4]
 8107e4c:	e001      	b.n	8107e52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8107e4e:	2300      	movs	r3, #0
 8107e50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8107e52:	687b      	ldr	r3, [r7, #4]
	}
 8107e54:	4618      	mov	r0, r3
 8107e56:	370c      	adds	r7, #12
 8107e58:	46bd      	mov	sp, r7
 8107e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e5e:	4770      	bx	lr
 8107e60:	10004b0c 	.word	0x10004b0c
 8107e64:	10004b28 	.word	0x10004b28

08107e68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8107e68:	b580      	push	{r7, lr}
 8107e6a:	b084      	sub	sp, #16
 8107e6c:	af00      	add	r7, sp, #0
 8107e6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8107e70:	687b      	ldr	r3, [r7, #4]
 8107e72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8107e74:	2300      	movs	r3, #0
 8107e76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8107e78:	687b      	ldr	r3, [r7, #4]
 8107e7a:	2b00      	cmp	r3, #0
 8107e7c:	d051      	beq.n	8107f22 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8107e7e:	68bb      	ldr	r3, [r7, #8]
 8107e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107e82:	4b2a      	ldr	r3, [pc, #168]	@ (8107f2c <xTaskPriorityInherit+0xc4>)
 8107e84:	681b      	ldr	r3, [r3, #0]
 8107e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e88:	429a      	cmp	r2, r3
 8107e8a:	d241      	bcs.n	8107f10 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8107e8c:	68bb      	ldr	r3, [r7, #8]
 8107e8e:	699b      	ldr	r3, [r3, #24]
 8107e90:	2b00      	cmp	r3, #0
 8107e92:	db06      	blt.n	8107ea2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107e94:	4b25      	ldr	r3, [pc, #148]	@ (8107f2c <xTaskPriorityInherit+0xc4>)
 8107e96:	681b      	ldr	r3, [r3, #0]
 8107e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e9a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8107e9e:	68bb      	ldr	r3, [r7, #8]
 8107ea0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8107ea2:	68bb      	ldr	r3, [r7, #8]
 8107ea4:	6959      	ldr	r1, [r3, #20]
 8107ea6:	68bb      	ldr	r3, [r7, #8]
 8107ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107eaa:	4613      	mov	r3, r2
 8107eac:	009b      	lsls	r3, r3, #2
 8107eae:	4413      	add	r3, r2
 8107eb0:	009b      	lsls	r3, r3, #2
 8107eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8107f30 <xTaskPriorityInherit+0xc8>)
 8107eb4:	4413      	add	r3, r2
 8107eb6:	4299      	cmp	r1, r3
 8107eb8:	d122      	bne.n	8107f00 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8107eba:	68bb      	ldr	r3, [r7, #8]
 8107ebc:	3304      	adds	r3, #4
 8107ebe:	4618      	mov	r0, r3
 8107ec0:	f7fd fdd6 	bl	8105a70 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8107ec4:	4b19      	ldr	r3, [pc, #100]	@ (8107f2c <xTaskPriorityInherit+0xc4>)
 8107ec6:	681b      	ldr	r3, [r3, #0]
 8107ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107eca:	68bb      	ldr	r3, [r7, #8]
 8107ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8107ece:	68bb      	ldr	r3, [r7, #8]
 8107ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107ed2:	4b18      	ldr	r3, [pc, #96]	@ (8107f34 <xTaskPriorityInherit+0xcc>)
 8107ed4:	681b      	ldr	r3, [r3, #0]
 8107ed6:	429a      	cmp	r2, r3
 8107ed8:	d903      	bls.n	8107ee2 <xTaskPriorityInherit+0x7a>
 8107eda:	68bb      	ldr	r3, [r7, #8]
 8107edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107ede:	4a15      	ldr	r2, [pc, #84]	@ (8107f34 <xTaskPriorityInherit+0xcc>)
 8107ee0:	6013      	str	r3, [r2, #0]
 8107ee2:	68bb      	ldr	r3, [r7, #8]
 8107ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107ee6:	4613      	mov	r3, r2
 8107ee8:	009b      	lsls	r3, r3, #2
 8107eea:	4413      	add	r3, r2
 8107eec:	009b      	lsls	r3, r3, #2
 8107eee:	4a10      	ldr	r2, [pc, #64]	@ (8107f30 <xTaskPriorityInherit+0xc8>)
 8107ef0:	441a      	add	r2, r3
 8107ef2:	68bb      	ldr	r3, [r7, #8]
 8107ef4:	3304      	adds	r3, #4
 8107ef6:	4619      	mov	r1, r3
 8107ef8:	4610      	mov	r0, r2
 8107efa:	f7fd fd5c 	bl	81059b6 <vListInsertEnd>
 8107efe:	e004      	b.n	8107f0a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8107f00:	4b0a      	ldr	r3, [pc, #40]	@ (8107f2c <xTaskPriorityInherit+0xc4>)
 8107f02:	681b      	ldr	r3, [r3, #0]
 8107f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107f06:	68bb      	ldr	r3, [r7, #8]
 8107f08:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8107f0a:	2301      	movs	r3, #1
 8107f0c:	60fb      	str	r3, [r7, #12]
 8107f0e:	e008      	b.n	8107f22 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8107f10:	68bb      	ldr	r3, [r7, #8]
 8107f12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8107f14:	4b05      	ldr	r3, [pc, #20]	@ (8107f2c <xTaskPriorityInherit+0xc4>)
 8107f16:	681b      	ldr	r3, [r3, #0]
 8107f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107f1a:	429a      	cmp	r2, r3
 8107f1c:	d201      	bcs.n	8107f22 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8107f1e:	2301      	movs	r3, #1
 8107f20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8107f22:	68fb      	ldr	r3, [r7, #12]
	}
 8107f24:	4618      	mov	r0, r3
 8107f26:	3710      	adds	r7, #16
 8107f28:	46bd      	mov	sp, r7
 8107f2a:	bd80      	pop	{r7, pc}
 8107f2c:	1000462c 	.word	0x1000462c
 8107f30:	10004630 	.word	0x10004630
 8107f34:	10004b08 	.word	0x10004b08

08107f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8107f38:	b580      	push	{r7, lr}
 8107f3a:	b086      	sub	sp, #24
 8107f3c:	af00      	add	r7, sp, #0
 8107f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8107f40:	687b      	ldr	r3, [r7, #4]
 8107f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8107f44:	2300      	movs	r3, #0
 8107f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8107f48:	687b      	ldr	r3, [r7, #4]
 8107f4a:	2b00      	cmp	r3, #0
 8107f4c:	d058      	beq.n	8108000 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8107f4e:	4b2f      	ldr	r3, [pc, #188]	@ (810800c <xTaskPriorityDisinherit+0xd4>)
 8107f50:	681b      	ldr	r3, [r3, #0]
 8107f52:	693a      	ldr	r2, [r7, #16]
 8107f54:	429a      	cmp	r2, r3
 8107f56:	d00b      	beq.n	8107f70 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8107f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107f5c:	f383 8811 	msr	BASEPRI, r3
 8107f60:	f3bf 8f6f 	isb	sy
 8107f64:	f3bf 8f4f 	dsb	sy
 8107f68:	60fb      	str	r3, [r7, #12]
}
 8107f6a:	bf00      	nop
 8107f6c:	bf00      	nop
 8107f6e:	e7fd      	b.n	8107f6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8107f70:	693b      	ldr	r3, [r7, #16]
 8107f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107f74:	2b00      	cmp	r3, #0
 8107f76:	d10b      	bne.n	8107f90 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8107f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107f7c:	f383 8811 	msr	BASEPRI, r3
 8107f80:	f3bf 8f6f 	isb	sy
 8107f84:	f3bf 8f4f 	dsb	sy
 8107f88:	60bb      	str	r3, [r7, #8]
}
 8107f8a:	bf00      	nop
 8107f8c:	bf00      	nop
 8107f8e:	e7fd      	b.n	8107f8c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8107f90:	693b      	ldr	r3, [r7, #16]
 8107f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107f94:	1e5a      	subs	r2, r3, #1
 8107f96:	693b      	ldr	r3, [r7, #16]
 8107f98:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8107f9a:	693b      	ldr	r3, [r7, #16]
 8107f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107f9e:	693b      	ldr	r3, [r7, #16]
 8107fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107fa2:	429a      	cmp	r2, r3
 8107fa4:	d02c      	beq.n	8108000 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8107fa6:	693b      	ldr	r3, [r7, #16]
 8107fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107faa:	2b00      	cmp	r3, #0
 8107fac:	d128      	bne.n	8108000 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8107fae:	693b      	ldr	r3, [r7, #16]
 8107fb0:	3304      	adds	r3, #4
 8107fb2:	4618      	mov	r0, r3
 8107fb4:	f7fd fd5c 	bl	8105a70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8107fb8:	693b      	ldr	r3, [r7, #16]
 8107fba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8107fbc:	693b      	ldr	r3, [r7, #16]
 8107fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107fc0:	693b      	ldr	r3, [r7, #16]
 8107fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107fc4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8107fc8:	693b      	ldr	r3, [r7, #16]
 8107fca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8107fcc:	693b      	ldr	r3, [r7, #16]
 8107fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8108010 <xTaskPriorityDisinherit+0xd8>)
 8107fd2:	681b      	ldr	r3, [r3, #0]
 8107fd4:	429a      	cmp	r2, r3
 8107fd6:	d903      	bls.n	8107fe0 <xTaskPriorityDisinherit+0xa8>
 8107fd8:	693b      	ldr	r3, [r7, #16]
 8107fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8108010 <xTaskPriorityDisinherit+0xd8>)
 8107fde:	6013      	str	r3, [r2, #0]
 8107fe0:	693b      	ldr	r3, [r7, #16]
 8107fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107fe4:	4613      	mov	r3, r2
 8107fe6:	009b      	lsls	r3, r3, #2
 8107fe8:	4413      	add	r3, r2
 8107fea:	009b      	lsls	r3, r3, #2
 8107fec:	4a09      	ldr	r2, [pc, #36]	@ (8108014 <xTaskPriorityDisinherit+0xdc>)
 8107fee:	441a      	add	r2, r3
 8107ff0:	693b      	ldr	r3, [r7, #16]
 8107ff2:	3304      	adds	r3, #4
 8107ff4:	4619      	mov	r1, r3
 8107ff6:	4610      	mov	r0, r2
 8107ff8:	f7fd fcdd 	bl	81059b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8107ffc:	2301      	movs	r3, #1
 8107ffe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8108000:	697b      	ldr	r3, [r7, #20]
	}
 8108002:	4618      	mov	r0, r3
 8108004:	3718      	adds	r7, #24
 8108006:	46bd      	mov	sp, r7
 8108008:	bd80      	pop	{r7, pc}
 810800a:	bf00      	nop
 810800c:	1000462c 	.word	0x1000462c
 8108010:	10004b08 	.word	0x10004b08
 8108014:	10004630 	.word	0x10004630

08108018 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8108018:	b580      	push	{r7, lr}
 810801a:	b088      	sub	sp, #32
 810801c:	af00      	add	r7, sp, #0
 810801e:	6078      	str	r0, [r7, #4]
 8108020:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8108022:	687b      	ldr	r3, [r7, #4]
 8108024:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8108026:	2301      	movs	r3, #1
 8108028:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810802a:	687b      	ldr	r3, [r7, #4]
 810802c:	2b00      	cmp	r3, #0
 810802e:	d06c      	beq.n	810810a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8108030:	69bb      	ldr	r3, [r7, #24]
 8108032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108034:	2b00      	cmp	r3, #0
 8108036:	d10b      	bne.n	8108050 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8108038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810803c:	f383 8811 	msr	BASEPRI, r3
 8108040:	f3bf 8f6f 	isb	sy
 8108044:	f3bf 8f4f 	dsb	sy
 8108048:	60fb      	str	r3, [r7, #12]
}
 810804a:	bf00      	nop
 810804c:	bf00      	nop
 810804e:	e7fd      	b.n	810804c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8108050:	69bb      	ldr	r3, [r7, #24]
 8108052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108054:	683a      	ldr	r2, [r7, #0]
 8108056:	429a      	cmp	r2, r3
 8108058:	d902      	bls.n	8108060 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 810805a:	683b      	ldr	r3, [r7, #0]
 810805c:	61fb      	str	r3, [r7, #28]
 810805e:	e002      	b.n	8108066 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8108060:	69bb      	ldr	r3, [r7, #24]
 8108062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108064:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8108066:	69bb      	ldr	r3, [r7, #24]
 8108068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810806a:	69fa      	ldr	r2, [r7, #28]
 810806c:	429a      	cmp	r2, r3
 810806e:	d04c      	beq.n	810810a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8108070:	69bb      	ldr	r3, [r7, #24]
 8108072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108074:	697a      	ldr	r2, [r7, #20]
 8108076:	429a      	cmp	r2, r3
 8108078:	d147      	bne.n	810810a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 810807a:	4b26      	ldr	r3, [pc, #152]	@ (8108114 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 810807c:	681b      	ldr	r3, [r3, #0]
 810807e:	69ba      	ldr	r2, [r7, #24]
 8108080:	429a      	cmp	r2, r3
 8108082:	d10b      	bne.n	810809c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8108084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108088:	f383 8811 	msr	BASEPRI, r3
 810808c:	f3bf 8f6f 	isb	sy
 8108090:	f3bf 8f4f 	dsb	sy
 8108094:	60bb      	str	r3, [r7, #8]
}
 8108096:	bf00      	nop
 8108098:	bf00      	nop
 810809a:	e7fd      	b.n	8108098 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 810809c:	69bb      	ldr	r3, [r7, #24]
 810809e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81080a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 81080a2:	69bb      	ldr	r3, [r7, #24]
 81080a4:	69fa      	ldr	r2, [r7, #28]
 81080a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 81080a8:	69bb      	ldr	r3, [r7, #24]
 81080aa:	699b      	ldr	r3, [r3, #24]
 81080ac:	2b00      	cmp	r3, #0
 81080ae:	db04      	blt.n	81080ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81080b0:	69fb      	ldr	r3, [r7, #28]
 81080b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 81080b6:	69bb      	ldr	r3, [r7, #24]
 81080b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 81080ba:	69bb      	ldr	r3, [r7, #24]
 81080bc:	6959      	ldr	r1, [r3, #20]
 81080be:	693a      	ldr	r2, [r7, #16]
 81080c0:	4613      	mov	r3, r2
 81080c2:	009b      	lsls	r3, r3, #2
 81080c4:	4413      	add	r3, r2
 81080c6:	009b      	lsls	r3, r3, #2
 81080c8:	4a13      	ldr	r2, [pc, #76]	@ (8108118 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 81080ca:	4413      	add	r3, r2
 81080cc:	4299      	cmp	r1, r3
 81080ce:	d11c      	bne.n	810810a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81080d0:	69bb      	ldr	r3, [r7, #24]
 81080d2:	3304      	adds	r3, #4
 81080d4:	4618      	mov	r0, r3
 81080d6:	f7fd fccb 	bl	8105a70 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 81080da:	69bb      	ldr	r3, [r7, #24]
 81080dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81080de:	4b0f      	ldr	r3, [pc, #60]	@ (810811c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 81080e0:	681b      	ldr	r3, [r3, #0]
 81080e2:	429a      	cmp	r2, r3
 81080e4:	d903      	bls.n	81080ee <vTaskPriorityDisinheritAfterTimeout+0xd6>
 81080e6:	69bb      	ldr	r3, [r7, #24]
 81080e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81080ea:	4a0c      	ldr	r2, [pc, #48]	@ (810811c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 81080ec:	6013      	str	r3, [r2, #0]
 81080ee:	69bb      	ldr	r3, [r7, #24]
 81080f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81080f2:	4613      	mov	r3, r2
 81080f4:	009b      	lsls	r3, r3, #2
 81080f6:	4413      	add	r3, r2
 81080f8:	009b      	lsls	r3, r3, #2
 81080fa:	4a07      	ldr	r2, [pc, #28]	@ (8108118 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 81080fc:	441a      	add	r2, r3
 81080fe:	69bb      	ldr	r3, [r7, #24]
 8108100:	3304      	adds	r3, #4
 8108102:	4619      	mov	r1, r3
 8108104:	4610      	mov	r0, r2
 8108106:	f7fd fc56 	bl	81059b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810810a:	bf00      	nop
 810810c:	3720      	adds	r7, #32
 810810e:	46bd      	mov	sp, r7
 8108110:	bd80      	pop	{r7, pc}
 8108112:	bf00      	nop
 8108114:	1000462c 	.word	0x1000462c
 8108118:	10004630 	.word	0x10004630
 810811c:	10004b08 	.word	0x10004b08

08108120 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8108120:	b480      	push	{r7}
 8108122:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8108124:	4b07      	ldr	r3, [pc, #28]	@ (8108144 <pvTaskIncrementMutexHeldCount+0x24>)
 8108126:	681b      	ldr	r3, [r3, #0]
 8108128:	2b00      	cmp	r3, #0
 810812a:	d004      	beq.n	8108136 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 810812c:	4b05      	ldr	r3, [pc, #20]	@ (8108144 <pvTaskIncrementMutexHeldCount+0x24>)
 810812e:	681b      	ldr	r3, [r3, #0]
 8108130:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8108132:	3201      	adds	r2, #1
 8108134:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8108136:	4b03      	ldr	r3, [pc, #12]	@ (8108144 <pvTaskIncrementMutexHeldCount+0x24>)
 8108138:	681b      	ldr	r3, [r3, #0]
	}
 810813a:	4618      	mov	r0, r3
 810813c:	46bd      	mov	sp, r7
 810813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108142:	4770      	bx	lr
 8108144:	1000462c 	.word	0x1000462c

08108148 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8108148:	b580      	push	{r7, lr}
 810814a:	b084      	sub	sp, #16
 810814c:	af00      	add	r7, sp, #0
 810814e:	6078      	str	r0, [r7, #4]
 8108150:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8108152:	4b21      	ldr	r3, [pc, #132]	@ (81081d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8108154:	681b      	ldr	r3, [r3, #0]
 8108156:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8108158:	4b20      	ldr	r3, [pc, #128]	@ (81081dc <prvAddCurrentTaskToDelayedList+0x94>)
 810815a:	681b      	ldr	r3, [r3, #0]
 810815c:	3304      	adds	r3, #4
 810815e:	4618      	mov	r0, r3
 8108160:	f7fd fc86 	bl	8105a70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8108164:	687b      	ldr	r3, [r7, #4]
 8108166:	f1b3 3fff 	cmp.w	r3, #4294967295
 810816a:	d10a      	bne.n	8108182 <prvAddCurrentTaskToDelayedList+0x3a>
 810816c:	683b      	ldr	r3, [r7, #0]
 810816e:	2b00      	cmp	r3, #0
 8108170:	d007      	beq.n	8108182 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8108172:	4b1a      	ldr	r3, [pc, #104]	@ (81081dc <prvAddCurrentTaskToDelayedList+0x94>)
 8108174:	681b      	ldr	r3, [r3, #0]
 8108176:	3304      	adds	r3, #4
 8108178:	4619      	mov	r1, r3
 810817a:	4819      	ldr	r0, [pc, #100]	@ (81081e0 <prvAddCurrentTaskToDelayedList+0x98>)
 810817c:	f7fd fc1b 	bl	81059b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8108180:	e026      	b.n	81081d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8108182:	68fa      	ldr	r2, [r7, #12]
 8108184:	687b      	ldr	r3, [r7, #4]
 8108186:	4413      	add	r3, r2
 8108188:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810818a:	4b14      	ldr	r3, [pc, #80]	@ (81081dc <prvAddCurrentTaskToDelayedList+0x94>)
 810818c:	681b      	ldr	r3, [r3, #0]
 810818e:	68ba      	ldr	r2, [r7, #8]
 8108190:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8108192:	68ba      	ldr	r2, [r7, #8]
 8108194:	68fb      	ldr	r3, [r7, #12]
 8108196:	429a      	cmp	r2, r3
 8108198:	d209      	bcs.n	81081ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810819a:	4b12      	ldr	r3, [pc, #72]	@ (81081e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 810819c:	681a      	ldr	r2, [r3, #0]
 810819e:	4b0f      	ldr	r3, [pc, #60]	@ (81081dc <prvAddCurrentTaskToDelayedList+0x94>)
 81081a0:	681b      	ldr	r3, [r3, #0]
 81081a2:	3304      	adds	r3, #4
 81081a4:	4619      	mov	r1, r3
 81081a6:	4610      	mov	r0, r2
 81081a8:	f7fd fc29 	bl	81059fe <vListInsert>
}
 81081ac:	e010      	b.n	81081d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81081ae:	4b0e      	ldr	r3, [pc, #56]	@ (81081e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 81081b0:	681a      	ldr	r2, [r3, #0]
 81081b2:	4b0a      	ldr	r3, [pc, #40]	@ (81081dc <prvAddCurrentTaskToDelayedList+0x94>)
 81081b4:	681b      	ldr	r3, [r3, #0]
 81081b6:	3304      	adds	r3, #4
 81081b8:	4619      	mov	r1, r3
 81081ba:	4610      	mov	r0, r2
 81081bc:	f7fd fc1f 	bl	81059fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 81081c0:	4b0a      	ldr	r3, [pc, #40]	@ (81081ec <prvAddCurrentTaskToDelayedList+0xa4>)
 81081c2:	681b      	ldr	r3, [r3, #0]
 81081c4:	68ba      	ldr	r2, [r7, #8]
 81081c6:	429a      	cmp	r2, r3
 81081c8:	d202      	bcs.n	81081d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 81081ca:	4a08      	ldr	r2, [pc, #32]	@ (81081ec <prvAddCurrentTaskToDelayedList+0xa4>)
 81081cc:	68bb      	ldr	r3, [r7, #8]
 81081ce:	6013      	str	r3, [r2, #0]
}
 81081d0:	bf00      	nop
 81081d2:	3710      	adds	r7, #16
 81081d4:	46bd      	mov	sp, r7
 81081d6:	bd80      	pop	{r7, pc}
 81081d8:	10004b04 	.word	0x10004b04
 81081dc:	1000462c 	.word	0x1000462c
 81081e0:	10004aec 	.word	0x10004aec
 81081e4:	10004abc 	.word	0x10004abc
 81081e8:	10004ab8 	.word	0x10004ab8
 81081ec:	10004b20 	.word	0x10004b20

081081f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 81081f0:	b580      	push	{r7, lr}
 81081f2:	b08a      	sub	sp, #40	@ 0x28
 81081f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 81081f6:	2300      	movs	r3, #0
 81081f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 81081fa:	f000 fb13 	bl	8108824 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 81081fe:	4b1d      	ldr	r3, [pc, #116]	@ (8108274 <xTimerCreateTimerTask+0x84>)
 8108200:	681b      	ldr	r3, [r3, #0]
 8108202:	2b00      	cmp	r3, #0
 8108204:	d021      	beq.n	810824a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8108206:	2300      	movs	r3, #0
 8108208:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810820a:	2300      	movs	r3, #0
 810820c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810820e:	1d3a      	adds	r2, r7, #4
 8108210:	f107 0108 	add.w	r1, r7, #8
 8108214:	f107 030c 	add.w	r3, r7, #12
 8108218:	4618      	mov	r0, r3
 810821a:	f7fd f997 	bl	810554c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810821e:	6879      	ldr	r1, [r7, #4]
 8108220:	68bb      	ldr	r3, [r7, #8]
 8108222:	68fa      	ldr	r2, [r7, #12]
 8108224:	9202      	str	r2, [sp, #8]
 8108226:	9301      	str	r3, [sp, #4]
 8108228:	2302      	movs	r3, #2
 810822a:	9300      	str	r3, [sp, #0]
 810822c:	2300      	movs	r3, #0
 810822e:	460a      	mov	r2, r1
 8108230:	4911      	ldr	r1, [pc, #68]	@ (8108278 <xTimerCreateTimerTask+0x88>)
 8108232:	4812      	ldr	r0, [pc, #72]	@ (810827c <xTimerCreateTimerTask+0x8c>)
 8108234:	f7fe fec6 	bl	8106fc4 <xTaskCreateStatic>
 8108238:	4603      	mov	r3, r0
 810823a:	4a11      	ldr	r2, [pc, #68]	@ (8108280 <xTimerCreateTimerTask+0x90>)
 810823c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810823e:	4b10      	ldr	r3, [pc, #64]	@ (8108280 <xTimerCreateTimerTask+0x90>)
 8108240:	681b      	ldr	r3, [r3, #0]
 8108242:	2b00      	cmp	r3, #0
 8108244:	d001      	beq.n	810824a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8108246:	2301      	movs	r3, #1
 8108248:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810824a:	697b      	ldr	r3, [r7, #20]
 810824c:	2b00      	cmp	r3, #0
 810824e:	d10b      	bne.n	8108268 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8108250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108254:	f383 8811 	msr	BASEPRI, r3
 8108258:	f3bf 8f6f 	isb	sy
 810825c:	f3bf 8f4f 	dsb	sy
 8108260:	613b      	str	r3, [r7, #16]
}
 8108262:	bf00      	nop
 8108264:	bf00      	nop
 8108266:	e7fd      	b.n	8108264 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8108268:	697b      	ldr	r3, [r7, #20]
}
 810826a:	4618      	mov	r0, r3
 810826c:	3718      	adds	r7, #24
 810826e:	46bd      	mov	sp, r7
 8108270:	bd80      	pop	{r7, pc}
 8108272:	bf00      	nop
 8108274:	10004b5c 	.word	0x10004b5c
 8108278:	0810c484 	.word	0x0810c484
 810827c:	081083bd 	.word	0x081083bd
 8108280:	10004b60 	.word	0x10004b60

08108284 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8108284:	b580      	push	{r7, lr}
 8108286:	b08a      	sub	sp, #40	@ 0x28
 8108288:	af00      	add	r7, sp, #0
 810828a:	60f8      	str	r0, [r7, #12]
 810828c:	60b9      	str	r1, [r7, #8]
 810828e:	607a      	str	r2, [r7, #4]
 8108290:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8108292:	2300      	movs	r3, #0
 8108294:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8108296:	68fb      	ldr	r3, [r7, #12]
 8108298:	2b00      	cmp	r3, #0
 810829a:	d10b      	bne.n	81082b4 <xTimerGenericCommand+0x30>
	__asm volatile
 810829c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81082a0:	f383 8811 	msr	BASEPRI, r3
 81082a4:	f3bf 8f6f 	isb	sy
 81082a8:	f3bf 8f4f 	dsb	sy
 81082ac:	623b      	str	r3, [r7, #32]
}
 81082ae:	bf00      	nop
 81082b0:	bf00      	nop
 81082b2:	e7fd      	b.n	81082b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 81082b4:	4b19      	ldr	r3, [pc, #100]	@ (810831c <xTimerGenericCommand+0x98>)
 81082b6:	681b      	ldr	r3, [r3, #0]
 81082b8:	2b00      	cmp	r3, #0
 81082ba:	d02a      	beq.n	8108312 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 81082bc:	68bb      	ldr	r3, [r7, #8]
 81082be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 81082c0:	687b      	ldr	r3, [r7, #4]
 81082c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 81082c4:	68fb      	ldr	r3, [r7, #12]
 81082c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 81082c8:	68bb      	ldr	r3, [r7, #8]
 81082ca:	2b05      	cmp	r3, #5
 81082cc:	dc18      	bgt.n	8108300 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 81082ce:	f7ff fdad 	bl	8107e2c <xTaskGetSchedulerState>
 81082d2:	4603      	mov	r3, r0
 81082d4:	2b02      	cmp	r3, #2
 81082d6:	d109      	bne.n	81082ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 81082d8:	4b10      	ldr	r3, [pc, #64]	@ (810831c <xTimerGenericCommand+0x98>)
 81082da:	6818      	ldr	r0, [r3, #0]
 81082dc:	f107 0110 	add.w	r1, r7, #16
 81082e0:	2300      	movs	r3, #0
 81082e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81082e4:	f7fd fff6 	bl	81062d4 <xQueueGenericSend>
 81082e8:	6278      	str	r0, [r7, #36]	@ 0x24
 81082ea:	e012      	b.n	8108312 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 81082ec:	4b0b      	ldr	r3, [pc, #44]	@ (810831c <xTimerGenericCommand+0x98>)
 81082ee:	6818      	ldr	r0, [r3, #0]
 81082f0:	f107 0110 	add.w	r1, r7, #16
 81082f4:	2300      	movs	r3, #0
 81082f6:	2200      	movs	r2, #0
 81082f8:	f7fd ffec 	bl	81062d4 <xQueueGenericSend>
 81082fc:	6278      	str	r0, [r7, #36]	@ 0x24
 81082fe:	e008      	b.n	8108312 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8108300:	4b06      	ldr	r3, [pc, #24]	@ (810831c <xTimerGenericCommand+0x98>)
 8108302:	6818      	ldr	r0, [r3, #0]
 8108304:	f107 0110 	add.w	r1, r7, #16
 8108308:	2300      	movs	r3, #0
 810830a:	683a      	ldr	r2, [r7, #0]
 810830c:	f7fe f8e4 	bl	81064d8 <xQueueGenericSendFromISR>
 8108310:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8108312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8108314:	4618      	mov	r0, r3
 8108316:	3728      	adds	r7, #40	@ 0x28
 8108318:	46bd      	mov	sp, r7
 810831a:	bd80      	pop	{r7, pc}
 810831c:	10004b5c 	.word	0x10004b5c

08108320 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8108320:	b580      	push	{r7, lr}
 8108322:	b088      	sub	sp, #32
 8108324:	af02      	add	r7, sp, #8
 8108326:	6078      	str	r0, [r7, #4]
 8108328:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810832a:	4b23      	ldr	r3, [pc, #140]	@ (81083b8 <prvProcessExpiredTimer+0x98>)
 810832c:	681b      	ldr	r3, [r3, #0]
 810832e:	68db      	ldr	r3, [r3, #12]
 8108330:	68db      	ldr	r3, [r3, #12]
 8108332:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8108334:	697b      	ldr	r3, [r7, #20]
 8108336:	3304      	adds	r3, #4
 8108338:	4618      	mov	r0, r3
 810833a:	f7fd fb99 	bl	8105a70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810833e:	697b      	ldr	r3, [r7, #20]
 8108340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8108344:	f003 0304 	and.w	r3, r3, #4
 8108348:	2b00      	cmp	r3, #0
 810834a:	d023      	beq.n	8108394 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810834c:	697b      	ldr	r3, [r7, #20]
 810834e:	699a      	ldr	r2, [r3, #24]
 8108350:	687b      	ldr	r3, [r7, #4]
 8108352:	18d1      	adds	r1, r2, r3
 8108354:	687b      	ldr	r3, [r7, #4]
 8108356:	683a      	ldr	r2, [r7, #0]
 8108358:	6978      	ldr	r0, [r7, #20]
 810835a:	f000 f8d5 	bl	8108508 <prvInsertTimerInActiveList>
 810835e:	4603      	mov	r3, r0
 8108360:	2b00      	cmp	r3, #0
 8108362:	d020      	beq.n	81083a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8108364:	2300      	movs	r3, #0
 8108366:	9300      	str	r3, [sp, #0]
 8108368:	2300      	movs	r3, #0
 810836a:	687a      	ldr	r2, [r7, #4]
 810836c:	2100      	movs	r1, #0
 810836e:	6978      	ldr	r0, [r7, #20]
 8108370:	f7ff ff88 	bl	8108284 <xTimerGenericCommand>
 8108374:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8108376:	693b      	ldr	r3, [r7, #16]
 8108378:	2b00      	cmp	r3, #0
 810837a:	d114      	bne.n	81083a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 810837c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108380:	f383 8811 	msr	BASEPRI, r3
 8108384:	f3bf 8f6f 	isb	sy
 8108388:	f3bf 8f4f 	dsb	sy
 810838c:	60fb      	str	r3, [r7, #12]
}
 810838e:	bf00      	nop
 8108390:	bf00      	nop
 8108392:	e7fd      	b.n	8108390 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8108394:	697b      	ldr	r3, [r7, #20]
 8108396:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810839a:	f023 0301 	bic.w	r3, r3, #1
 810839e:	b2da      	uxtb	r2, r3
 81083a0:	697b      	ldr	r3, [r7, #20]
 81083a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81083a6:	697b      	ldr	r3, [r7, #20]
 81083a8:	6a1b      	ldr	r3, [r3, #32]
 81083aa:	6978      	ldr	r0, [r7, #20]
 81083ac:	4798      	blx	r3
}
 81083ae:	bf00      	nop
 81083b0:	3718      	adds	r7, #24
 81083b2:	46bd      	mov	sp, r7
 81083b4:	bd80      	pop	{r7, pc}
 81083b6:	bf00      	nop
 81083b8:	10004b54 	.word	0x10004b54

081083bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 81083bc:	b580      	push	{r7, lr}
 81083be:	b084      	sub	sp, #16
 81083c0:	af00      	add	r7, sp, #0
 81083c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81083c4:	f107 0308 	add.w	r3, r7, #8
 81083c8:	4618      	mov	r0, r3
 81083ca:	f000 f859 	bl	8108480 <prvGetNextExpireTime>
 81083ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 81083d0:	68bb      	ldr	r3, [r7, #8]
 81083d2:	4619      	mov	r1, r3
 81083d4:	68f8      	ldr	r0, [r7, #12]
 81083d6:	f000 f805 	bl	81083e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 81083da:	f000 f8d7 	bl	810858c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81083de:	bf00      	nop
 81083e0:	e7f0      	b.n	81083c4 <prvTimerTask+0x8>
	...

081083e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 81083e4:	b580      	push	{r7, lr}
 81083e6:	b084      	sub	sp, #16
 81083e8:	af00      	add	r7, sp, #0
 81083ea:	6078      	str	r0, [r7, #4]
 81083ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 81083ee:	f7ff f929 	bl	8107644 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 81083f2:	f107 0308 	add.w	r3, r7, #8
 81083f6:	4618      	mov	r0, r3
 81083f8:	f000 f866 	bl	81084c8 <prvSampleTimeNow>
 81083fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 81083fe:	68bb      	ldr	r3, [r7, #8]
 8108400:	2b00      	cmp	r3, #0
 8108402:	d130      	bne.n	8108466 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8108404:	683b      	ldr	r3, [r7, #0]
 8108406:	2b00      	cmp	r3, #0
 8108408:	d10a      	bne.n	8108420 <prvProcessTimerOrBlockTask+0x3c>
 810840a:	687a      	ldr	r2, [r7, #4]
 810840c:	68fb      	ldr	r3, [r7, #12]
 810840e:	429a      	cmp	r2, r3
 8108410:	d806      	bhi.n	8108420 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8108412:	f7ff f925 	bl	8107660 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8108416:	68f9      	ldr	r1, [r7, #12]
 8108418:	6878      	ldr	r0, [r7, #4]
 810841a:	f7ff ff81 	bl	8108320 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810841e:	e024      	b.n	810846a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8108420:	683b      	ldr	r3, [r7, #0]
 8108422:	2b00      	cmp	r3, #0
 8108424:	d008      	beq.n	8108438 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8108426:	4b13      	ldr	r3, [pc, #76]	@ (8108474 <prvProcessTimerOrBlockTask+0x90>)
 8108428:	681b      	ldr	r3, [r3, #0]
 810842a:	681b      	ldr	r3, [r3, #0]
 810842c:	2b00      	cmp	r3, #0
 810842e:	d101      	bne.n	8108434 <prvProcessTimerOrBlockTask+0x50>
 8108430:	2301      	movs	r3, #1
 8108432:	e000      	b.n	8108436 <prvProcessTimerOrBlockTask+0x52>
 8108434:	2300      	movs	r3, #0
 8108436:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8108438:	4b0f      	ldr	r3, [pc, #60]	@ (8108478 <prvProcessTimerOrBlockTask+0x94>)
 810843a:	6818      	ldr	r0, [r3, #0]
 810843c:	687a      	ldr	r2, [r7, #4]
 810843e:	68fb      	ldr	r3, [r7, #12]
 8108440:	1ad3      	subs	r3, r2, r3
 8108442:	683a      	ldr	r2, [r7, #0]
 8108444:	4619      	mov	r1, r3
 8108446:	f7fe fd89 	bl	8106f5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810844a:	f7ff f909 	bl	8107660 <xTaskResumeAll>
 810844e:	4603      	mov	r3, r0
 8108450:	2b00      	cmp	r3, #0
 8108452:	d10a      	bne.n	810846a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8108454:	4b09      	ldr	r3, [pc, #36]	@ (810847c <prvProcessTimerOrBlockTask+0x98>)
 8108456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810845a:	601a      	str	r2, [r3, #0]
 810845c:	f3bf 8f4f 	dsb	sy
 8108460:	f3bf 8f6f 	isb	sy
}
 8108464:	e001      	b.n	810846a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8108466:	f7ff f8fb 	bl	8107660 <xTaskResumeAll>
}
 810846a:	bf00      	nop
 810846c:	3710      	adds	r7, #16
 810846e:	46bd      	mov	sp, r7
 8108470:	bd80      	pop	{r7, pc}
 8108472:	bf00      	nop
 8108474:	10004b58 	.word	0x10004b58
 8108478:	10004b5c 	.word	0x10004b5c
 810847c:	e000ed04 	.word	0xe000ed04

08108480 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8108480:	b480      	push	{r7}
 8108482:	b085      	sub	sp, #20
 8108484:	af00      	add	r7, sp, #0
 8108486:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8108488:	4b0e      	ldr	r3, [pc, #56]	@ (81084c4 <prvGetNextExpireTime+0x44>)
 810848a:	681b      	ldr	r3, [r3, #0]
 810848c:	681b      	ldr	r3, [r3, #0]
 810848e:	2b00      	cmp	r3, #0
 8108490:	d101      	bne.n	8108496 <prvGetNextExpireTime+0x16>
 8108492:	2201      	movs	r2, #1
 8108494:	e000      	b.n	8108498 <prvGetNextExpireTime+0x18>
 8108496:	2200      	movs	r2, #0
 8108498:	687b      	ldr	r3, [r7, #4]
 810849a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810849c:	687b      	ldr	r3, [r7, #4]
 810849e:	681b      	ldr	r3, [r3, #0]
 81084a0:	2b00      	cmp	r3, #0
 81084a2:	d105      	bne.n	81084b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81084a4:	4b07      	ldr	r3, [pc, #28]	@ (81084c4 <prvGetNextExpireTime+0x44>)
 81084a6:	681b      	ldr	r3, [r3, #0]
 81084a8:	68db      	ldr	r3, [r3, #12]
 81084aa:	681b      	ldr	r3, [r3, #0]
 81084ac:	60fb      	str	r3, [r7, #12]
 81084ae:	e001      	b.n	81084b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 81084b0:	2300      	movs	r3, #0
 81084b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 81084b4:	68fb      	ldr	r3, [r7, #12]
}
 81084b6:	4618      	mov	r0, r3
 81084b8:	3714      	adds	r7, #20
 81084ba:	46bd      	mov	sp, r7
 81084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084c0:	4770      	bx	lr
 81084c2:	bf00      	nop
 81084c4:	10004b54 	.word	0x10004b54

081084c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 81084c8:	b580      	push	{r7, lr}
 81084ca:	b084      	sub	sp, #16
 81084cc:	af00      	add	r7, sp, #0
 81084ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 81084d0:	f7ff f964 	bl	810779c <xTaskGetTickCount>
 81084d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 81084d6:	4b0b      	ldr	r3, [pc, #44]	@ (8108504 <prvSampleTimeNow+0x3c>)
 81084d8:	681b      	ldr	r3, [r3, #0]
 81084da:	68fa      	ldr	r2, [r7, #12]
 81084dc:	429a      	cmp	r2, r3
 81084de:	d205      	bcs.n	81084ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 81084e0:	f000 f93a 	bl	8108758 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 81084e4:	687b      	ldr	r3, [r7, #4]
 81084e6:	2201      	movs	r2, #1
 81084e8:	601a      	str	r2, [r3, #0]
 81084ea:	e002      	b.n	81084f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 81084ec:	687b      	ldr	r3, [r7, #4]
 81084ee:	2200      	movs	r2, #0
 81084f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 81084f2:	4a04      	ldr	r2, [pc, #16]	@ (8108504 <prvSampleTimeNow+0x3c>)
 81084f4:	68fb      	ldr	r3, [r7, #12]
 81084f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 81084f8:	68fb      	ldr	r3, [r7, #12]
}
 81084fa:	4618      	mov	r0, r3
 81084fc:	3710      	adds	r7, #16
 81084fe:	46bd      	mov	sp, r7
 8108500:	bd80      	pop	{r7, pc}
 8108502:	bf00      	nop
 8108504:	10004b64 	.word	0x10004b64

08108508 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8108508:	b580      	push	{r7, lr}
 810850a:	b086      	sub	sp, #24
 810850c:	af00      	add	r7, sp, #0
 810850e:	60f8      	str	r0, [r7, #12]
 8108510:	60b9      	str	r1, [r7, #8]
 8108512:	607a      	str	r2, [r7, #4]
 8108514:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8108516:	2300      	movs	r3, #0
 8108518:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810851a:	68fb      	ldr	r3, [r7, #12]
 810851c:	68ba      	ldr	r2, [r7, #8]
 810851e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8108520:	68fb      	ldr	r3, [r7, #12]
 8108522:	68fa      	ldr	r2, [r7, #12]
 8108524:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8108526:	68ba      	ldr	r2, [r7, #8]
 8108528:	687b      	ldr	r3, [r7, #4]
 810852a:	429a      	cmp	r2, r3
 810852c:	d812      	bhi.n	8108554 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810852e:	687a      	ldr	r2, [r7, #4]
 8108530:	683b      	ldr	r3, [r7, #0]
 8108532:	1ad2      	subs	r2, r2, r3
 8108534:	68fb      	ldr	r3, [r7, #12]
 8108536:	699b      	ldr	r3, [r3, #24]
 8108538:	429a      	cmp	r2, r3
 810853a:	d302      	bcc.n	8108542 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810853c:	2301      	movs	r3, #1
 810853e:	617b      	str	r3, [r7, #20]
 8108540:	e01b      	b.n	810857a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8108542:	4b10      	ldr	r3, [pc, #64]	@ (8108584 <prvInsertTimerInActiveList+0x7c>)
 8108544:	681a      	ldr	r2, [r3, #0]
 8108546:	68fb      	ldr	r3, [r7, #12]
 8108548:	3304      	adds	r3, #4
 810854a:	4619      	mov	r1, r3
 810854c:	4610      	mov	r0, r2
 810854e:	f7fd fa56 	bl	81059fe <vListInsert>
 8108552:	e012      	b.n	810857a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8108554:	687a      	ldr	r2, [r7, #4]
 8108556:	683b      	ldr	r3, [r7, #0]
 8108558:	429a      	cmp	r2, r3
 810855a:	d206      	bcs.n	810856a <prvInsertTimerInActiveList+0x62>
 810855c:	68ba      	ldr	r2, [r7, #8]
 810855e:	683b      	ldr	r3, [r7, #0]
 8108560:	429a      	cmp	r2, r3
 8108562:	d302      	bcc.n	810856a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8108564:	2301      	movs	r3, #1
 8108566:	617b      	str	r3, [r7, #20]
 8108568:	e007      	b.n	810857a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810856a:	4b07      	ldr	r3, [pc, #28]	@ (8108588 <prvInsertTimerInActiveList+0x80>)
 810856c:	681a      	ldr	r2, [r3, #0]
 810856e:	68fb      	ldr	r3, [r7, #12]
 8108570:	3304      	adds	r3, #4
 8108572:	4619      	mov	r1, r3
 8108574:	4610      	mov	r0, r2
 8108576:	f7fd fa42 	bl	81059fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 810857a:	697b      	ldr	r3, [r7, #20]
}
 810857c:	4618      	mov	r0, r3
 810857e:	3718      	adds	r7, #24
 8108580:	46bd      	mov	sp, r7
 8108582:	bd80      	pop	{r7, pc}
 8108584:	10004b58 	.word	0x10004b58
 8108588:	10004b54 	.word	0x10004b54

0810858c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810858c:	b580      	push	{r7, lr}
 810858e:	b08e      	sub	sp, #56	@ 0x38
 8108590:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8108592:	e0ce      	b.n	8108732 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8108594:	687b      	ldr	r3, [r7, #4]
 8108596:	2b00      	cmp	r3, #0
 8108598:	da19      	bge.n	81085ce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810859a:	1d3b      	adds	r3, r7, #4
 810859c:	3304      	adds	r3, #4
 810859e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81085a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81085a2:	2b00      	cmp	r3, #0
 81085a4:	d10b      	bne.n	81085be <prvProcessReceivedCommands+0x32>
	__asm volatile
 81085a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81085aa:	f383 8811 	msr	BASEPRI, r3
 81085ae:	f3bf 8f6f 	isb	sy
 81085b2:	f3bf 8f4f 	dsb	sy
 81085b6:	61fb      	str	r3, [r7, #28]
}
 81085b8:	bf00      	nop
 81085ba:	bf00      	nop
 81085bc:	e7fd      	b.n	81085ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 81085be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81085c0:	681b      	ldr	r3, [r3, #0]
 81085c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81085c4:	6850      	ldr	r0, [r2, #4]
 81085c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81085c8:	6892      	ldr	r2, [r2, #8]
 81085ca:	4611      	mov	r1, r2
 81085cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 81085ce:	687b      	ldr	r3, [r7, #4]
 81085d0:	2b00      	cmp	r3, #0
 81085d2:	f2c0 80ae 	blt.w	8108732 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 81085d6:	68fb      	ldr	r3, [r7, #12]
 81085d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 81085da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81085dc:	695b      	ldr	r3, [r3, #20]
 81085de:	2b00      	cmp	r3, #0
 81085e0:	d004      	beq.n	81085ec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81085e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81085e4:	3304      	adds	r3, #4
 81085e6:	4618      	mov	r0, r3
 81085e8:	f7fd fa42 	bl	8105a70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 81085ec:	463b      	mov	r3, r7
 81085ee:	4618      	mov	r0, r3
 81085f0:	f7ff ff6a 	bl	81084c8 <prvSampleTimeNow>
 81085f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 81085f6:	687b      	ldr	r3, [r7, #4]
 81085f8:	2b09      	cmp	r3, #9
 81085fa:	f200 8097 	bhi.w	810872c <prvProcessReceivedCommands+0x1a0>
 81085fe:	a201      	add	r2, pc, #4	@ (adr r2, 8108604 <prvProcessReceivedCommands+0x78>)
 8108600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108604:	0810862d 	.word	0x0810862d
 8108608:	0810862d 	.word	0x0810862d
 810860c:	0810862d 	.word	0x0810862d
 8108610:	081086a3 	.word	0x081086a3
 8108614:	081086b7 	.word	0x081086b7
 8108618:	08108703 	.word	0x08108703
 810861c:	0810862d 	.word	0x0810862d
 8108620:	0810862d 	.word	0x0810862d
 8108624:	081086a3 	.word	0x081086a3
 8108628:	081086b7 	.word	0x081086b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810862c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810862e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8108632:	f043 0301 	orr.w	r3, r3, #1
 8108636:	b2da      	uxtb	r2, r3
 8108638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810863a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810863e:	68ba      	ldr	r2, [r7, #8]
 8108640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108642:	699b      	ldr	r3, [r3, #24]
 8108644:	18d1      	adds	r1, r2, r3
 8108646:	68bb      	ldr	r3, [r7, #8]
 8108648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810864a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810864c:	f7ff ff5c 	bl	8108508 <prvInsertTimerInActiveList>
 8108650:	4603      	mov	r3, r0
 8108652:	2b00      	cmp	r3, #0
 8108654:	d06c      	beq.n	8108730 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8108656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108658:	6a1b      	ldr	r3, [r3, #32]
 810865a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810865c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810865e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108660:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8108664:	f003 0304 	and.w	r3, r3, #4
 8108668:	2b00      	cmp	r3, #0
 810866a:	d061      	beq.n	8108730 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810866c:	68ba      	ldr	r2, [r7, #8]
 810866e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108670:	699b      	ldr	r3, [r3, #24]
 8108672:	441a      	add	r2, r3
 8108674:	2300      	movs	r3, #0
 8108676:	9300      	str	r3, [sp, #0]
 8108678:	2300      	movs	r3, #0
 810867a:	2100      	movs	r1, #0
 810867c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810867e:	f7ff fe01 	bl	8108284 <xTimerGenericCommand>
 8108682:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8108684:	6a3b      	ldr	r3, [r7, #32]
 8108686:	2b00      	cmp	r3, #0
 8108688:	d152      	bne.n	8108730 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 810868a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810868e:	f383 8811 	msr	BASEPRI, r3
 8108692:	f3bf 8f6f 	isb	sy
 8108696:	f3bf 8f4f 	dsb	sy
 810869a:	61bb      	str	r3, [r7, #24]
}
 810869c:	bf00      	nop
 810869e:	bf00      	nop
 81086a0:	e7fd      	b.n	810869e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81086a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81086a8:	f023 0301 	bic.w	r3, r3, #1
 81086ac:	b2da      	uxtb	r2, r3
 81086ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81086b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 81086b4:	e03d      	b.n	8108732 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81086b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81086b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81086bc:	f043 0301 	orr.w	r3, r3, #1
 81086c0:	b2da      	uxtb	r2, r3
 81086c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81086c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 81086c8:	68ba      	ldr	r2, [r7, #8]
 81086ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81086cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 81086ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81086d0:	699b      	ldr	r3, [r3, #24]
 81086d2:	2b00      	cmp	r3, #0
 81086d4:	d10b      	bne.n	81086ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 81086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81086da:	f383 8811 	msr	BASEPRI, r3
 81086de:	f3bf 8f6f 	isb	sy
 81086e2:	f3bf 8f4f 	dsb	sy
 81086e6:	617b      	str	r3, [r7, #20]
}
 81086e8:	bf00      	nop
 81086ea:	bf00      	nop
 81086ec:	e7fd      	b.n	81086ea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 81086ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81086f0:	699a      	ldr	r2, [r3, #24]
 81086f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81086f4:	18d1      	adds	r1, r2, r3
 81086f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81086f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81086fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81086fc:	f7ff ff04 	bl	8108508 <prvInsertTimerInActiveList>
					break;
 8108700:	e017      	b.n	8108732 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8108702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108704:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8108708:	f003 0302 	and.w	r3, r3, #2
 810870c:	2b00      	cmp	r3, #0
 810870e:	d103      	bne.n	8108718 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8108710:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108712:	f7fd f803 	bl	810571c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8108716:	e00c      	b.n	8108732 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8108718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810871a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810871e:	f023 0301 	bic.w	r3, r3, #1
 8108722:	b2da      	uxtb	r2, r3
 8108724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108726:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810872a:	e002      	b.n	8108732 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 810872c:	bf00      	nop
 810872e:	e000      	b.n	8108732 <prvProcessReceivedCommands+0x1a6>
					break;
 8108730:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8108732:	4b08      	ldr	r3, [pc, #32]	@ (8108754 <prvProcessReceivedCommands+0x1c8>)
 8108734:	681b      	ldr	r3, [r3, #0]
 8108736:	1d39      	adds	r1, r7, #4
 8108738:	2200      	movs	r2, #0
 810873a:	4618      	mov	r0, r3
 810873c:	f7fd fffa 	bl	8106734 <xQueueReceive>
 8108740:	4603      	mov	r3, r0
 8108742:	2b00      	cmp	r3, #0
 8108744:	f47f af26 	bne.w	8108594 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8108748:	bf00      	nop
 810874a:	bf00      	nop
 810874c:	3730      	adds	r7, #48	@ 0x30
 810874e:	46bd      	mov	sp, r7
 8108750:	bd80      	pop	{r7, pc}
 8108752:	bf00      	nop
 8108754:	10004b5c 	.word	0x10004b5c

08108758 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8108758:	b580      	push	{r7, lr}
 810875a:	b088      	sub	sp, #32
 810875c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810875e:	e049      	b.n	81087f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8108760:	4b2e      	ldr	r3, [pc, #184]	@ (810881c <prvSwitchTimerLists+0xc4>)
 8108762:	681b      	ldr	r3, [r3, #0]
 8108764:	68db      	ldr	r3, [r3, #12]
 8108766:	681b      	ldr	r3, [r3, #0]
 8108768:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810876a:	4b2c      	ldr	r3, [pc, #176]	@ (810881c <prvSwitchTimerLists+0xc4>)
 810876c:	681b      	ldr	r3, [r3, #0]
 810876e:	68db      	ldr	r3, [r3, #12]
 8108770:	68db      	ldr	r3, [r3, #12]
 8108772:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8108774:	68fb      	ldr	r3, [r7, #12]
 8108776:	3304      	adds	r3, #4
 8108778:	4618      	mov	r0, r3
 810877a:	f7fd f979 	bl	8105a70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810877e:	68fb      	ldr	r3, [r7, #12]
 8108780:	6a1b      	ldr	r3, [r3, #32]
 8108782:	68f8      	ldr	r0, [r7, #12]
 8108784:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8108786:	68fb      	ldr	r3, [r7, #12]
 8108788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810878c:	f003 0304 	and.w	r3, r3, #4
 8108790:	2b00      	cmp	r3, #0
 8108792:	d02f      	beq.n	81087f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8108794:	68fb      	ldr	r3, [r7, #12]
 8108796:	699b      	ldr	r3, [r3, #24]
 8108798:	693a      	ldr	r2, [r7, #16]
 810879a:	4413      	add	r3, r2
 810879c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810879e:	68ba      	ldr	r2, [r7, #8]
 81087a0:	693b      	ldr	r3, [r7, #16]
 81087a2:	429a      	cmp	r2, r3
 81087a4:	d90e      	bls.n	81087c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 81087a6:	68fb      	ldr	r3, [r7, #12]
 81087a8:	68ba      	ldr	r2, [r7, #8]
 81087aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81087ac:	68fb      	ldr	r3, [r7, #12]
 81087ae:	68fa      	ldr	r2, [r7, #12]
 81087b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81087b2:	4b1a      	ldr	r3, [pc, #104]	@ (810881c <prvSwitchTimerLists+0xc4>)
 81087b4:	681a      	ldr	r2, [r3, #0]
 81087b6:	68fb      	ldr	r3, [r7, #12]
 81087b8:	3304      	adds	r3, #4
 81087ba:	4619      	mov	r1, r3
 81087bc:	4610      	mov	r0, r2
 81087be:	f7fd f91e 	bl	81059fe <vListInsert>
 81087c2:	e017      	b.n	81087f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81087c4:	2300      	movs	r3, #0
 81087c6:	9300      	str	r3, [sp, #0]
 81087c8:	2300      	movs	r3, #0
 81087ca:	693a      	ldr	r2, [r7, #16]
 81087cc:	2100      	movs	r1, #0
 81087ce:	68f8      	ldr	r0, [r7, #12]
 81087d0:	f7ff fd58 	bl	8108284 <xTimerGenericCommand>
 81087d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 81087d6:	687b      	ldr	r3, [r7, #4]
 81087d8:	2b00      	cmp	r3, #0
 81087da:	d10b      	bne.n	81087f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 81087dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81087e0:	f383 8811 	msr	BASEPRI, r3
 81087e4:	f3bf 8f6f 	isb	sy
 81087e8:	f3bf 8f4f 	dsb	sy
 81087ec:	603b      	str	r3, [r7, #0]
}
 81087ee:	bf00      	nop
 81087f0:	bf00      	nop
 81087f2:	e7fd      	b.n	81087f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81087f4:	4b09      	ldr	r3, [pc, #36]	@ (810881c <prvSwitchTimerLists+0xc4>)
 81087f6:	681b      	ldr	r3, [r3, #0]
 81087f8:	681b      	ldr	r3, [r3, #0]
 81087fa:	2b00      	cmp	r3, #0
 81087fc:	d1b0      	bne.n	8108760 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 81087fe:	4b07      	ldr	r3, [pc, #28]	@ (810881c <prvSwitchTimerLists+0xc4>)
 8108800:	681b      	ldr	r3, [r3, #0]
 8108802:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8108804:	4b06      	ldr	r3, [pc, #24]	@ (8108820 <prvSwitchTimerLists+0xc8>)
 8108806:	681b      	ldr	r3, [r3, #0]
 8108808:	4a04      	ldr	r2, [pc, #16]	@ (810881c <prvSwitchTimerLists+0xc4>)
 810880a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810880c:	4a04      	ldr	r2, [pc, #16]	@ (8108820 <prvSwitchTimerLists+0xc8>)
 810880e:	697b      	ldr	r3, [r7, #20]
 8108810:	6013      	str	r3, [r2, #0]
}
 8108812:	bf00      	nop
 8108814:	3718      	adds	r7, #24
 8108816:	46bd      	mov	sp, r7
 8108818:	bd80      	pop	{r7, pc}
 810881a:	bf00      	nop
 810881c:	10004b54 	.word	0x10004b54
 8108820:	10004b58 	.word	0x10004b58

08108824 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8108824:	b580      	push	{r7, lr}
 8108826:	b082      	sub	sp, #8
 8108828:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810882a:	f7fd fa7d 	bl	8105d28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810882e:	4b15      	ldr	r3, [pc, #84]	@ (8108884 <prvCheckForValidListAndQueue+0x60>)
 8108830:	681b      	ldr	r3, [r3, #0]
 8108832:	2b00      	cmp	r3, #0
 8108834:	d120      	bne.n	8108878 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8108836:	4814      	ldr	r0, [pc, #80]	@ (8108888 <prvCheckForValidListAndQueue+0x64>)
 8108838:	f7fd f890 	bl	810595c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810883c:	4813      	ldr	r0, [pc, #76]	@ (810888c <prvCheckForValidListAndQueue+0x68>)
 810883e:	f7fd f88d 	bl	810595c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8108842:	4b13      	ldr	r3, [pc, #76]	@ (8108890 <prvCheckForValidListAndQueue+0x6c>)
 8108844:	4a10      	ldr	r2, [pc, #64]	@ (8108888 <prvCheckForValidListAndQueue+0x64>)
 8108846:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8108848:	4b12      	ldr	r3, [pc, #72]	@ (8108894 <prvCheckForValidListAndQueue+0x70>)
 810884a:	4a10      	ldr	r2, [pc, #64]	@ (810888c <prvCheckForValidListAndQueue+0x68>)
 810884c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810884e:	2300      	movs	r3, #0
 8108850:	9300      	str	r3, [sp, #0]
 8108852:	4b11      	ldr	r3, [pc, #68]	@ (8108898 <prvCheckForValidListAndQueue+0x74>)
 8108854:	4a11      	ldr	r2, [pc, #68]	@ (810889c <prvCheckForValidListAndQueue+0x78>)
 8108856:	2110      	movs	r1, #16
 8108858:	200a      	movs	r0, #10
 810885a:	f7fd fbf1 	bl	8106040 <xQueueGenericCreateStatic>
 810885e:	4603      	mov	r3, r0
 8108860:	4a08      	ldr	r2, [pc, #32]	@ (8108884 <prvCheckForValidListAndQueue+0x60>)
 8108862:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8108864:	4b07      	ldr	r3, [pc, #28]	@ (8108884 <prvCheckForValidListAndQueue+0x60>)
 8108866:	681b      	ldr	r3, [r3, #0]
 8108868:	2b00      	cmp	r3, #0
 810886a:	d005      	beq.n	8108878 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810886c:	4b05      	ldr	r3, [pc, #20]	@ (8108884 <prvCheckForValidListAndQueue+0x60>)
 810886e:	681b      	ldr	r3, [r3, #0]
 8108870:	490b      	ldr	r1, [pc, #44]	@ (81088a0 <prvCheckForValidListAndQueue+0x7c>)
 8108872:	4618      	mov	r0, r3
 8108874:	f7fe fb1e 	bl	8106eb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8108878:	f7fd fa88 	bl	8105d8c <vPortExitCritical>
}
 810887c:	bf00      	nop
 810887e:	46bd      	mov	sp, r7
 8108880:	bd80      	pop	{r7, pc}
 8108882:	bf00      	nop
 8108884:	10004b5c 	.word	0x10004b5c
 8108888:	10004b2c 	.word	0x10004b2c
 810888c:	10004b40 	.word	0x10004b40
 8108890:	10004b54 	.word	0x10004b54
 8108894:	10004b58 	.word	0x10004b58
 8108898:	10004c08 	.word	0x10004c08
 810889c:	10004b68 	.word	0x10004b68
 81088a0:	0810c48c 	.word	0x0810c48c

081088a4 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 81088a4:	b480      	push	{r7}
 81088a6:	b083      	sub	sp, #12
 81088a8:	af00      	add	r7, sp, #0
 81088aa:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 81088ac:	687b      	ldr	r3, [r7, #4]
 81088ae:	687a      	ldr	r2, [r7, #4]
 81088b0:	605a      	str	r2, [r3, #4]
 81088b2:	687b      	ldr	r3, [r7, #4]
 81088b4:	685a      	ldr	r2, [r3, #4]
 81088b6:	687b      	ldr	r3, [r7, #4]
 81088b8:	601a      	str	r2, [r3, #0]
}
 81088ba:	bf00      	nop
 81088bc:	370c      	adds	r7, #12
 81088be:	46bd      	mov	sp, r7
 81088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088c4:	4770      	bx	lr

081088c6 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 81088c6:	b480      	push	{r7}
 81088c8:	b083      	sub	sp, #12
 81088ca:	af00      	add	r7, sp, #0
 81088cc:	6078      	str	r0, [r7, #4]
 81088ce:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 81088d0:	687b      	ldr	r3, [r7, #4]
 81088d2:	685a      	ldr	r2, [r3, #4]
 81088d4:	683b      	ldr	r3, [r7, #0]
 81088d6:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 81088d8:	683b      	ldr	r3, [r7, #0]
 81088da:	687a      	ldr	r2, [r7, #4]
 81088dc:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 81088de:	683b      	ldr	r3, [r7, #0]
 81088e0:	681b      	ldr	r3, [r3, #0]
 81088e2:	683a      	ldr	r2, [r7, #0]
 81088e4:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 81088e6:	683b      	ldr	r3, [r7, #0]
 81088e8:	685b      	ldr	r3, [r3, #4]
 81088ea:	683a      	ldr	r2, [r7, #0]
 81088ec:	601a      	str	r2, [r3, #0]
}
 81088ee:	bf00      	nop
 81088f0:	370c      	adds	r7, #12
 81088f2:	46bd      	mov	sp, r7
 81088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088f8:	4770      	bx	lr

081088fa <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 81088fa:	b580      	push	{r7, lr}
 81088fc:	b082      	sub	sp, #8
 81088fe:	af00      	add	r7, sp, #0
 8108900:	6078      	str	r0, [r7, #4]
 8108902:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8108904:	6839      	ldr	r1, [r7, #0]
 8108906:	6878      	ldr	r0, [r7, #4]
 8108908:	f7ff ffdd 	bl	81088c6 <metal_list_add_before>
}
 810890c:	bf00      	nop
 810890e:	3708      	adds	r7, #8
 8108910:	46bd      	mov	sp, r7
 8108912:	bd80      	pop	{r7, pc}

08108914 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8108914:	b480      	push	{r7}
 8108916:	b083      	sub	sp, #12
 8108918:	af00      	add	r7, sp, #0
 810891a:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 810891c:	687b      	ldr	r3, [r7, #4]
 810891e:	681b      	ldr	r3, [r3, #0]
 8108920:	687a      	ldr	r2, [r7, #4]
 8108922:	6852      	ldr	r2, [r2, #4]
 8108924:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8108926:	687b      	ldr	r3, [r7, #4]
 8108928:	685b      	ldr	r3, [r3, #4]
 810892a:	687a      	ldr	r2, [r7, #4]
 810892c:	6812      	ldr	r2, [r2, #0]
 810892e:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8108930:	687b      	ldr	r3, [r7, #4]
 8108932:	687a      	ldr	r2, [r7, #4]
 8108934:	605a      	str	r2, [r3, #4]
 8108936:	687b      	ldr	r3, [r7, #4]
 8108938:	685a      	ldr	r2, [r3, #4]
 810893a:	687b      	ldr	r3, [r7, #4]
 810893c:	601a      	str	r2, [r3, #0]
}
 810893e:	bf00      	nop
 8108940:	370c      	adds	r7, #12
 8108942:	46bd      	mov	sp, r7
 8108944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108948:	4770      	bx	lr

0810894a <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 810894a:	b580      	push	{r7, lr}
 810894c:	b082      	sub	sp, #8
 810894e:	af00      	add	r7, sp, #0
 8108950:	6078      	str	r0, [r7, #4]
 8108952:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8108954:	6839      	ldr	r1, [r7, #0]
 8108956:	6878      	ldr	r0, [r7, #4]
 8108958:	f001 fe74 	bl	810a644 <metal_machine_cache_flush>
}
 810895c:	bf00      	nop
 810895e:	3708      	adds	r7, #8
 8108960:	46bd      	mov	sp, r7
 8108962:	bd80      	pop	{r7, pc}

08108964 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8108964:	b580      	push	{r7, lr}
 8108966:	b082      	sub	sp, #8
 8108968:	af00      	add	r7, sp, #0
 810896a:	6078      	str	r0, [r7, #4]
 810896c:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 810896e:	6839      	ldr	r1, [r7, #0]
 8108970:	6878      	ldr	r0, [r7, #4]
 8108972:	f001 fe72 	bl	810a65a <metal_machine_cache_invalidate>
}
 8108976:	bf00      	nop
 8108978:	3708      	adds	r7, #8
 810897a:	46bd      	mov	sp, r7
 810897c:	bd80      	pop	{r7, pc}

0810897e <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 810897e:	b580      	push	{r7, lr}
 8108980:	b082      	sub	sp, #8
 8108982:	af00      	add	r7, sp, #0
 8108984:	6078      	str	r0, [r7, #4]
 8108986:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8108988:	6839      	ldr	r1, [r7, #0]
 810898a:	6878      	ldr	r0, [r7, #4]
 810898c:	f7ff ffdd 	bl	810894a <__metal_cache_flush>
}
 8108990:	bf00      	nop
 8108992:	3708      	adds	r7, #8
 8108994:	46bd      	mov	sp, r7
 8108996:	bd80      	pop	{r7, pc}

08108998 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8108998:	b580      	push	{r7, lr}
 810899a:	b082      	sub	sp, #8
 810899c:	af00      	add	r7, sp, #0
 810899e:	6078      	str	r0, [r7, #4]
 81089a0:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 81089a2:	6839      	ldr	r1, [r7, #0]
 81089a4:	6878      	ldr	r0, [r7, #4]
 81089a6:	f7ff ffdd 	bl	8108964 <__metal_cache_invalidate>
}
 81089aa:	bf00      	nop
 81089ac:	3708      	adds	r7, #8
 81089ae:	46bd      	mov	sp, r7
 81089b0:	bd80      	pop	{r7, pc}
	...

081089b4 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 81089b4:	b580      	push	{r7, lr}
 81089b6:	b082      	sub	sp, #8
 81089b8:	af00      	add	r7, sp, #0
 81089ba:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 81089bc:	687b      	ldr	r3, [r7, #4]
 81089be:	2b00      	cmp	r3, #0
 81089c0:	d008      	beq.n	81089d4 <metal_bus_register+0x20>
 81089c2:	687b      	ldr	r3, [r7, #4]
 81089c4:	681b      	ldr	r3, [r3, #0]
 81089c6:	2b00      	cmp	r3, #0
 81089c8:	d004      	beq.n	81089d4 <metal_bus_register+0x20>
 81089ca:	687b      	ldr	r3, [r7, #4]
 81089cc:	681b      	ldr	r3, [r3, #0]
 81089ce:	781b      	ldrb	r3, [r3, #0]
 81089d0:	2b00      	cmp	r3, #0
 81089d2:	d102      	bne.n	81089da <metal_bus_register+0x26>
		return -EINVAL;
 81089d4:	f06f 0315 	mvn.w	r3, #21
 81089d8:	e026      	b.n	8108a28 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 81089da:	687b      	ldr	r3, [r7, #4]
 81089dc:	681b      	ldr	r3, [r3, #0]
 81089de:	2100      	movs	r1, #0
 81089e0:	4618      	mov	r0, r3
 81089e2:	f000 f855 	bl	8108a90 <metal_bus_find>
 81089e6:	4603      	mov	r3, r0
 81089e8:	2b00      	cmp	r3, #0
 81089ea:	d102      	bne.n	81089f2 <metal_bus_register+0x3e>
		return -EEXIST;
 81089ec:	f06f 0310 	mvn.w	r3, #16
 81089f0:	e01a      	b.n	8108a28 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 81089f2:	687b      	ldr	r3, [r7, #4]
 81089f4:	331c      	adds	r3, #28
 81089f6:	4618      	mov	r0, r3
 81089f8:	f7ff ff54 	bl	81088a4 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 81089fc:	687b      	ldr	r3, [r7, #4]
 81089fe:	3324      	adds	r3, #36	@ 0x24
 8108a00:	4619      	mov	r1, r3
 8108a02:	480b      	ldr	r0, [pc, #44]	@ (8108a30 <metal_bus_register+0x7c>)
 8108a04:	f7ff ff79 	bl	81088fa <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8108a08:	4b0a      	ldr	r3, [pc, #40]	@ (8108a34 <metal_bus_register+0x80>)
 8108a0a:	781b      	ldrb	r3, [r3, #0]
 8108a0c:	2b06      	cmp	r3, #6
 8108a0e:	d90a      	bls.n	8108a26 <metal_bus_register+0x72>
 8108a10:	4b08      	ldr	r3, [pc, #32]	@ (8108a34 <metal_bus_register+0x80>)
 8108a12:	685b      	ldr	r3, [r3, #4]
 8108a14:	2b00      	cmp	r3, #0
 8108a16:	d006      	beq.n	8108a26 <metal_bus_register+0x72>
 8108a18:	4b06      	ldr	r3, [pc, #24]	@ (8108a34 <metal_bus_register+0x80>)
 8108a1a:	685b      	ldr	r3, [r3, #4]
 8108a1c:	687a      	ldr	r2, [r7, #4]
 8108a1e:	6812      	ldr	r2, [r2, #0]
 8108a20:	4905      	ldr	r1, [pc, #20]	@ (8108a38 <metal_bus_register+0x84>)
 8108a22:	2007      	movs	r0, #7
 8108a24:	4798      	blx	r3
	return 0;
 8108a26:	2300      	movs	r3, #0
}
 8108a28:	4618      	mov	r0, r3
 8108a2a:	3708      	adds	r7, #8
 8108a2c:	46bd      	mov	sp, r7
 8108a2e:	bd80      	pop	{r7, pc}
 8108a30:	10004c60 	.word	0x10004c60
 8108a34:	10004c58 	.word	0x10004c58
 8108a38:	0810c494 	.word	0x0810c494

08108a3c <metal_bus_unregister>:

int metal_bus_unregister(struct metal_bus *bus)
{
 8108a3c:	b580      	push	{r7, lr}
 8108a3e:	b082      	sub	sp, #8
 8108a40:	af00      	add	r7, sp, #0
 8108a42:	6078      	str	r0, [r7, #4]
	metal_list_del(&bus->node);
 8108a44:	687b      	ldr	r3, [r7, #4]
 8108a46:	3324      	adds	r3, #36	@ 0x24
 8108a48:	4618      	mov	r0, r3
 8108a4a:	f7ff ff63 	bl	8108914 <metal_list_del>
	if (bus->ops.bus_close)
 8108a4e:	687b      	ldr	r3, [r7, #4]
 8108a50:	685b      	ldr	r3, [r3, #4]
 8108a52:	2b00      	cmp	r3, #0
 8108a54:	d003      	beq.n	8108a5e <metal_bus_unregister+0x22>
		bus->ops.bus_close(bus);
 8108a56:	687b      	ldr	r3, [r7, #4]
 8108a58:	685b      	ldr	r3, [r3, #4]
 8108a5a:	6878      	ldr	r0, [r7, #4]
 8108a5c:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
 8108a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8108a88 <metal_bus_unregister+0x4c>)
 8108a60:	781b      	ldrb	r3, [r3, #0]
 8108a62:	2b06      	cmp	r3, #6
 8108a64:	d90a      	bls.n	8108a7c <metal_bus_unregister+0x40>
 8108a66:	4b08      	ldr	r3, [pc, #32]	@ (8108a88 <metal_bus_unregister+0x4c>)
 8108a68:	685b      	ldr	r3, [r3, #4]
 8108a6a:	2b00      	cmp	r3, #0
 8108a6c:	d006      	beq.n	8108a7c <metal_bus_unregister+0x40>
 8108a6e:	4b06      	ldr	r3, [pc, #24]	@ (8108a88 <metal_bus_unregister+0x4c>)
 8108a70:	685b      	ldr	r3, [r3, #4]
 8108a72:	687a      	ldr	r2, [r7, #4]
 8108a74:	6812      	ldr	r2, [r2, #0]
 8108a76:	4905      	ldr	r1, [pc, #20]	@ (8108a8c <metal_bus_unregister+0x50>)
 8108a78:	2007      	movs	r0, #7
 8108a7a:	4798      	blx	r3
	return 0;
 8108a7c:	2300      	movs	r3, #0
}
 8108a7e:	4618      	mov	r0, r3
 8108a80:	3708      	adds	r7, #8
 8108a82:	46bd      	mov	sp, r7
 8108a84:	bd80      	pop	{r7, pc}
 8108a86:	bf00      	nop
 8108a88:	10004c58 	.word	0x10004c58
 8108a8c:	0810c4a8 	.word	0x0810c4a8

08108a90 <metal_bus_find>:

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8108a90:	b580      	push	{r7, lr}
 8108a92:	b084      	sub	sp, #16
 8108a94:	af00      	add	r7, sp, #0
 8108a96:	6078      	str	r0, [r7, #4]
 8108a98:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8108a9a:	4b13      	ldr	r3, [pc, #76]	@ (8108ae8 <metal_bus_find+0x58>)
 8108a9c:	689b      	ldr	r3, [r3, #8]
 8108a9e:	60fb      	str	r3, [r7, #12]
 8108aa0:	e017      	b.n	8108ad2 <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8108aa2:	68fb      	ldr	r3, [r7, #12]
 8108aa4:	3b24      	subs	r3, #36	@ 0x24
 8108aa6:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8108aa8:	68bb      	ldr	r3, [r7, #8]
 8108aaa:	681b      	ldr	r3, [r3, #0]
 8108aac:	6879      	ldr	r1, [r7, #4]
 8108aae:	4618      	mov	r0, r3
 8108ab0:	f7f7 fc16 	bl	81002e0 <strcmp>
 8108ab4:	4603      	mov	r3, r0
 8108ab6:	2b00      	cmp	r3, #0
 8108ab8:	d107      	bne.n	8108aca <metal_bus_find+0x3a>
			continue;
		if (result)
 8108aba:	683b      	ldr	r3, [r7, #0]
 8108abc:	2b00      	cmp	r3, #0
 8108abe:	d002      	beq.n	8108ac6 <metal_bus_find+0x36>
			*result = bus;
 8108ac0:	683b      	ldr	r3, [r7, #0]
 8108ac2:	68ba      	ldr	r2, [r7, #8]
 8108ac4:	601a      	str	r2, [r3, #0]
		return 0;
 8108ac6:	2300      	movs	r3, #0
 8108ac8:	e009      	b.n	8108ade <metal_bus_find+0x4e>
			continue;
 8108aca:	bf00      	nop
	metal_list_for_each(&_metal.common.bus_list, node) {
 8108acc:	68fb      	ldr	r3, [r7, #12]
 8108ace:	681b      	ldr	r3, [r3, #0]
 8108ad0:	60fb      	str	r3, [r7, #12]
 8108ad2:	68fb      	ldr	r3, [r7, #12]
 8108ad4:	4a05      	ldr	r2, [pc, #20]	@ (8108aec <metal_bus_find+0x5c>)
 8108ad6:	4293      	cmp	r3, r2
 8108ad8:	d1e3      	bne.n	8108aa2 <metal_bus_find+0x12>
	}
	return -ENOENT;
 8108ada:	f06f 0301 	mvn.w	r3, #1
}
 8108ade:	4618      	mov	r0, r3
 8108ae0:	3710      	adds	r7, #16
 8108ae2:	46bd      	mov	sp, r7
 8108ae4:	bd80      	pop	{r7, pc}
 8108ae6:	bf00      	nop
 8108ae8:	10004c58 	.word	0x10004c58
 8108aec:	10004c60 	.word	0x10004c60

08108af0 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8108af0:	b580      	push	{r7, lr}
 8108af2:	b086      	sub	sp, #24
 8108af4:	af00      	add	r7, sp, #0
 8108af6:	60f8      	str	r0, [r7, #12]
 8108af8:	60b9      	str	r1, [r7, #8]
 8108afa:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8108afc:	68fb      	ldr	r3, [r7, #12]
 8108afe:	2b00      	cmp	r3, #0
 8108b00:	d00d      	beq.n	8108b1e <metal_device_open+0x2e>
 8108b02:	68fb      	ldr	r3, [r7, #12]
 8108b04:	781b      	ldrb	r3, [r3, #0]
 8108b06:	2b00      	cmp	r3, #0
 8108b08:	d009      	beq.n	8108b1e <metal_device_open+0x2e>
 8108b0a:	68bb      	ldr	r3, [r7, #8]
 8108b0c:	2b00      	cmp	r3, #0
 8108b0e:	d006      	beq.n	8108b1e <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8108b10:	68bb      	ldr	r3, [r7, #8]
 8108b12:	781b      	ldrb	r3, [r3, #0]
 8108b14:	2b00      	cmp	r3, #0
 8108b16:	d002      	beq.n	8108b1e <metal_device_open+0x2e>
 8108b18:	687b      	ldr	r3, [r7, #4]
 8108b1a:	2b00      	cmp	r3, #0
 8108b1c:	d102      	bne.n	8108b24 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8108b1e:	f06f 0315 	mvn.w	r3, #21
 8108b22:	e01f      	b.n	8108b64 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8108b24:	f107 0310 	add.w	r3, r7, #16
 8108b28:	4619      	mov	r1, r3
 8108b2a:	68f8      	ldr	r0, [r7, #12]
 8108b2c:	f7ff ffb0 	bl	8108a90 <metal_bus_find>
 8108b30:	6178      	str	r0, [r7, #20]
	if (error)
 8108b32:	697b      	ldr	r3, [r7, #20]
 8108b34:	2b00      	cmp	r3, #0
 8108b36:	d001      	beq.n	8108b3c <metal_device_open+0x4c>
		return error;
 8108b38:	697b      	ldr	r3, [r7, #20]
 8108b3a:	e013      	b.n	8108b64 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8108b3c:	693b      	ldr	r3, [r7, #16]
 8108b3e:	689b      	ldr	r3, [r3, #8]
 8108b40:	2b00      	cmp	r3, #0
 8108b42:	d102      	bne.n	8108b4a <metal_device_open+0x5a>
		return -ENODEV;
 8108b44:	f06f 0312 	mvn.w	r3, #18
 8108b48:	e00c      	b.n	8108b64 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8108b4a:	693b      	ldr	r3, [r7, #16]
 8108b4c:	689b      	ldr	r3, [r3, #8]
 8108b4e:	6938      	ldr	r0, [r7, #16]
 8108b50:	687a      	ldr	r2, [r7, #4]
 8108b52:	68b9      	ldr	r1, [r7, #8]
 8108b54:	4798      	blx	r3
 8108b56:	6178      	str	r0, [r7, #20]
	if (error)
 8108b58:	697b      	ldr	r3, [r7, #20]
 8108b5a:	2b00      	cmp	r3, #0
 8108b5c:	d001      	beq.n	8108b62 <metal_device_open+0x72>
		return error;
 8108b5e:	697b      	ldr	r3, [r7, #20]
 8108b60:	e000      	b.n	8108b64 <metal_device_open+0x74>

	return 0;
 8108b62:	2300      	movs	r3, #0
}
 8108b64:	4618      	mov	r0, r3
 8108b66:	3718      	adds	r7, #24
 8108b68:	46bd      	mov	sp, r7
 8108b6a:	bd80      	pop	{r7, pc}

08108b6c <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8108b6c:	b580      	push	{r7, lr}
 8108b6e:	b082      	sub	sp, #8
 8108b70:	af00      	add	r7, sp, #0
 8108b72:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8108b74:	687b      	ldr	r3, [r7, #4]
 8108b76:	681b      	ldr	r3, [r3, #0]
 8108b78:	2b00      	cmp	r3, #0
 8108b7a:	d008      	beq.n	8108b8e <metal_register_generic_device+0x22>
 8108b7c:	687b      	ldr	r3, [r7, #4]
 8108b7e:	681b      	ldr	r3, [r3, #0]
 8108b80:	781b      	ldrb	r3, [r3, #0]
 8108b82:	2b00      	cmp	r3, #0
 8108b84:	d003      	beq.n	8108b8e <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8108b86:	687b      	ldr	r3, [r7, #4]
 8108b88:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8108b8a:	2b02      	cmp	r3, #2
 8108b8c:	d902      	bls.n	8108b94 <metal_register_generic_device+0x28>
		return -EINVAL;
 8108b8e:	f06f 0315 	mvn.w	r3, #21
 8108b92:	e009      	b.n	8108ba8 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8108b94:	687b      	ldr	r3, [r7, #4]
 8108b96:	4a06      	ldr	r2, [pc, #24]	@ (8108bb0 <metal_register_generic_device+0x44>)
 8108b98:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8108b9a:	687b      	ldr	r3, [r7, #4]
 8108b9c:	336c      	adds	r3, #108	@ 0x6c
 8108b9e:	4619      	mov	r1, r3
 8108ba0:	4804      	ldr	r0, [pc, #16]	@ (8108bb4 <metal_register_generic_device+0x48>)
 8108ba2:	f7ff feaa 	bl	81088fa <metal_list_add_tail>
			    &device->node);
	return 0;
 8108ba6:	2300      	movs	r3, #0
}
 8108ba8:	4618      	mov	r0, r3
 8108baa:	3708      	adds	r7, #8
 8108bac:	46bd      	mov	sp, r7
 8108bae:	bd80      	pop	{r7, pc}
 8108bb0:	10000014 	.word	0x10000014
 8108bb4:	10004c70 	.word	0x10004c70

08108bb8 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8108bb8:	b580      	push	{r7, lr}
 8108bba:	b086      	sub	sp, #24
 8108bbc:	af00      	add	r7, sp, #0
 8108bbe:	60f8      	str	r0, [r7, #12]
 8108bc0:	60b9      	str	r1, [r7, #8]
 8108bc2:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8108bc4:	4b12      	ldr	r3, [pc, #72]	@ (8108c10 <metal_generic_dev_open+0x58>)
 8108bc6:	699b      	ldr	r3, [r3, #24]
 8108bc8:	617b      	str	r3, [r7, #20]
 8108bca:	e017      	b.n	8108bfc <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8108bcc:	697b      	ldr	r3, [r7, #20]
 8108bce:	3b6c      	subs	r3, #108	@ 0x6c
 8108bd0:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8108bd2:	693b      	ldr	r3, [r7, #16]
 8108bd4:	681b      	ldr	r3, [r3, #0]
 8108bd6:	68b9      	ldr	r1, [r7, #8]
 8108bd8:	4618      	mov	r0, r3
 8108bda:	f7f7 fb81 	bl	81002e0 <strcmp>
 8108bde:	4603      	mov	r3, r0
 8108be0:	2b00      	cmp	r3, #0
 8108be2:	d107      	bne.n	8108bf4 <metal_generic_dev_open+0x3c>
			continue;
		*device = dev;
 8108be4:	687b      	ldr	r3, [r7, #4]
 8108be6:	693a      	ldr	r2, [r7, #16]
 8108be8:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8108bea:	6938      	ldr	r0, [r7, #16]
 8108bec:	f000 f890 	bl	8108d10 <metal_generic_dev_sys_open>
 8108bf0:	4603      	mov	r3, r0
 8108bf2:	e009      	b.n	8108c08 <metal_generic_dev_open+0x50>
			continue;
 8108bf4:	bf00      	nop
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8108bf6:	697b      	ldr	r3, [r7, #20]
 8108bf8:	681b      	ldr	r3, [r3, #0]
 8108bfa:	617b      	str	r3, [r7, #20]
 8108bfc:	697b      	ldr	r3, [r7, #20]
 8108bfe:	4a05      	ldr	r2, [pc, #20]	@ (8108c14 <metal_generic_dev_open+0x5c>)
 8108c00:	4293      	cmp	r3, r2
 8108c02:	d1e3      	bne.n	8108bcc <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8108c04:	f06f 0312 	mvn.w	r3, #18
}
 8108c08:	4618      	mov	r0, r3
 8108c0a:	3718      	adds	r7, #24
 8108c0c:	46bd      	mov	sp, r7
 8108c0e:	bd80      	pop	{r7, pc}
 8108c10:	10004c58 	.word	0x10004c58
 8108c14:	10004c70 	.word	0x10004c70

08108c18 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8108c18:	b580      	push	{r7, lr}
 8108c1a:	b086      	sub	sp, #24
 8108c1c:	af00      	add	r7, sp, #0
 8108c1e:	60f8      	str	r0, [r7, #12]
 8108c20:	60b9      	str	r1, [r7, #8]
 8108c22:	607a      	str	r2, [r7, #4]
 8108c24:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8108c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108c28:	683b      	ldr	r3, [r7, #0]
 8108c2a:	429a      	cmp	r2, r3
 8108c2c:	d009      	beq.n	8108c42 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8108c2e:	6a3a      	ldr	r2, [r7, #32]
 8108c30:	4613      	mov	r3, r2
 8108c32:	005b      	lsls	r3, r3, #1
 8108c34:	4413      	add	r3, r2
 8108c36:	009b      	lsls	r3, r3, #2
 8108c38:	461a      	mov	r2, r3
 8108c3a:	6839      	ldr	r1, [r7, #0]
 8108c3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8108c3e:	f002 fd1a 	bl	810b676 <memcpy>
	for (i = 0; i < nents_in; i++) {
 8108c42:	2300      	movs	r3, #0
 8108c44:	617b      	str	r3, [r7, #20]
 8108c46:	e02f      	b.n	8108ca8 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8108c48:	687b      	ldr	r3, [r7, #4]
 8108c4a:	2b02      	cmp	r3, #2
 8108c4c:	d114      	bne.n	8108c78 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8108c4e:	697a      	ldr	r2, [r7, #20]
 8108c50:	4613      	mov	r3, r2
 8108c52:	005b      	lsls	r3, r3, #1
 8108c54:	4413      	add	r3, r2
 8108c56:	009b      	lsls	r3, r3, #2
 8108c58:	461a      	mov	r2, r3
 8108c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108c5c:	4413      	add	r3, r2
 8108c5e:	6818      	ldr	r0, [r3, #0]
 8108c60:	697a      	ldr	r2, [r7, #20]
 8108c62:	4613      	mov	r3, r2
 8108c64:	005b      	lsls	r3, r3, #1
 8108c66:	4413      	add	r3, r2
 8108c68:	009b      	lsls	r3, r3, #2
 8108c6a:	461a      	mov	r2, r3
 8108c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108c6e:	4413      	add	r3, r2
 8108c70:	689b      	ldr	r3, [r3, #8]
 8108c72:	4619      	mov	r1, r3
 8108c74:	f7ff fe83 	bl	810897e <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8108c78:	697a      	ldr	r2, [r7, #20]
 8108c7a:	4613      	mov	r3, r2
 8108c7c:	005b      	lsls	r3, r3, #1
 8108c7e:	4413      	add	r3, r2
 8108c80:	009b      	lsls	r3, r3, #2
 8108c82:	461a      	mov	r2, r3
 8108c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108c86:	4413      	add	r3, r2
 8108c88:	6818      	ldr	r0, [r3, #0]
 8108c8a:	697a      	ldr	r2, [r7, #20]
 8108c8c:	4613      	mov	r3, r2
 8108c8e:	005b      	lsls	r3, r3, #1
 8108c90:	4413      	add	r3, r2
 8108c92:	009b      	lsls	r3, r3, #2
 8108c94:	461a      	mov	r2, r3
 8108c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108c98:	4413      	add	r3, r2
 8108c9a:	689b      	ldr	r3, [r3, #8]
 8108c9c:	4619      	mov	r1, r3
 8108c9e:	f7ff fe7b 	bl	8108998 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8108ca2:	697b      	ldr	r3, [r7, #20]
 8108ca4:	3301      	adds	r3, #1
 8108ca6:	617b      	str	r3, [r7, #20]
 8108ca8:	697a      	ldr	r2, [r7, #20]
 8108caa:	6a3b      	ldr	r3, [r7, #32]
 8108cac:	429a      	cmp	r2, r3
 8108cae:	dbcb      	blt.n	8108c48 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8108cb0:	6a3b      	ldr	r3, [r7, #32]
}
 8108cb2:	4618      	mov	r0, r3
 8108cb4:	3718      	adds	r7, #24
 8108cb6:	46bd      	mov	sp, r7
 8108cb8:	bd80      	pop	{r7, pc}

08108cba <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8108cba:	b580      	push	{r7, lr}
 8108cbc:	b086      	sub	sp, #24
 8108cbe:	af00      	add	r7, sp, #0
 8108cc0:	60f8      	str	r0, [r7, #12]
 8108cc2:	60b9      	str	r1, [r7, #8]
 8108cc4:	607a      	str	r2, [r7, #4]
 8108cc6:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8108cc8:	2300      	movs	r3, #0
 8108cca:	617b      	str	r3, [r7, #20]
 8108ccc:	e017      	b.n	8108cfe <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8108cce:	697a      	ldr	r2, [r7, #20]
 8108cd0:	4613      	mov	r3, r2
 8108cd2:	005b      	lsls	r3, r3, #1
 8108cd4:	4413      	add	r3, r2
 8108cd6:	009b      	lsls	r3, r3, #2
 8108cd8:	461a      	mov	r2, r3
 8108cda:	683b      	ldr	r3, [r7, #0]
 8108cdc:	4413      	add	r3, r2
 8108cde:	6818      	ldr	r0, [r3, #0]
 8108ce0:	697a      	ldr	r2, [r7, #20]
 8108ce2:	4613      	mov	r3, r2
 8108ce4:	005b      	lsls	r3, r3, #1
 8108ce6:	4413      	add	r3, r2
 8108ce8:	009b      	lsls	r3, r3, #2
 8108cea:	461a      	mov	r2, r3
 8108cec:	683b      	ldr	r3, [r7, #0]
 8108cee:	4413      	add	r3, r2
 8108cf0:	689b      	ldr	r3, [r3, #8]
 8108cf2:	4619      	mov	r1, r3
 8108cf4:	f7ff fe50 	bl	8108998 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8108cf8:	697b      	ldr	r3, [r7, #20]
 8108cfa:	3301      	adds	r3, #1
 8108cfc:	617b      	str	r3, [r7, #20]
 8108cfe:	697a      	ldr	r2, [r7, #20]
 8108d00:	6a3b      	ldr	r3, [r7, #32]
 8108d02:	429a      	cmp	r2, r3
 8108d04:	dbe3      	blt.n	8108cce <metal_generic_dev_dma_unmap+0x14>
	}
}
 8108d06:	bf00      	nop
 8108d08:	bf00      	nop
 8108d0a:	3718      	adds	r7, #24
 8108d0c:	46bd      	mov	sp, r7
 8108d0e:	bd80      	pop	{r7, pc}

08108d10 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8108d10:	b580      	push	{r7, lr}
 8108d12:	b084      	sub	sp, #16
 8108d14:	af00      	add	r7, sp, #0
 8108d16:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8108d18:	2300      	movs	r3, #0
 8108d1a:	60fb      	str	r3, [r7, #12]
 8108d1c:	e013      	b.n	8108d46 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8108d1e:	68fa      	ldr	r2, [r7, #12]
 8108d20:	4613      	mov	r3, r2
 8108d22:	005b      	lsls	r3, r3, #1
 8108d24:	4413      	add	r3, r2
 8108d26:	011b      	lsls	r3, r3, #4
 8108d28:	3308      	adds	r3, #8
 8108d2a:	687a      	ldr	r2, [r7, #4]
 8108d2c:	4413      	add	r3, r2
 8108d2e:	3304      	adds	r3, #4
 8108d30:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8108d32:	68bb      	ldr	r3, [r7, #8]
 8108d34:	689b      	ldr	r3, [r3, #8]
 8108d36:	2b00      	cmp	r3, #0
 8108d38:	d00b      	beq.n	8108d52 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8108d3a:	68b8      	ldr	r0, [r7, #8]
 8108d3c:	f000 f828 	bl	8108d90 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8108d40:	68fb      	ldr	r3, [r7, #12]
 8108d42:	3301      	adds	r3, #1
 8108d44:	60fb      	str	r3, [r7, #12]
 8108d46:	687b      	ldr	r3, [r7, #4]
 8108d48:	689b      	ldr	r3, [r3, #8]
 8108d4a:	68fa      	ldr	r2, [r7, #12]
 8108d4c:	429a      	cmp	r2, r3
 8108d4e:	d3e6      	bcc.n	8108d1e <metal_generic_dev_sys_open+0xe>
 8108d50:	e000      	b.n	8108d54 <metal_generic_dev_sys_open+0x44>
			break;
 8108d52:	bf00      	nop
	}

	return 0;
 8108d54:	2300      	movs	r3, #0
}
 8108d56:	4618      	mov	r0, r3
 8108d58:	3710      	adds	r7, #16
 8108d5a:	46bd      	mov	sp, r7
 8108d5c:	bd80      	pop	{r7, pc}
	...

08108d60 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8108d60:	b580      	push	{r7, lr}
 8108d62:	b082      	sub	sp, #8
 8108d64:	af00      	add	r7, sp, #0
 8108d66:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8108d68:	4803      	ldr	r0, [pc, #12]	@ (8108d78 <metal_sys_init+0x18>)
 8108d6a:	f7ff fe23 	bl	81089b4 <metal_bus_register>
	return 0;
 8108d6e:	2300      	movs	r3, #0
}
 8108d70:	4618      	mov	r0, r3
 8108d72:	3708      	adds	r7, #8
 8108d74:	46bd      	mov	sp, r7
 8108d76:	bd80      	pop	{r7, pc}
 8108d78:	10000014 	.word	0x10000014

08108d7c <metal_sys_finish>:

void metal_sys_finish(void)
{
 8108d7c:	b580      	push	{r7, lr}
 8108d7e:	af00      	add	r7, sp, #0
	metal_bus_unregister(&metal_generic_bus);
 8108d80:	4802      	ldr	r0, [pc, #8]	@ (8108d8c <metal_sys_finish+0x10>)
 8108d82:	f7ff fe5b 	bl	8108a3c <metal_bus_unregister>
}
 8108d86:	bf00      	nop
 8108d88:	bd80      	pop	{r7, pc}
 8108d8a:	bf00      	nop
 8108d8c:	10000014 	.word	0x10000014

08108d90 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8108d90:	b580      	push	{r7, lr}
 8108d92:	b086      	sub	sp, #24
 8108d94:	af00      	add	r7, sp, #0
 8108d96:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8108d98:	687b      	ldr	r3, [r7, #4]
 8108d9a:	681b      	ldr	r3, [r3, #0]
 8108d9c:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8108d9e:	687b      	ldr	r3, [r7, #4]
 8108da0:	689b      	ldr	r3, [r3, #8]
 8108da2:	613b      	str	r3, [r7, #16]
	if (psize) {
 8108da4:	693b      	ldr	r3, [r7, #16]
 8108da6:	2b00      	cmp	r3, #0
 8108da8:	d02c      	beq.n	8108e04 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8108daa:	687b      	ldr	r3, [r7, #4]
 8108dac:	68db      	ldr	r3, [r3, #12]
 8108dae:	693a      	ldr	r2, [r7, #16]
 8108db0:	fa22 f303 	lsr.w	r3, r2, r3
 8108db4:	2b00      	cmp	r3, #0
 8108db6:	d005      	beq.n	8108dc4 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8108db8:	687b      	ldr	r3, [r7, #4]
 8108dba:	68db      	ldr	r3, [r3, #12]
 8108dbc:	2201      	movs	r2, #1
 8108dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8108dc2:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8108dc4:	2300      	movs	r3, #0
 8108dc6:	617b      	str	r3, [r7, #20]
 8108dc8:	e013      	b.n	8108df2 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8108dca:	687b      	ldr	r3, [r7, #4]
 8108dcc:	685a      	ldr	r2, [r3, #4]
 8108dce:	697b      	ldr	r3, [r7, #20]
 8108dd0:	009b      	lsls	r3, r3, #2
 8108dd2:	4413      	add	r3, r2
 8108dd4:	6819      	ldr	r1, [r3, #0]
 8108dd6:	687b      	ldr	r3, [r7, #4]
 8108dd8:	695b      	ldr	r3, [r3, #20]
 8108dda:	693a      	ldr	r2, [r7, #16]
 8108ddc:	68f8      	ldr	r0, [r7, #12]
 8108dde:	f001 fc47 	bl	810a670 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8108de2:	693b      	ldr	r3, [r7, #16]
 8108de4:	009b      	lsls	r3, r3, #2
 8108de6:	68fa      	ldr	r2, [r7, #12]
 8108de8:	4413      	add	r3, r2
 8108dea:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8108dec:	697b      	ldr	r3, [r7, #20]
 8108dee:	3301      	adds	r3, #1
 8108df0:	617b      	str	r3, [r7, #20]
 8108df2:	687b      	ldr	r3, [r7, #4]
 8108df4:	689a      	ldr	r2, [r3, #8]
 8108df6:	687b      	ldr	r3, [r7, #4]
 8108df8:	68db      	ldr	r3, [r3, #12]
 8108dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8108dfe:	697a      	ldr	r2, [r7, #20]
 8108e00:	429a      	cmp	r2, r3
 8108e02:	d9e2      	bls.n	8108dca <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8108e04:	bf00      	nop
 8108e06:	3718      	adds	r7, #24
 8108e08:	46bd      	mov	sp, r7
 8108e0a:	bd80      	pop	{r7, pc}

08108e0c <metal_list_init>:
{
 8108e0c:	b480      	push	{r7}
 8108e0e:	b083      	sub	sp, #12
 8108e10:	af00      	add	r7, sp, #0
 8108e12:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8108e14:	687b      	ldr	r3, [r7, #4]
 8108e16:	687a      	ldr	r2, [r7, #4]
 8108e18:	605a      	str	r2, [r3, #4]
 8108e1a:	687b      	ldr	r3, [r7, #4]
 8108e1c:	685a      	ldr	r2, [r3, #4]
 8108e1e:	687b      	ldr	r3, [r7, #4]
 8108e20:	601a      	str	r2, [r3, #0]
}
 8108e22:	bf00      	nop
 8108e24:	370c      	adds	r7, #12
 8108e26:	46bd      	mov	sp, r7
 8108e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e2c:	4770      	bx	lr
	...

08108e30 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8108e30:	b580      	push	{r7, lr}
 8108e32:	b084      	sub	sp, #16
 8108e34:	af00      	add	r7, sp, #0
 8108e36:	6078      	str	r0, [r7, #4]
	int error = 0;
 8108e38:	2300      	movs	r3, #0
 8108e3a:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8108e3c:	2220      	movs	r2, #32
 8108e3e:	2100      	movs	r1, #0
 8108e40:	4810      	ldr	r0, [pc, #64]	@ (8108e84 <metal_init+0x54>)
 8108e42:	f002 fb12 	bl	810b46a <memset>

	_metal.common.log_handler   = params->log_handler;
 8108e46:	687b      	ldr	r3, [r7, #4]
 8108e48:	681b      	ldr	r3, [r3, #0]
 8108e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8108e84 <metal_init+0x54>)
 8108e4c:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8108e4e:	687b      	ldr	r3, [r7, #4]
 8108e50:	791a      	ldrb	r2, [r3, #4]
 8108e52:	4b0c      	ldr	r3, [pc, #48]	@ (8108e84 <metal_init+0x54>)
 8108e54:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8108e56:	480c      	ldr	r0, [pc, #48]	@ (8108e88 <metal_init+0x58>)
 8108e58:	f7ff ffd8 	bl	8108e0c <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8108e5c:	480b      	ldr	r0, [pc, #44]	@ (8108e8c <metal_init+0x5c>)
 8108e5e:	f7ff ffd5 	bl	8108e0c <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8108e62:	480b      	ldr	r0, [pc, #44]	@ (8108e90 <metal_init+0x60>)
 8108e64:	f7ff ffd2 	bl	8108e0c <metal_list_init>

	error = metal_sys_init(params);
 8108e68:	6878      	ldr	r0, [r7, #4]
 8108e6a:	f7ff ff79 	bl	8108d60 <metal_sys_init>
 8108e6e:	60f8      	str	r0, [r7, #12]
	if (error)
 8108e70:	68fb      	ldr	r3, [r7, #12]
 8108e72:	2b00      	cmp	r3, #0
 8108e74:	d001      	beq.n	8108e7a <metal_init+0x4a>
		return error;
 8108e76:	68fb      	ldr	r3, [r7, #12]
 8108e78:	e000      	b.n	8108e7c <metal_init+0x4c>

	return error;
 8108e7a:	68fb      	ldr	r3, [r7, #12]
}
 8108e7c:	4618      	mov	r0, r3
 8108e7e:	3710      	adds	r7, #16
 8108e80:	46bd      	mov	sp, r7
 8108e82:	bd80      	pop	{r7, pc}
 8108e84:	10004c58 	.word	0x10004c58
 8108e88:	10004c60 	.word	0x10004c60
 8108e8c:	10004c68 	.word	0x10004c68
 8108e90:	10004c70 	.word	0x10004c70

08108e94 <metal_finish>:

void metal_finish(void)
{
 8108e94:	b580      	push	{r7, lr}
 8108e96:	af00      	add	r7, sp, #0
	metal_sys_finish();
 8108e98:	f7ff ff70 	bl	8108d7c <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
 8108e9c:	2220      	movs	r2, #32
 8108e9e:	2100      	movs	r1, #0
 8108ea0:	4802      	ldr	r0, [pc, #8]	@ (8108eac <metal_finish+0x18>)
 8108ea2:	f002 fae2 	bl	810b46a <memset>
}
 8108ea6:	bf00      	nop
 8108ea8:	bd80      	pop	{r7, pc}
 8108eaa:	bf00      	nop
 8108eac:	10004c58 	.word	0x10004c58

08108eb0 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8108eb0:	b480      	push	{r7}
 8108eb2:	b083      	sub	sp, #12
 8108eb4:	af00      	add	r7, sp, #0
 8108eb6:	6078      	str	r0, [r7, #4]
 8108eb8:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8108eba:	687b      	ldr	r3, [r7, #4]
 8108ebc:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8108ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108ec2:	d009      	beq.n	8108ed8 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8108ec4:	687b      	ldr	r3, [r7, #4]
 8108ec6:	689b      	ldr	r3, [r3, #8]
 8108ec8:	683a      	ldr	r2, [r7, #0]
 8108eca:	429a      	cmp	r2, r3
 8108ecc:	d804      	bhi.n	8108ed8 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8108ece:	687b      	ldr	r3, [r7, #4]
 8108ed0:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8108ed2:	683b      	ldr	r3, [r7, #0]
 8108ed4:	4413      	add	r3, r2
 8108ed6:	e000      	b.n	8108eda <metal_io_virt+0x2a>
 8108ed8:	2300      	movs	r3, #0
}
 8108eda:	4618      	mov	r0, r3
 8108edc:	370c      	adds	r7, #12
 8108ede:	46bd      	mov	sp, r7
 8108ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ee4:	4770      	bx	lr

08108ee6 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8108ee6:	b5b0      	push	{r4, r5, r7, lr}
 8108ee8:	b08a      	sub	sp, #40	@ 0x28
 8108eea:	af00      	add	r7, sp, #0
 8108eec:	60f8      	str	r0, [r7, #12]
 8108eee:	60b9      	str	r1, [r7, #8]
 8108ef0:	607a      	str	r2, [r7, #4]
 8108ef2:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8108ef4:	f107 0310 	add.w	r3, r7, #16
 8108ef8:	2200      	movs	r2, #0
 8108efa:	601a      	str	r2, [r3, #0]
 8108efc:	605a      	str	r2, [r3, #4]
 8108efe:	609a      	str	r2, [r3, #8]
 8108f00:	60da      	str	r2, [r3, #12]
 8108f02:	611a      	str	r2, [r3, #16]
 8108f04:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8108f06:	68fb      	ldr	r3, [r7, #12]
 8108f08:	68ba      	ldr	r2, [r7, #8]
 8108f0a:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8108f0c:	68fb      	ldr	r3, [r7, #12]
 8108f0e:	687a      	ldr	r2, [r7, #4]
 8108f10:	605a      	str	r2, [r3, #4]
	io->size = size;
 8108f12:	68fb      	ldr	r3, [r7, #12]
 8108f14:	683a      	ldr	r2, [r7, #0]
 8108f16:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8108f18:	68fb      	ldr	r3, [r7, #12]
 8108f1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8108f1c:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8108f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108f20:	2b1f      	cmp	r3, #31
 8108f22:	d904      	bls.n	8108f2e <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8108f24:	68fb      	ldr	r3, [r7, #12]
 8108f26:	f04f 32ff 	mov.w	r2, #4294967295
 8108f2a:	611a      	str	r2, [r3, #16]
 8108f2c:	e006      	b.n	8108f3c <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8108f2e:	2201      	movs	r2, #1
 8108f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108f32:	fa02 f303 	lsl.w	r3, r2, r3
 8108f36:	1e5a      	subs	r2, r3, #1
 8108f38:	68fb      	ldr	r3, [r7, #12]
 8108f3a:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8108f3c:	68fb      	ldr	r3, [r7, #12]
 8108f3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108f40:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8108f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8108f44:	2b00      	cmp	r3, #0
 8108f46:	d00b      	beq.n	8108f60 <metal_io_init+0x7a>
 8108f48:	68fb      	ldr	r3, [r7, #12]
 8108f4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8108f4c:	f103 0418 	add.w	r4, r3, #24
 8108f50:	4615      	mov	r5, r2
 8108f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108f56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8108f5a:	e884 0003 	stmia.w	r4, {r0, r1}
 8108f5e:	e00a      	b.n	8108f76 <metal_io_init+0x90>
 8108f60:	68fb      	ldr	r3, [r7, #12]
 8108f62:	f103 0418 	add.w	r4, r3, #24
 8108f66:	f107 0510 	add.w	r5, r7, #16
 8108f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108f6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8108f72:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8108f76:	68f8      	ldr	r0, [r7, #12]
 8108f78:	f7ff ff0a 	bl	8108d90 <metal_sys_io_mem_map>
}
 8108f7c:	bf00      	nop
 8108f7e:	3728      	adds	r7, #40	@ 0x28
 8108f80:	46bd      	mov	sp, r7
 8108f82:	bdb0      	pop	{r4, r5, r7, pc}

08108f84 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8108f84:	b590      	push	{r4, r7, lr}
 8108f86:	b08b      	sub	sp, #44	@ 0x2c
 8108f88:	af02      	add	r7, sp, #8
 8108f8a:	60f8      	str	r0, [r7, #12]
 8108f8c:	60b9      	str	r1, [r7, #8]
 8108f8e:	607a      	str	r2, [r7, #4]
 8108f90:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8108f92:	68b9      	ldr	r1, [r7, #8]
 8108f94:	68f8      	ldr	r0, [r7, #12]
 8108f96:	f7ff ff8b 	bl	8108eb0 <metal_io_virt>
 8108f9a:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8108f9c:	687b      	ldr	r3, [r7, #4]
 8108f9e:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8108fa0:	68fb      	ldr	r3, [r7, #12]
 8108fa2:	689b      	ldr	r3, [r3, #8]
 8108fa4:	68ba      	ldr	r2, [r7, #8]
 8108fa6:	429a      	cmp	r2, r3
 8108fa8:	d902      	bls.n	8108fb0 <metal_io_block_read+0x2c>
		return -ERANGE;
 8108faa:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8108fae:	e05c      	b.n	810906a <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8108fb0:	683a      	ldr	r2, [r7, #0]
 8108fb2:	68bb      	ldr	r3, [r7, #8]
 8108fb4:	441a      	add	r2, r3
 8108fb6:	68fb      	ldr	r3, [r7, #12]
 8108fb8:	689b      	ldr	r3, [r3, #8]
 8108fba:	429a      	cmp	r2, r3
 8108fbc:	d904      	bls.n	8108fc8 <metal_io_block_read+0x44>
		len = io->size - offset;
 8108fbe:	68fb      	ldr	r3, [r7, #12]
 8108fc0:	689a      	ldr	r2, [r3, #8]
 8108fc2:	68bb      	ldr	r3, [r7, #8]
 8108fc4:	1ad3      	subs	r3, r2, r3
 8108fc6:	603b      	str	r3, [r7, #0]
	retlen = len;
 8108fc8:	683b      	ldr	r3, [r7, #0]
 8108fca:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8108fcc:	68fb      	ldr	r3, [r7, #12]
 8108fce:	6a1b      	ldr	r3, [r3, #32]
 8108fd0:	2b00      	cmp	r3, #0
 8108fd2:	d00a      	beq.n	8108fea <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8108fd4:	68fb      	ldr	r3, [r7, #12]
 8108fd6:	6a1c      	ldr	r4, [r3, #32]
 8108fd8:	683b      	ldr	r3, [r7, #0]
 8108fda:	9300      	str	r3, [sp, #0]
 8108fdc:	2305      	movs	r3, #5
 8108fde:	687a      	ldr	r2, [r7, #4]
 8108fe0:	68b9      	ldr	r1, [r7, #8]
 8108fe2:	68f8      	ldr	r0, [r7, #12]
 8108fe4:	47a0      	blx	r4
 8108fe6:	6178      	str	r0, [r7, #20]
 8108fe8:	e03e      	b.n	8109068 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8108fea:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8108fee:	e00c      	b.n	810900a <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8108ff0:	69fb      	ldr	r3, [r7, #28]
 8108ff2:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8108ff4:	69bb      	ldr	r3, [r7, #24]
 8108ff6:	701a      	strb	r2, [r3, #0]
			dest++;
 8108ff8:	69bb      	ldr	r3, [r7, #24]
 8108ffa:	3301      	adds	r3, #1
 8108ffc:	61bb      	str	r3, [r7, #24]
			ptr++;
 8108ffe:	69fb      	ldr	r3, [r7, #28]
 8109000:	3301      	adds	r3, #1
 8109002:	61fb      	str	r3, [r7, #28]
			len--;
 8109004:	683b      	ldr	r3, [r7, #0]
 8109006:	3b01      	subs	r3, #1
 8109008:	603b      	str	r3, [r7, #0]
		while ( len && (
 810900a:	683b      	ldr	r3, [r7, #0]
 810900c:	2b00      	cmp	r3, #0
 810900e:	d017      	beq.n	8109040 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8109010:	69bb      	ldr	r3, [r7, #24]
 8109012:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8109016:	2b00      	cmp	r3, #0
 8109018:	d1ea      	bne.n	8108ff0 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 810901a:	69fb      	ldr	r3, [r7, #28]
 810901c:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8109020:	2b00      	cmp	r3, #0
 8109022:	d1e5      	bne.n	8108ff0 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8109024:	e00c      	b.n	8109040 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8109026:	69fb      	ldr	r3, [r7, #28]
 8109028:	681a      	ldr	r2, [r3, #0]
 810902a:	69bb      	ldr	r3, [r7, #24]
 810902c:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 810902e:	69bb      	ldr	r3, [r7, #24]
 8109030:	3304      	adds	r3, #4
 8109032:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8109034:	69fb      	ldr	r3, [r7, #28]
 8109036:	3304      	adds	r3, #4
 8109038:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 810903a:	683b      	ldr	r3, [r7, #0]
 810903c:	3b04      	subs	r3, #4
 810903e:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8109040:	683b      	ldr	r3, [r7, #0]
 8109042:	2b03      	cmp	r3, #3
 8109044:	dcef      	bgt.n	8109026 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8109046:	e00c      	b.n	8109062 <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8109048:	69fb      	ldr	r3, [r7, #28]
 810904a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 810904c:	69bb      	ldr	r3, [r7, #24]
 810904e:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8109050:	69bb      	ldr	r3, [r7, #24]
 8109052:	3301      	adds	r3, #1
 8109054:	61bb      	str	r3, [r7, #24]
 8109056:	69fb      	ldr	r3, [r7, #28]
 8109058:	3301      	adds	r3, #1
 810905a:	61fb      	str	r3, [r7, #28]
 810905c:	683b      	ldr	r3, [r7, #0]
 810905e:	3b01      	subs	r3, #1
 8109060:	603b      	str	r3, [r7, #0]
 8109062:	683b      	ldr	r3, [r7, #0]
 8109064:	2b00      	cmp	r3, #0
 8109066:	d1ef      	bne.n	8109048 <metal_io_block_read+0xc4>
	}
	return retlen;
 8109068:	697b      	ldr	r3, [r7, #20]
}
 810906a:	4618      	mov	r0, r3
 810906c:	3724      	adds	r7, #36	@ 0x24
 810906e:	46bd      	mov	sp, r7
 8109070:	bd90      	pop	{r4, r7, pc}

08109072 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8109072:	b590      	push	{r4, r7, lr}
 8109074:	b08b      	sub	sp, #44	@ 0x2c
 8109076:	af02      	add	r7, sp, #8
 8109078:	60f8      	str	r0, [r7, #12]
 810907a:	60b9      	str	r1, [r7, #8]
 810907c:	607a      	str	r2, [r7, #4]
 810907e:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8109080:	68b9      	ldr	r1, [r7, #8]
 8109082:	68f8      	ldr	r0, [r7, #12]
 8109084:	f7ff ff14 	bl	8108eb0 <metal_io_virt>
 8109088:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 810908a:	687b      	ldr	r3, [r7, #4]
 810908c:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 810908e:	68fb      	ldr	r3, [r7, #12]
 8109090:	689b      	ldr	r3, [r3, #8]
 8109092:	68ba      	ldr	r2, [r7, #8]
 8109094:	429a      	cmp	r2, r3
 8109096:	d902      	bls.n	810909e <metal_io_block_write+0x2c>
		return -ERANGE;
 8109098:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 810909c:	e05b      	b.n	8109156 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 810909e:	683a      	ldr	r2, [r7, #0]
 81090a0:	68bb      	ldr	r3, [r7, #8]
 81090a2:	441a      	add	r2, r3
 81090a4:	68fb      	ldr	r3, [r7, #12]
 81090a6:	689b      	ldr	r3, [r3, #8]
 81090a8:	429a      	cmp	r2, r3
 81090aa:	d904      	bls.n	81090b6 <metal_io_block_write+0x44>
		len = io->size - offset;
 81090ac:	68fb      	ldr	r3, [r7, #12]
 81090ae:	689a      	ldr	r2, [r3, #8]
 81090b0:	68bb      	ldr	r3, [r7, #8]
 81090b2:	1ad3      	subs	r3, r2, r3
 81090b4:	603b      	str	r3, [r7, #0]
	retlen = len;
 81090b6:	683b      	ldr	r3, [r7, #0]
 81090b8:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 81090ba:	68fb      	ldr	r3, [r7, #12]
 81090bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81090be:	2b00      	cmp	r3, #0
 81090c0:	d017      	beq.n	81090f2 <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 81090c2:	68fb      	ldr	r3, [r7, #12]
 81090c4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 81090c6:	683b      	ldr	r3, [r7, #0]
 81090c8:	9300      	str	r3, [sp, #0]
 81090ca:	2305      	movs	r3, #5
 81090cc:	687a      	ldr	r2, [r7, #4]
 81090ce:	68b9      	ldr	r1, [r7, #8]
 81090d0:	68f8      	ldr	r0, [r7, #12]
 81090d2:	47a0      	blx	r4
 81090d4:	6178      	str	r0, [r7, #20]
 81090d6:	e03d      	b.n	8109154 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 81090d8:	69bb      	ldr	r3, [r7, #24]
 81090da:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 81090dc:	69fb      	ldr	r3, [r7, #28]
 81090de:	701a      	strb	r2, [r3, #0]
			ptr++;
 81090e0:	69fb      	ldr	r3, [r7, #28]
 81090e2:	3301      	adds	r3, #1
 81090e4:	61fb      	str	r3, [r7, #28]
			source++;
 81090e6:	69bb      	ldr	r3, [r7, #24]
 81090e8:	3301      	adds	r3, #1
 81090ea:	61bb      	str	r3, [r7, #24]
			len--;
 81090ec:	683b      	ldr	r3, [r7, #0]
 81090ee:	3b01      	subs	r3, #1
 81090f0:	603b      	str	r3, [r7, #0]
		while ( len && (
 81090f2:	683b      	ldr	r3, [r7, #0]
 81090f4:	2b00      	cmp	r3, #0
 81090f6:	d017      	beq.n	8109128 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 81090f8:	69fb      	ldr	r3, [r7, #28]
 81090fa:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 81090fe:	2b00      	cmp	r3, #0
 8109100:	d1ea      	bne.n	81090d8 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8109102:	69bb      	ldr	r3, [r7, #24]
 8109104:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8109108:	2b00      	cmp	r3, #0
 810910a:	d1e5      	bne.n	81090d8 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 810910c:	e00c      	b.n	8109128 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 810910e:	69bb      	ldr	r3, [r7, #24]
 8109110:	681a      	ldr	r2, [r3, #0]
 8109112:	69fb      	ldr	r3, [r7, #28]
 8109114:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8109116:	69fb      	ldr	r3, [r7, #28]
 8109118:	3304      	adds	r3, #4
 810911a:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 810911c:	69bb      	ldr	r3, [r7, #24]
 810911e:	3304      	adds	r3, #4
 8109120:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8109122:	683b      	ldr	r3, [r7, #0]
 8109124:	3b04      	subs	r3, #4
 8109126:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8109128:	683b      	ldr	r3, [r7, #0]
 810912a:	2b03      	cmp	r3, #3
 810912c:	dcef      	bgt.n	810910e <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 810912e:	e00c      	b.n	810914a <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8109130:	69bb      	ldr	r3, [r7, #24]
 8109132:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8109134:	69fb      	ldr	r3, [r7, #28]
 8109136:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8109138:	69fb      	ldr	r3, [r7, #28]
 810913a:	3301      	adds	r3, #1
 810913c:	61fb      	str	r3, [r7, #28]
 810913e:	69bb      	ldr	r3, [r7, #24]
 8109140:	3301      	adds	r3, #1
 8109142:	61bb      	str	r3, [r7, #24]
 8109144:	683b      	ldr	r3, [r7, #0]
 8109146:	3b01      	subs	r3, #1
 8109148:	603b      	str	r3, [r7, #0]
 810914a:	683b      	ldr	r3, [r7, #0]
 810914c:	2b00      	cmp	r3, #0
 810914e:	d1ef      	bne.n	8109130 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8109150:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8109154:	697b      	ldr	r3, [r7, #20]
}
 8109156:	4618      	mov	r0, r3
 8109158:	3724      	adds	r7, #36	@ 0x24
 810915a:	46bd      	mov	sp, r7
 810915c:	bd90      	pop	{r4, r7, pc}

0810915e <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 810915e:	b40e      	push	{r1, r2, r3}
 8109160:	b480      	push	{r7}
 8109162:	b082      	sub	sp, #8
 8109164:	af00      	add	r7, sp, #0
 8109166:	4603      	mov	r3, r0
 8109168:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 810916a:	bf00      	nop
 810916c:	3708      	adds	r7, #8
 810916e:	46bd      	mov	sp, r7
 8109170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109174:	b003      	add	sp, #12
 8109176:	4770      	bx	lr

08109178 <metal_io_virt>:
{
 8109178:	b480      	push	{r7}
 810917a:	b083      	sub	sp, #12
 810917c:	af00      	add	r7, sp, #0
 810917e:	6078      	str	r0, [r7, #4]
 8109180:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8109182:	687b      	ldr	r3, [r7, #4]
 8109184:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8109186:	f1b3 3fff 	cmp.w	r3, #4294967295
 810918a:	d009      	beq.n	81091a0 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810918c:	687b      	ldr	r3, [r7, #4]
 810918e:	689b      	ldr	r3, [r3, #8]
 8109190:	683a      	ldr	r2, [r7, #0]
 8109192:	429a      	cmp	r2, r3
 8109194:	d804      	bhi.n	81091a0 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8109196:	687b      	ldr	r3, [r7, #4]
 8109198:	681a      	ldr	r2, [r3, #0]
		: NULL);
 810919a:	683b      	ldr	r3, [r7, #0]
 810919c:	4413      	add	r3, r2
 810919e:	e000      	b.n	81091a2 <metal_io_virt+0x2a>
 81091a0:	2300      	movs	r3, #0
}
 81091a2:	4618      	mov	r0, r3
 81091a4:	370c      	adds	r7, #12
 81091a6:	46bd      	mov	sp, r7
 81091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091ac:	4770      	bx	lr

081091ae <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 81091ae:	b480      	push	{r7}
 81091b0:	b085      	sub	sp, #20
 81091b2:	af00      	add	r7, sp, #0
 81091b4:	6078      	str	r0, [r7, #4]
 81091b6:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 81091b8:	687b      	ldr	r3, [r7, #4]
 81091ba:	681b      	ldr	r3, [r3, #0]
 81091bc:	683a      	ldr	r2, [r7, #0]
 81091be:	1ad3      	subs	r3, r2, r3
 81091c0:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 81091c2:	687b      	ldr	r3, [r7, #4]
 81091c4:	689b      	ldr	r3, [r3, #8]
 81091c6:	68fa      	ldr	r2, [r7, #12]
 81091c8:	429a      	cmp	r2, r3
 81091ca:	d201      	bcs.n	81091d0 <metal_io_virt_to_offset+0x22>
 81091cc:	68fb      	ldr	r3, [r7, #12]
 81091ce:	e001      	b.n	81091d4 <metal_io_virt_to_offset+0x26>
 81091d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 81091d4:	4618      	mov	r0, r3
 81091d6:	3714      	adds	r7, #20
 81091d8:	46bd      	mov	sp, r7
 81091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091de:	4770      	bx	lr

081091e0 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 81091e0:	b5b0      	push	{r4, r5, r7, lr}
 81091e2:	b08c      	sub	sp, #48	@ 0x30
 81091e4:	af00      	add	r7, sp, #0
 81091e6:	60f8      	str	r0, [r7, #12]
 81091e8:	60b9      	str	r1, [r7, #8]
 81091ea:	603b      	str	r3, [r7, #0]
 81091ec:	4613      	mov	r3, r2
 81091ee:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 81091f0:	68b9      	ldr	r1, [r7, #8]
 81091f2:	68f8      	ldr	r0, [r7, #12]
 81091f4:	f7ff ffc0 	bl	8109178 <metal_io_virt>
 81091f8:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
 81091fa:	68fb      	ldr	r3, [r7, #12]
 81091fc:	699b      	ldr	r3, [r3, #24]
 81091fe:	2b00      	cmp	r3, #0
 8109200:	d009      	beq.n	8109216 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8109202:	68fb      	ldr	r3, [r7, #12]
 8109204:	699c      	ldr	r4, [r3, #24]
 8109206:	79fa      	ldrb	r2, [r7, #7]
 8109208:	683b      	ldr	r3, [r7, #0]
 810920a:	68b9      	ldr	r1, [r7, #8]
 810920c:	68f8      	ldr	r0, [r7, #12]
 810920e:	47a0      	blx	r4
 8109210:	4604      	mov	r4, r0
 8109212:	460d      	mov	r5, r1
 8109214:	e059      	b.n	81092ca <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 8109216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109218:	2b00      	cmp	r3, #0
 810921a:	d012      	beq.n	8109242 <metal_io_read+0x62>
 810921c:	683b      	ldr	r3, [r7, #0]
 810921e:	2b01      	cmp	r3, #1
 8109220:	d10f      	bne.n	8109242 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8109222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109224:	62bb      	str	r3, [r7, #40]	@ 0x28
 8109226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109228:	f3bf 8f5b 	dmb	ish
 810922c:	781b      	ldrb	r3, [r3, #0]
 810922e:	f3bf 8f5b 	dmb	ish
 8109232:	b2db      	uxtb	r3, r3
 8109234:	76fb      	strb	r3, [r7, #27]
 8109236:	7efb      	ldrb	r3, [r7, #27]
 8109238:	b2db      	uxtb	r3, r3
 810923a:	2200      	movs	r2, #0
 810923c:	461c      	mov	r4, r3
 810923e:	4615      	mov	r5, r2
 8109240:	e043      	b.n	81092ca <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 8109242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109244:	2b00      	cmp	r3, #0
 8109246:	d012      	beq.n	810926e <metal_io_read+0x8e>
 8109248:	683b      	ldr	r3, [r7, #0]
 810924a:	2b02      	cmp	r3, #2
 810924c:	d10f      	bne.n	810926e <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 810924e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109250:	627b      	str	r3, [r7, #36]	@ 0x24
 8109252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109254:	f3bf 8f5b 	dmb	ish
 8109258:	881b      	ldrh	r3, [r3, #0]
 810925a:	f3bf 8f5b 	dmb	ish
 810925e:	b29b      	uxth	r3, r3
 8109260:	833b      	strh	r3, [r7, #24]
 8109262:	8b3b      	ldrh	r3, [r7, #24]
 8109264:	b29b      	uxth	r3, r3
 8109266:	2200      	movs	r2, #0
 8109268:	461c      	mov	r4, r3
 810926a:	4615      	mov	r5, r2
 810926c:	e02d      	b.n	81092ca <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 810926e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109270:	2b00      	cmp	r3, #0
 8109272:	d010      	beq.n	8109296 <metal_io_read+0xb6>
 8109274:	683b      	ldr	r3, [r7, #0]
 8109276:	2b04      	cmp	r3, #4
 8109278:	d10d      	bne.n	8109296 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 810927a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810927c:	623b      	str	r3, [r7, #32]
 810927e:	6a3b      	ldr	r3, [r7, #32]
 8109280:	f3bf 8f5b 	dmb	ish
 8109284:	681b      	ldr	r3, [r3, #0]
 8109286:	f3bf 8f5b 	dmb	ish
 810928a:	617b      	str	r3, [r7, #20]
 810928c:	697b      	ldr	r3, [r7, #20]
 810928e:	2200      	movs	r2, #0
 8109290:	461c      	mov	r4, r3
 8109292:	4615      	mov	r5, r2
 8109294:	e019      	b.n	81092ca <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 8109296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109298:	2b00      	cmp	r3, #0
 810929a:	d010      	beq.n	81092be <metal_io_read+0xde>
 810929c:	683b      	ldr	r3, [r7, #0]
 810929e:	2b04      	cmp	r3, #4
 81092a0:	d10d      	bne.n	81092be <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 81092a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81092a4:	61fb      	str	r3, [r7, #28]
 81092a6:	69fb      	ldr	r3, [r7, #28]
 81092a8:	f3bf 8f5b 	dmb	ish
 81092ac:	681b      	ldr	r3, [r3, #0]
 81092ae:	f3bf 8f5b 	dmb	ish
 81092b2:	613b      	str	r3, [r7, #16]
 81092b4:	693b      	ldr	r3, [r7, #16]
 81092b6:	2200      	movs	r2, #0
 81092b8:	461c      	mov	r4, r3
 81092ba:	4615      	mov	r5, r2
 81092bc:	e005      	b.n	81092ca <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 81092be:	4b06      	ldr	r3, [pc, #24]	@ (81092d8 <metal_io_read+0xf8>)
 81092c0:	4a06      	ldr	r2, [pc, #24]	@ (81092dc <metal_io_read+0xfc>)
 81092c2:	21f0      	movs	r1, #240	@ 0xf0
 81092c4:	4806      	ldr	r0, [pc, #24]	@ (81092e0 <metal_io_read+0x100>)
 81092c6:	f001 febd 	bl	810b044 <__assert_func>
	return 0; /* quiet compiler */
}
 81092ca:	4622      	mov	r2, r4
 81092cc:	462b      	mov	r3, r5
 81092ce:	4610      	mov	r0, r2
 81092d0:	4619      	mov	r1, r3
 81092d2:	3730      	adds	r7, #48	@ 0x30
 81092d4:	46bd      	mov	sp, r7
 81092d6:	bdb0      	pop	{r4, r5, r7, pc}
 81092d8:	0810c560 	.word	0x0810c560
 81092dc:	0810c768 	.word	0x0810c768
 81092e0:	0810c564 	.word	0x0810c564

081092e4 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 81092e4:	b580      	push	{r7, lr}
 81092e6:	b082      	sub	sp, #8
 81092e8:	af00      	add	r7, sp, #0
 81092ea:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 81092ec:	6878      	ldr	r0, [r7, #4]
 81092ee:	f001 fec7 	bl	810b080 <malloc>
 81092f2:	4603      	mov	r3, r0
}
 81092f4:	4618      	mov	r0, r3
 81092f6:	3708      	adds	r7, #8
 81092f8:	46bd      	mov	sp, r7
 81092fa:	bd80      	pop	{r7, pc}

081092fc <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 81092fc:	b580      	push	{r7, lr}
 81092fe:	b082      	sub	sp, #8
 8109300:	af00      	add	r7, sp, #0
 8109302:	6078      	str	r0, [r7, #4]
	free(ptr);
 8109304:	6878      	ldr	r0, [r7, #4]
 8109306:	f001 fec3 	bl	810b090 <free>
}
 810930a:	bf00      	nop
 810930c:	3708      	adds	r7, #8
 810930e:	46bd      	mov	sp, r7
 8109310:	bd80      	pop	{r7, pc}

08109312 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8109312:	b580      	push	{r7, lr}
 8109314:	b084      	sub	sp, #16
 8109316:	af00      	add	r7, sp, #0
 8109318:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 810931a:	687b      	ldr	r3, [r7, #4]
 810931c:	3307      	adds	r3, #7
 810931e:	00db      	lsls	r3, r3, #3
 8109320:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 8109322:	68f8      	ldr	r0, [r7, #12]
 8109324:	f7ff ffde 	bl	81092e4 <metal_allocate_memory>
 8109328:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 810932a:	68bb      	ldr	r3, [r7, #8]
 810932c:	2b00      	cmp	r3, #0
 810932e:	d004      	beq.n	810933a <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8109330:	68fa      	ldr	r2, [r7, #12]
 8109332:	2100      	movs	r1, #0
 8109334:	68b8      	ldr	r0, [r7, #8]
 8109336:	f002 f898 	bl	810b46a <memset>
	}

	return vqs;
 810933a:	68bb      	ldr	r3, [r7, #8]
}
 810933c:	4618      	mov	r0, r3
 810933e:	3710      	adds	r7, #16
 8109340:	46bd      	mov	sp, r7
 8109342:	bd80      	pop	{r7, pc}

08109344 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8109344:	b580      	push	{r7, lr}
 8109346:	b086      	sub	sp, #24
 8109348:	af00      	add	r7, sp, #0
 810934a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 810934c:	687b      	ldr	r3, [r7, #4]
 810934e:	891b      	ldrh	r3, [r3, #8]
 8109350:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8109352:	687b      	ldr	r3, [r7, #4]
 8109354:	681b      	ldr	r3, [r3, #0]
 8109356:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8109358:	693b      	ldr	r3, [r7, #16]
 810935a:	3b18      	subs	r3, #24
 810935c:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 810935e:	693b      	ldr	r3, [r7, #16]
 8109360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109362:	697a      	ldr	r2, [r7, #20]
 8109364:	429a      	cmp	r2, r3
 8109366:	d905      	bls.n	8109374 <rproc_virtio_virtqueue_notify+0x30>
 8109368:	4b0d      	ldr	r3, [pc, #52]	@ (81093a0 <rproc_virtio_virtqueue_notify+0x5c>)
 810936a:	4a0e      	ldr	r2, [pc, #56]	@ (81093a4 <rproc_virtio_virtqueue_notify+0x60>)
 810936c:	2133      	movs	r1, #51	@ 0x33
 810936e:	480e      	ldr	r0, [pc, #56]	@ (81093a8 <rproc_virtio_virtqueue_notify+0x64>)
 8109370:	f001 fe68 	bl	810b044 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8109374:	693b      	ldr	r3, [r7, #16]
 8109376:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8109378:	697a      	ldr	r2, [r7, #20]
 810937a:	4613      	mov	r3, r2
 810937c:	005b      	lsls	r3, r3, #1
 810937e:	4413      	add	r3, r2
 8109380:	00db      	lsls	r3, r3, #3
 8109382:	440b      	add	r3, r1
 8109384:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8109386:	68fb      	ldr	r3, [r7, #12]
 8109388:	691b      	ldr	r3, [r3, #16]
 810938a:	68fa      	ldr	r2, [r7, #12]
 810938c:	6810      	ldr	r0, [r2, #0]
 810938e:	68ba      	ldr	r2, [r7, #8]
 8109390:	6912      	ldr	r2, [r2, #16]
 8109392:	4611      	mov	r1, r2
 8109394:	4798      	blx	r3
}
 8109396:	bf00      	nop
 8109398:	3718      	adds	r7, #24
 810939a:	46bd      	mov	sp, r7
 810939c:	bd80      	pop	{r7, pc}
 810939e:	bf00      	nop
 81093a0:	0810c5ac 	.word	0x0810c5ac
 81093a4:	0810c748 	.word	0x0810c748
 81093a8:	0810c5c8 	.word	0x0810c5c8

081093ac <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 81093ac:	b580      	push	{r7, lr}
 81093ae:	b086      	sub	sp, #24
 81093b0:	af00      	add	r7, sp, #0
 81093b2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81093b4:	687b      	ldr	r3, [r7, #4]
 81093b6:	3b18      	subs	r3, #24
 81093b8:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 81093ba:	697b      	ldr	r3, [r7, #20]
 81093bc:	689b      	ldr	r3, [r3, #8]
 81093be:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 81093c0:	697b      	ldr	r3, [r7, #20]
 81093c2:	68db      	ldr	r3, [r3, #12]
 81093c4:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 81093c6:	693b      	ldr	r3, [r7, #16]
 81093c8:	3318      	adds	r3, #24
 81093ca:	4619      	mov	r1, r3
 81093cc:	68f8      	ldr	r0, [r7, #12]
 81093ce:	f7ff feee 	bl	81091ae <metal_io_virt_to_offset>
 81093d2:	4601      	mov	r1, r0
 81093d4:	2301      	movs	r3, #1
 81093d6:	2205      	movs	r2, #5
 81093d8:	68f8      	ldr	r0, [r7, #12]
 81093da:	f7ff ff01 	bl	81091e0 <metal_io_read>
 81093de:	4602      	mov	r2, r0
 81093e0:	460b      	mov	r3, r1
 81093e2:	4613      	mov	r3, r2
 81093e4:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 81093e6:	7afb      	ldrb	r3, [r7, #11]
}
 81093e8:	4618      	mov	r0, r3
 81093ea:	3718      	adds	r7, #24
 81093ec:	46bd      	mov	sp, r7
 81093ee:	bd80      	pop	{r7, pc}

081093f0 <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 81093f0:	b580      	push	{r7, lr}
 81093f2:	b086      	sub	sp, #24
 81093f4:	af00      	add	r7, sp, #0
 81093f6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81093f8:	687b      	ldr	r3, [r7, #4]
 81093fa:	3b18      	subs	r3, #24
 81093fc:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 81093fe:	697b      	ldr	r3, [r7, #20]
 8109400:	689b      	ldr	r3, [r3, #8]
 8109402:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8109404:	697b      	ldr	r3, [r7, #20]
 8109406:	68db      	ldr	r3, [r3, #12]
 8109408:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 810940a:	693b      	ldr	r3, [r7, #16]
 810940c:	330c      	adds	r3, #12
 810940e:	4619      	mov	r1, r3
 8109410:	68f8      	ldr	r0, [r7, #12]
 8109412:	f7ff fecc 	bl	81091ae <metal_io_virt_to_offset>
 8109416:	4601      	mov	r1, r0
 8109418:	2304      	movs	r3, #4
 810941a:	2205      	movs	r2, #5
 810941c:	68f8      	ldr	r0, [r7, #12]
 810941e:	f7ff fedf 	bl	81091e0 <metal_io_read>
 8109422:	4602      	mov	r2, r0
 8109424:	460b      	mov	r3, r1
 8109426:	4613      	mov	r3, r2
 8109428:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 810942a:	68bb      	ldr	r3, [r7, #8]
}
 810942c:	4618      	mov	r0, r3
 810942e:	3718      	adds	r7, #24
 8109430:	46bd      	mov	sp, r7
 8109432:	bd80      	pop	{r7, pc}

08109434 <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8109434:	b480      	push	{r7}
 8109436:	b083      	sub	sp, #12
 8109438:	af00      	add	r7, sp, #0
 810943a:	6078      	str	r0, [r7, #4]
 810943c:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 810943e:	2300      	movs	r3, #0
}
 8109440:	4618      	mov	r0, r3
 8109442:	370c      	adds	r7, #12
 8109444:	46bd      	mov	sp, r7
 8109446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810944a:	4770      	bx	lr

0810944c <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 810944c:	b480      	push	{r7}
 810944e:	b085      	sub	sp, #20
 8109450:	af00      	add	r7, sp, #0
 8109452:	60f8      	str	r0, [r7, #12]
 8109454:	60b9      	str	r1, [r7, #8]
 8109456:	607a      	str	r2, [r7, #4]
 8109458:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 810945a:	bf00      	nop
 810945c:	3714      	adds	r7, #20
 810945e:	46bd      	mov	sp, r7
 8109460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109464:	4770      	bx	lr
	...

08109468 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8109468:	b580      	push	{r7, lr}
 810946a:	b08e      	sub	sp, #56	@ 0x38
 810946c:	af00      	add	r7, sp, #0
 810946e:	60f8      	str	r0, [r7, #12]
 8109470:	60b9      	str	r1, [r7, #8]
 8109472:	607a      	str	r2, [r7, #4]
 8109474:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8109476:	687b      	ldr	r3, [r7, #4]
 8109478:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 810947a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810947c:	7e5b      	ldrb	r3, [r3, #25]
 810947e:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8109480:	2050      	movs	r0, #80	@ 0x50
 8109482:	f7ff ff2f 	bl	81092e4 <metal_allocate_memory>
 8109486:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
 8109488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810948a:	2b00      	cmp	r3, #0
 810948c:	d101      	bne.n	8109492 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 810948e:	2300      	movs	r3, #0
 8109490:	e092      	b.n	81095b8 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8109492:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8109494:	4613      	mov	r3, r2
 8109496:	005b      	lsls	r3, r3, #1
 8109498:	4413      	add	r3, r2
 810949a:	00db      	lsls	r3, r3, #3
 810949c:	4618      	mov	r0, r3
 810949e:	f7ff ff21 	bl	81092e4 <metal_allocate_memory>
 81094a2:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 81094a4:	6a3b      	ldr	r3, [r7, #32]
 81094a6:	2b00      	cmp	r3, #0
 81094a8:	f000 8081 	beq.w	81095ae <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 81094ac:	2250      	movs	r2, #80	@ 0x50
 81094ae:	2100      	movs	r1, #0
 81094b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81094b2:	f001 ffda 	bl	810b46a <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 81094b6:	2218      	movs	r2, #24
 81094b8:	2100      	movs	r1, #0
 81094ba:	6a38      	ldr	r0, [r7, #32]
 81094bc:	f001 ffd5 	bl	810b46a <memset>
	vdev = &rpvdev->vdev;
 81094c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81094c2:	3318      	adds	r3, #24
 81094c4:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 81094c6:	2300      	movs	r3, #0
 81094c8:	637b      	str	r3, [r7, #52]	@ 0x34
 81094ca:	e025      	b.n	8109518 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 81094cc:	2300      	movs	r3, #0
 81094ce:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
 81094d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81094d2:	4613      	mov	r3, r2
 81094d4:	009b      	lsls	r3, r3, #2
 81094d6:	4413      	add	r3, r2
 81094d8:	009b      	lsls	r3, r3, #2
 81094da:	3318      	adds	r3, #24
 81094dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81094de:	4413      	add	r3, r2
 81094e0:	3304      	adds	r3, #4
 81094e2:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 81094e4:	68fb      	ldr	r3, [r7, #12]
 81094e6:	2b00      	cmp	r3, #0
 81094e8:	d102      	bne.n	81094f0 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 81094ea:	69bb      	ldr	r3, [r7, #24]
 81094ec:	689b      	ldr	r3, [r3, #8]
 81094ee:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 81094f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81094f2:	f7ff ff0e 	bl	8109312 <virtqueue_allocate>
 81094f6:	6178      	str	r0, [r7, #20]
		if (!vq)
 81094f8:	697b      	ldr	r3, [r7, #20]
 81094fa:	2b00      	cmp	r3, #0
 81094fc:	d031      	beq.n	8109562 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 81094fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8109500:	4613      	mov	r3, r2
 8109502:	005b      	lsls	r3, r3, #1
 8109504:	4413      	add	r3, r2
 8109506:	00db      	lsls	r3, r3, #3
 8109508:	461a      	mov	r2, r3
 810950a:	6a3b      	ldr	r3, [r7, #32]
 810950c:	4413      	add	r3, r2
 810950e:	697a      	ldr	r2, [r7, #20]
 8109510:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 8109512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109514:	3301      	adds	r3, #1
 8109516:	637b      	str	r3, [r7, #52]	@ 0x34
 8109518:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810951a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810951c:	429a      	cmp	r2, r3
 810951e:	d3d5      	bcc.n	81094cc <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8109520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109522:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8109524:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8109526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109528:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810952a:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 810952c:	69fb      	ldr	r3, [r7, #28]
 810952e:	6a3a      	ldr	r2, [r7, #32]
 8109530:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 8109532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8109536:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8109538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810953a:	683a      	ldr	r2, [r7, #0]
 810953c:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 810953e:	69fb      	ldr	r3, [r7, #28]
 8109540:	68ba      	ldr	r2, [r7, #8]
 8109542:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8109544:	69fb      	ldr	r3, [r7, #28]
 8109546:	68fa      	ldr	r2, [r7, #12]
 8109548:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 810954a:	69fb      	ldr	r3, [r7, #28]
 810954c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810954e:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8109550:	69fb      	ldr	r3, [r7, #28]
 8109552:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8109554:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8109556:	69fb      	ldr	r3, [r7, #28]
 8109558:	4a19      	ldr	r2, [pc, #100]	@ (81095c0 <rproc_virtio_create_vdev+0x158>)
 810955a:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 810955c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810955e:	3318      	adds	r3, #24
 8109560:	e02a      	b.n	81095b8 <rproc_virtio_create_vdev+0x150>
			goto err1;
 8109562:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8109564:	2300      	movs	r3, #0
 8109566:	637b      	str	r3, [r7, #52]	@ 0x34
 8109568:	e019      	b.n	810959e <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 810956a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810956c:	4613      	mov	r3, r2
 810956e:	005b      	lsls	r3, r3, #1
 8109570:	4413      	add	r3, r2
 8109572:	00db      	lsls	r3, r3, #3
 8109574:	461a      	mov	r2, r3
 8109576:	6a3b      	ldr	r3, [r7, #32]
 8109578:	4413      	add	r3, r2
 810957a:	681b      	ldr	r3, [r3, #0]
 810957c:	2b00      	cmp	r3, #0
 810957e:	d00b      	beq.n	8109598 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8109580:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8109582:	4613      	mov	r3, r2
 8109584:	005b      	lsls	r3, r3, #1
 8109586:	4413      	add	r3, r2
 8109588:	00db      	lsls	r3, r3, #3
 810958a:	461a      	mov	r2, r3
 810958c:	6a3b      	ldr	r3, [r7, #32]
 810958e:	4413      	add	r3, r2
 8109590:	681b      	ldr	r3, [r3, #0]
 8109592:	4618      	mov	r0, r3
 8109594:	f7ff feb2 	bl	81092fc <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8109598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810959a:	3301      	adds	r3, #1
 810959c:	637b      	str	r3, [r7, #52]	@ 0x34
 810959e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81095a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81095a2:	429a      	cmp	r2, r3
 81095a4:	d3e1      	bcc.n	810956a <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 81095a6:	6a38      	ldr	r0, [r7, #32]
 81095a8:	f7ff fea8 	bl	81092fc <metal_free_memory>
 81095ac:	e000      	b.n	81095b0 <rproc_virtio_create_vdev+0x148>
		goto err0;
 81095ae:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 81095b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81095b2:	f7ff fea3 	bl	81092fc <metal_free_memory>
	return NULL;
 81095b6:	2300      	movs	r3, #0
}
 81095b8:	4618      	mov	r0, r3
 81095ba:	3738      	adds	r7, #56	@ 0x38
 81095bc:	46bd      	mov	sp, r7
 81095be:	bd80      	pop	{r7, pc}
 81095c0:	0810c724 	.word	0x0810c724

081095c4 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 81095c4:	b480      	push	{r7}
 81095c6:	b087      	sub	sp, #28
 81095c8:	af00      	add	r7, sp, #0
 81095ca:	60f8      	str	r0, [r7, #12]
 81095cc:	60b9      	str	r1, [r7, #8]
 81095ce:	607a      	str	r2, [r7, #4]
 81095d0:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 81095d2:	68fb      	ldr	r3, [r7, #12]
 81095d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81095d6:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 81095d8:	68ba      	ldr	r2, [r7, #8]
 81095da:	697b      	ldr	r3, [r7, #20]
 81095dc:	429a      	cmp	r2, r3
 81095de:	d302      	bcc.n	81095e6 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 81095e0:	f06f 0301 	mvn.w	r3, #1
 81095e4:	e019      	b.n	810961a <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 81095e6:	68fb      	ldr	r3, [r7, #12]
 81095e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 81095ea:	68ba      	ldr	r2, [r7, #8]
 81095ec:	4613      	mov	r3, r2
 81095ee:	005b      	lsls	r3, r3, #1
 81095f0:	4413      	add	r3, r2
 81095f2:	00db      	lsls	r3, r3, #3
 81095f4:	440b      	add	r3, r1
 81095f6:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 81095f8:	693b      	ldr	r3, [r7, #16]
 81095fa:	6a3a      	ldr	r2, [r7, #32]
 81095fc:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 81095fe:	693b      	ldr	r3, [r7, #16]
 8109600:	687a      	ldr	r2, [r7, #4]
 8109602:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8109604:	693b      	ldr	r3, [r7, #16]
 8109606:	683a      	ldr	r2, [r7, #0]
 8109608:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 810960a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810960c:	b29a      	uxth	r2, r3
 810960e:	693b      	ldr	r3, [r7, #16]
 8109610:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 8109612:	693b      	ldr	r3, [r7, #16]
 8109614:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8109616:	609a      	str	r2, [r3, #8]

	return 0;
 8109618:	2300      	movs	r3, #0
}
 810961a:	4618      	mov	r0, r3
 810961c:	371c      	adds	r7, #28
 810961e:	46bd      	mov	sp, r7
 8109620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109624:	4770      	bx	lr

08109626 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8109626:	b580      	push	{r7, lr}
 8109628:	b086      	sub	sp, #24
 810962a:	af00      	add	r7, sp, #0
 810962c:	6078      	str	r0, [r7, #4]
 810962e:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8109630:	687b      	ldr	r3, [r7, #4]
 8109632:	2b00      	cmp	r3, #0
 8109634:	d102      	bne.n	810963c <rproc_virtio_notified+0x16>
		return -EINVAL;
 8109636:	f06f 0315 	mvn.w	r3, #21
 810963a:	e02c      	b.n	8109696 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 810963c:	687b      	ldr	r3, [r7, #4]
 810963e:	681b      	ldr	r3, [r3, #0]
 8109640:	683a      	ldr	r2, [r7, #0]
 8109642:	429a      	cmp	r2, r3
 8109644:	d101      	bne.n	810964a <rproc_virtio_notified+0x24>
		return 0;
 8109646:	2300      	movs	r3, #0
 8109648:	e025      	b.n	8109696 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 810964a:	687b      	ldr	r3, [r7, #4]
 810964c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810964e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8109650:	2300      	movs	r3, #0
 8109652:	617b      	str	r3, [r7, #20]
 8109654:	e01a      	b.n	810968c <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8109656:	687b      	ldr	r3, [r7, #4]
 8109658:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 810965a:	697a      	ldr	r2, [r7, #20]
 810965c:	4613      	mov	r3, r2
 810965e:	005b      	lsls	r3, r3, #1
 8109660:	4413      	add	r3, r2
 8109662:	00db      	lsls	r3, r3, #3
 8109664:	440b      	add	r3, r1
 8109666:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8109668:	68fb      	ldr	r3, [r7, #12]
 810966a:	691b      	ldr	r3, [r3, #16]
 810966c:	683a      	ldr	r2, [r7, #0]
 810966e:	429a      	cmp	r2, r3
 8109670:	d003      	beq.n	810967a <rproc_virtio_notified+0x54>
 8109672:	683b      	ldr	r3, [r7, #0]
 8109674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109678:	d105      	bne.n	8109686 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 810967a:	68fb      	ldr	r3, [r7, #12]
 810967c:	681b      	ldr	r3, [r3, #0]
 810967e:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8109680:	68b8      	ldr	r0, [r7, #8]
 8109682:	f001 fa8d 	bl	810aba0 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8109686:	697b      	ldr	r3, [r7, #20]
 8109688:	3301      	adds	r3, #1
 810968a:	617b      	str	r3, [r7, #20]
 810968c:	697a      	ldr	r2, [r7, #20]
 810968e:	693b      	ldr	r3, [r7, #16]
 8109690:	429a      	cmp	r2, r3
 8109692:	d3e0      	bcc.n	8109656 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8109694:	2300      	movs	r3, #0
}
 8109696:	4618      	mov	r0, r3
 8109698:	3718      	adds	r7, #24
 810969a:	46bd      	mov	sp, r7
 810969c:	bd80      	pop	{r7, pc}

0810969e <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 810969e:	b580      	push	{r7, lr}
 81096a0:	b084      	sub	sp, #16
 81096a2:	af00      	add	r7, sp, #0
 81096a4:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 81096a6:	687b      	ldr	r3, [r7, #4]
 81096a8:	699b      	ldr	r3, [r3, #24]
 81096aa:	2b00      	cmp	r3, #0
 81096ac:	d00a      	beq.n	81096c4 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 81096ae:	6878      	ldr	r0, [r7, #4]
 81096b0:	f7ff fe7c 	bl	81093ac <rproc_virtio_get_status>
 81096b4:	4603      	mov	r3, r0
 81096b6:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 81096b8:	7bfb      	ldrb	r3, [r7, #15]
 81096ba:	f003 0304 	and.w	r3, r3, #4
 81096be:	2b00      	cmp	r3, #0
 81096c0:	d102      	bne.n	81096c8 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 81096c2:	e7f4      	b.n	81096ae <rproc_virtio_wait_remote_ready+0x10>
		return;
 81096c4:	bf00      	nop
 81096c6:	e000      	b.n	81096ca <rproc_virtio_wait_remote_ready+0x2c>
			return;
 81096c8:	bf00      	nop
	}
}
 81096ca:	3710      	adds	r7, #16
 81096cc:	46bd      	mov	sp, r7
 81096ce:	bd80      	pop	{r7, pc}

081096d0 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 81096d0:	b480      	push	{r7}
 81096d2:	b083      	sub	sp, #12
 81096d4:	af00      	add	r7, sp, #0
 81096d6:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 81096d8:	bf00      	nop
 81096da:	687b      	ldr	r3, [r7, #4]
 81096dc:	2201      	movs	r2, #1
 81096de:	4611      	mov	r1, r2
 81096e0:	f3bf 8f5b 	dmb	ish
 81096e4:	e8d3 2f4f 	ldrexb	r2, [r3]
 81096e8:	e8c3 1f40 	strexb	r0, r1, [r3]
 81096ec:	2800      	cmp	r0, #0
 81096ee:	d1f9      	bne.n	81096e4 <__metal_mutex_acquire+0x14>
 81096f0:	f3bf 8f5b 	dmb	ish
 81096f4:	b2d3      	uxtb	r3, r2
 81096f6:	2b00      	cmp	r3, #0
 81096f8:	d1ef      	bne.n	81096da <__metal_mutex_acquire+0xa>
		;
	}
}
 81096fa:	bf00      	nop
 81096fc:	bf00      	nop
 81096fe:	370c      	adds	r7, #12
 8109700:	46bd      	mov	sp, r7
 8109702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109706:	4770      	bx	lr

08109708 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8109708:	b480      	push	{r7}
 810970a:	b083      	sub	sp, #12
 810970c:	af00      	add	r7, sp, #0
 810970e:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8109710:	687b      	ldr	r3, [r7, #4]
 8109712:	f3bf 8f5b 	dmb	ish
 8109716:	2200      	movs	r2, #0
 8109718:	701a      	strb	r2, [r3, #0]
 810971a:	f3bf 8f5b 	dmb	ish
}
 810971e:	bf00      	nop
 8109720:	370c      	adds	r7, #12
 8109722:	46bd      	mov	sp, r7
 8109724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109728:	4770      	bx	lr

0810972a <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 810972a:	b580      	push	{r7, lr}
 810972c:	b082      	sub	sp, #8
 810972e:	af00      	add	r7, sp, #0
 8109730:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8109732:	6878      	ldr	r0, [r7, #4]
 8109734:	f7ff ffcc 	bl	81096d0 <__metal_mutex_acquire>
}
 8109738:	bf00      	nop
 810973a:	3708      	adds	r7, #8
 810973c:	46bd      	mov	sp, r7
 810973e:	bd80      	pop	{r7, pc}

08109740 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8109740:	b580      	push	{r7, lr}
 8109742:	b082      	sub	sp, #8
 8109744:	af00      	add	r7, sp, #0
 8109746:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8109748:	6878      	ldr	r0, [r7, #4]
 810974a:	f7ff ffdd 	bl	8109708 <__metal_mutex_release>
}
 810974e:	bf00      	nop
 8109750:	3708      	adds	r7, #8
 8109752:	46bd      	mov	sp, r7
 8109754:	bd80      	pop	{r7, pc}

08109756 <metal_list_add_before>:
{
 8109756:	b480      	push	{r7}
 8109758:	b083      	sub	sp, #12
 810975a:	af00      	add	r7, sp, #0
 810975c:	6078      	str	r0, [r7, #4]
 810975e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8109760:	687b      	ldr	r3, [r7, #4]
 8109762:	685a      	ldr	r2, [r3, #4]
 8109764:	683b      	ldr	r3, [r7, #0]
 8109766:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8109768:	683b      	ldr	r3, [r7, #0]
 810976a:	687a      	ldr	r2, [r7, #4]
 810976c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 810976e:	683b      	ldr	r3, [r7, #0]
 8109770:	681b      	ldr	r3, [r3, #0]
 8109772:	683a      	ldr	r2, [r7, #0]
 8109774:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8109776:	683b      	ldr	r3, [r7, #0]
 8109778:	685b      	ldr	r3, [r3, #4]
 810977a:	683a      	ldr	r2, [r7, #0]
 810977c:	601a      	str	r2, [r3, #0]
}
 810977e:	bf00      	nop
 8109780:	370c      	adds	r7, #12
 8109782:	46bd      	mov	sp, r7
 8109784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109788:	4770      	bx	lr

0810978a <metal_list_add_tail>:
{
 810978a:	b580      	push	{r7, lr}
 810978c:	b082      	sub	sp, #8
 810978e:	af00      	add	r7, sp, #0
 8109790:	6078      	str	r0, [r7, #4]
 8109792:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8109794:	6839      	ldr	r1, [r7, #0]
 8109796:	6878      	ldr	r0, [r7, #4]
 8109798:	f7ff ffdd 	bl	8109756 <metal_list_add_before>
}
 810979c:	bf00      	nop
 810979e:	3708      	adds	r7, #8
 81097a0:	46bd      	mov	sp, r7
 81097a2:	bd80      	pop	{r7, pc}

081097a4 <metal_list_del>:
{
 81097a4:	b480      	push	{r7}
 81097a6:	b083      	sub	sp, #12
 81097a8:	af00      	add	r7, sp, #0
 81097aa:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 81097ac:	687b      	ldr	r3, [r7, #4]
 81097ae:	681b      	ldr	r3, [r3, #0]
 81097b0:	687a      	ldr	r2, [r7, #4]
 81097b2:	6852      	ldr	r2, [r2, #4]
 81097b4:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 81097b6:	687b      	ldr	r3, [r7, #4]
 81097b8:	685b      	ldr	r3, [r3, #4]
 81097ba:	687a      	ldr	r2, [r7, #4]
 81097bc:	6812      	ldr	r2, [r2, #0]
 81097be:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 81097c0:	687b      	ldr	r3, [r7, #4]
 81097c2:	687a      	ldr	r2, [r7, #4]
 81097c4:	605a      	str	r2, [r3, #4]
 81097c6:	687b      	ldr	r3, [r7, #4]
 81097c8:	685a      	ldr	r2, [r3, #4]
 81097ca:	687b      	ldr	r3, [r7, #4]
 81097cc:	601a      	str	r2, [r3, #0]
}
 81097ce:	bf00      	nop
 81097d0:	370c      	adds	r7, #12
 81097d2:	46bd      	mov	sp, r7
 81097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097d8:	4770      	bx	lr

081097da <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 81097da:	b480      	push	{r7}
 81097dc:	b083      	sub	sp, #12
 81097de:	af00      	add	r7, sp, #0
 81097e0:	6078      	str	r0, [r7, #4]
 81097e2:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 81097e4:	683b      	ldr	r3, [r7, #0]
 81097e6:	095b      	lsrs	r3, r3, #5
 81097e8:	009a      	lsls	r2, r3, #2
 81097ea:	6879      	ldr	r1, [r7, #4]
 81097ec:	440a      	add	r2, r1
 81097ee:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 81097f0:	683a      	ldr	r2, [r7, #0]
 81097f2:	f002 021f 	and.w	r2, r2, #31
 81097f6:	2001      	movs	r0, #1
 81097f8:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 81097fc:	009b      	lsls	r3, r3, #2
 81097fe:	6878      	ldr	r0, [r7, #4]
 8109800:	4403      	add	r3, r0
 8109802:	430a      	orrs	r2, r1
 8109804:	601a      	str	r2, [r3, #0]
}
 8109806:	bf00      	nop
 8109808:	370c      	adds	r7, #12
 810980a:	46bd      	mov	sp, r7
 810980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109810:	4770      	bx	lr

08109812 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8109812:	b480      	push	{r7}
 8109814:	b083      	sub	sp, #12
 8109816:	af00      	add	r7, sp, #0
 8109818:	6078      	str	r0, [r7, #4]
 810981a:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 810981c:	683b      	ldr	r3, [r7, #0]
 810981e:	095b      	lsrs	r3, r3, #5
 8109820:	009b      	lsls	r3, r3, #2
 8109822:	687a      	ldr	r2, [r7, #4]
 8109824:	4413      	add	r3, r2
 8109826:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8109828:	683b      	ldr	r3, [r7, #0]
 810982a:	f003 031f 	and.w	r3, r3, #31
 810982e:	2101      	movs	r1, #1
 8109830:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8109834:	4013      	ands	r3, r2
}
 8109836:	4618      	mov	r0, r3
 8109838:	370c      	adds	r7, #12
 810983a:	46bd      	mov	sp, r7
 810983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109840:	4770      	bx	lr

08109842 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8109842:	b480      	push	{r7}
 8109844:	b083      	sub	sp, #12
 8109846:	af00      	add	r7, sp, #0
 8109848:	6078      	str	r0, [r7, #4]
 810984a:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 810984c:	683b      	ldr	r3, [r7, #0]
 810984e:	095b      	lsrs	r3, r3, #5
 8109850:	009a      	lsls	r2, r3, #2
 8109852:	6879      	ldr	r1, [r7, #4]
 8109854:	440a      	add	r2, r1
 8109856:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8109858:	683a      	ldr	r2, [r7, #0]
 810985a:	f002 021f 	and.w	r2, r2, #31
 810985e:	2001      	movs	r0, #1
 8109860:	fa00 f202 	lsl.w	r2, r0, r2
 8109864:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8109866:	009b      	lsls	r3, r3, #2
 8109868:	6878      	ldr	r0, [r7, #4]
 810986a:	4403      	add	r3, r0
 810986c:	400a      	ands	r2, r1
 810986e:	601a      	str	r2, [r3, #0]
}
 8109870:	bf00      	nop
 8109872:	370c      	adds	r7, #12
 8109874:	46bd      	mov	sp, r7
 8109876:	f85d 7b04 	ldr.w	r7, [sp], #4
 810987a:	4770      	bx	lr

0810987c <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 810987c:	b580      	push	{r7, lr}
 810987e:	b082      	sub	sp, #8
 8109880:	af00      	add	r7, sp, #0
 8109882:	6078      	str	r0, [r7, #4]
 8109884:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8109886:	6839      	ldr	r1, [r7, #0]
 8109888:	6878      	ldr	r0, [r7, #4]
 810988a:	f7ff ffc2 	bl	8109812 <metal_bitmap_is_bit_set>
 810988e:	4603      	mov	r3, r0
 8109890:	2b00      	cmp	r3, #0
 8109892:	bf0c      	ite	eq
 8109894:	2301      	moveq	r3, #1
 8109896:	2300      	movne	r3, #0
 8109898:	b2db      	uxtb	r3, r3
}
 810989a:	4618      	mov	r0, r3
 810989c:	3708      	adds	r7, #8
 810989e:	46bd      	mov	sp, r7
 81098a0:	bd80      	pop	{r7, pc}

081098a2 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 81098a2:	b580      	push	{r7, lr}
 81098a4:	b086      	sub	sp, #24
 81098a6:	af00      	add	r7, sp, #0
 81098a8:	60f8      	str	r0, [r7, #12]
 81098aa:	60b9      	str	r1, [r7, #8]
 81098ac:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 81098ae:	68bb      	ldr	r3, [r7, #8]
 81098b0:	617b      	str	r3, [r7, #20]
 81098b2:	e002      	b.n	81098ba <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 81098b4:	697b      	ldr	r3, [r7, #20]
 81098b6:	3301      	adds	r3, #1
 81098b8:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 81098ba:	697a      	ldr	r2, [r7, #20]
 81098bc:	687b      	ldr	r3, [r7, #4]
 81098be:	429a      	cmp	r2, r3
 81098c0:	d207      	bcs.n	81098d2 <metal_bitmap_next_clear_bit+0x30>
 81098c2:	697b      	ldr	r3, [r7, #20]
 81098c4:	4619      	mov	r1, r3
 81098c6:	68f8      	ldr	r0, [r7, #12]
 81098c8:	f7ff ffd8 	bl	810987c <metal_bitmap_is_bit_clear>
 81098cc:	4603      	mov	r3, r0
 81098ce:	2b00      	cmp	r3, #0
 81098d0:	d0f0      	beq.n	81098b4 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 81098d2:	697b      	ldr	r3, [r7, #20]
}
 81098d4:	4618      	mov	r0, r3
 81098d6:	3718      	adds	r7, #24
 81098d8:	46bd      	mov	sp, r7
 81098da:	bd80      	pop	{r7, pc}

081098dc <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 81098dc:	b580      	push	{r7, lr}
 81098de:	b084      	sub	sp, #16
 81098e0:	af00      	add	r7, sp, #0
 81098e2:	60f8      	str	r0, [r7, #12]
 81098e4:	60b9      	str	r1, [r7, #8]
 81098e6:	607a      	str	r2, [r7, #4]
 81098e8:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 81098ea:	68fb      	ldr	r3, [r7, #12]
 81098ec:	2220      	movs	r2, #32
 81098ee:	68b9      	ldr	r1, [r7, #8]
 81098f0:	4618      	mov	r0, r3
 81098f2:	f001 fdd4 	bl	810b49e <strncpy>
	ept->addr = src;
 81098f6:	68fb      	ldr	r3, [r7, #12]
 81098f8:	687a      	ldr	r2, [r7, #4]
 81098fa:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 81098fc:	68fb      	ldr	r3, [r7, #12]
 81098fe:	683a      	ldr	r2, [r7, #0]
 8109900:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8109902:	68fb      	ldr	r3, [r7, #12]
 8109904:	69ba      	ldr	r2, [r7, #24]
 8109906:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8109908:	68fb      	ldr	r3, [r7, #12]
 810990a:	69fa      	ldr	r2, [r7, #28]
 810990c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 810990e:	bf00      	nop
 8109910:	3710      	adds	r7, #16
 8109912:	46bd      	mov	sp, r7
 8109914:	bd80      	pop	{r7, pc}

08109916 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8109916:	b580      	push	{r7, lr}
 8109918:	b084      	sub	sp, #16
 810991a:	af00      	add	r7, sp, #0
 810991c:	6078      	str	r0, [r7, #4]
 810991e:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8109920:	f04f 33ff 	mov.w	r3, #4294967295
 8109924:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8109926:	683b      	ldr	r3, [r7, #0]
 8109928:	461a      	mov	r2, r3
 810992a:	2100      	movs	r1, #0
 810992c:	6878      	ldr	r0, [r7, #4]
 810992e:	f7ff ffb8 	bl	81098a2 <metal_bitmap_next_clear_bit>
 8109932:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8109934:	683b      	ldr	r3, [r7, #0]
 8109936:	68ba      	ldr	r2, [r7, #8]
 8109938:	429a      	cmp	r2, r3
 810993a:	d206      	bcs.n	810994a <rpmsg_get_address+0x34>
		addr = nextbit;
 810993c:	68bb      	ldr	r3, [r7, #8]
 810993e:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8109940:	68bb      	ldr	r3, [r7, #8]
 8109942:	4619      	mov	r1, r3
 8109944:	6878      	ldr	r0, [r7, #4]
 8109946:	f7ff ff48 	bl	81097da <metal_bitmap_set_bit>
	}

	return addr;
 810994a:	68fb      	ldr	r3, [r7, #12]
}
 810994c:	4618      	mov	r0, r3
 810994e:	3710      	adds	r7, #16
 8109950:	46bd      	mov	sp, r7
 8109952:	bd80      	pop	{r7, pc}

08109954 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8109954:	b580      	push	{r7, lr}
 8109956:	b084      	sub	sp, #16
 8109958:	af00      	add	r7, sp, #0
 810995a:	60f8      	str	r0, [r7, #12]
 810995c:	60b9      	str	r1, [r7, #8]
 810995e:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8109960:	687a      	ldr	r2, [r7, #4]
 8109962:	68bb      	ldr	r3, [r7, #8]
 8109964:	429a      	cmp	r2, r3
 8109966:	da03      	bge.n	8109970 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8109968:	6879      	ldr	r1, [r7, #4]
 810996a:	68f8      	ldr	r0, [r7, #12]
 810996c:	f7ff ff69 	bl	8109842 <metal_bitmap_clear_bit>
}
 8109970:	bf00      	nop
 8109972:	3710      	adds	r7, #16
 8109974:	46bd      	mov	sp, r7
 8109976:	bd80      	pop	{r7, pc}

08109978 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8109978:	b580      	push	{r7, lr}
 810997a:	b084      	sub	sp, #16
 810997c:	af00      	add	r7, sp, #0
 810997e:	60f8      	str	r0, [r7, #12]
 8109980:	60b9      	str	r1, [r7, #8]
 8109982:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8109984:	687a      	ldr	r2, [r7, #4]
 8109986:	68bb      	ldr	r3, [r7, #8]
 8109988:	429a      	cmp	r2, r3
 810998a:	da05      	bge.n	8109998 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 810998c:	6879      	ldr	r1, [r7, #4]
 810998e:	68f8      	ldr	r0, [r7, #12]
 8109990:	f7ff ff3f 	bl	8109812 <metal_bitmap_is_bit_set>
 8109994:	4603      	mov	r3, r0
 8109996:	e000      	b.n	810999a <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8109998:	4b02      	ldr	r3, [pc, #8]	@ (81099a4 <rpmsg_is_address_set+0x2c>)
}
 810999a:	4618      	mov	r0, r3
 810999c:	3710      	adds	r7, #16
 810999e:	46bd      	mov	sp, r7
 81099a0:	bd80      	pop	{r7, pc}
 81099a2:	bf00      	nop
 81099a4:	fffff82d 	.word	0xfffff82d

081099a8 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 81099a8:	b580      	push	{r7, lr}
 81099aa:	b084      	sub	sp, #16
 81099ac:	af00      	add	r7, sp, #0
 81099ae:	60f8      	str	r0, [r7, #12]
 81099b0:	60b9      	str	r1, [r7, #8]
 81099b2:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 81099b4:	687a      	ldr	r2, [r7, #4]
 81099b6:	68bb      	ldr	r3, [r7, #8]
 81099b8:	429a      	cmp	r2, r3
 81099ba:	da05      	bge.n	81099c8 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 81099bc:	6879      	ldr	r1, [r7, #4]
 81099be:	68f8      	ldr	r0, [r7, #12]
 81099c0:	f7ff ff0b 	bl	81097da <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 81099c4:	2300      	movs	r3, #0
 81099c6:	e000      	b.n	81099ca <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 81099c8:	4b02      	ldr	r3, [pc, #8]	@ (81099d4 <rpmsg_set_address+0x2c>)
	}
}
 81099ca:	4618      	mov	r0, r3
 81099cc:	3710      	adds	r7, #16
 81099ce:	46bd      	mov	sp, r7
 81099d0:	bd80      	pop	{r7, pc}
 81099d2:	bf00      	nop
 81099d4:	fffff82d 	.word	0xfffff82d

081099d8 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 81099d8:	b590      	push	{r4, r7, lr}
 81099da:	b089      	sub	sp, #36	@ 0x24
 81099dc:	af02      	add	r7, sp, #8
 81099de:	60f8      	str	r0, [r7, #12]
 81099e0:	60b9      	str	r1, [r7, #8]
 81099e2:	607a      	str	r2, [r7, #4]
 81099e4:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 81099e6:	68fb      	ldr	r3, [r7, #12]
 81099e8:	2b00      	cmp	r3, #0
 81099ea:	d00a      	beq.n	8109a02 <rpmsg_send_offchannel_raw+0x2a>
 81099ec:	68fb      	ldr	r3, [r7, #12]
 81099ee:	6a1b      	ldr	r3, [r3, #32]
 81099f0:	2b00      	cmp	r3, #0
 81099f2:	d006      	beq.n	8109a02 <rpmsg_send_offchannel_raw+0x2a>
 81099f4:	683b      	ldr	r3, [r7, #0]
 81099f6:	2b00      	cmp	r3, #0
 81099f8:	d003      	beq.n	8109a02 <rpmsg_send_offchannel_raw+0x2a>
 81099fa:	687b      	ldr	r3, [r7, #4]
 81099fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109a00:	d101      	bne.n	8109a06 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8109a02:	4b0d      	ldr	r3, [pc, #52]	@ (8109a38 <rpmsg_send_offchannel_raw+0x60>)
 8109a04:	e014      	b.n	8109a30 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8109a06:	68fb      	ldr	r3, [r7, #12]
 8109a08:	6a1b      	ldr	r3, [r3, #32]
 8109a0a:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8109a0c:	697b      	ldr	r3, [r7, #20]
 8109a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109a10:	2b00      	cmp	r3, #0
 8109a12:	d00c      	beq.n	8109a2e <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8109a14:	697b      	ldr	r3, [r7, #20]
 8109a16:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8109a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109a1a:	9301      	str	r3, [sp, #4]
 8109a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109a1e:	9300      	str	r3, [sp, #0]
 8109a20:	683b      	ldr	r3, [r7, #0]
 8109a22:	687a      	ldr	r2, [r7, #4]
 8109a24:	68b9      	ldr	r1, [r7, #8]
 8109a26:	6978      	ldr	r0, [r7, #20]
 8109a28:	47a0      	blx	r4
 8109a2a:	4603      	mov	r3, r0
 8109a2c:	e000      	b.n	8109a30 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8109a2e:	4b02      	ldr	r3, [pc, #8]	@ (8109a38 <rpmsg_send_offchannel_raw+0x60>)
}
 8109a30:	4618      	mov	r0, r3
 8109a32:	371c      	adds	r7, #28
 8109a34:	46bd      	mov	sp, r7
 8109a36:	bd90      	pop	{r4, r7, pc}
 8109a38:	fffff82d 	.word	0xfffff82d

08109a3c <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8109a3c:	b580      	push	{r7, lr}
 8109a3e:	b090      	sub	sp, #64	@ 0x40
 8109a40:	af02      	add	r7, sp, #8
 8109a42:	6078      	str	r0, [r7, #4]
 8109a44:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8109a46:	683b      	ldr	r3, [r7, #0]
 8109a48:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
 8109a4a:	687b      	ldr	r3, [r7, #4]
 8109a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8109a50:	6879      	ldr	r1, [r7, #4]
 8109a52:	f107 030c 	add.w	r3, r7, #12
 8109a56:	2220      	movs	r2, #32
 8109a58:	4618      	mov	r0, r3
 8109a5a:	f001 fd20 	bl	810b49e <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8109a5e:	687b      	ldr	r3, [r7, #4]
 8109a60:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8109a62:	f107 030c 	add.w	r3, r7, #12
 8109a66:	2201      	movs	r2, #1
 8109a68:	9201      	str	r2, [sp, #4]
 8109a6a:	2228      	movs	r2, #40	@ 0x28
 8109a6c:	9200      	str	r2, [sp, #0]
 8109a6e:	2235      	movs	r2, #53	@ 0x35
 8109a70:	6878      	ldr	r0, [r7, #4]
 8109a72:	f7ff ffb1 	bl	81099d8 <rpmsg_send_offchannel_raw>
 8109a76:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8109a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109a7a:	2b00      	cmp	r3, #0
 8109a7c:	da01      	bge.n	8109a82 <rpmsg_send_ns_message+0x46>
		return ret;
 8109a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109a80:	e000      	b.n	8109a84 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8109a82:	2300      	movs	r3, #0
}
 8109a84:	4618      	mov	r0, r3
 8109a86:	3738      	adds	r7, #56	@ 0x38
 8109a88:	46bd      	mov	sp, r7
 8109a8a:	bd80      	pop	{r7, pc}

08109a8c <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8109a8c:	b580      	push	{r7, lr}
 8109a8e:	b088      	sub	sp, #32
 8109a90:	af00      	add	r7, sp, #0
 8109a92:	60f8      	str	r0, [r7, #12]
 8109a94:	60b9      	str	r1, [r7, #8]
 8109a96:	607a      	str	r2, [r7, #4]
 8109a98:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8109a9a:	68fb      	ldr	r3, [r7, #12]
 8109a9c:	681b      	ldr	r3, [r3, #0]
 8109a9e:	61fb      	str	r3, [r7, #28]
 8109aa0:	e04b      	b.n	8109b3a <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8109aa2:	2300      	movs	r3, #0
 8109aa4:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8109aa6:	69fb      	ldr	r3, [r7, #28]
 8109aa8:	3b34      	subs	r3, #52	@ 0x34
 8109aaa:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8109aac:	687b      	ldr	r3, [r7, #4]
 8109aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109ab2:	d006      	beq.n	8109ac2 <rpmsg_get_endpoint+0x36>
 8109ab4:	697b      	ldr	r3, [r7, #20]
 8109ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109ab8:	687a      	ldr	r2, [r7, #4]
 8109aba:	429a      	cmp	r2, r3
 8109abc:	d101      	bne.n	8109ac2 <rpmsg_get_endpoint+0x36>
			return ept;
 8109abe:	697b      	ldr	r3, [r7, #20]
 8109ac0:	e040      	b.n	8109b44 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8109ac2:	697b      	ldr	r3, [r7, #20]
 8109ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109ac6:	687a      	ldr	r2, [r7, #4]
 8109ac8:	429a      	cmp	r2, r3
 8109aca:	d106      	bne.n	8109ada <rpmsg_get_endpoint+0x4e>
 8109acc:	697b      	ldr	r3, [r7, #20]
 8109ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109ad0:	683a      	ldr	r2, [r7, #0]
 8109ad2:	429a      	cmp	r2, r3
 8109ad4:	d101      	bne.n	8109ada <rpmsg_get_endpoint+0x4e>
			return ept;
 8109ad6:	697b      	ldr	r3, [r7, #20]
 8109ad8:	e034      	b.n	8109b44 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8109ada:	68bb      	ldr	r3, [r7, #8]
 8109adc:	2b00      	cmp	r3, #0
 8109ade:	d00c      	beq.n	8109afa <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8109ae0:	697b      	ldr	r3, [r7, #20]
 8109ae2:	2220      	movs	r2, #32
 8109ae4:	68b9      	ldr	r1, [r7, #8]
 8109ae6:	4618      	mov	r0, r3
 8109ae8:	f001 fcc7 	bl	810b47a <strncmp>
 8109aec:	4603      	mov	r3, r0
 8109aee:	2b00      	cmp	r3, #0
 8109af0:	bf0c      	ite	eq
 8109af2:	2301      	moveq	r3, #1
 8109af4:	2300      	movne	r3, #0
 8109af6:	b2db      	uxtb	r3, r3
 8109af8:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8109afa:	68bb      	ldr	r3, [r7, #8]
 8109afc:	2b00      	cmp	r3, #0
 8109afe:	d018      	beq.n	8109b32 <rpmsg_get_endpoint+0xa6>
 8109b00:	69bb      	ldr	r3, [r7, #24]
 8109b02:	2b00      	cmp	r3, #0
 8109b04:	d015      	beq.n	8109b32 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8109b06:	683b      	ldr	r3, [r7, #0]
 8109b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109b0c:	d006      	beq.n	8109b1c <rpmsg_get_endpoint+0x90>
 8109b0e:	697b      	ldr	r3, [r7, #20]
 8109b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109b12:	683a      	ldr	r2, [r7, #0]
 8109b14:	429a      	cmp	r2, r3
 8109b16:	d101      	bne.n	8109b1c <rpmsg_get_endpoint+0x90>
			return ept;
 8109b18:	697b      	ldr	r3, [r7, #20]
 8109b1a:	e013      	b.n	8109b44 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8109b1c:	687b      	ldr	r3, [r7, #4]
 8109b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109b22:	d107      	bne.n	8109b34 <rpmsg_get_endpoint+0xa8>
 8109b24:	697b      	ldr	r3, [r7, #20]
 8109b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109b2c:	d102      	bne.n	8109b34 <rpmsg_get_endpoint+0xa8>
			return ept;
 8109b2e:	697b      	ldr	r3, [r7, #20]
 8109b30:	e008      	b.n	8109b44 <rpmsg_get_endpoint+0xb8>
			continue;
 8109b32:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8109b34:	69fb      	ldr	r3, [r7, #28]
 8109b36:	681b      	ldr	r3, [r3, #0]
 8109b38:	61fb      	str	r3, [r7, #28]
 8109b3a:	68fb      	ldr	r3, [r7, #12]
 8109b3c:	69fa      	ldr	r2, [r7, #28]
 8109b3e:	429a      	cmp	r2, r3
 8109b40:	d1af      	bne.n	8109aa2 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8109b42:	2300      	movs	r3, #0
}
 8109b44:	4618      	mov	r0, r3
 8109b46:	3720      	adds	r7, #32
 8109b48:	46bd      	mov	sp, r7
 8109b4a:	bd80      	pop	{r7, pc}

08109b4c <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8109b4c:	b580      	push	{r7, lr}
 8109b4e:	b084      	sub	sp, #16
 8109b50:	af00      	add	r7, sp, #0
 8109b52:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8109b54:	687b      	ldr	r3, [r7, #4]
 8109b56:	2b00      	cmp	r3, #0
 8109b58:	d016      	beq.n	8109b88 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8109b5a:	687b      	ldr	r3, [r7, #4]
 8109b5c:	6a1b      	ldr	r3, [r3, #32]
 8109b5e:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8109b60:	687b      	ldr	r3, [r7, #4]
 8109b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109b68:	d008      	beq.n	8109b7c <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8109b6a:	68fb      	ldr	r3, [r7, #12]
 8109b6c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
 8109b70:	687b      	ldr	r3, [r7, #4]
 8109b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8109b74:	461a      	mov	r2, r3
 8109b76:	2180      	movs	r1, #128	@ 0x80
 8109b78:	f7ff feec 	bl	8109954 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8109b7c:	687b      	ldr	r3, [r7, #4]
 8109b7e:	3334      	adds	r3, #52	@ 0x34
 8109b80:	4618      	mov	r0, r3
 8109b82:	f7ff fe0f 	bl	81097a4 <metal_list_del>
 8109b86:	e000      	b.n	8109b8a <rpmsg_unregister_endpoint+0x3e>
		return;
 8109b88:	bf00      	nop
}
 8109b8a:	3710      	adds	r7, #16
 8109b8c:	46bd      	mov	sp, r7
 8109b8e:	bd80      	pop	{r7, pc}

08109b90 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8109b90:	b580      	push	{r7, lr}
 8109b92:	b082      	sub	sp, #8
 8109b94:	af00      	add	r7, sp, #0
 8109b96:	6078      	str	r0, [r7, #4]
 8109b98:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8109b9a:	683b      	ldr	r3, [r7, #0]
 8109b9c:	687a      	ldr	r2, [r7, #4]
 8109b9e:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8109ba0:	687a      	ldr	r2, [r7, #4]
 8109ba2:	683b      	ldr	r3, [r7, #0]
 8109ba4:	3334      	adds	r3, #52	@ 0x34
 8109ba6:	4619      	mov	r1, r3
 8109ba8:	4610      	mov	r0, r2
 8109baa:	f7ff fdee 	bl	810978a <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8109bae:	2300      	movs	r3, #0
}
 8109bb0:	4618      	mov	r0, r3
 8109bb2:	3708      	adds	r7, #8
 8109bb4:	46bd      	mov	sp, r7
 8109bb6:	bd80      	pop	{r7, pc}

08109bb8 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8109bb8:	b580      	push	{r7, lr}
 8109bba:	b088      	sub	sp, #32
 8109bbc:	af02      	add	r7, sp, #8
 8109bbe:	60f8      	str	r0, [r7, #12]
 8109bc0:	60b9      	str	r1, [r7, #8]
 8109bc2:	607a      	str	r2, [r7, #4]
 8109bc4:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8109bc6:	683b      	ldr	r3, [r7, #0]
 8109bc8:	613b      	str	r3, [r7, #16]

	if (!ept)
 8109bca:	68fb      	ldr	r3, [r7, #12]
 8109bcc:	2b00      	cmp	r3, #0
 8109bce:	d101      	bne.n	8109bd4 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8109bd0:	4b37      	ldr	r3, [pc, #220]	@ (8109cb0 <rpmsg_create_ept+0xf8>)
 8109bd2:	e068      	b.n	8109ca6 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8109bd4:	68bb      	ldr	r3, [r7, #8]
 8109bd6:	3358      	adds	r3, #88	@ 0x58
 8109bd8:	4618      	mov	r0, r3
 8109bda:	f7ff fda6 	bl	810972a <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8109bde:	683b      	ldr	r3, [r7, #0]
 8109be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109be4:	d018      	beq.n	8109c18 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8109be6:	68bb      	ldr	r3, [r7, #8]
 8109be8:	3348      	adds	r3, #72	@ 0x48
 8109bea:	683a      	ldr	r2, [r7, #0]
 8109bec:	2180      	movs	r1, #128	@ 0x80
 8109bee:	4618      	mov	r0, r3
 8109bf0:	f7ff fec2 	bl	8109978 <rpmsg_is_address_set>
 8109bf4:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8109bf6:	697b      	ldr	r3, [r7, #20]
 8109bf8:	2b00      	cmp	r3, #0
 8109bfa:	d107      	bne.n	8109c0c <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8109bfc:	68bb      	ldr	r3, [r7, #8]
 8109bfe:	3348      	adds	r3, #72	@ 0x48
 8109c00:	683a      	ldr	r2, [r7, #0]
 8109c02:	2180      	movs	r1, #128	@ 0x80
 8109c04:	4618      	mov	r0, r3
 8109c06:	f7ff fecf 	bl	81099a8 <rpmsg_set_address>
 8109c0a:	e00c      	b.n	8109c26 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8109c0c:	697b      	ldr	r3, [r7, #20]
 8109c0e:	2b00      	cmp	r3, #0
 8109c10:	dd40      	ble.n	8109c94 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8109c12:	2300      	movs	r3, #0
 8109c14:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8109c16:	e040      	b.n	8109c9a <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8109c18:	68bb      	ldr	r3, [r7, #8]
 8109c1a:	3348      	adds	r3, #72	@ 0x48
 8109c1c:	2180      	movs	r1, #128	@ 0x80
 8109c1e:	4618      	mov	r0, r3
 8109c20:	f7ff fe79 	bl	8109916 <rpmsg_get_address>
 8109c24:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8109c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109c28:	9301      	str	r3, [sp, #4]
 8109c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109c2c:	9300      	str	r3, [sp, #0]
 8109c2e:	6a3b      	ldr	r3, [r7, #32]
 8109c30:	693a      	ldr	r2, [r7, #16]
 8109c32:	6879      	ldr	r1, [r7, #4]
 8109c34:	68f8      	ldr	r0, [r7, #12]
 8109c36:	f7ff fe51 	bl	81098dc <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8109c3a:	68f9      	ldr	r1, [r7, #12]
 8109c3c:	68b8      	ldr	r0, [r7, #8]
 8109c3e:	f7ff ffa7 	bl	8109b90 <rpmsg_register_endpoint>
 8109c42:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8109c44:	697b      	ldr	r3, [r7, #20]
 8109c46:	2b00      	cmp	r3, #0
 8109c48:	da06      	bge.n	8109c58 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8109c4a:	68bb      	ldr	r3, [r7, #8]
 8109c4c:	3348      	adds	r3, #72	@ 0x48
 8109c4e:	693a      	ldr	r2, [r7, #16]
 8109c50:	2180      	movs	r1, #128	@ 0x80
 8109c52:	4618      	mov	r0, r3
 8109c54:	f7ff fe7e 	bl	8109954 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8109c58:	697b      	ldr	r3, [r7, #20]
 8109c5a:	2b00      	cmp	r3, #0
 8109c5c:	d11c      	bne.n	8109c98 <rpmsg_create_ept+0xe0>
 8109c5e:	68fb      	ldr	r3, [r7, #12]
 8109c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109c66:	d117      	bne.n	8109c98 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8109c68:	68bb      	ldr	r3, [r7, #8]
 8109c6a:	3358      	adds	r3, #88	@ 0x58
 8109c6c:	4618      	mov	r0, r3
 8109c6e:	f7ff fd67 	bl	8109740 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8109c72:	2100      	movs	r1, #0
 8109c74:	68f8      	ldr	r0, [r7, #12]
 8109c76:	f7ff fee1 	bl	8109a3c <rpmsg_send_ns_message>
 8109c7a:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8109c7c:	68bb      	ldr	r3, [r7, #8]
 8109c7e:	3358      	adds	r3, #88	@ 0x58
 8109c80:	4618      	mov	r0, r3
 8109c82:	f7ff fd52 	bl	810972a <metal_mutex_acquire>
		if (status)
 8109c86:	697b      	ldr	r3, [r7, #20]
 8109c88:	2b00      	cmp	r3, #0
 8109c8a:	d005      	beq.n	8109c98 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8109c8c:	68f8      	ldr	r0, [r7, #12]
 8109c8e:	f7ff ff5d 	bl	8109b4c <rpmsg_unregister_endpoint>
 8109c92:	e002      	b.n	8109c9a <rpmsg_create_ept+0xe2>
			goto ret_status;
 8109c94:	bf00      	nop
 8109c96:	e000      	b.n	8109c9a <rpmsg_create_ept+0xe2>
	}

ret_status:
 8109c98:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8109c9a:	68bb      	ldr	r3, [r7, #8]
 8109c9c:	3358      	adds	r3, #88	@ 0x58
 8109c9e:	4618      	mov	r0, r3
 8109ca0:	f7ff fd4e 	bl	8109740 <metal_mutex_release>
	return status;
 8109ca4:	697b      	ldr	r3, [r7, #20]
}
 8109ca6:	4618      	mov	r0, r3
 8109ca8:	3718      	adds	r7, #24
 8109caa:	46bd      	mov	sp, r7
 8109cac:	bd80      	pop	{r7, pc}
 8109cae:	bf00      	nop
 8109cb0:	fffff82d 	.word	0xfffff82d

08109cb4 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
 8109cb4:	b580      	push	{r7, lr}
 8109cb6:	b084      	sub	sp, #16
 8109cb8:	af00      	add	r7, sp, #0
 8109cba:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8109cbc:	687b      	ldr	r3, [r7, #4]
 8109cbe:	2b00      	cmp	r3, #0
 8109cc0:	d018      	beq.n	8109cf4 <rpmsg_destroy_ept+0x40>
		return;

	rdev = ept->rdev;
 8109cc2:	687b      	ldr	r3, [r7, #4]
 8109cc4:	6a1b      	ldr	r3, [r3, #32]
 8109cc6:	60fb      	str	r3, [r7, #12]
	if (ept->addr != RPMSG_NS_EPT_ADDR)
 8109cc8:	687b      	ldr	r3, [r7, #4]
 8109cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109ccc:	2b35      	cmp	r3, #53	@ 0x35
 8109cce:	d003      	beq.n	8109cd8 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
 8109cd0:	2101      	movs	r1, #1
 8109cd2:	6878      	ldr	r0, [r7, #4]
 8109cd4:	f7ff feb2 	bl	8109a3c <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
 8109cd8:	68fb      	ldr	r3, [r7, #12]
 8109cda:	3358      	adds	r3, #88	@ 0x58
 8109cdc:	4618      	mov	r0, r3
 8109cde:	f7ff fd24 	bl	810972a <metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
 8109ce2:	6878      	ldr	r0, [r7, #4]
 8109ce4:	f7ff ff32 	bl	8109b4c <rpmsg_unregister_endpoint>
	metal_mutex_release(&rdev->lock);
 8109ce8:	68fb      	ldr	r3, [r7, #12]
 8109cea:	3358      	adds	r3, #88	@ 0x58
 8109cec:	4618      	mov	r0, r3
 8109cee:	f7ff fd27 	bl	8109740 <metal_mutex_release>
 8109cf2:	e000      	b.n	8109cf6 <rpmsg_destroy_ept+0x42>
		return;
 8109cf4:	bf00      	nop
}
 8109cf6:	3710      	adds	r7, #16
 8109cf8:	46bd      	mov	sp, r7
 8109cfa:	bd80      	pop	{r7, pc}

08109cfc <__metal_cache_invalidate>:
{
 8109cfc:	b580      	push	{r7, lr}
 8109cfe:	b082      	sub	sp, #8
 8109d00:	af00      	add	r7, sp, #0
 8109d02:	6078      	str	r0, [r7, #4]
 8109d04:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8109d06:	6839      	ldr	r1, [r7, #0]
 8109d08:	6878      	ldr	r0, [r7, #4]
 8109d0a:	f000 fca6 	bl	810a65a <metal_machine_cache_invalidate>
}
 8109d0e:	bf00      	nop
 8109d10:	3708      	adds	r7, #8
 8109d12:	46bd      	mov	sp, r7
 8109d14:	bd80      	pop	{r7, pc}

08109d16 <metal_cache_invalidate>:
{
 8109d16:	b580      	push	{r7, lr}
 8109d18:	b082      	sub	sp, #8
 8109d1a:	af00      	add	r7, sp, #0
 8109d1c:	6078      	str	r0, [r7, #4]
 8109d1e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8109d20:	6839      	ldr	r1, [r7, #0]
 8109d22:	6878      	ldr	r0, [r7, #4]
 8109d24:	f7ff ffea 	bl	8109cfc <__metal_cache_invalidate>
}
 8109d28:	bf00      	nop
 8109d2a:	3708      	adds	r7, #8
 8109d2c:	46bd      	mov	sp, r7
 8109d2e:	bd80      	pop	{r7, pc}

08109d30 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8109d30:	b480      	push	{r7}
 8109d32:	b083      	sub	sp, #12
 8109d34:	af00      	add	r7, sp, #0
 8109d36:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8109d38:	2300      	movs	r3, #0
}
 8109d3a:	4618      	mov	r0, r3
 8109d3c:	370c      	adds	r7, #12
 8109d3e:	46bd      	mov	sp, r7
 8109d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d44:	4770      	bx	lr

08109d46 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8109d46:	b580      	push	{r7, lr}
 8109d48:	b082      	sub	sp, #8
 8109d4a:	af00      	add	r7, sp, #0
 8109d4c:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8109d4e:	6878      	ldr	r0, [r7, #4]
 8109d50:	f7ff ffee 	bl	8109d30 <__metal_sleep_usec>
 8109d54:	4603      	mov	r3, r0
}
 8109d56:	4618      	mov	r0, r3
 8109d58:	3708      	adds	r7, #8
 8109d5a:	46bd      	mov	sp, r7
 8109d5c:	bd80      	pop	{r7, pc}

08109d5e <metal_list_init>:
{
 8109d5e:	b480      	push	{r7}
 8109d60:	b083      	sub	sp, #12
 8109d62:	af00      	add	r7, sp, #0
 8109d64:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8109d66:	687b      	ldr	r3, [r7, #4]
 8109d68:	687a      	ldr	r2, [r7, #4]
 8109d6a:	605a      	str	r2, [r3, #4]
 8109d6c:	687b      	ldr	r3, [r7, #4]
 8109d6e:	685a      	ldr	r2, [r3, #4]
 8109d70:	687b      	ldr	r3, [r7, #4]
 8109d72:	601a      	str	r2, [r3, #0]
}
 8109d74:	bf00      	nop
 8109d76:	370c      	adds	r7, #12
 8109d78:	46bd      	mov	sp, r7
 8109d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d7e:	4770      	bx	lr

08109d80 <metal_list_is_empty>:
{
 8109d80:	b480      	push	{r7}
 8109d82:	b083      	sub	sp, #12
 8109d84:	af00      	add	r7, sp, #0
 8109d86:	6078      	str	r0, [r7, #4]
	return list->next == list;
 8109d88:	687b      	ldr	r3, [r7, #4]
 8109d8a:	681b      	ldr	r3, [r3, #0]
 8109d8c:	687a      	ldr	r2, [r7, #4]
 8109d8e:	429a      	cmp	r2, r3
 8109d90:	bf0c      	ite	eq
 8109d92:	2301      	moveq	r3, #1
 8109d94:	2300      	movne	r3, #0
 8109d96:	b2db      	uxtb	r3, r3
}
 8109d98:	4618      	mov	r0, r3
 8109d9a:	370c      	adds	r7, #12
 8109d9c:	46bd      	mov	sp, r7
 8109d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109da2:	4770      	bx	lr

08109da4 <metal_io_virt_to_offset>:
{
 8109da4:	b480      	push	{r7}
 8109da6:	b085      	sub	sp, #20
 8109da8:	af00      	add	r7, sp, #0
 8109daa:	6078      	str	r0, [r7, #4]
 8109dac:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8109dae:	687b      	ldr	r3, [r7, #4]
 8109db0:	681b      	ldr	r3, [r3, #0]
 8109db2:	683a      	ldr	r2, [r7, #0]
 8109db4:	1ad3      	subs	r3, r2, r3
 8109db6:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8109db8:	687b      	ldr	r3, [r7, #4]
 8109dba:	689b      	ldr	r3, [r3, #8]
 8109dbc:	68fa      	ldr	r2, [r7, #12]
 8109dbe:	429a      	cmp	r2, r3
 8109dc0:	d201      	bcs.n	8109dc6 <metal_io_virt_to_offset+0x22>
 8109dc2:	68fb      	ldr	r3, [r7, #12]
 8109dc4:	e001      	b.n	8109dca <metal_io_virt_to_offset+0x26>
 8109dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8109dca:	4618      	mov	r0, r3
 8109dcc:	3714      	adds	r7, #20
 8109dce:	46bd      	mov	sp, r7
 8109dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109dd4:	4770      	bx	lr

08109dd6 <__metal_mutex_init>:
{
 8109dd6:	b480      	push	{r7}
 8109dd8:	b085      	sub	sp, #20
 8109dda:	af00      	add	r7, sp, #0
 8109ddc:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8109dde:	687b      	ldr	r3, [r7, #4]
 8109de0:	60fb      	str	r3, [r7, #12]
 8109de2:	2300      	movs	r3, #0
 8109de4:	60bb      	str	r3, [r7, #8]
 8109de6:	68bb      	ldr	r3, [r7, #8]
 8109de8:	461a      	mov	r2, r3
 8109dea:	68fb      	ldr	r3, [r7, #12]
 8109dec:	f3bf 8f5b 	dmb	ish
 8109df0:	601a      	str	r2, [r3, #0]
 8109df2:	f3bf 8f5b 	dmb	ish
}
 8109df6:	bf00      	nop
 8109df8:	3714      	adds	r7, #20
 8109dfa:	46bd      	mov	sp, r7
 8109dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e00:	4770      	bx	lr

08109e02 <__metal_mutex_deinit>:
{
 8109e02:	b480      	push	{r7}
 8109e04:	b083      	sub	sp, #12
 8109e06:	af00      	add	r7, sp, #0
 8109e08:	6078      	str	r0, [r7, #4]
}
 8109e0a:	bf00      	nop
 8109e0c:	370c      	adds	r7, #12
 8109e0e:	46bd      	mov	sp, r7
 8109e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e14:	4770      	bx	lr

08109e16 <__metal_mutex_acquire>:
{
 8109e16:	b480      	push	{r7}
 8109e18:	b083      	sub	sp, #12
 8109e1a:	af00      	add	r7, sp, #0
 8109e1c:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8109e1e:	bf00      	nop
 8109e20:	687b      	ldr	r3, [r7, #4]
 8109e22:	2201      	movs	r2, #1
 8109e24:	4611      	mov	r1, r2
 8109e26:	f3bf 8f5b 	dmb	ish
 8109e2a:	e8d3 2f4f 	ldrexb	r2, [r3]
 8109e2e:	e8c3 1f40 	strexb	r0, r1, [r3]
 8109e32:	2800      	cmp	r0, #0
 8109e34:	d1f9      	bne.n	8109e2a <__metal_mutex_acquire+0x14>
 8109e36:	f3bf 8f5b 	dmb	ish
 8109e3a:	b2d3      	uxtb	r3, r2
 8109e3c:	2b00      	cmp	r3, #0
 8109e3e:	d1ef      	bne.n	8109e20 <__metal_mutex_acquire+0xa>
}
 8109e40:	bf00      	nop
 8109e42:	bf00      	nop
 8109e44:	370c      	adds	r7, #12
 8109e46:	46bd      	mov	sp, r7
 8109e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e4c:	4770      	bx	lr

08109e4e <__metal_mutex_release>:
{
 8109e4e:	b480      	push	{r7}
 8109e50:	b083      	sub	sp, #12
 8109e52:	af00      	add	r7, sp, #0
 8109e54:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8109e56:	687b      	ldr	r3, [r7, #4]
 8109e58:	f3bf 8f5b 	dmb	ish
 8109e5c:	2200      	movs	r2, #0
 8109e5e:	701a      	strb	r2, [r3, #0]
 8109e60:	f3bf 8f5b 	dmb	ish
}
 8109e64:	bf00      	nop
 8109e66:	370c      	adds	r7, #12
 8109e68:	46bd      	mov	sp, r7
 8109e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e6e:	4770      	bx	lr

08109e70 <metal_mutex_init>:
{
 8109e70:	b580      	push	{r7, lr}
 8109e72:	b082      	sub	sp, #8
 8109e74:	af00      	add	r7, sp, #0
 8109e76:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8109e78:	6878      	ldr	r0, [r7, #4]
 8109e7a:	f7ff ffac 	bl	8109dd6 <__metal_mutex_init>
}
 8109e7e:	bf00      	nop
 8109e80:	3708      	adds	r7, #8
 8109e82:	46bd      	mov	sp, r7
 8109e84:	bd80      	pop	{r7, pc}

08109e86 <metal_mutex_deinit>:
{
 8109e86:	b580      	push	{r7, lr}
 8109e88:	b082      	sub	sp, #8
 8109e8a:	af00      	add	r7, sp, #0
 8109e8c:	6078      	str	r0, [r7, #4]
	__metal_mutex_deinit(mutex);
 8109e8e:	6878      	ldr	r0, [r7, #4]
 8109e90:	f7ff ffb7 	bl	8109e02 <__metal_mutex_deinit>
}
 8109e94:	bf00      	nop
 8109e96:	3708      	adds	r7, #8
 8109e98:	46bd      	mov	sp, r7
 8109e9a:	bd80      	pop	{r7, pc}

08109e9c <metal_mutex_acquire>:
{
 8109e9c:	b580      	push	{r7, lr}
 8109e9e:	b082      	sub	sp, #8
 8109ea0:	af00      	add	r7, sp, #0
 8109ea2:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8109ea4:	6878      	ldr	r0, [r7, #4]
 8109ea6:	f7ff ffb6 	bl	8109e16 <__metal_mutex_acquire>
}
 8109eaa:	bf00      	nop
 8109eac:	3708      	adds	r7, #8
 8109eae:	46bd      	mov	sp, r7
 8109eb0:	bd80      	pop	{r7, pc}

08109eb2 <metal_mutex_release>:
{
 8109eb2:	b580      	push	{r7, lr}
 8109eb4:	b082      	sub	sp, #8
 8109eb6:	af00      	add	r7, sp, #0
 8109eb8:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8109eba:	6878      	ldr	r0, [r7, #4]
 8109ebc:	f7ff ffc7 	bl	8109e4e <__metal_mutex_release>
}
 8109ec0:	bf00      	nop
 8109ec2:	3708      	adds	r7, #8
 8109ec4:	46bd      	mov	sp, r7
 8109ec6:	bd80      	pop	{r7, pc}

08109ec8 <rpmsg_init_ept>:
{
 8109ec8:	b580      	push	{r7, lr}
 8109eca:	b084      	sub	sp, #16
 8109ecc:	af00      	add	r7, sp, #0
 8109ece:	60f8      	str	r0, [r7, #12]
 8109ed0:	60b9      	str	r1, [r7, #8]
 8109ed2:	607a      	str	r2, [r7, #4]
 8109ed4:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8109ed6:	68fb      	ldr	r3, [r7, #12]
 8109ed8:	2220      	movs	r2, #32
 8109eda:	68b9      	ldr	r1, [r7, #8]
 8109edc:	4618      	mov	r0, r3
 8109ede:	f001 fade 	bl	810b49e <strncpy>
	ept->addr = src;
 8109ee2:	68fb      	ldr	r3, [r7, #12]
 8109ee4:	687a      	ldr	r2, [r7, #4]
 8109ee6:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8109ee8:	68fb      	ldr	r3, [r7, #12]
 8109eea:	683a      	ldr	r2, [r7, #0]
 8109eec:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8109eee:	68fb      	ldr	r3, [r7, #12]
 8109ef0:	69ba      	ldr	r2, [r7, #24]
 8109ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8109ef4:	68fb      	ldr	r3, [r7, #12]
 8109ef6:	69fa      	ldr	r2, [r7, #28]
 8109ef8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8109efa:	bf00      	nop
 8109efc:	3710      	adds	r7, #16
 8109efe:	46bd      	mov	sp, r7
 8109f00:	bd80      	pop	{r7, pc}

08109f02 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8109f02:	b480      	push	{r7}
 8109f04:	b083      	sub	sp, #12
 8109f06:	af00      	add	r7, sp, #0
 8109f08:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8109f0a:	687b      	ldr	r3, [r7, #4]
 8109f0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109f0e:	699b      	ldr	r3, [r3, #24]
}
 8109f10:	4618      	mov	r0, r3
 8109f12:	370c      	adds	r7, #12
 8109f14:	46bd      	mov	sp, r7
 8109f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f1a:	4770      	bx	lr

08109f1c <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8109f1c:	b580      	push	{r7, lr}
 8109f1e:	b082      	sub	sp, #8
 8109f20:	af00      	add	r7, sp, #0
 8109f22:	6078      	str	r0, [r7, #4]
 8109f24:	460b      	mov	r3, r1
 8109f26:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8109f28:	687b      	ldr	r3, [r7, #4]
 8109f2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109f2c:	6a1b      	ldr	r3, [r3, #32]
 8109f2e:	685b      	ldr	r3, [r3, #4]
 8109f30:	687a      	ldr	r2, [r7, #4]
 8109f32:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8109f34:	78f9      	ldrb	r1, [r7, #3]
 8109f36:	4610      	mov	r0, r2
 8109f38:	4798      	blx	r3
}
 8109f3a:	bf00      	nop
 8109f3c:	3708      	adds	r7, #8
 8109f3e:	46bd      	mov	sp, r7
 8109f40:	bd80      	pop	{r7, pc}

08109f42 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8109f42:	b580      	push	{r7, lr}
 8109f44:	b082      	sub	sp, #8
 8109f46:	af00      	add	r7, sp, #0
 8109f48:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8109f4a:	687b      	ldr	r3, [r7, #4]
 8109f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109f4e:	6a1b      	ldr	r3, [r3, #32]
 8109f50:	681b      	ldr	r3, [r3, #0]
 8109f52:	687a      	ldr	r2, [r7, #4]
 8109f54:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8109f56:	4610      	mov	r0, r2
 8109f58:	4798      	blx	r3
 8109f5a:	4603      	mov	r3, r0
}
 8109f5c:	4618      	mov	r0, r3
 8109f5e:	3708      	adds	r7, #8
 8109f60:	46bd      	mov	sp, r7
 8109f62:	bd80      	pop	{r7, pc}

08109f64 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8109f64:	b580      	push	{r7, lr}
 8109f66:	b082      	sub	sp, #8
 8109f68:	af00      	add	r7, sp, #0
 8109f6a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8109f6c:	687b      	ldr	r3, [r7, #4]
 8109f6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109f70:	6a1b      	ldr	r3, [r3, #32]
 8109f72:	689b      	ldr	r3, [r3, #8]
 8109f74:	687a      	ldr	r2, [r7, #4]
 8109f76:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8109f78:	4610      	mov	r0, r2
 8109f7a:	4798      	blx	r3
 8109f7c:	4603      	mov	r3, r0
}
 8109f7e:	4618      	mov	r0, r3
 8109f80:	3708      	adds	r7, #8
 8109f82:	46bd      	mov	sp, r7
 8109f84:	bd80      	pop	{r7, pc}

08109f86 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8109f86:	b580      	push	{r7, lr}
 8109f88:	b086      	sub	sp, #24
 8109f8a:	af02      	add	r7, sp, #8
 8109f8c:	60f8      	str	r0, [r7, #12]
 8109f8e:	60b9      	str	r1, [r7, #8]
 8109f90:	607a      	str	r2, [r7, #4]
 8109f92:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8109f94:	68fb      	ldr	r3, [r7, #12]
 8109f96:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8109f98:	68b9      	ldr	r1, [r7, #8]
 8109f9a:	69bb      	ldr	r3, [r7, #24]
 8109f9c:	9300      	str	r3, [sp, #0]
 8109f9e:	683b      	ldr	r3, [r7, #0]
 8109fa0:	687a      	ldr	r2, [r7, #4]
 8109fa2:	f000 fb73 	bl	810a68c <virtio_create_virtqueues>
 8109fa6:	4603      	mov	r3, r0
					callbacks);
}
 8109fa8:	4618      	mov	r0, r3
 8109faa:	3710      	adds	r7, #16
 8109fac:	46bd      	mov	sp, r7
 8109fae:	bd80      	pop	{r7, pc}

08109fb0 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8109fb0:	b580      	push	{r7, lr}
 8109fb2:	b082      	sub	sp, #8
 8109fb4:	af00      	add	r7, sp, #0
 8109fb6:	6078      	str	r0, [r7, #4]
 8109fb8:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8109fba:	f04f 33ff 	mov.w	r3, #4294967295
 8109fbe:	683a      	ldr	r2, [r7, #0]
 8109fc0:	2100      	movs	r1, #0
 8109fc2:	6878      	ldr	r0, [r7, #4]
 8109fc4:	f7ff fd62 	bl	8109a8c <rpmsg_get_endpoint>
 8109fc8:	4603      	mov	r3, r0
}
 8109fca:	4618      	mov	r0, r3
 8109fcc:	3708      	adds	r7, #8
 8109fce:	46bd      	mov	sp, r7
 8109fd0:	bd80      	pop	{r7, pc}

08109fd2 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8109fd2:	b480      	push	{r7}
 8109fd4:	b085      	sub	sp, #20
 8109fd6:	af00      	add	r7, sp, #0
 8109fd8:	60f8      	str	r0, [r7, #12]
 8109fda:	60b9      	str	r1, [r7, #8]
 8109fdc:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8109fde:	68fb      	ldr	r3, [r7, #12]
 8109fe0:	2b00      	cmp	r3, #0
 8109fe2:	d01d      	beq.n	810a020 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8109fe4:	68fb      	ldr	r3, [r7, #12]
 8109fe6:	68ba      	ldr	r2, [r7, #8]
 8109fe8:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8109fea:	687b      	ldr	r3, [r7, #4]
 8109fec:	f003 0303 	and.w	r3, r3, #3
 8109ff0:	2b00      	cmp	r3, #0
 8109ff2:	d004      	beq.n	8109ffe <rpmsg_virtio_init_shm_pool+0x2c>
 8109ff4:	687b      	ldr	r3, [r7, #4]
 8109ff6:	f023 0303 	bic.w	r3, r3, #3
 8109ffa:	3304      	adds	r3, #4
 8109ffc:	e000      	b.n	810a000 <rpmsg_virtio_init_shm_pool+0x2e>
 8109ffe:	687b      	ldr	r3, [r7, #4]
 810a000:	68fa      	ldr	r2, [r7, #12]
 810a002:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 810a004:	687b      	ldr	r3, [r7, #4]
 810a006:	f003 0303 	and.w	r3, r3, #3
 810a00a:	2b00      	cmp	r3, #0
 810a00c:	d004      	beq.n	810a018 <rpmsg_virtio_init_shm_pool+0x46>
 810a00e:	687b      	ldr	r3, [r7, #4]
 810a010:	f023 0303 	bic.w	r3, r3, #3
 810a014:	3304      	adds	r3, #4
 810a016:	e000      	b.n	810a01a <rpmsg_virtio_init_shm_pool+0x48>
 810a018:	687b      	ldr	r3, [r7, #4]
 810a01a:	68fa      	ldr	r2, [r7, #12]
 810a01c:	6053      	str	r3, [r2, #4]
 810a01e:	e000      	b.n	810a022 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 810a020:	bf00      	nop
}
 810a022:	3714      	adds	r7, #20
 810a024:	46bd      	mov	sp, r7
 810a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a02a:	4770      	bx	lr

0810a02c <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 810a02c:	b580      	push	{r7, lr}
 810a02e:	b086      	sub	sp, #24
 810a030:	af00      	add	r7, sp, #0
 810a032:	60f8      	str	r0, [r7, #12]
 810a034:	60b9      	str	r1, [r7, #8]
 810a036:	607a      	str	r2, [r7, #4]
 810a038:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 810a03a:	68f8      	ldr	r0, [r7, #12]
 810a03c:	f7ff ff61 	bl	8109f02 <rpmsg_virtio_get_role>
 810a040:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810a042:	697b      	ldr	r3, [r7, #20]
 810a044:	2b01      	cmp	r3, #1
 810a046:	d106      	bne.n	810a056 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 810a048:	68fb      	ldr	r3, [r7, #12]
 810a04a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810a04c:	8879      	ldrh	r1, [r7, #2]
 810a04e:	687a      	ldr	r2, [r7, #4]
 810a050:	4618      	mov	r0, r3
 810a052:	f000 fcc5 	bl	810a9e0 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 810a056:	bf00      	nop
 810a058:	3718      	adds	r7, #24
 810a05a:	46bd      	mov	sp, r7
 810a05c:	bd80      	pop	{r7, pc}

0810a05e <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 810a05e:	b580      	push	{r7, lr}
 810a060:	b086      	sub	sp, #24
 810a062:	af00      	add	r7, sp, #0
 810a064:	60f8      	str	r0, [r7, #12]
 810a066:	60b9      	str	r1, [r7, #8]
 810a068:	607a      	str	r2, [r7, #4]
 810a06a:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 810a06c:	68f8      	ldr	r0, [r7, #12]
 810a06e:	f7ff ff48 	bl	8109f02 <rpmsg_virtio_get_role>
 810a072:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810a074:	697b      	ldr	r3, [r7, #20]
 810a076:	2b01      	cmp	r3, #1
 810a078:	d108      	bne.n	810a08c <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 810a07a:	68fb      	ldr	r3, [r7, #12]
 810a07c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a07e:	8879      	ldrh	r1, [r7, #2]
 810a080:	687a      	ldr	r2, [r7, #4]
 810a082:	4618      	mov	r0, r3
 810a084:	f000 fcac 	bl	810a9e0 <virtqueue_add_consumed_buffer>
 810a088:	4603      	mov	r3, r0
 810a08a:	e000      	b.n	810a08e <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 810a08c:	2300      	movs	r3, #0
}
 810a08e:	4618      	mov	r0, r3
 810a090:	3718      	adds	r7, #24
 810a092:	46bd      	mov	sp, r7
 810a094:	bd80      	pop	{r7, pc}

0810a096 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 810a096:	b580      	push	{r7, lr}
 810a098:	b086      	sub	sp, #24
 810a09a:	af00      	add	r7, sp, #0
 810a09c:	60f8      	str	r0, [r7, #12]
 810a09e:	60b9      	str	r1, [r7, #8]
 810a0a0:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 810a0a2:	68f8      	ldr	r0, [r7, #12]
 810a0a4:	f7ff ff2d 	bl	8109f02 <rpmsg_virtio_get_role>
 810a0a8:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 810a0aa:	2300      	movs	r3, #0
 810a0ac:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810a0ae:	693b      	ldr	r3, [r7, #16]
 810a0b0:	2b01      	cmp	r3, #1
 810a0b2:	d107      	bne.n	810a0c4 <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 810a0b4:	68fb      	ldr	r3, [r7, #12]
 810a0b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a0b8:	68ba      	ldr	r2, [r7, #8]
 810a0ba:	6879      	ldr	r1, [r7, #4]
 810a0bc:	4618      	mov	r0, r3
 810a0be:	f000 fc49 	bl	810a954 <virtqueue_get_available_buffer>
 810a0c2:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 810a0c4:	697b      	ldr	r3, [r7, #20]
}
 810a0c6:	4618      	mov	r0, r3
 810a0c8:	3718      	adds	r7, #24
 810a0ca:	46bd      	mov	sp, r7
 810a0cc:	bd80      	pop	{r7, pc}

0810a0ce <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 810a0ce:	b580      	push	{r7, lr}
 810a0d0:	b086      	sub	sp, #24
 810a0d2:	af00      	add	r7, sp, #0
 810a0d4:	60f8      	str	r0, [r7, #12]
 810a0d6:	60b9      	str	r1, [r7, #8]
 810a0d8:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 810a0da:	68f8      	ldr	r0, [r7, #12]
 810a0dc:	f7ff ff11 	bl	8109f02 <rpmsg_virtio_get_role>
 810a0e0:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 810a0e2:	2300      	movs	r3, #0
 810a0e4:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810a0e6:	693b      	ldr	r3, [r7, #16]
 810a0e8:	2b01      	cmp	r3, #1
 810a0ea:	d107      	bne.n	810a0fc <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 810a0ec:	68fb      	ldr	r3, [r7, #12]
 810a0ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810a0f0:	68ba      	ldr	r2, [r7, #8]
 810a0f2:	6879      	ldr	r1, [r7, #4]
 810a0f4:	4618      	mov	r0, r3
 810a0f6:	f000 fc2d 	bl	810a954 <virtqueue_get_available_buffer>
 810a0fa:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 810a0fc:	697b      	ldr	r3, [r7, #20]
 810a0fe:	2b00      	cmp	r3, #0
 810a100:	d005      	beq.n	810a10e <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 810a102:	68bb      	ldr	r3, [r7, #8]
 810a104:	681b      	ldr	r3, [r3, #0]
 810a106:	4619      	mov	r1, r3
 810a108:	6978      	ldr	r0, [r7, #20]
 810a10a:	f7ff fe04 	bl	8109d16 <metal_cache_invalidate>
	}

	return data;
 810a10e:	697b      	ldr	r3, [r7, #20]
}
 810a110:	4618      	mov	r0, r3
 810a112:	3718      	adds	r7, #24
 810a114:	46bd      	mov	sp, r7
 810a116:	bd80      	pop	{r7, pc}

0810a118 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 810a118:	b580      	push	{r7, lr}
 810a11a:	b084      	sub	sp, #16
 810a11c:	af00      	add	r7, sp, #0
 810a11e:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 810a120:	6878      	ldr	r0, [r7, #4]
 810a122:	f7ff ff0e 	bl	8109f42 <rpmsg_virtio_get_status>
 810a126:	4603      	mov	r3, r0
 810a128:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 810a12a:	7bfb      	ldrb	r3, [r7, #15]
 810a12c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810a130:	2b00      	cmp	r3, #0
 810a132:	d004      	beq.n	810a13e <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 810a134:	2100      	movs	r1, #0
 810a136:	6878      	ldr	r0, [r7, #4]
 810a138:	f7ff fef0 	bl	8109f1c <rpmsg_virtio_set_status>
 810a13c:	e7f0      	b.n	810a120 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 810a13e:	7bfb      	ldrb	r3, [r7, #15]
 810a140:	f003 0304 	and.w	r3, r3, #4
 810a144:	2b00      	cmp	r3, #0
 810a146:	d0eb      	beq.n	810a120 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 810a148:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 810a14a:	4618      	mov	r0, r3
 810a14c:	3710      	adds	r7, #16
 810a14e:	46bd      	mov	sp, r7
 810a150:	bd80      	pop	{r7, pc}

0810a152 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 810a152:	b580      	push	{r7, lr}
 810a154:	b084      	sub	sp, #16
 810a156:	af00      	add	r7, sp, #0
 810a158:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 810a15a:	6878      	ldr	r0, [r7, #4]
 810a15c:	f7ff fed1 	bl	8109f02 <rpmsg_virtio_get_role>
 810a160:	60b8      	str	r0, [r7, #8]
	int length = 0;
 810a162:	2300      	movs	r3, #0
 810a164:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810a166:	68bb      	ldr	r3, [r7, #8]
 810a168:	2b01      	cmp	r3, #1
 810a16a:	d107      	bne.n	810a17c <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 810a16c:	687b      	ldr	r3, [r7, #4]
 810a16e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a170:	4618      	mov	r0, r3
 810a172:	f000 fcaf 	bl	810aad4 <virtqueue_get_desc_size>
 810a176:	4603      	mov	r3, r0
 810a178:	3b10      	subs	r3, #16
		length =
 810a17a:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 810a17c:	68fb      	ldr	r3, [r7, #12]
}
 810a17e:	4618      	mov	r0, r3
 810a180:	3710      	adds	r7, #16
 810a182:	46bd      	mov	sp, r7
 810a184:	bd80      	pop	{r7, pc}
	...

0810a188 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 810a188:	b580      	push	{r7, lr}
 810a18a:	b090      	sub	sp, #64	@ 0x40
 810a18c:	af00      	add	r7, sp, #0
 810a18e:	60f8      	str	r0, [r7, #12]
 810a190:	60b9      	str	r1, [r7, #8]
 810a192:	607a      	str	r2, [r7, #4]
 810a194:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 810a196:	2300      	movs	r3, #0
 810a198:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned short idx;
	int tick_count = 0;
 810a19a:	2300      	movs	r3, #0
 810a19c:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 810a19e:	68fb      	ldr	r3, [r7, #12]
 810a1a0:	637b      	str	r3, [r7, #52]	@ 0x34

	status = rpmsg_virtio_get_status(rvdev);
 810a1a2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 810a1a4:	f7ff fecd 	bl	8109f42 <rpmsg_virtio_get_status>
 810a1a8:	4603      	mov	r3, r0
 810a1aa:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 810a1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a1ae:	f003 0304 	and.w	r3, r3, #4
 810a1b2:	2b00      	cmp	r3, #0
 810a1b4:	d101      	bne.n	810a1ba <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 810a1b6:	4b46      	ldr	r3, [pc, #280]	@ (810a2d0 <rpmsg_virtio_send_offchannel_raw+0x148>)
 810a1b8:	e086      	b.n	810a2c8 <rpmsg_virtio_send_offchannel_raw+0x140>
	}

	if (wait)
 810a1ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810a1bc:	2b00      	cmp	r3, #0
 810a1be:	d003      	beq.n	810a1c8 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 810a1c0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 810a1c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 810a1c6:	e001      	b.n	810a1cc <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 810a1c8:	2300      	movs	r3, #0
 810a1ca:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 810a1cc:	68fb      	ldr	r3, [r7, #12]
 810a1ce:	3358      	adds	r3, #88	@ 0x58
 810a1d0:	4618      	mov	r0, r3
 810a1d2:	f7ff fe63 	bl	8109e9c <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 810a1d6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 810a1d8:	f7ff ffbb 	bl	810a152 <_rpmsg_virtio_get_buffer_size>
 810a1dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (size <= avail_size)
 810a1de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810a1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a1e2:	429a      	cmp	r2, r3
 810a1e4:	dc08      	bgt.n	810a1f8 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 810a1e6:	f107 0216 	add.w	r2, r7, #22
 810a1ea:	f107 0310 	add.w	r3, r7, #16
 810a1ee:	4619      	mov	r1, r3
 810a1f0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 810a1f2:	f7ff ff50 	bl	810a096 <rpmsg_virtio_get_tx_buffer>
 810a1f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 810a1f8:	68fb      	ldr	r3, [r7, #12]
 810a1fa:	3358      	adds	r3, #88	@ 0x58
 810a1fc:	4618      	mov	r0, r3
 810a1fe:	f7ff fe58 	bl	8109eb2 <metal_mutex_release>
		if (buffer || !tick_count)
 810a202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a204:	2b00      	cmp	r3, #0
 810a206:	d10e      	bne.n	810a226 <rpmsg_virtio_send_offchannel_raw+0x9e>
 810a208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a20a:	2b00      	cmp	r3, #0
 810a20c:	d00b      	beq.n	810a226 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 810a20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a210:	2b00      	cmp	r3, #0
 810a212:	d001      	beq.n	810a218 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 810a214:	4b2f      	ldr	r3, [pc, #188]	@ (810a2d4 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 810a216:	e057      	b.n	810a2c8 <rpmsg_virtio_send_offchannel_raw+0x140>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 810a218:	200a      	movs	r0, #10
 810a21a:	f7ff fd94 	bl	8109d46 <metal_sleep_usec>
		tick_count--;
 810a21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a220:	3b01      	subs	r3, #1
 810a222:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
 810a224:	e7d2      	b.n	810a1cc <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 810a226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a228:	2b00      	cmp	r3, #0
 810a22a:	d101      	bne.n	810a230 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 810a22c:	4b2a      	ldr	r3, [pc, #168]	@ (810a2d8 <rpmsg_virtio_send_offchannel_raw+0x150>)
 810a22e:	e04b      	b.n	810a2c8 <rpmsg_virtio_send_offchannel_raw+0x140>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 810a230:	687b      	ldr	r3, [r7, #4]
 810a232:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 810a234:	68bb      	ldr	r3, [r7, #8]
 810a236:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 810a238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810a23a:	b29b      	uxth	r3, r3
 810a23c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	rp_hdr.reserved = 0;
 810a23e:	2300      	movs	r3, #0
 810a240:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 810a242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a246:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 810a248:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810a24a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a24c:	f7ff fdaa 	bl	8109da4 <metal_io_virt_to_offset>
 810a250:	4601      	mov	r1, r0
 810a252:	f107 0218 	add.w	r2, r7, #24
 810a256:	2310      	movs	r3, #16
 810a258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a25a:	f7fe ff0a 	bl	8109072 <metal_io_block_write>
 810a25e:	6338      	str	r0, [r7, #48]	@ 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 810a260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a262:	2b10      	cmp	r3, #16
 810a264:	d001      	beq.n	810a26a <rpmsg_virtio_send_offchannel_raw+0xe2>
 810a266:	bf00      	nop
 810a268:	e7fd      	b.n	810a266 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 810a26a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a26c:	3310      	adds	r3, #16
 810a26e:	4619      	mov	r1, r3
 810a270:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a272:	f7ff fd97 	bl	8109da4 <metal_io_virt_to_offset>
 810a276:	4601      	mov	r1, r0
 810a278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810a27a:	683a      	ldr	r2, [r7, #0]
 810a27c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a27e:	f7fe fef8 	bl	8109072 <metal_io_block_write>
 810a282:	6338      	str	r0, [r7, #48]	@ 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 810a284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810a288:	429a      	cmp	r2, r3
 810a28a:	d001      	beq.n	810a290 <rpmsg_virtio_send_offchannel_raw+0x108>
 810a28c:	bf00      	nop
 810a28e:	e7fd      	b.n	810a28c <rpmsg_virtio_send_offchannel_raw+0x104>
	metal_mutex_acquire(&rdev->lock);
 810a290:	68fb      	ldr	r3, [r7, #12]
 810a292:	3358      	adds	r3, #88	@ 0x58
 810a294:	4618      	mov	r0, r3
 810a296:	f7ff fe01 	bl	8109e9c <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 810a29a:	693a      	ldr	r2, [r7, #16]
 810a29c:	8afb      	ldrh	r3, [r7, #22]
 810a29e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810a2a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 810a2a2:	f7ff fedc 	bl	810a05e <rpmsg_virtio_enqueue_buffer>
 810a2a6:	6338      	str	r0, [r7, #48]	@ 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 810a2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a2aa:	2b00      	cmp	r3, #0
 810a2ac:	d001      	beq.n	810a2b2 <rpmsg_virtio_send_offchannel_raw+0x12a>
 810a2ae:	bf00      	nop
 810a2b0:	e7fd      	b.n	810a2ae <rpmsg_virtio_send_offchannel_raw+0x126>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 810a2b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a2b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a2b6:	4618      	mov	r0, r3
 810a2b8:	f000 fbf6 	bl	810aaa8 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 810a2bc:	68fb      	ldr	r3, [r7, #12]
 810a2be:	3358      	adds	r3, #88	@ 0x58
 810a2c0:	4618      	mov	r0, r3
 810a2c2:	f7ff fdf6 	bl	8109eb2 <metal_mutex_release>

	return size;
 810a2c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 810a2c8:	4618      	mov	r0, r3
 810a2ca:	3740      	adds	r7, #64	@ 0x40
 810a2cc:	46bd      	mov	sp, r7
 810a2ce:	bd80      	pop	{r7, pc}
 810a2d0:	fffff82c 	.word	0xfffff82c
 810a2d4:	fffff82b 	.word	0xfffff82b
 810a2d8:	fffff82e 	.word	0xfffff82e

0810a2dc <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 810a2dc:	b480      	push	{r7}
 810a2de:	b083      	sub	sp, #12
 810a2e0:	af00      	add	r7, sp, #0
 810a2e2:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 810a2e4:	bf00      	nop
 810a2e6:	370c      	adds	r7, #12
 810a2e8:	46bd      	mov	sp, r7
 810a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a2ee:	4770      	bx	lr

0810a2f0 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 810a2f0:	b590      	push	{r4, r7, lr}
 810a2f2:	b08d      	sub	sp, #52	@ 0x34
 810a2f4:	af02      	add	r7, sp, #8
 810a2f6:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 810a2f8:	687b      	ldr	r3, [r7, #4]
 810a2fa:	681b      	ldr	r3, [r3, #0]
 810a2fc:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 810a2fe:	6a3b      	ldr	r3, [r7, #32]
 810a300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a302:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 810a304:	69fb      	ldr	r3, [r7, #28]
 810a306:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 810a308:	69bb      	ldr	r3, [r7, #24]
 810a30a:	3358      	adds	r3, #88	@ 0x58
 810a30c:	4618      	mov	r0, r3
 810a30e:	f7ff fdc5 	bl	8109e9c <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 810a312:	f107 020a 	add.w	r2, r7, #10
 810a316:	f107 030c 	add.w	r3, r7, #12
 810a31a:	4619      	mov	r1, r3
 810a31c:	69f8      	ldr	r0, [r7, #28]
 810a31e:	f7ff fed6 	bl	810a0ce <rpmsg_virtio_get_rx_buffer>
 810a322:	6278      	str	r0, [r7, #36]	@ 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 810a324:	69bb      	ldr	r3, [r7, #24]
 810a326:	3358      	adds	r3, #88	@ 0x58
 810a328:	4618      	mov	r0, r3
 810a32a:	f7ff fdc2 	bl	8109eb2 <metal_mutex_release>

	while (rp_hdr) {
 810a32e:	e04d      	b.n	810a3cc <rpmsg_virtio_rx_callback+0xdc>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 810a330:	69bb      	ldr	r3, [r7, #24]
 810a332:	3358      	adds	r3, #88	@ 0x58
 810a334:	4618      	mov	r0, r3
 810a336:	f7ff fdb1 	bl	8109e9c <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 810a33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a33c:	685b      	ldr	r3, [r3, #4]
 810a33e:	4619      	mov	r1, r3
 810a340:	69b8      	ldr	r0, [r7, #24]
 810a342:	f7ff fe35 	bl	8109fb0 <rpmsg_get_ept_from_addr>
 810a346:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 810a348:	69bb      	ldr	r3, [r7, #24]
 810a34a:	3358      	adds	r3, #88	@ 0x58
 810a34c:	4618      	mov	r0, r3
 810a34e:	f7ff fdb0 	bl	8109eb2 <metal_mutex_release>

		if (!ept)
 810a352:	697b      	ldr	r3, [r7, #20]
 810a354:	2b00      	cmp	r3, #0
 810a356:	d03d      	beq.n	810a3d4 <rpmsg_virtio_rx_callback+0xe4>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 810a358:	697b      	ldr	r3, [r7, #20]
 810a35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a360:	d103      	bne.n	810a36a <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 810a362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a364:	681a      	ldr	r2, [r3, #0]
 810a366:	697b      	ldr	r3, [r7, #20]
 810a368:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 810a36a:	697b      	ldr	r3, [r7, #20]
 810a36c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 810a36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a370:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 810a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a376:	899b      	ldrh	r3, [r3, #12]
 810a378:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 810a37a:	4618      	mov	r0, r3
 810a37c:	697b      	ldr	r3, [r7, #20]
 810a37e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810a380:	697b      	ldr	r3, [r7, #20]
 810a382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a384:	9300      	str	r3, [sp, #0]
 810a386:	4613      	mov	r3, r2
 810a388:	4602      	mov	r2, r0
 810a38a:	6978      	ldr	r0, [r7, #20]
 810a38c:	47a0      	blx	r4
 810a38e:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 810a390:	693b      	ldr	r3, [r7, #16]
 810a392:	2b00      	cmp	r3, #0
 810a394:	d001      	beq.n	810a39a <rpmsg_virtio_rx_callback+0xaa>
 810a396:	bf00      	nop
 810a398:	e7fd      	b.n	810a396 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 810a39a:	69bb      	ldr	r3, [r7, #24]
 810a39c:	3358      	adds	r3, #88	@ 0x58
 810a39e:	4618      	mov	r0, r3
 810a3a0:	f7ff fd7c 	bl	8109e9c <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 810a3a4:	68fa      	ldr	r2, [r7, #12]
 810a3a6:	897b      	ldrh	r3, [r7, #10]
 810a3a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810a3aa:	69f8      	ldr	r0, [r7, #28]
 810a3ac:	f7ff fe3e 	bl	810a02c <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 810a3b0:	f107 020a 	add.w	r2, r7, #10
 810a3b4:	f107 030c 	add.w	r3, r7, #12
 810a3b8:	4619      	mov	r1, r3
 810a3ba:	69f8      	ldr	r0, [r7, #28]
 810a3bc:	f7ff fe87 	bl	810a0ce <rpmsg_virtio_get_rx_buffer>
 810a3c0:	6278      	str	r0, [r7, #36]	@ 0x24
		metal_mutex_release(&rdev->lock);
 810a3c2:	69bb      	ldr	r3, [r7, #24]
 810a3c4:	3358      	adds	r3, #88	@ 0x58
 810a3c6:	4618      	mov	r0, r3
 810a3c8:	f7ff fd73 	bl	8109eb2 <metal_mutex_release>
	while (rp_hdr) {
 810a3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a3ce:	2b00      	cmp	r3, #0
 810a3d0:	d1ae      	bne.n	810a330 <rpmsg_virtio_rx_callback+0x40>
 810a3d2:	e000      	b.n	810a3d6 <rpmsg_virtio_rx_callback+0xe6>
			return;
 810a3d4:	bf00      	nop
	}
}
 810a3d6:	372c      	adds	r7, #44	@ 0x2c
 810a3d8:	46bd      	mov	sp, r7
 810a3da:	bd90      	pop	{r4, r7, pc}

0810a3dc <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 810a3dc:	b580      	push	{r7, lr}
 810a3de:	b092      	sub	sp, #72	@ 0x48
 810a3e0:	af00      	add	r7, sp, #0
 810a3e2:	60f8      	str	r0, [r7, #12]
 810a3e4:	60b9      	str	r1, [r7, #8]
 810a3e6:	607a      	str	r2, [r7, #4]
 810a3e8:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 810a3ea:	68fb      	ldr	r3, [r7, #12]
 810a3ec:	6a1b      	ldr	r3, [r3, #32]
 810a3ee:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 810a3f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a3f2:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 810a3f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810a3f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 810a3fa:	68bb      	ldr	r3, [r7, #8]
 810a3fc:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
 810a3fe:	687b      	ldr	r3, [r7, #4]
 810a400:	2b28      	cmp	r3, #40	@ 0x28
 810a402:	d001      	beq.n	810a408 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 810a404:	2300      	movs	r3, #0
 810a406:	e057      	b.n	810a4b8 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 810a408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
 810a40a:	4619      	mov	r1, r3
 810a40c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 810a40e:	f7ff fcc9 	bl	8109da4 <metal_io_virt_to_offset>
 810a412:	4601      	mov	r1, r0
 810a414:	f107 0210 	add.w	r2, r7, #16
 810a418:	2320      	movs	r3, #32
 810a41a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 810a41c:	f7fe fdb2 	bl	8108f84 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 810a420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a422:	6a1b      	ldr	r3, [r3, #32]
 810a424:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 810a426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a428:	3358      	adds	r3, #88	@ 0x58
 810a42a:	4618      	mov	r0, r3
 810a42c:	f7ff fd36 	bl	8109e9c <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 810a430:	f107 0110 	add.w	r1, r7, #16
 810a434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a436:	f04f 32ff 	mov.w	r2, #4294967295
 810a43a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810a43c:	f7ff fb26 	bl	8109a8c <rpmsg_get_endpoint>
 810a440:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 810a442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a446:	f003 0301 	and.w	r3, r3, #1
 810a44a:	2b00      	cmp	r3, #0
 810a44c:	d017      	beq.n	810a47e <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 810a44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a450:	2b00      	cmp	r3, #0
 810a452:	d003      	beq.n	810a45c <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 810a454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a456:	f04f 32ff 	mov.w	r2, #4294967295
 810a45a:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
 810a45c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a45e:	3358      	adds	r3, #88	@ 0x58
 810a460:	4618      	mov	r0, r3
 810a462:	f7ff fd26 	bl	8109eb2 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 810a466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a468:	2b00      	cmp	r3, #0
 810a46a:	d024      	beq.n	810a4b6 <rpmsg_virtio_ns_callback+0xda>
 810a46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a46e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a470:	2b00      	cmp	r3, #0
 810a472:	d020      	beq.n	810a4b6 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 810a474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a478:	68f8      	ldr	r0, [r7, #12]
 810a47a:	4798      	blx	r3
 810a47c:	e01b      	b.n	810a4b6 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 810a47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a480:	2b00      	cmp	r3, #0
 810a482:	d110      	bne.n	810a4a6 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 810a484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a486:	3358      	adds	r3, #88	@ 0x58
 810a488:	4618      	mov	r0, r3
 810a48a:	f7ff fd12 	bl	8109eb2 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 810a48e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a492:	2b00      	cmp	r3, #0
 810a494:	d00f      	beq.n	810a4b6 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 810a496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a49a:	f107 0110 	add.w	r1, r7, #16
 810a49e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810a4a0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810a4a2:	4798      	blx	r3
 810a4a4:	e007      	b.n	810a4b6 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 810a4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a4a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810a4aa:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
 810a4ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a4ae:	3358      	adds	r3, #88	@ 0x58
 810a4b0:	4618      	mov	r0, r3
 810a4b2:	f7ff fcfe 	bl	8109eb2 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 810a4b6:	2300      	movs	r3, #0
}
 810a4b8:	4618      	mov	r0, r3
 810a4ba:	3748      	adds	r7, #72	@ 0x48
 810a4bc:	46bd      	mov	sp, r7
 810a4be:	bd80      	pop	{r7, pc}

0810a4c0 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 810a4c0:	b580      	push	{r7, lr}
 810a4c2:	b090      	sub	sp, #64	@ 0x40
 810a4c4:	af02      	add	r7, sp, #8
 810a4c6:	60f8      	str	r0, [r7, #12]
 810a4c8:	60b9      	str	r1, [r7, #8]
 810a4ca:	607a      	str	r2, [r7, #4]
 810a4cc:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 810a4ce:	68fb      	ldr	r3, [r7, #12]
 810a4d0:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
 810a4d2:	2264      	movs	r2, #100	@ 0x64
 810a4d4:	2100      	movs	r1, #0
 810a4d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810a4d8:	f000 ffc7 	bl	810b46a <memset>
	metal_mutex_init(&rdev->lock);
 810a4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a4de:	3358      	adds	r3, #88	@ 0x58
 810a4e0:	4618      	mov	r0, r3
 810a4e2:	f7ff fcc5 	bl	8109e70 <metal_mutex_init>
	rvdev->vdev = vdev;
 810a4e6:	68fb      	ldr	r3, [r7, #12]
 810a4e8:	68ba      	ldr	r2, [r7, #8]
 810a4ea:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 810a4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a4ee:	687a      	ldr	r2, [r7, #4]
 810a4f0:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
 810a4f2:	68bb      	ldr	r3, [r7, #8]
 810a4f4:	68fa      	ldr	r2, [r7, #12]
 810a4f6:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 810a4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a4fa:	4a38      	ldr	r2, [pc, #224]	@ (810a5dc <rpmsg_init_vdev+0x11c>)
 810a4fc:	661a      	str	r2, [r3, #96]	@ 0x60
	role = rpmsg_virtio_get_role(rvdev);
 810a4fe:	68f8      	ldr	r0, [r7, #12]
 810a500:	f7ff fcff 	bl	8109f02 <rpmsg_virtio_get_role>
 810a504:	62f8      	str	r0, [r7, #44]	@ 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 810a506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a508:	2b01      	cmp	r3, #1
 810a50a:	d112      	bne.n	810a532 <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 810a50c:	4b34      	ldr	r3, [pc, #208]	@ (810a5e0 <rpmsg_init_vdev+0x120>)
 810a50e:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 810a510:	4b34      	ldr	r3, [pc, #208]	@ (810a5e4 <rpmsg_init_vdev+0x124>)
 810a512:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 810a514:	4b34      	ldr	r3, [pc, #208]	@ (810a5e8 <rpmsg_init_vdev+0x128>)
 810a516:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 810a518:	4b34      	ldr	r3, [pc, #208]	@ (810a5ec <rpmsg_init_vdev+0x12c>)
 810a51a:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 810a51c:	68bb      	ldr	r3, [r7, #8]
 810a51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a520:	3318      	adds	r3, #24
 810a522:	681a      	ldr	r2, [r3, #0]
 810a524:	68fb      	ldr	r3, [r7, #12]
 810a526:	669a      	str	r2, [r3, #104]	@ 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 810a528:	68bb      	ldr	r3, [r7, #8]
 810a52a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a52c:	681a      	ldr	r2, [r3, #0]
 810a52e:	68fb      	ldr	r3, [r7, #12]
 810a530:	66da      	str	r2, [r3, #108]	@ 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 810a532:	68fb      	ldr	r3, [r7, #12]
 810a534:	683a      	ldr	r2, [r7, #0]
 810a536:	671a      	str	r2, [r3, #112]	@ 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810a538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a53a:	2b01      	cmp	r3, #1
 810a53c:	d102      	bne.n	810a544 <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 810a53e:	68f8      	ldr	r0, [r7, #12]
 810a540:	f7ff fdea 	bl	810a118 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 810a544:	f107 0218 	add.w	r2, r7, #24
 810a548:	f107 0310 	add.w	r3, r7, #16
 810a54c:	9300      	str	r3, [sp, #0]
 810a54e:	4613      	mov	r3, r2
 810a550:	2202      	movs	r2, #2
 810a552:	2100      	movs	r1, #0
 810a554:	68f8      	ldr	r0, [r7, #12]
 810a556:	f7ff fd16 	bl	8109f86 <rpmsg_virtio_create_virtqueues>
 810a55a:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 810a55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a55e:	2b00      	cmp	r3, #0
 810a560:	d001      	beq.n	810a566 <rpmsg_init_vdev+0xa6>
		return status;
 810a562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a564:	e035      	b.n	810a5d2 <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 810a566:	2300      	movs	r3, #0
 810a568:	637b      	str	r3, [r7, #52]	@ 0x34
 810a56a:	e00f      	b.n	810a58c <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 810a56c:	68bb      	ldr	r3, [r7, #8]
 810a56e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 810a570:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810a572:	4613      	mov	r3, r2
 810a574:	005b      	lsls	r3, r3, #1
 810a576:	4413      	add	r3, r2
 810a578:	00db      	lsls	r3, r3, #3
 810a57a:	440b      	add	r3, r1
 810a57c:	681b      	ldr	r3, [r3, #0]
 810a57e:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 810a580:	6a3b      	ldr	r3, [r7, #32]
 810a582:	683a      	ldr	r2, [r7, #0]
 810a584:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 810a586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a588:	3301      	adds	r3, #1
 810a58a:	637b      	str	r3, [r7, #52]	@ 0x34
 810a58c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a58e:	2b01      	cmp	r3, #1
 810a590:	d9ec      	bls.n	810a56c <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 810a592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a594:	4618      	mov	r0, r3
 810a596:	f7ff fbe2 	bl	8109d5e <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 810a59a:	68f8      	ldr	r0, [r7, #12]
 810a59c:	f7ff fce2 	bl	8109f64 <rpmsg_virtio_get_features>
 810a5a0:	6278      	str	r0, [r7, #36]	@ 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 810a5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a5a4:	f003 0301 	and.w	r3, r3, #1
 810a5a8:	2b00      	cmp	r3, #0
 810a5aa:	d011      	beq.n	810a5d0 <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 810a5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a5ae:	f103 0008 	add.w	r0, r3, #8
 810a5b2:	2300      	movs	r3, #0
 810a5b4:	9301      	str	r3, [sp, #4]
 810a5b6:	4b0e      	ldr	r3, [pc, #56]	@ (810a5f0 <rpmsg_init_vdev+0x130>)
 810a5b8:	9300      	str	r3, [sp, #0]
 810a5ba:	2335      	movs	r3, #53	@ 0x35
 810a5bc:	2235      	movs	r2, #53	@ 0x35
 810a5be:	490d      	ldr	r1, [pc, #52]	@ (810a5f4 <rpmsg_init_vdev+0x134>)
 810a5c0:	f7ff fc82 	bl	8109ec8 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 810a5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a5c6:	3308      	adds	r3, #8
 810a5c8:	4619      	mov	r1, r3
 810a5ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810a5cc:	f7ff fae0 	bl	8109b90 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 810a5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 810a5d2:	4618      	mov	r0, r3
 810a5d4:	3738      	adds	r7, #56	@ 0x38
 810a5d6:	46bd      	mov	sp, r7
 810a5d8:	bd80      	pop	{r7, pc}
 810a5da:	bf00      	nop
 810a5dc:	0810a189 	.word	0x0810a189
 810a5e0:	0810c660 	.word	0x0810c660
 810a5e4:	0810c668 	.word	0x0810c668
 810a5e8:	0810a2dd 	.word	0x0810a2dd
 810a5ec:	0810a2f1 	.word	0x0810a2f1
 810a5f0:	0810a3dd 	.word	0x0810a3dd
 810a5f4:	0810c670 	.word	0x0810c670

0810a5f8 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
 810a5f8:	b580      	push	{r7, lr}
 810a5fa:	b086      	sub	sp, #24
 810a5fc:	af00      	add	r7, sp, #0
 810a5fe:	6078      	str	r0, [r7, #4]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
 810a600:	687b      	ldr	r3, [r7, #4]
 810a602:	617b      	str	r3, [r7, #20]
	while (!metal_list_is_empty(&rdev->endpoints)) {
 810a604:	e008      	b.n	810a618 <rpmsg_deinit_vdev+0x20>
		node = rdev->endpoints.next;
 810a606:	697b      	ldr	r3, [r7, #20]
 810a608:	681b      	ldr	r3, [r3, #0]
 810a60a:	613b      	str	r3, [r7, #16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 810a60c:	693b      	ldr	r3, [r7, #16]
 810a60e:	3b34      	subs	r3, #52	@ 0x34
 810a610:	60fb      	str	r3, [r7, #12]
		rpmsg_destroy_ept(ept);
 810a612:	68f8      	ldr	r0, [r7, #12]
 810a614:	f7ff fb4e 	bl	8109cb4 <rpmsg_destroy_ept>
	while (!metal_list_is_empty(&rdev->endpoints)) {
 810a618:	697b      	ldr	r3, [r7, #20]
 810a61a:	4618      	mov	r0, r3
 810a61c:	f7ff fbb0 	bl	8109d80 <metal_list_is_empty>
 810a620:	4603      	mov	r3, r0
 810a622:	2b00      	cmp	r3, #0
 810a624:	d0ef      	beq.n	810a606 <rpmsg_deinit_vdev+0xe>
	}

	rvdev->rvq = 0;
 810a626:	687b      	ldr	r3, [r7, #4]
 810a628:	2200      	movs	r2, #0
 810a62a:	669a      	str	r2, [r3, #104]	@ 0x68
	rvdev->svq = 0;
 810a62c:	687b      	ldr	r3, [r7, #4]
 810a62e:	2200      	movs	r2, #0
 810a630:	66da      	str	r2, [r3, #108]	@ 0x6c

	metal_mutex_deinit(&rdev->lock);
 810a632:	697b      	ldr	r3, [r7, #20]
 810a634:	3358      	adds	r3, #88	@ 0x58
 810a636:	4618      	mov	r0, r3
 810a638:	f7ff fc25 	bl	8109e86 <metal_mutex_deinit>
}
 810a63c:	bf00      	nop
 810a63e:	3718      	adds	r7, #24
 810a640:	46bd      	mov	sp, r7
 810a642:	bd80      	pop	{r7, pc}

0810a644 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 810a644:	b480      	push	{r7}
 810a646:	b083      	sub	sp, #12
 810a648:	af00      	add	r7, sp, #0
 810a64a:	6078      	str	r0, [r7, #4]
 810a64c:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 810a64e:	bf00      	nop
 810a650:	370c      	adds	r7, #12
 810a652:	46bd      	mov	sp, r7
 810a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a658:	4770      	bx	lr

0810a65a <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 810a65a:	b480      	push	{r7}
 810a65c:	b083      	sub	sp, #12
 810a65e:	af00      	add	r7, sp, #0
 810a660:	6078      	str	r0, [r7, #4]
 810a662:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 810a664:	bf00      	nop
 810a666:	370c      	adds	r7, #12
 810a668:	46bd      	mov	sp, r7
 810a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a66e:	4770      	bx	lr

0810a670 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 810a670:	b480      	push	{r7}
 810a672:	b085      	sub	sp, #20
 810a674:	af00      	add	r7, sp, #0
 810a676:	60f8      	str	r0, [r7, #12]
 810a678:	60b9      	str	r1, [r7, #8]
 810a67a:	607a      	str	r2, [r7, #4]
 810a67c:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 810a67e:	68fb      	ldr	r3, [r7, #12]
}
 810a680:	4618      	mov	r0, r3
 810a682:	3714      	adds	r7, #20
 810a684:	46bd      	mov	sp, r7
 810a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a68a:	4770      	bx	lr

0810a68c <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 810a68c:	b590      	push	{r4, r7, lr}
 810a68e:	b08f      	sub	sp, #60	@ 0x3c
 810a690:	af04      	add	r7, sp, #16
 810a692:	60f8      	str	r0, [r7, #12]
 810a694:	60b9      	str	r1, [r7, #8]
 810a696:	607a      	str	r2, [r7, #4]
 810a698:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 810a69a:	68fb      	ldr	r3, [r7, #12]
 810a69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a69e:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 810a6a0:	687a      	ldr	r2, [r7, #4]
 810a6a2:	6a3b      	ldr	r3, [r7, #32]
 810a6a4:	429a      	cmp	r2, r3
 810a6a6:	d902      	bls.n	810a6ae <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 810a6a8:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 810a6ac:	e036      	b.n	810a71c <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 810a6ae:	2300      	movs	r3, #0
 810a6b0:	627b      	str	r3, [r7, #36]	@ 0x24
 810a6b2:	e02e      	b.n	810a712 <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 810a6b4:	68fb      	ldr	r3, [r7, #12]
 810a6b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 810a6b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810a6ba:	4613      	mov	r3, r2
 810a6bc:	005b      	lsls	r3, r3, #1
 810a6be:	4413      	add	r3, r2
 810a6c0:	00db      	lsls	r3, r3, #3
 810a6c2:	440b      	add	r3, r1
 810a6c4:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 810a6c6:	69fb      	ldr	r3, [r7, #28]
 810a6c8:	3304      	adds	r3, #4
 810a6ca:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 810a6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a6ce:	b298      	uxth	r0, r3
 810a6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a6d2:	009b      	lsls	r3, r3, #2
 810a6d4:	683a      	ldr	r2, [r7, #0]
 810a6d6:	4413      	add	r3, r2
 810a6d8:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 810a6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a6dc:	009b      	lsls	r3, r3, #2
 810a6de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810a6e0:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 810a6e2:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 810a6e4:	68fa      	ldr	r2, [r7, #12]
 810a6e6:	6a12      	ldr	r2, [r2, #32]
 810a6e8:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 810a6ea:	69f9      	ldr	r1, [r7, #28]
 810a6ec:	6809      	ldr	r1, [r1, #0]
 810a6ee:	9102      	str	r1, [sp, #8]
 810a6f0:	9201      	str	r2, [sp, #4]
 810a6f2:	9300      	str	r3, [sp, #0]
 810a6f4:	69bb      	ldr	r3, [r7, #24]
 810a6f6:	4622      	mov	r2, r4
 810a6f8:	4601      	mov	r1, r0
 810a6fa:	68f8      	ldr	r0, [r7, #12]
 810a6fc:	f000 f8f6 	bl	810a8ec <virtqueue_create>
 810a700:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 810a702:	697b      	ldr	r3, [r7, #20]
 810a704:	2b00      	cmp	r3, #0
 810a706:	d001      	beq.n	810a70c <virtio_create_virtqueues+0x80>
			return ret;
 810a708:	697b      	ldr	r3, [r7, #20]
 810a70a:	e007      	b.n	810a71c <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 810a70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a70e:	3301      	adds	r3, #1
 810a710:	627b      	str	r3, [r7, #36]	@ 0x24
 810a712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810a714:	687b      	ldr	r3, [r7, #4]
 810a716:	429a      	cmp	r2, r3
 810a718:	d3cc      	bcc.n	810a6b4 <virtio_create_virtqueues+0x28>
	}
	return 0;
 810a71a:	2300      	movs	r3, #0
}
 810a71c:	4618      	mov	r0, r3
 810a71e:	372c      	adds	r7, #44	@ 0x2c
 810a720:	46bd      	mov	sp, r7
 810a722:	bd90      	pop	{r4, r7, pc}

0810a724 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 810a724:	b480      	push	{r7}
 810a726:	b085      	sub	sp, #20
 810a728:	af00      	add	r7, sp, #0
 810a72a:	60f8      	str	r0, [r7, #12]
 810a72c:	60b9      	str	r1, [r7, #8]
 810a72e:	607a      	str	r2, [r7, #4]
 810a730:	603b      	str	r3, [r7, #0]
	vr->num = num;
 810a732:	68fb      	ldr	r3, [r7, #12]
 810a734:	68ba      	ldr	r2, [r7, #8]
 810a736:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 810a738:	68fb      	ldr	r3, [r7, #12]
 810a73a:	687a      	ldr	r2, [r7, #4]
 810a73c:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 810a73e:	68bb      	ldr	r3, [r7, #8]
 810a740:	011b      	lsls	r3, r3, #4
 810a742:	687a      	ldr	r2, [r7, #4]
 810a744:	441a      	add	r2, r3
 810a746:	68fb      	ldr	r3, [r7, #12]
 810a748:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 810a74a:	68fb      	ldr	r3, [r7, #12]
 810a74c:	689a      	ldr	r2, [r3, #8]
 810a74e:	68bb      	ldr	r3, [r7, #8]
 810a750:	005b      	lsls	r3, r3, #1
 810a752:	4413      	add	r3, r2
 810a754:	3304      	adds	r3, #4
 810a756:	461a      	mov	r2, r3
 810a758:	683b      	ldr	r3, [r7, #0]
 810a75a:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 810a75c:	1c5a      	adds	r2, r3, #1
 810a75e:	683b      	ldr	r3, [r7, #0]
 810a760:	425b      	negs	r3, r3
 810a762:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 810a764:	461a      	mov	r2, r3
 810a766:	68fb      	ldr	r3, [r7, #12]
 810a768:	60da      	str	r2, [r3, #12]
}
 810a76a:	bf00      	nop
 810a76c:	3714      	adds	r7, #20
 810a76e:	46bd      	mov	sp, r7
 810a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a774:	4770      	bx	lr

0810a776 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 810a776:	b480      	push	{r7}
 810a778:	b083      	sub	sp, #12
 810a77a:	af00      	add	r7, sp, #0
 810a77c:	4603      	mov	r3, r0
 810a77e:	80fb      	strh	r3, [r7, #6]
 810a780:	460b      	mov	r3, r1
 810a782:	80bb      	strh	r3, [r7, #4]
 810a784:	4613      	mov	r3, r2
 810a786:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 810a788:	88ba      	ldrh	r2, [r7, #4]
 810a78a:	88fb      	ldrh	r3, [r7, #6]
 810a78c:	1ad3      	subs	r3, r2, r3
 810a78e:	b29b      	uxth	r3, r3
 810a790:	3b01      	subs	r3, #1
 810a792:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 810a794:	88b9      	ldrh	r1, [r7, #4]
 810a796:	887b      	ldrh	r3, [r7, #2]
 810a798:	1acb      	subs	r3, r1, r3
 810a79a:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 810a79c:	429a      	cmp	r2, r3
 810a79e:	bf34      	ite	cc
 810a7a0:	2301      	movcc	r3, #1
 810a7a2:	2300      	movcs	r3, #0
 810a7a4:	b2db      	uxtb	r3, r3
}
 810a7a6:	4618      	mov	r0, r3
 810a7a8:	370c      	adds	r7, #12
 810a7aa:	46bd      	mov	sp, r7
 810a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7b0:	4770      	bx	lr

0810a7b2 <metal_io_virt>:
{
 810a7b2:	b480      	push	{r7}
 810a7b4:	b083      	sub	sp, #12
 810a7b6:	af00      	add	r7, sp, #0
 810a7b8:	6078      	str	r0, [r7, #4]
 810a7ba:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810a7bc:	687b      	ldr	r3, [r7, #4]
 810a7be:	681b      	ldr	r3, [r3, #0]
		: NULL);
 810a7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a7c4:	d009      	beq.n	810a7da <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810a7c6:	687b      	ldr	r3, [r7, #4]
 810a7c8:	689b      	ldr	r3, [r3, #8]
 810a7ca:	683a      	ldr	r2, [r7, #0]
 810a7cc:	429a      	cmp	r2, r3
 810a7ce:	d804      	bhi.n	810a7da <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 810a7d0:	687b      	ldr	r3, [r7, #4]
 810a7d2:	681a      	ldr	r2, [r3, #0]
		: NULL);
 810a7d4:	683b      	ldr	r3, [r7, #0]
 810a7d6:	4413      	add	r3, r2
 810a7d8:	e000      	b.n	810a7dc <metal_io_virt+0x2a>
 810a7da:	2300      	movs	r3, #0
}
 810a7dc:	4618      	mov	r0, r3
 810a7de:	370c      	adds	r7, #12
 810a7e0:	46bd      	mov	sp, r7
 810a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7e6:	4770      	bx	lr

0810a7e8 <metal_io_phys>:
{
 810a7e8:	b480      	push	{r7}
 810a7ea:	b085      	sub	sp, #20
 810a7ec:	af00      	add	r7, sp, #0
 810a7ee:	6078      	str	r0, [r7, #4]
 810a7f0:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 810a7f2:	687b      	ldr	r3, [r7, #4]
 810a7f4:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 810a7f6:	2b1f      	cmp	r3, #31
 810a7f8:	d805      	bhi.n	810a806 <metal_io_phys+0x1e>
 810a7fa:	687b      	ldr	r3, [r7, #4]
 810a7fc:	68db      	ldr	r3, [r3, #12]
 810a7fe:	683a      	ldr	r2, [r7, #0]
 810a800:	fa22 f303 	lsr.w	r3, r2, r3
 810a804:	e000      	b.n	810a808 <metal_io_phys+0x20>
 810a806:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 810a808:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 810a80a:	687b      	ldr	r3, [r7, #4]
 810a80c:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 810a80e:	2b00      	cmp	r3, #0
 810a810:	d010      	beq.n	810a834 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 810a812:	687b      	ldr	r3, [r7, #4]
 810a814:	689b      	ldr	r3, [r3, #8]
 810a816:	683a      	ldr	r2, [r7, #0]
 810a818:	429a      	cmp	r2, r3
 810a81a:	d80b      	bhi.n	810a834 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 810a81c:	687b      	ldr	r3, [r7, #4]
 810a81e:	685a      	ldr	r2, [r3, #4]
 810a820:	68fb      	ldr	r3, [r7, #12]
 810a822:	009b      	lsls	r3, r3, #2
 810a824:	4413      	add	r3, r2
 810a826:	681a      	ldr	r2, [r3, #0]
 810a828:	687b      	ldr	r3, [r7, #4]
 810a82a:	6919      	ldr	r1, [r3, #16]
 810a82c:	683b      	ldr	r3, [r7, #0]
 810a82e:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 810a830:	4413      	add	r3, r2
 810a832:	e001      	b.n	810a838 <metal_io_phys+0x50>
 810a834:	f04f 33ff 	mov.w	r3, #4294967295
}
 810a838:	4618      	mov	r0, r3
 810a83a:	3714      	adds	r7, #20
 810a83c:	46bd      	mov	sp, r7
 810a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a842:	4770      	bx	lr

0810a844 <metal_io_phys_to_offset>:
{
 810a844:	b580      	push	{r7, lr}
 810a846:	b084      	sub	sp, #16
 810a848:	af00      	add	r7, sp, #0
 810a84a:	6078      	str	r0, [r7, #4]
 810a84c:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 810a84e:	687b      	ldr	r3, [r7, #4]
 810a850:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 810a852:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a856:	d105      	bne.n	810a864 <metal_io_phys_to_offset+0x20>
 810a858:	687b      	ldr	r3, [r7, #4]
 810a85a:	685b      	ldr	r3, [r3, #4]
 810a85c:	681b      	ldr	r3, [r3, #0]
 810a85e:	683a      	ldr	r2, [r7, #0]
 810a860:	1ad3      	subs	r3, r2, r3
 810a862:	e003      	b.n	810a86c <metal_io_phys_to_offset+0x28>
 810a864:	687b      	ldr	r3, [r7, #4]
 810a866:	691a      	ldr	r2, [r3, #16]
 810a868:	683b      	ldr	r3, [r7, #0]
 810a86a:	4013      	ands	r3, r2
	unsigned long offset =
 810a86c:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 810a86e:	68f9      	ldr	r1, [r7, #12]
 810a870:	6878      	ldr	r0, [r7, #4]
 810a872:	f7ff ffb9 	bl	810a7e8 <metal_io_phys>
 810a876:	4602      	mov	r2, r0
 810a878:	683b      	ldr	r3, [r7, #0]
 810a87a:	4293      	cmp	r3, r2
 810a87c:	d101      	bne.n	810a882 <metal_io_phys_to_offset+0x3e>
			return offset;
 810a87e:	68fb      	ldr	r3, [r7, #12]
 810a880:	e00c      	b.n	810a89c <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 810a882:	687b      	ldr	r3, [r7, #4]
 810a884:	691a      	ldr	r2, [r3, #16]
 810a886:	68fb      	ldr	r3, [r7, #12]
 810a888:	4413      	add	r3, r2
 810a88a:	3301      	adds	r3, #1
 810a88c:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 810a88e:	687b      	ldr	r3, [r7, #4]
 810a890:	689b      	ldr	r3, [r3, #8]
 810a892:	68fa      	ldr	r2, [r7, #12]
 810a894:	429a      	cmp	r2, r3
 810a896:	d3ea      	bcc.n	810a86e <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 810a898:	f04f 33ff 	mov.w	r3, #4294967295
}
 810a89c:	4618      	mov	r0, r3
 810a89e:	3710      	adds	r7, #16
 810a8a0:	46bd      	mov	sp, r7
 810a8a2:	bd80      	pop	{r7, pc}

0810a8a4 <metal_io_phys_to_virt>:
{
 810a8a4:	b580      	push	{r7, lr}
 810a8a6:	b082      	sub	sp, #8
 810a8a8:	af00      	add	r7, sp, #0
 810a8aa:	6078      	str	r0, [r7, #4]
 810a8ac:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 810a8ae:	6839      	ldr	r1, [r7, #0]
 810a8b0:	6878      	ldr	r0, [r7, #4]
 810a8b2:	f7ff ffc7 	bl	810a844 <metal_io_phys_to_offset>
 810a8b6:	4603      	mov	r3, r0
 810a8b8:	4619      	mov	r1, r3
 810a8ba:	6878      	ldr	r0, [r7, #4]
 810a8bc:	f7ff ff79 	bl	810a7b2 <metal_io_virt>
 810a8c0:	4603      	mov	r3, r0
}
 810a8c2:	4618      	mov	r0, r3
 810a8c4:	3708      	adds	r7, #8
 810a8c6:	46bd      	mov	sp, r7
 810a8c8:	bd80      	pop	{r7, pc}

0810a8ca <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 810a8ca:	b580      	push	{r7, lr}
 810a8cc:	b084      	sub	sp, #16
 810a8ce:	af00      	add	r7, sp, #0
 810a8d0:	6078      	str	r0, [r7, #4]
 810a8d2:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 810a8d4:	687b      	ldr	r3, [r7, #4]
 810a8d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a8d8:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 810a8da:	6839      	ldr	r1, [r7, #0]
 810a8dc:	68f8      	ldr	r0, [r7, #12]
 810a8de:	f7ff ffe1 	bl	810a8a4 <metal_io_phys_to_virt>
 810a8e2:	4603      	mov	r3, r0
}
 810a8e4:	4618      	mov	r0, r3
 810a8e6:	3710      	adds	r7, #16
 810a8e8:	46bd      	mov	sp, r7
 810a8ea:	bd80      	pop	{r7, pc}

0810a8ec <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 810a8ec:	b580      	push	{r7, lr}
 810a8ee:	b086      	sub	sp, #24
 810a8f0:	af00      	add	r7, sp, #0
 810a8f2:	60f8      	str	r0, [r7, #12]
 810a8f4:	607a      	str	r2, [r7, #4]
 810a8f6:	603b      	str	r3, [r7, #0]
 810a8f8:	460b      	mov	r3, r1
 810a8fa:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 810a8fc:	2300      	movs	r3, #0
 810a8fe:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 810a900:	697b      	ldr	r3, [r7, #20]
 810a902:	2b00      	cmp	r3, #0
 810a904:	d121      	bne.n	810a94a <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 810a906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a908:	68fa      	ldr	r2, [r7, #12]
 810a90a:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 810a90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a90e:	687a      	ldr	r2, [r7, #4]
 810a910:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 810a912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a914:	897a      	ldrh	r2, [r7, #10]
 810a916:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 810a918:	683b      	ldr	r3, [r7, #0]
 810a91a:	891a      	ldrh	r2, [r3, #8]
 810a91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a91e:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 810a920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a922:	895a      	ldrh	r2, [r3, #10]
 810a924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a926:	851a      	strh	r2, [r3, #40]	@ 0x28
		vq->callback = callback;
 810a928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a92a:	6a3a      	ldr	r2, [r7, #32]
 810a92c:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 810a92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810a932:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 810a934:	683b      	ldr	r3, [r7, #0]
 810a936:	6819      	ldr	r1, [r3, #0]
 810a938:	683b      	ldr	r3, [r7, #0]
 810a93a:	685b      	ldr	r3, [r3, #4]
 810a93c:	461a      	mov	r2, r3
 810a93e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a940:	f000 f8fb 	bl	810ab3a <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 810a944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a946:	f000 f885 	bl	810aa54 <virtqueue_disable_cb>
	}

	return (status);
 810a94a:	697b      	ldr	r3, [r7, #20]
}
 810a94c:	4618      	mov	r0, r3
 810a94e:	3718      	adds	r7, #24
 810a950:	46bd      	mov	sp, r7
 810a952:	bd80      	pop	{r7, pc}

0810a954 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 810a954:	b580      	push	{r7, lr}
 810a956:	b086      	sub	sp, #24
 810a958:	af00      	add	r7, sp, #0
 810a95a:	60f8      	str	r0, [r7, #12]
 810a95c:	60b9      	str	r1, [r7, #8]
 810a95e:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 810a960:	2300      	movs	r3, #0
 810a962:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 810a964:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 810a968:	68fb      	ldr	r3, [r7, #12]
 810a96a:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 810a96c:	68fb      	ldr	r3, [r7, #12]
 810a96e:	6a1b      	ldr	r3, [r3, #32]
 810a970:	885b      	ldrh	r3, [r3, #2]
 810a972:	429a      	cmp	r2, r3
 810a974:	d101      	bne.n	810a97a <virtqueue_get_available_buffer+0x26>
		return NULL;
 810a976:	2300      	movs	r3, #0
 810a978:	e02e      	b.n	810a9d8 <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 810a97a:	68fb      	ldr	r3, [r7, #12]
 810a97c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 810a97e:	1c5a      	adds	r2, r3, #1
 810a980:	b291      	uxth	r1, r2
 810a982:	68fa      	ldr	r2, [r7, #12]
 810a984:	8691      	strh	r1, [r2, #52]	@ 0x34
 810a986:	b21a      	sxth	r2, r3
 810a988:	68fb      	ldr	r3, [r7, #12]
 810a98a:	895b      	ldrh	r3, [r3, #10]
 810a98c:	3b01      	subs	r3, #1
 810a98e:	b29b      	uxth	r3, r3
 810a990:	b21b      	sxth	r3, r3
 810a992:	4013      	ands	r3, r2
 810a994:	b21b      	sxth	r3, r3
 810a996:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 810a998:	68fb      	ldr	r3, [r7, #12]
 810a99a:	6a1a      	ldr	r2, [r3, #32]
 810a99c:	8afb      	ldrh	r3, [r7, #22]
 810a99e:	005b      	lsls	r3, r3, #1
 810a9a0:	4413      	add	r3, r2
 810a9a2:	889a      	ldrh	r2, [r3, #4]
 810a9a4:	68bb      	ldr	r3, [r7, #8]
 810a9a6:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 810a9a8:	68fb      	ldr	r3, [r7, #12]
 810a9aa:	69da      	ldr	r2, [r3, #28]
 810a9ac:	68bb      	ldr	r3, [r7, #8]
 810a9ae:	881b      	ldrh	r3, [r3, #0]
 810a9b0:	011b      	lsls	r3, r3, #4
 810a9b2:	4413      	add	r3, r2
 810a9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a9b8:	4613      	mov	r3, r2
 810a9ba:	4619      	mov	r1, r3
 810a9bc:	68f8      	ldr	r0, [r7, #12]
 810a9be:	f7ff ff84 	bl	810a8ca <virtqueue_phys_to_virt>
 810a9c2:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 810a9c4:	68fb      	ldr	r3, [r7, #12]
 810a9c6:	69da      	ldr	r2, [r3, #28]
 810a9c8:	68bb      	ldr	r3, [r7, #8]
 810a9ca:	881b      	ldrh	r3, [r3, #0]
 810a9cc:	011b      	lsls	r3, r3, #4
 810a9ce:	4413      	add	r3, r2
 810a9d0:	689a      	ldr	r2, [r3, #8]
 810a9d2:	687b      	ldr	r3, [r7, #4]
 810a9d4:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 810a9d6:	693b      	ldr	r3, [r7, #16]
}
 810a9d8:	4618      	mov	r0, r3
 810a9da:	3718      	adds	r7, #24
 810a9dc:	46bd      	mov	sp, r7
 810a9de:	bd80      	pop	{r7, pc}

0810a9e0 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 810a9e0:	b480      	push	{r7}
 810a9e2:	b087      	sub	sp, #28
 810a9e4:	af00      	add	r7, sp, #0
 810a9e6:	60f8      	str	r0, [r7, #12]
 810a9e8:	460b      	mov	r3, r1
 810a9ea:	607a      	str	r2, [r7, #4]
 810a9ec:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 810a9ee:	2300      	movs	r3, #0
 810a9f0:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 810a9f2:	68fb      	ldr	r3, [r7, #12]
 810a9f4:	895b      	ldrh	r3, [r3, #10]
 810a9f6:	897a      	ldrh	r2, [r7, #10]
 810a9f8:	429a      	cmp	r2, r3
 810a9fa:	d901      	bls.n	810aa00 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 810a9fc:	4b14      	ldr	r3, [pc, #80]	@ (810aa50 <virtqueue_add_consumed_buffer+0x70>)
 810a9fe:	e021      	b.n	810aa44 <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 810aa00:	68fb      	ldr	r3, [r7, #12]
 810aa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810aa04:	885b      	ldrh	r3, [r3, #2]
 810aa06:	b21a      	sxth	r2, r3
 810aa08:	68fb      	ldr	r3, [r7, #12]
 810aa0a:	895b      	ldrh	r3, [r3, #10]
 810aa0c:	3b01      	subs	r3, #1
 810aa0e:	b29b      	uxth	r3, r3
 810aa10:	b21b      	sxth	r3, r3
 810aa12:	4013      	ands	r3, r2
 810aa14:	b21b      	sxth	r3, r3
 810aa16:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 810aa18:	68fb      	ldr	r3, [r7, #12]
 810aa1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810aa1c:	8a7b      	ldrh	r3, [r7, #18]
 810aa1e:	00db      	lsls	r3, r3, #3
 810aa20:	4413      	add	r3, r2
 810aa22:	3304      	adds	r3, #4
 810aa24:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 810aa26:	897a      	ldrh	r2, [r7, #10]
 810aa28:	697b      	ldr	r3, [r7, #20]
 810aa2a:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 810aa2c:	697b      	ldr	r3, [r7, #20]
 810aa2e:	687a      	ldr	r2, [r7, #4]
 810aa30:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 810aa32:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 810aa36:	68fb      	ldr	r3, [r7, #12]
 810aa38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810aa3a:	885a      	ldrh	r2, [r3, #2]
 810aa3c:	3201      	adds	r2, #1
 810aa3e:	b292      	uxth	r2, r2
 810aa40:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 810aa42:	2300      	movs	r3, #0
}
 810aa44:	4618      	mov	r0, r3
 810aa46:	371c      	adds	r7, #28
 810aa48:	46bd      	mov	sp, r7
 810aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa4e:	4770      	bx	lr
 810aa50:	fffff441 	.word	0xfffff441

0810aa54 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 810aa54:	b480      	push	{r7}
 810aa56:	b083      	sub	sp, #12
 810aa58:	af00      	add	r7, sp, #0
 810aa5a:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 810aa5c:	687b      	ldr	r3, [r7, #4]
 810aa5e:	68db      	ldr	r3, [r3, #12]
 810aa60:	f003 0302 	and.w	r3, r3, #2
 810aa64:	2b00      	cmp	r3, #0
 810aa66:	d010      	beq.n	810aa8a <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 810aa68:	687b      	ldr	r3, [r7, #4]
 810aa6a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 810aa6c:	687b      	ldr	r3, [r7, #4]
 810aa6e:	895b      	ldrh	r3, [r3, #10]
 810aa70:	1ad3      	subs	r3, r2, r3
 810aa72:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 810aa74:	687b      	ldr	r3, [r7, #4]
 810aa76:	6a1a      	ldr	r2, [r3, #32]
 810aa78:	687b      	ldr	r3, [r7, #4]
 810aa7a:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 810aa7c:	3901      	subs	r1, #1
 810aa7e:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 810aa80:	005b      	lsls	r3, r3, #1
 810aa82:	4413      	add	r3, r2
 810aa84:	460a      	mov	r2, r1
 810aa86:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 810aa88:	e008      	b.n	810aa9c <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 810aa8a:	687b      	ldr	r3, [r7, #4]
 810aa8c:	6a1b      	ldr	r3, [r3, #32]
 810aa8e:	881a      	ldrh	r2, [r3, #0]
 810aa90:	687b      	ldr	r3, [r7, #4]
 810aa92:	6a1b      	ldr	r3, [r3, #32]
 810aa94:	f042 0201 	orr.w	r2, r2, #1
 810aa98:	b292      	uxth	r2, r2
 810aa9a:	801a      	strh	r2, [r3, #0]
}
 810aa9c:	bf00      	nop
 810aa9e:	370c      	adds	r7, #12
 810aaa0:	46bd      	mov	sp, r7
 810aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aaa6:	4770      	bx	lr

0810aaa8 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 810aaa8:	b580      	push	{r7, lr}
 810aaaa:	b082      	sub	sp, #8
 810aaac:	af00      	add	r7, sp, #0
 810aaae:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 810aab0:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 810aab4:	6878      	ldr	r0, [r7, #4]
 810aab6:	f000 f885 	bl	810abc4 <vq_ring_must_notify_host>
 810aaba:	4603      	mov	r3, r0
 810aabc:	2b00      	cmp	r3, #0
 810aabe:	d002      	beq.n	810aac6 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 810aac0:	6878      	ldr	r0, [r7, #4]
 810aac2:	f000 f8b5 	bl	810ac30 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 810aac6:	687b      	ldr	r3, [r7, #4]
 810aac8:	2200      	movs	r2, #0
 810aaca:	855a      	strh	r2, [r3, #42]	@ 0x2a

	VQUEUE_IDLE(vq);
}
 810aacc:	bf00      	nop
 810aace:	3708      	adds	r7, #8
 810aad0:	46bd      	mov	sp, r7
 810aad2:	bd80      	pop	{r7, pc}

0810aad4 <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 810aad4:	b480      	push	{r7}
 810aad6:	b085      	sub	sp, #20
 810aad8:	af00      	add	r7, sp, #0
 810aada:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 810aadc:	2300      	movs	r3, #0
 810aade:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 810aae0:	2300      	movs	r3, #0
 810aae2:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 810aae4:	2300      	movs	r3, #0
 810aae6:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 810aae8:	687b      	ldr	r3, [r7, #4]
 810aaea:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 810aaec:	687b      	ldr	r3, [r7, #4]
 810aaee:	6a1b      	ldr	r3, [r3, #32]
 810aaf0:	885b      	ldrh	r3, [r3, #2]
 810aaf2:	429a      	cmp	r2, r3
 810aaf4:	d101      	bne.n	810aafa <virtqueue_get_desc_size+0x26>
		return 0;
 810aaf6:	2300      	movs	r3, #0
 810aaf8:	e019      	b.n	810ab2e <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 810aafa:	687b      	ldr	r3, [r7, #4]
 810aafc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 810aafe:	b21a      	sxth	r2, r3
 810ab00:	687b      	ldr	r3, [r7, #4]
 810ab02:	895b      	ldrh	r3, [r3, #10]
 810ab04:	3b01      	subs	r3, #1
 810ab06:	b29b      	uxth	r3, r3
 810ab08:	b21b      	sxth	r3, r3
 810ab0a:	4013      	ands	r3, r2
 810ab0c:	b21b      	sxth	r3, r3
 810ab0e:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 810ab10:	687b      	ldr	r3, [r7, #4]
 810ab12:	6a1a      	ldr	r2, [r3, #32]
 810ab14:	89fb      	ldrh	r3, [r7, #14]
 810ab16:	005b      	lsls	r3, r3, #1
 810ab18:	4413      	add	r3, r2
 810ab1a:	889b      	ldrh	r3, [r3, #4]
 810ab1c:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 810ab1e:	687b      	ldr	r3, [r7, #4]
 810ab20:	69da      	ldr	r2, [r3, #28]
 810ab22:	89bb      	ldrh	r3, [r7, #12]
 810ab24:	011b      	lsls	r3, r3, #4
 810ab26:	4413      	add	r3, r2
 810ab28:	689b      	ldr	r3, [r3, #8]
 810ab2a:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 810ab2c:	68bb      	ldr	r3, [r7, #8]
}
 810ab2e:	4618      	mov	r0, r3
 810ab30:	3714      	adds	r7, #20
 810ab32:	46bd      	mov	sp, r7
 810ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab38:	4770      	bx	lr

0810ab3a <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 810ab3a:	b580      	push	{r7, lr}
 810ab3c:	b088      	sub	sp, #32
 810ab3e:	af00      	add	r7, sp, #0
 810ab40:	60f8      	str	r0, [r7, #12]
 810ab42:	60b9      	str	r1, [r7, #8]
 810ab44:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 810ab46:	68fb      	ldr	r3, [r7, #12]
 810ab48:	895b      	ldrh	r3, [r3, #10]
 810ab4a:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 810ab4c:	68fb      	ldr	r3, [r7, #12]
 810ab4e:	3318      	adds	r3, #24
 810ab50:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 810ab52:	69b9      	ldr	r1, [r7, #24]
 810ab54:	687b      	ldr	r3, [r7, #4]
 810ab56:	68ba      	ldr	r2, [r7, #8]
 810ab58:	6978      	ldr	r0, [r7, #20]
 810ab5a:	f7ff fde3 	bl	810a724 <vring_init>

	for (i = 0; i < size - 1; i++)
 810ab5e:	2300      	movs	r3, #0
 810ab60:	61fb      	str	r3, [r7, #28]
 810ab62:	e00c      	b.n	810ab7e <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 810ab64:	69fb      	ldr	r3, [r7, #28]
 810ab66:	b29a      	uxth	r2, r3
 810ab68:	697b      	ldr	r3, [r7, #20]
 810ab6a:	6859      	ldr	r1, [r3, #4]
 810ab6c:	69fb      	ldr	r3, [r7, #28]
 810ab6e:	011b      	lsls	r3, r3, #4
 810ab70:	440b      	add	r3, r1
 810ab72:	3201      	adds	r2, #1
 810ab74:	b292      	uxth	r2, r2
 810ab76:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 810ab78:	69fb      	ldr	r3, [r7, #28]
 810ab7a:	3301      	adds	r3, #1
 810ab7c:	61fb      	str	r3, [r7, #28]
 810ab7e:	69bb      	ldr	r3, [r7, #24]
 810ab80:	3b01      	subs	r3, #1
 810ab82:	69fa      	ldr	r2, [r7, #28]
 810ab84:	429a      	cmp	r2, r3
 810ab86:	dbed      	blt.n	810ab64 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 810ab88:	697b      	ldr	r3, [r7, #20]
 810ab8a:	685a      	ldr	r2, [r3, #4]
 810ab8c:	69fb      	ldr	r3, [r7, #28]
 810ab8e:	011b      	lsls	r3, r3, #4
 810ab90:	4413      	add	r3, r2
 810ab92:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 810ab96:	81da      	strh	r2, [r3, #14]
}
 810ab98:	bf00      	nop
 810ab9a:	3720      	adds	r7, #32
 810ab9c:	46bd      	mov	sp, r7
 810ab9e:	bd80      	pop	{r7, pc}

0810aba0 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 810aba0:	b580      	push	{r7, lr}
 810aba2:	b082      	sub	sp, #8
 810aba4:	af00      	add	r7, sp, #0
 810aba6:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 810aba8:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 810abac:	687b      	ldr	r3, [r7, #4]
 810abae:	691b      	ldr	r3, [r3, #16]
 810abb0:	2b00      	cmp	r3, #0
 810abb2:	d003      	beq.n	810abbc <virtqueue_notification+0x1c>
		vq->callback(vq);
 810abb4:	687b      	ldr	r3, [r7, #4]
 810abb6:	691b      	ldr	r3, [r3, #16]
 810abb8:	6878      	ldr	r0, [r7, #4]
 810abba:	4798      	blx	r3
}
 810abbc:	bf00      	nop
 810abbe:	3708      	adds	r7, #8
 810abc0:	46bd      	mov	sp, r7
 810abc2:	bd80      	pop	{r7, pc}

0810abc4 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 810abc4:	b580      	push	{r7, lr}
 810abc6:	b084      	sub	sp, #16
 810abc8:	af00      	add	r7, sp, #0
 810abca:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 810abcc:	687b      	ldr	r3, [r7, #4]
 810abce:	68db      	ldr	r3, [r3, #12]
 810abd0:	f003 0302 	and.w	r3, r3, #2
 810abd4:	2b00      	cmp	r3, #0
 810abd6:	d01d      	beq.n	810ac14 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 810abd8:	687b      	ldr	r3, [r7, #4]
 810abda:	6a1b      	ldr	r3, [r3, #32]
 810abdc:	885b      	ldrh	r3, [r3, #2]
 810abde:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 810abe0:	687b      	ldr	r3, [r7, #4]
 810abe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810abe4:	89fa      	ldrh	r2, [r7, #14]
 810abe6:	1ad3      	subs	r3, r2, r3
 810abe8:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 810abea:	687b      	ldr	r3, [r7, #4]
 810abec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810abee:	687b      	ldr	r3, [r7, #4]
 810abf0:	699b      	ldr	r3, [r3, #24]
 810abf2:	00db      	lsls	r3, r3, #3
 810abf4:	4413      	add	r3, r2
 810abf6:	685b      	ldr	r3, [r3, #4]
 810abf8:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 810abfa:	89ba      	ldrh	r2, [r7, #12]
 810abfc:	89f9      	ldrh	r1, [r7, #14]
 810abfe:	897b      	ldrh	r3, [r7, #10]
 810ac00:	4618      	mov	r0, r3
 810ac02:	f7ff fdb8 	bl	810a776 <vring_need_event>
 810ac06:	4603      	mov	r3, r0
 810ac08:	2b00      	cmp	r3, #0
 810ac0a:	bf14      	ite	ne
 810ac0c:	2301      	movne	r3, #1
 810ac0e:	2300      	moveq	r3, #0
 810ac10:	b2db      	uxtb	r3, r3
 810ac12:	e009      	b.n	810ac28 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 810ac14:	687b      	ldr	r3, [r7, #4]
 810ac16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ac18:	881b      	ldrh	r3, [r3, #0]
 810ac1a:	f003 0301 	and.w	r3, r3, #1
 810ac1e:	2b00      	cmp	r3, #0
 810ac20:	bf0c      	ite	eq
 810ac22:	2301      	moveq	r3, #1
 810ac24:	2300      	movne	r3, #0
 810ac26:	b2db      	uxtb	r3, r3
}
 810ac28:	4618      	mov	r0, r3
 810ac2a:	3710      	adds	r7, #16
 810ac2c:	46bd      	mov	sp, r7
 810ac2e:	bd80      	pop	{r7, pc}

0810ac30 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 810ac30:	b580      	push	{r7, lr}
 810ac32:	b082      	sub	sp, #8
 810ac34:	af00      	add	r7, sp, #0
 810ac36:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 810ac38:	687b      	ldr	r3, [r7, #4]
 810ac3a:	695b      	ldr	r3, [r3, #20]
 810ac3c:	2b00      	cmp	r3, #0
 810ac3e:	d003      	beq.n	810ac48 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 810ac40:	687b      	ldr	r3, [r7, #4]
 810ac42:	695b      	ldr	r3, [r3, #20]
 810ac44:	6878      	ldr	r0, [r7, #4]
 810ac46:	4798      	blx	r3
}
 810ac48:	bf00      	nop
 810ac4a:	3708      	adds	r7, #8
 810ac4c:	46bd      	mov	sp, r7
 810ac4e:	bd80      	pop	{r7, pc}

0810ac50 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 810ac50:	b580      	push	{r7, lr}
 810ac52:	b082      	sub	sp, #8
 810ac54:	af00      	add	r7, sp, #0
 810ac56:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 810ac58:	4b04      	ldr	r3, [pc, #16]	@ (810ac6c <HAL_HSEM_FreeCallback+0x1c>)
 810ac5a:	2201      	movs	r2, #1
 810ac5c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810ac5e:	2001      	movs	r0, #1
 810ac60:	f7f6 fca2 	bl	81015a8 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 810ac64:	bf00      	nop
 810ac66:	3708      	adds	r7, #8
 810ac68:	46bd      	mov	sp, r7
 810ac6a:	bd80      	pop	{r7, pc}
 810ac6c:	10004c78 	.word	0x10004c78

0810ac70 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 810ac70:	b580      	push	{r7, lr}
 810ac72:	b082      	sub	sp, #8
 810ac74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 810ac76:	4b0b      	ldr	r3, [pc, #44]	@ (810aca4 <MAILBOX_Init+0x34>)
 810ac78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810ac7c:	4a09      	ldr	r2, [pc, #36]	@ (810aca4 <MAILBOX_Init+0x34>)
 810ac7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810ac82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810ac86:	4b07      	ldr	r3, [pc, #28]	@ (810aca4 <MAILBOX_Init+0x34>)
 810ac88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810ac8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810ac90:	607b      	str	r3, [r7, #4]
 810ac92:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810ac94:	2001      	movs	r0, #1
 810ac96:	f7f6 fc87 	bl	81015a8 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 810ac9a:	2300      	movs	r3, #0
}
 810ac9c:	4618      	mov	r0, r3
 810ac9e:	3708      	adds	r7, #8
 810aca0:	46bd      	mov	sp, r7
 810aca2:	bd80      	pop	{r7, pc}
 810aca4:	58024400 	.word	0x58024400

0810aca8 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 810aca8:	b580      	push	{r7, lr}
 810acaa:	b082      	sub	sp, #8
 810acac:	af00      	add	r7, sp, #0
 810acae:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 810acb0:	4b09      	ldr	r3, [pc, #36]	@ (810acd8 <MAILBOX_Poll+0x30>)
 810acb2:	681b      	ldr	r3, [r3, #0]
 810acb4:	2b01      	cmp	r3, #1
 810acb6:	d108      	bne.n	810acca <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 810acb8:	2101      	movs	r1, #1
 810acba:	6878      	ldr	r0, [r7, #4]
 810acbc:	f7fe fcb3 	bl	8109626 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 810acc0:	4b05      	ldr	r3, [pc, #20]	@ (810acd8 <MAILBOX_Poll+0x30>)
 810acc2:	2200      	movs	r2, #0
 810acc4:	601a      	str	r2, [r3, #0]
    return 0;
 810acc6:	2300      	movs	r3, #0
 810acc8:	e001      	b.n	810acce <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 810acca:	f06f 030a 	mvn.w	r3, #10
}
 810acce:	4618      	mov	r0, r3
 810acd0:	3708      	adds	r7, #8
 810acd2:	46bd      	mov	sp, r7
 810acd4:	bd80      	pop	{r7, pc}
 810acd6:	bf00      	nop
 810acd8:	10004c78 	.word	0x10004c78

0810acdc <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 810acdc:	b580      	push	{r7, lr}
 810acde:	b082      	sub	sp, #8
 810ace0:	af00      	add	r7, sp, #0
 810ace2:	6078      	str	r0, [r7, #4]
 810ace4:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 810ace6:	2001      	movs	r0, #1
 810ace8:	f7f6 fc30 	bl	810154c <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 810acec:	2100      	movs	r1, #0
 810acee:	2001      	movs	r0, #1
 810acf0:	f7f6 fc46 	bl	8101580 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 810acf4:	2300      	movs	r3, #0
}
 810acf6:	4618      	mov	r0, r3
 810acf8:	3708      	adds	r7, #8
 810acfa:	46bd      	mov	sp, r7
 810acfc:	bd80      	pop	{r7, pc}

0810acfe <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 810acfe:	b480      	push	{r7}
 810ad00:	b083      	sub	sp, #12
 810ad02:	af00      	add	r7, sp, #0
 810ad04:	6078      	str	r0, [r7, #4]
 810ad06:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 810ad08:	687b      	ldr	r3, [r7, #4]
 810ad0a:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 810ad0c:	683a      	ldr	r2, [r7, #0]
 810ad0e:	429a      	cmp	r2, r3
 810ad10:	d209      	bcs.n	810ad26 <metal_device_io_region+0x28>
 810ad12:	683a      	ldr	r2, [r7, #0]
 810ad14:	4613      	mov	r3, r2
 810ad16:	005b      	lsls	r3, r3, #1
 810ad18:	4413      	add	r3, r2
 810ad1a:	011b      	lsls	r3, r3, #4
 810ad1c:	3308      	adds	r3, #8
 810ad1e:	687a      	ldr	r2, [r7, #4]
 810ad20:	4413      	add	r3, r2
 810ad22:	3304      	adds	r3, #4
 810ad24:	e000      	b.n	810ad28 <metal_device_io_region+0x2a>
 810ad26:	2300      	movs	r3, #0
}
 810ad28:	4618      	mov	r0, r3
 810ad2a:	370c      	adds	r7, #12
 810ad2c:	46bd      	mov	sp, r7
 810ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad32:	4770      	bx	lr

0810ad34 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 810ad34:	b590      	push	{r4, r7, lr}
 810ad36:	b08d      	sub	sp, #52	@ 0x34
 810ad38:	af04      	add	r7, sp, #16
 810ad3a:	6078      	str	r0, [r7, #4]
  int status = 0;
 810ad3c:	2300      	movs	r3, #0
 810ad3e:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 810ad40:	2300      	movs	r3, #0
 810ad42:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 810ad44:	4a41      	ldr	r2, [pc, #260]	@ (810ae4c <OPENAMP_shmem_init+0x118>)
 810ad46:	f107 0310 	add.w	r3, r7, #16
 810ad4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 810ad4e:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 810ad52:	2300      	movs	r3, #0
 810ad54:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 810ad56:	2300      	movs	r3, #0
 810ad58:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 810ad5a:	f107 0310 	add.w	r3, r7, #16
 810ad5e:	4618      	mov	r0, r3
 810ad60:	f7fe f866 	bl	8108e30 <metal_init>

  status = metal_register_generic_device(&shm_device);
 810ad64:	483a      	ldr	r0, [pc, #232]	@ (810ae50 <OPENAMP_shmem_init+0x11c>)
 810ad66:	f7fd ff01 	bl	8108b6c <metal_register_generic_device>
 810ad6a:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 810ad6c:	69fb      	ldr	r3, [r7, #28]
 810ad6e:	2b00      	cmp	r3, #0
 810ad70:	d001      	beq.n	810ad76 <OPENAMP_shmem_init+0x42>
    return status;
 810ad72:	69fb      	ldr	r3, [r7, #28]
 810ad74:	e066      	b.n	810ae44 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 810ad76:	f107 0318 	add.w	r3, r7, #24
 810ad7a:	461a      	mov	r2, r3
 810ad7c:	4935      	ldr	r1, [pc, #212]	@ (810ae54 <OPENAMP_shmem_init+0x120>)
 810ad7e:	4836      	ldr	r0, [pc, #216]	@ (810ae58 <OPENAMP_shmem_init+0x124>)
 810ad80:	f7fd feb6 	bl	8108af0 <metal_device_open>
 810ad84:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 810ad86:	69fb      	ldr	r3, [r7, #28]
 810ad88:	2b00      	cmp	r3, #0
 810ad8a:	d001      	beq.n	810ad90 <OPENAMP_shmem_init+0x5c>
    return status;
 810ad8c:	69fb      	ldr	r3, [r7, #28]
 810ad8e:	e059      	b.n	810ae44 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 810ad90:	4a32      	ldr	r2, [pc, #200]	@ (810ae5c <OPENAMP_shmem_init+0x128>)
 810ad92:	4b33      	ldr	r3, [pc, #204]	@ (810ae60 <OPENAMP_shmem_init+0x12c>)
 810ad94:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 810ad96:	69bb      	ldr	r3, [r7, #24]
 810ad98:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 810ad9c:	4a31      	ldr	r2, [pc, #196]	@ (810ae64 <OPENAMP_shmem_init+0x130>)
 810ad9e:	4b2f      	ldr	r3, [pc, #188]	@ (810ae5c <OPENAMP_shmem_init+0x128>)
 810ada0:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 810ada2:	461a      	mov	r2, r3
 810ada4:	2300      	movs	r3, #0
 810ada6:	9302      	str	r3, [sp, #8]
 810ada8:	2300      	movs	r3, #0
 810adaa:	9301      	str	r3, [sp, #4]
 810adac:	f04f 33ff 	mov.w	r3, #4294967295
 810adb0:	9300      	str	r3, [sp, #0]
 810adb2:	4613      	mov	r3, r2
 810adb4:	4a2a      	ldr	r2, [pc, #168]	@ (810ae60 <OPENAMP_shmem_init+0x12c>)
 810adb6:	4929      	ldr	r1, [pc, #164]	@ (810ae5c <OPENAMP_shmem_init+0x128>)
 810adb8:	f7fe f895 	bl	8108ee6 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 810adbc:	69bb      	ldr	r3, [r7, #24]
 810adbe:	2100      	movs	r1, #0
 810adc0:	4618      	mov	r0, r3
 810adc2:	f7ff ff9c 	bl	810acfe <metal_device_io_region>
 810adc6:	4603      	mov	r3, r0
 810adc8:	4a27      	ldr	r2, [pc, #156]	@ (810ae68 <OPENAMP_shmem_init+0x134>)
 810adca:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 810adcc:	4b26      	ldr	r3, [pc, #152]	@ (810ae68 <OPENAMP_shmem_init+0x134>)
 810adce:	681b      	ldr	r3, [r3, #0]
 810add0:	2b00      	cmp	r3, #0
 810add2:	d102      	bne.n	810adda <OPENAMP_shmem_init+0xa6>
    return -1;
 810add4:	f04f 33ff 	mov.w	r3, #4294967295
 810add8:	e034      	b.n	810ae44 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 810adda:	f107 0208 	add.w	r2, r7, #8
 810adde:	f107 030c 	add.w	r3, r7, #12
 810ade2:	4619      	mov	r1, r3
 810ade4:	6878      	ldr	r0, [r7, #4]
 810ade6:	f000 f911 	bl	810b00c <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 810adea:	68fb      	ldr	r3, [r7, #12]
 810adec:	4a1f      	ldr	r2, [pc, #124]	@ (810ae6c <OPENAMP_shmem_init+0x138>)
 810adee:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 810adf0:	4b1e      	ldr	r3, [pc, #120]	@ (810ae6c <OPENAMP_shmem_init+0x138>)
 810adf2:	681b      	ldr	r3, [r3, #0]
 810adf4:	2b00      	cmp	r3, #0
 810adf6:	d102      	bne.n	810adfe <OPENAMP_shmem_init+0xca>
  {
    return -1;
 810adf8:	f04f 33ff 	mov.w	r3, #4294967295
 810adfc:	e022      	b.n	810ae44 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 810adfe:	69bb      	ldr	r3, [r7, #24]
 810ae00:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 810ae04:	4b19      	ldr	r3, [pc, #100]	@ (810ae6c <OPENAMP_shmem_init+0x138>)
 810ae06:	6819      	ldr	r1, [r3, #0]
 810ae08:	4b18      	ldr	r3, [pc, #96]	@ (810ae6c <OPENAMP_shmem_init+0x138>)
 810ae0a:	681a      	ldr	r2, [r3, #0]
 810ae0c:	68bb      	ldr	r3, [r7, #8]
 810ae0e:	461c      	mov	r4, r3
 810ae10:	2300      	movs	r3, #0
 810ae12:	9302      	str	r3, [sp, #8]
 810ae14:	2300      	movs	r3, #0
 810ae16:	9301      	str	r3, [sp, #4]
 810ae18:	f04f 33ff 	mov.w	r3, #4294967295
 810ae1c:	9300      	str	r3, [sp, #0]
 810ae1e:	4623      	mov	r3, r4
 810ae20:	f7fe f861 	bl	8108ee6 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 810ae24:	69bb      	ldr	r3, [r7, #24]
 810ae26:	2101      	movs	r1, #1
 810ae28:	4618      	mov	r0, r3
 810ae2a:	f7ff ff68 	bl	810acfe <metal_device_io_region>
 810ae2e:	4603      	mov	r3, r0
 810ae30:	4a0f      	ldr	r2, [pc, #60]	@ (810ae70 <OPENAMP_shmem_init+0x13c>)
 810ae32:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 810ae34:	4b0e      	ldr	r3, [pc, #56]	@ (810ae70 <OPENAMP_shmem_init+0x13c>)
 810ae36:	681b      	ldr	r3, [r3, #0]
 810ae38:	2b00      	cmp	r3, #0
 810ae3a:	d102      	bne.n	810ae42 <OPENAMP_shmem_init+0x10e>
    return -1;
 810ae3c:	f04f 33ff 	mov.w	r3, #4294967295
 810ae40:	e000      	b.n	810ae44 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 810ae42:	2300      	movs	r3, #0
}
 810ae44:	4618      	mov	r0, r3
 810ae46:	3724      	adds	r7, #36	@ 0x24
 810ae48:	46bd      	mov	sp, r7
 810ae4a:	bd90      	pop	{r4, r7, pc}
 810ae4c:	0810c688 	.word	0x0810c688
 810ae50:	10000040 	.word	0x10000040
 810ae54:	0810c674 	.word	0x0810c674
 810ae58:	0810c680 	.word	0x0810c680
 810ae5c:	38000400 	.word	0x38000400
 810ae60:	10004d0c 	.word	0x10004d0c
 810ae64:	38010000 	.word	0x38010000
 810ae68:	10004c7c 	.word	0x10004c7c
 810ae6c:	10004c84 	.word	0x10004c84
 810ae70:	10004c80 	.word	0x10004c80

0810ae74 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 810ae74:	b590      	push	{r4, r7, lr}
 810ae76:	b08b      	sub	sp, #44	@ 0x2c
 810ae78:	af04      	add	r7, sp, #16
 810ae7a:	6078      	str	r0, [r7, #4]
 810ae7c:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 810ae7e:	2300      	movs	r3, #0
 810ae80:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 810ae82:	2300      	movs	r3, #0
 810ae84:	613b      	str	r3, [r7, #16]
  int status = 0;
 810ae86:	2300      	movs	r3, #0
 810ae88:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 810ae8a:	f7ff fef1 	bl	810ac70 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 810ae8e:	6878      	ldr	r0, [r7, #4]
 810ae90:	f7ff ff50 	bl	810ad34 <OPENAMP_shmem_init>
 810ae94:	60f8      	str	r0, [r7, #12]
  if(status)
 810ae96:	68fb      	ldr	r3, [r7, #12]
 810ae98:	2b00      	cmp	r3, #0
 810ae9a:	d001      	beq.n	810aea0 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 810ae9c:	68fb      	ldr	r3, [r7, #12]
 810ae9e:	e06a      	b.n	810af76 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 810aea0:	6878      	ldr	r0, [r7, #4]
 810aea2:	4b37      	ldr	r3, [pc, #220]	@ (810af80 <MX_OPENAMP_Init+0x10c>)
 810aea4:	681b      	ldr	r3, [r3, #0]
 810aea6:	f103 0218 	add.w	r2, r3, #24
 810aeaa:	4b36      	ldr	r3, [pc, #216]	@ (810af84 <MX_OPENAMP_Init+0x110>)
 810aeac:	681b      	ldr	r3, [r3, #0]
 810aeae:	2100      	movs	r1, #0
 810aeb0:	9102      	str	r1, [sp, #8]
 810aeb2:	4935      	ldr	r1, [pc, #212]	@ (810af88 <MX_OPENAMP_Init+0x114>)
 810aeb4:	9101      	str	r1, [sp, #4]
 810aeb6:	2100      	movs	r1, #0
 810aeb8:	9100      	str	r1, [sp, #0]
 810aeba:	21ff      	movs	r1, #255	@ 0xff
 810aebc:	f7fe fad4 	bl	8109468 <rproc_virtio_create_vdev>
 810aec0:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 810aec2:	693b      	ldr	r3, [r7, #16]
 810aec4:	2b00      	cmp	r3, #0
 810aec6:	d102      	bne.n	810aece <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 810aec8:	f04f 33ff 	mov.w	r3, #4294967295
 810aecc:	e053      	b.n	810af76 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 810aece:	6938      	ldr	r0, [r7, #16]
 810aed0:	f7fe fbe5 	bl	810969e <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 810aed4:	4b2a      	ldr	r3, [pc, #168]	@ (810af80 <MX_OPENAMP_Init+0x10c>)
 810aed6:	681b      	ldr	r3, [r3, #0]
 810aed8:	3334      	adds	r3, #52	@ 0x34
 810aeda:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810aedc:	697b      	ldr	r3, [r7, #20]
 810aede:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 810aee0:	697b      	ldr	r3, [r7, #20]
 810aee2:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810aee4:	461c      	mov	r4, r3
 810aee6:	4b29      	ldr	r3, [pc, #164]	@ (810af8c <MX_OPENAMP_Init+0x118>)
 810aee8:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810aeea:	697a      	ldr	r2, [r7, #20]
 810aeec:	6892      	ldr	r2, [r2, #8]
 810aeee:	6979      	ldr	r1, [r7, #20]
 810aef0:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810aef2:	9102      	str	r1, [sp, #8]
 810aef4:	9201      	str	r2, [sp, #4]
 810aef6:	9300      	str	r3, [sp, #0]
 810aef8:	4623      	mov	r3, r4
 810aefa:	4602      	mov	r2, r0
 810aefc:	2100      	movs	r1, #0
 810aefe:	6938      	ldr	r0, [r7, #16]
 810af00:	f7fe fb60 	bl	81095c4 <rproc_virtio_init_vring>
 810af04:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 810af06:	68fb      	ldr	r3, [r7, #12]
 810af08:	2b00      	cmp	r3, #0
 810af0a:	d001      	beq.n	810af10 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 810af0c:	68fb      	ldr	r3, [r7, #12]
 810af0e:	e032      	b.n	810af76 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 810af10:	4b1b      	ldr	r3, [pc, #108]	@ (810af80 <MX_OPENAMP_Init+0x10c>)
 810af12:	681b      	ldr	r3, [r3, #0]
 810af14:	3348      	adds	r3, #72	@ 0x48
 810af16:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810af18:	697b      	ldr	r3, [r7, #20]
 810af1a:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 810af1c:	697b      	ldr	r3, [r7, #20]
 810af1e:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810af20:	461c      	mov	r4, r3
 810af22:	4b1a      	ldr	r3, [pc, #104]	@ (810af8c <MX_OPENAMP_Init+0x118>)
 810af24:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810af26:	697a      	ldr	r2, [r7, #20]
 810af28:	6892      	ldr	r2, [r2, #8]
 810af2a:	6979      	ldr	r1, [r7, #20]
 810af2c:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810af2e:	9102      	str	r1, [sp, #8]
 810af30:	9201      	str	r2, [sp, #4]
 810af32:	9300      	str	r3, [sp, #0]
 810af34:	4623      	mov	r3, r4
 810af36:	4602      	mov	r2, r0
 810af38:	2101      	movs	r1, #1
 810af3a:	6938      	ldr	r0, [r7, #16]
 810af3c:	f7fe fb42 	bl	81095c4 <rproc_virtio_init_vring>
 810af40:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 810af42:	68fb      	ldr	r3, [r7, #12]
 810af44:	2b00      	cmp	r3, #0
 810af46:	d001      	beq.n	810af4c <MX_OPENAMP_Init+0xd8>
  {
    return status;
 810af48:	68fb      	ldr	r3, [r7, #12]
 810af4a:	e014      	b.n	810af76 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 810af4c:	4b10      	ldr	r3, [pc, #64]	@ (810af90 <MX_OPENAMP_Init+0x11c>)
 810af4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810af52:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 810af54:	4a0f      	ldr	r2, [pc, #60]	@ (810af94 <MX_OPENAMP_Init+0x120>)
 810af56:	4b0e      	ldr	r3, [pc, #56]	@ (810af90 <MX_OPENAMP_Init+0x11c>)
 810af58:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 810af5a:	461a      	mov	r2, r3
 810af5c:	480e      	ldr	r0, [pc, #56]	@ (810af98 <MX_OPENAMP_Init+0x124>)
 810af5e:	f7ff f838 	bl	8109fd2 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 810af62:	4b0a      	ldr	r3, [pc, #40]	@ (810af8c <MX_OPENAMP_Init+0x118>)
 810af64:	681b      	ldr	r3, [r3, #0]
 810af66:	4a0c      	ldr	r2, [pc, #48]	@ (810af98 <MX_OPENAMP_Init+0x124>)
 810af68:	9200      	str	r2, [sp, #0]
 810af6a:	683a      	ldr	r2, [r7, #0]
 810af6c:	6939      	ldr	r1, [r7, #16]
 810af6e:	480b      	ldr	r0, [pc, #44]	@ (810af9c <MX_OPENAMP_Init+0x128>)
 810af70:	f7ff faa6 	bl	810a4c0 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 810af74:	2300      	movs	r3, #0
}
 810af76:	4618      	mov	r0, r3
 810af78:	371c      	adds	r7, #28
 810af7a:	46bd      	mov	sp, r7
 810af7c:	bd90      	pop	{r4, r7, pc}
 810af7e:	bf00      	nop
 810af80:	10004c84 	.word	0x10004c84
 810af84:	10004c80 	.word	0x10004c80
 810af88:	0810acdd 	.word	0x0810acdd
 810af8c:	10004c7c 	.word	0x10004c7c
 810af90:	38000400 	.word	0x38000400
 810af94:	38010000 	.word	0x38010000
 810af98:	10004c88 	.word	0x10004c88
 810af9c:	10004c94 	.word	0x10004c94

0810afa0 <OPENAMP_DeInit>:

void OPENAMP_DeInit()
{
 810afa0:	b580      	push	{r7, lr}
 810afa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN PRE_OPENAMP_DEINIT */

  /* USER CODE END PRE_OPENAMP_DEINIT */

  rpmsg_deinit_vdev(&rvdev);
 810afa4:	4803      	ldr	r0, [pc, #12]	@ (810afb4 <OPENAMP_DeInit+0x14>)
 810afa6:	f7ff fb27 	bl	810a5f8 <rpmsg_deinit_vdev>

  metal_finish();
 810afaa:	f7fd ff73 	bl	8108e94 <metal_finish>

  /* USER CODE BEGIN POST_OPENAMP_DEINIT */

  /* USER CODE END POST_OPENAMP_DEINIT */
}
 810afae:	bf00      	nop
 810afb0:	bd80      	pop	{r7, pc}
 810afb2:	bf00      	nop
 810afb4:	10004c94 	.word	0x10004c94

0810afb8 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 810afb8:	b580      	push	{r7, lr}
 810afba:	b08a      	sub	sp, #40	@ 0x28
 810afbc:	af04      	add	r7, sp, #16
 810afbe:	60f8      	str	r0, [r7, #12]
 810afc0:	60b9      	str	r1, [r7, #8]
 810afc2:	607a      	str	r2, [r7, #4]
 810afc4:	603b      	str	r3, [r7, #0]
  int ret = 0;
 810afc6:	2300      	movs	r3, #0
 810afc8:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 810afca:	6a3b      	ldr	r3, [r7, #32]
 810afcc:	9302      	str	r3, [sp, #8]
 810afce:	683b      	ldr	r3, [r7, #0]
 810afd0:	9301      	str	r3, [sp, #4]
 810afd2:	687b      	ldr	r3, [r7, #4]
 810afd4:	9300      	str	r3, [sp, #0]
 810afd6:	f04f 33ff 	mov.w	r3, #4294967295
 810afda:	68ba      	ldr	r2, [r7, #8]
 810afdc:	4904      	ldr	r1, [pc, #16]	@ (810aff0 <OPENAMP_create_endpoint+0x38>)
 810afde:	68f8      	ldr	r0, [r7, #12]
 810afe0:	f7fe fdea 	bl	8109bb8 <rpmsg_create_ept>
 810afe4:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 810afe6:	697b      	ldr	r3, [r7, #20]
}
 810afe8:	4618      	mov	r0, r3
 810afea:	3718      	adds	r7, #24
 810afec:	46bd      	mov	sp, r7
 810afee:	bd80      	pop	{r7, pc}
 810aff0:	10004c94 	.word	0x10004c94

0810aff4 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 810aff4:	b580      	push	{r7, lr}
 810aff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 810aff8:	4b03      	ldr	r3, [pc, #12]	@ (810b008 <OPENAMP_check_for_message+0x14>)
 810affa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810affc:	4618      	mov	r0, r3
 810affe:	f7ff fe53 	bl	810aca8 <MAILBOX_Poll>
}
 810b002:	bf00      	nop
 810b004:	bd80      	pop	{r7, pc}
 810b006:	bf00      	nop
 810b008:	10004c94 	.word	0x10004c94

0810b00c <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 810b00c:	b480      	push	{r7}
 810b00e:	b085      	sub	sp, #20
 810b010:	af00      	add	r7, sp, #0
 810b012:	60f8      	str	r0, [r7, #12]
 810b014:	60b9      	str	r1, [r7, #8]
 810b016:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 810b018:	bf00      	nop
 810b01a:	4b08      	ldr	r3, [pc, #32]	@ (810b03c <resource_table_init+0x30>)
 810b01c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810b01e:	4a08      	ldr	r2, [pc, #32]	@ (810b040 <resource_table_init+0x34>)
 810b020:	4293      	cmp	r3, r2
 810b022:	d1fa      	bne.n	810b01a <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 810b024:	687b      	ldr	r3, [r7, #4]
 810b026:	228c      	movs	r2, #140	@ 0x8c
 810b028:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 810b02a:	68bb      	ldr	r3, [r7, #8]
 810b02c:	4a03      	ldr	r2, [pc, #12]	@ (810b03c <resource_table_init+0x30>)
 810b02e:	601a      	str	r2, [r3, #0]
}
 810b030:	bf00      	nop
 810b032:	3714      	adds	r7, #20
 810b034:	46bd      	mov	sp, r7
 810b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b03a:	4770      	bx	lr
 810b03c:	38000000 	.word	0x38000000
 810b040:	38000400 	.word	0x38000400

0810b044 <__assert_func>:
 810b044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810b046:	4614      	mov	r4, r2
 810b048:	461a      	mov	r2, r3
 810b04a:	4b09      	ldr	r3, [pc, #36]	@ (810b070 <__assert_func+0x2c>)
 810b04c:	681b      	ldr	r3, [r3, #0]
 810b04e:	4605      	mov	r5, r0
 810b050:	68d8      	ldr	r0, [r3, #12]
 810b052:	b954      	cbnz	r4, 810b06a <__assert_func+0x26>
 810b054:	4b07      	ldr	r3, [pc, #28]	@ (810b074 <__assert_func+0x30>)
 810b056:	461c      	mov	r4, r3
 810b058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810b05c:	9100      	str	r1, [sp, #0]
 810b05e:	462b      	mov	r3, r5
 810b060:	4905      	ldr	r1, [pc, #20]	@ (810b078 <__assert_func+0x34>)
 810b062:	f000 f96f 	bl	810b344 <fiprintf>
 810b066:	f000 fb14 	bl	810b692 <abort>
 810b06a:	4b04      	ldr	r3, [pc, #16]	@ (810b07c <__assert_func+0x38>)
 810b06c:	e7f4      	b.n	810b058 <__assert_func+0x14>
 810b06e:	bf00      	nop
 810b070:	100000c8 	.word	0x100000c8
 810b074:	0810c7b1 	.word	0x0810c7b1
 810b078:	0810c783 	.word	0x0810c783
 810b07c:	0810c776 	.word	0x0810c776

0810b080 <malloc>:
 810b080:	4b02      	ldr	r3, [pc, #8]	@ (810b08c <malloc+0xc>)
 810b082:	4601      	mov	r1, r0
 810b084:	6818      	ldr	r0, [r3, #0]
 810b086:	f000 b82d 	b.w	810b0e4 <_malloc_r>
 810b08a:	bf00      	nop
 810b08c:	100000c8 	.word	0x100000c8

0810b090 <free>:
 810b090:	4b02      	ldr	r3, [pc, #8]	@ (810b09c <free+0xc>)
 810b092:	4601      	mov	r1, r0
 810b094:	6818      	ldr	r0, [r3, #0]
 810b096:	f000 bb03 	b.w	810b6a0 <_free_r>
 810b09a:	bf00      	nop
 810b09c:	100000c8 	.word	0x100000c8

0810b0a0 <sbrk_aligned>:
 810b0a0:	b570      	push	{r4, r5, r6, lr}
 810b0a2:	4e0f      	ldr	r6, [pc, #60]	@ (810b0e0 <sbrk_aligned+0x40>)
 810b0a4:	460c      	mov	r4, r1
 810b0a6:	6831      	ldr	r1, [r6, #0]
 810b0a8:	4605      	mov	r5, r0
 810b0aa:	b911      	cbnz	r1, 810b0b2 <sbrk_aligned+0x12>
 810b0ac:	f000 fa94 	bl	810b5d8 <_sbrk_r>
 810b0b0:	6030      	str	r0, [r6, #0]
 810b0b2:	4621      	mov	r1, r4
 810b0b4:	4628      	mov	r0, r5
 810b0b6:	f000 fa8f 	bl	810b5d8 <_sbrk_r>
 810b0ba:	1c43      	adds	r3, r0, #1
 810b0bc:	d103      	bne.n	810b0c6 <sbrk_aligned+0x26>
 810b0be:	f04f 34ff 	mov.w	r4, #4294967295
 810b0c2:	4620      	mov	r0, r4
 810b0c4:	bd70      	pop	{r4, r5, r6, pc}
 810b0c6:	1cc4      	adds	r4, r0, #3
 810b0c8:	f024 0403 	bic.w	r4, r4, #3
 810b0cc:	42a0      	cmp	r0, r4
 810b0ce:	d0f8      	beq.n	810b0c2 <sbrk_aligned+0x22>
 810b0d0:	1a21      	subs	r1, r4, r0
 810b0d2:	4628      	mov	r0, r5
 810b0d4:	f000 fa80 	bl	810b5d8 <_sbrk_r>
 810b0d8:	3001      	adds	r0, #1
 810b0da:	d1f2      	bne.n	810b0c2 <sbrk_aligned+0x22>
 810b0dc:	e7ef      	b.n	810b0be <sbrk_aligned+0x1e>
 810b0de:	bf00      	nop
 810b0e0:	10004d10 	.word	0x10004d10

0810b0e4 <_malloc_r>:
 810b0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b0e8:	1ccd      	adds	r5, r1, #3
 810b0ea:	f025 0503 	bic.w	r5, r5, #3
 810b0ee:	3508      	adds	r5, #8
 810b0f0:	2d0c      	cmp	r5, #12
 810b0f2:	bf38      	it	cc
 810b0f4:	250c      	movcc	r5, #12
 810b0f6:	2d00      	cmp	r5, #0
 810b0f8:	4606      	mov	r6, r0
 810b0fa:	db01      	blt.n	810b100 <_malloc_r+0x1c>
 810b0fc:	42a9      	cmp	r1, r5
 810b0fe:	d904      	bls.n	810b10a <_malloc_r+0x26>
 810b100:	230c      	movs	r3, #12
 810b102:	6033      	str	r3, [r6, #0]
 810b104:	2000      	movs	r0, #0
 810b106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b10a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810b1e0 <_malloc_r+0xfc>
 810b10e:	f000 f869 	bl	810b1e4 <__malloc_lock>
 810b112:	f8d8 3000 	ldr.w	r3, [r8]
 810b116:	461c      	mov	r4, r3
 810b118:	bb44      	cbnz	r4, 810b16c <_malloc_r+0x88>
 810b11a:	4629      	mov	r1, r5
 810b11c:	4630      	mov	r0, r6
 810b11e:	f7ff ffbf 	bl	810b0a0 <sbrk_aligned>
 810b122:	1c43      	adds	r3, r0, #1
 810b124:	4604      	mov	r4, r0
 810b126:	d158      	bne.n	810b1da <_malloc_r+0xf6>
 810b128:	f8d8 4000 	ldr.w	r4, [r8]
 810b12c:	4627      	mov	r7, r4
 810b12e:	2f00      	cmp	r7, #0
 810b130:	d143      	bne.n	810b1ba <_malloc_r+0xd6>
 810b132:	2c00      	cmp	r4, #0
 810b134:	d04b      	beq.n	810b1ce <_malloc_r+0xea>
 810b136:	6823      	ldr	r3, [r4, #0]
 810b138:	4639      	mov	r1, r7
 810b13a:	4630      	mov	r0, r6
 810b13c:	eb04 0903 	add.w	r9, r4, r3
 810b140:	f000 fa4a 	bl	810b5d8 <_sbrk_r>
 810b144:	4581      	cmp	r9, r0
 810b146:	d142      	bne.n	810b1ce <_malloc_r+0xea>
 810b148:	6821      	ldr	r1, [r4, #0]
 810b14a:	1a6d      	subs	r5, r5, r1
 810b14c:	4629      	mov	r1, r5
 810b14e:	4630      	mov	r0, r6
 810b150:	f7ff ffa6 	bl	810b0a0 <sbrk_aligned>
 810b154:	3001      	adds	r0, #1
 810b156:	d03a      	beq.n	810b1ce <_malloc_r+0xea>
 810b158:	6823      	ldr	r3, [r4, #0]
 810b15a:	442b      	add	r3, r5
 810b15c:	6023      	str	r3, [r4, #0]
 810b15e:	f8d8 3000 	ldr.w	r3, [r8]
 810b162:	685a      	ldr	r2, [r3, #4]
 810b164:	bb62      	cbnz	r2, 810b1c0 <_malloc_r+0xdc>
 810b166:	f8c8 7000 	str.w	r7, [r8]
 810b16a:	e00f      	b.n	810b18c <_malloc_r+0xa8>
 810b16c:	6822      	ldr	r2, [r4, #0]
 810b16e:	1b52      	subs	r2, r2, r5
 810b170:	d420      	bmi.n	810b1b4 <_malloc_r+0xd0>
 810b172:	2a0b      	cmp	r2, #11
 810b174:	d917      	bls.n	810b1a6 <_malloc_r+0xc2>
 810b176:	1961      	adds	r1, r4, r5
 810b178:	42a3      	cmp	r3, r4
 810b17a:	6025      	str	r5, [r4, #0]
 810b17c:	bf18      	it	ne
 810b17e:	6059      	strne	r1, [r3, #4]
 810b180:	6863      	ldr	r3, [r4, #4]
 810b182:	bf08      	it	eq
 810b184:	f8c8 1000 	streq.w	r1, [r8]
 810b188:	5162      	str	r2, [r4, r5]
 810b18a:	604b      	str	r3, [r1, #4]
 810b18c:	4630      	mov	r0, r6
 810b18e:	f000 f82f 	bl	810b1f0 <__malloc_unlock>
 810b192:	f104 000b 	add.w	r0, r4, #11
 810b196:	1d23      	adds	r3, r4, #4
 810b198:	f020 0007 	bic.w	r0, r0, #7
 810b19c:	1ac2      	subs	r2, r0, r3
 810b19e:	bf1c      	itt	ne
 810b1a0:	1a1b      	subne	r3, r3, r0
 810b1a2:	50a3      	strne	r3, [r4, r2]
 810b1a4:	e7af      	b.n	810b106 <_malloc_r+0x22>
 810b1a6:	6862      	ldr	r2, [r4, #4]
 810b1a8:	42a3      	cmp	r3, r4
 810b1aa:	bf0c      	ite	eq
 810b1ac:	f8c8 2000 	streq.w	r2, [r8]
 810b1b0:	605a      	strne	r2, [r3, #4]
 810b1b2:	e7eb      	b.n	810b18c <_malloc_r+0xa8>
 810b1b4:	4623      	mov	r3, r4
 810b1b6:	6864      	ldr	r4, [r4, #4]
 810b1b8:	e7ae      	b.n	810b118 <_malloc_r+0x34>
 810b1ba:	463c      	mov	r4, r7
 810b1bc:	687f      	ldr	r7, [r7, #4]
 810b1be:	e7b6      	b.n	810b12e <_malloc_r+0x4a>
 810b1c0:	461a      	mov	r2, r3
 810b1c2:	685b      	ldr	r3, [r3, #4]
 810b1c4:	42a3      	cmp	r3, r4
 810b1c6:	d1fb      	bne.n	810b1c0 <_malloc_r+0xdc>
 810b1c8:	2300      	movs	r3, #0
 810b1ca:	6053      	str	r3, [r2, #4]
 810b1cc:	e7de      	b.n	810b18c <_malloc_r+0xa8>
 810b1ce:	230c      	movs	r3, #12
 810b1d0:	6033      	str	r3, [r6, #0]
 810b1d2:	4630      	mov	r0, r6
 810b1d4:	f000 f80c 	bl	810b1f0 <__malloc_unlock>
 810b1d8:	e794      	b.n	810b104 <_malloc_r+0x20>
 810b1da:	6005      	str	r5, [r0, #0]
 810b1dc:	e7d6      	b.n	810b18c <_malloc_r+0xa8>
 810b1de:	bf00      	nop
 810b1e0:	10004d14 	.word	0x10004d14

0810b1e4 <__malloc_lock>:
 810b1e4:	4801      	ldr	r0, [pc, #4]	@ (810b1ec <__malloc_lock+0x8>)
 810b1e6:	f000 ba44 	b.w	810b672 <__retarget_lock_acquire_recursive>
 810b1ea:	bf00      	nop
 810b1ec:	10004e58 	.word	0x10004e58

0810b1f0 <__malloc_unlock>:
 810b1f0:	4801      	ldr	r0, [pc, #4]	@ (810b1f8 <__malloc_unlock+0x8>)
 810b1f2:	f000 ba3f 	b.w	810b674 <__retarget_lock_release_recursive>
 810b1f6:	bf00      	nop
 810b1f8:	10004e58 	.word	0x10004e58

0810b1fc <std>:
 810b1fc:	2300      	movs	r3, #0
 810b1fe:	b510      	push	{r4, lr}
 810b200:	4604      	mov	r4, r0
 810b202:	e9c0 3300 	strd	r3, r3, [r0]
 810b206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810b20a:	6083      	str	r3, [r0, #8]
 810b20c:	8181      	strh	r1, [r0, #12]
 810b20e:	6643      	str	r3, [r0, #100]	@ 0x64
 810b210:	81c2      	strh	r2, [r0, #14]
 810b212:	6183      	str	r3, [r0, #24]
 810b214:	4619      	mov	r1, r3
 810b216:	2208      	movs	r2, #8
 810b218:	305c      	adds	r0, #92	@ 0x5c
 810b21a:	f000 f926 	bl	810b46a <memset>
 810b21e:	4b0d      	ldr	r3, [pc, #52]	@ (810b254 <std+0x58>)
 810b220:	6263      	str	r3, [r4, #36]	@ 0x24
 810b222:	4b0d      	ldr	r3, [pc, #52]	@ (810b258 <std+0x5c>)
 810b224:	62a3      	str	r3, [r4, #40]	@ 0x28
 810b226:	4b0d      	ldr	r3, [pc, #52]	@ (810b25c <std+0x60>)
 810b228:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810b22a:	4b0d      	ldr	r3, [pc, #52]	@ (810b260 <std+0x64>)
 810b22c:	6323      	str	r3, [r4, #48]	@ 0x30
 810b22e:	4b0d      	ldr	r3, [pc, #52]	@ (810b264 <std+0x68>)
 810b230:	6224      	str	r4, [r4, #32]
 810b232:	429c      	cmp	r4, r3
 810b234:	d006      	beq.n	810b244 <std+0x48>
 810b236:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810b23a:	4294      	cmp	r4, r2
 810b23c:	d002      	beq.n	810b244 <std+0x48>
 810b23e:	33d0      	adds	r3, #208	@ 0xd0
 810b240:	429c      	cmp	r4, r3
 810b242:	d105      	bne.n	810b250 <std+0x54>
 810b244:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810b248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b24c:	f000 ba10 	b.w	810b670 <__retarget_lock_init_recursive>
 810b250:	bd10      	pop	{r4, pc}
 810b252:	bf00      	nop
 810b254:	0810b3e5 	.word	0x0810b3e5
 810b258:	0810b407 	.word	0x0810b407
 810b25c:	0810b43f 	.word	0x0810b43f
 810b260:	0810b463 	.word	0x0810b463
 810b264:	10004d18 	.word	0x10004d18

0810b268 <stdio_exit_handler>:
 810b268:	4a02      	ldr	r2, [pc, #8]	@ (810b274 <stdio_exit_handler+0xc>)
 810b26a:	4903      	ldr	r1, [pc, #12]	@ (810b278 <stdio_exit_handler+0x10>)
 810b26c:	4803      	ldr	r0, [pc, #12]	@ (810b27c <stdio_exit_handler+0x14>)
 810b26e:	f000 b87b 	b.w	810b368 <_fwalk_sglue>
 810b272:	bf00      	nop
 810b274:	100000bc 	.word	0x100000bc
 810b278:	0810c08d 	.word	0x0810c08d
 810b27c:	100000cc 	.word	0x100000cc

0810b280 <cleanup_stdio>:
 810b280:	6841      	ldr	r1, [r0, #4]
 810b282:	4b0c      	ldr	r3, [pc, #48]	@ (810b2b4 <cleanup_stdio+0x34>)
 810b284:	4299      	cmp	r1, r3
 810b286:	b510      	push	{r4, lr}
 810b288:	4604      	mov	r4, r0
 810b28a:	d001      	beq.n	810b290 <cleanup_stdio+0x10>
 810b28c:	f000 fefe 	bl	810c08c <_fflush_r>
 810b290:	68a1      	ldr	r1, [r4, #8]
 810b292:	4b09      	ldr	r3, [pc, #36]	@ (810b2b8 <cleanup_stdio+0x38>)
 810b294:	4299      	cmp	r1, r3
 810b296:	d002      	beq.n	810b29e <cleanup_stdio+0x1e>
 810b298:	4620      	mov	r0, r4
 810b29a:	f000 fef7 	bl	810c08c <_fflush_r>
 810b29e:	68e1      	ldr	r1, [r4, #12]
 810b2a0:	4b06      	ldr	r3, [pc, #24]	@ (810b2bc <cleanup_stdio+0x3c>)
 810b2a2:	4299      	cmp	r1, r3
 810b2a4:	d004      	beq.n	810b2b0 <cleanup_stdio+0x30>
 810b2a6:	4620      	mov	r0, r4
 810b2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b2ac:	f000 beee 	b.w	810c08c <_fflush_r>
 810b2b0:	bd10      	pop	{r4, pc}
 810b2b2:	bf00      	nop
 810b2b4:	10004d18 	.word	0x10004d18
 810b2b8:	10004d80 	.word	0x10004d80
 810b2bc:	10004de8 	.word	0x10004de8

0810b2c0 <global_stdio_init.part.0>:
 810b2c0:	b510      	push	{r4, lr}
 810b2c2:	4b0b      	ldr	r3, [pc, #44]	@ (810b2f0 <global_stdio_init.part.0+0x30>)
 810b2c4:	4c0b      	ldr	r4, [pc, #44]	@ (810b2f4 <global_stdio_init.part.0+0x34>)
 810b2c6:	4a0c      	ldr	r2, [pc, #48]	@ (810b2f8 <global_stdio_init.part.0+0x38>)
 810b2c8:	601a      	str	r2, [r3, #0]
 810b2ca:	4620      	mov	r0, r4
 810b2cc:	2200      	movs	r2, #0
 810b2ce:	2104      	movs	r1, #4
 810b2d0:	f7ff ff94 	bl	810b1fc <std>
 810b2d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810b2d8:	2201      	movs	r2, #1
 810b2da:	2109      	movs	r1, #9
 810b2dc:	f7ff ff8e 	bl	810b1fc <std>
 810b2e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810b2e4:	2202      	movs	r2, #2
 810b2e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b2ea:	2112      	movs	r1, #18
 810b2ec:	f7ff bf86 	b.w	810b1fc <std>
 810b2f0:	10004e50 	.word	0x10004e50
 810b2f4:	10004d18 	.word	0x10004d18
 810b2f8:	0810b269 	.word	0x0810b269

0810b2fc <__sfp_lock_acquire>:
 810b2fc:	4801      	ldr	r0, [pc, #4]	@ (810b304 <__sfp_lock_acquire+0x8>)
 810b2fe:	f000 b9b8 	b.w	810b672 <__retarget_lock_acquire_recursive>
 810b302:	bf00      	nop
 810b304:	10004e59 	.word	0x10004e59

0810b308 <__sfp_lock_release>:
 810b308:	4801      	ldr	r0, [pc, #4]	@ (810b310 <__sfp_lock_release+0x8>)
 810b30a:	f000 b9b3 	b.w	810b674 <__retarget_lock_release_recursive>
 810b30e:	bf00      	nop
 810b310:	10004e59 	.word	0x10004e59

0810b314 <__sinit>:
 810b314:	b510      	push	{r4, lr}
 810b316:	4604      	mov	r4, r0
 810b318:	f7ff fff0 	bl	810b2fc <__sfp_lock_acquire>
 810b31c:	6a23      	ldr	r3, [r4, #32]
 810b31e:	b11b      	cbz	r3, 810b328 <__sinit+0x14>
 810b320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b324:	f7ff bff0 	b.w	810b308 <__sfp_lock_release>
 810b328:	4b04      	ldr	r3, [pc, #16]	@ (810b33c <__sinit+0x28>)
 810b32a:	6223      	str	r3, [r4, #32]
 810b32c:	4b04      	ldr	r3, [pc, #16]	@ (810b340 <__sinit+0x2c>)
 810b32e:	681b      	ldr	r3, [r3, #0]
 810b330:	2b00      	cmp	r3, #0
 810b332:	d1f5      	bne.n	810b320 <__sinit+0xc>
 810b334:	f7ff ffc4 	bl	810b2c0 <global_stdio_init.part.0>
 810b338:	e7f2      	b.n	810b320 <__sinit+0xc>
 810b33a:	bf00      	nop
 810b33c:	0810b281 	.word	0x0810b281
 810b340:	10004e50 	.word	0x10004e50

0810b344 <fiprintf>:
 810b344:	b40e      	push	{r1, r2, r3}
 810b346:	b503      	push	{r0, r1, lr}
 810b348:	4601      	mov	r1, r0
 810b34a:	ab03      	add	r3, sp, #12
 810b34c:	4805      	ldr	r0, [pc, #20]	@ (810b364 <fiprintf+0x20>)
 810b34e:	f853 2b04 	ldr.w	r2, [r3], #4
 810b352:	6800      	ldr	r0, [r0, #0]
 810b354:	9301      	str	r3, [sp, #4]
 810b356:	f000 fb6f 	bl	810ba38 <_vfiprintf_r>
 810b35a:	b002      	add	sp, #8
 810b35c:	f85d eb04 	ldr.w	lr, [sp], #4
 810b360:	b003      	add	sp, #12
 810b362:	4770      	bx	lr
 810b364:	100000c8 	.word	0x100000c8

0810b368 <_fwalk_sglue>:
 810b368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b36c:	4607      	mov	r7, r0
 810b36e:	4688      	mov	r8, r1
 810b370:	4614      	mov	r4, r2
 810b372:	2600      	movs	r6, #0
 810b374:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810b378:	f1b9 0901 	subs.w	r9, r9, #1
 810b37c:	d505      	bpl.n	810b38a <_fwalk_sglue+0x22>
 810b37e:	6824      	ldr	r4, [r4, #0]
 810b380:	2c00      	cmp	r4, #0
 810b382:	d1f7      	bne.n	810b374 <_fwalk_sglue+0xc>
 810b384:	4630      	mov	r0, r6
 810b386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b38a:	89ab      	ldrh	r3, [r5, #12]
 810b38c:	2b01      	cmp	r3, #1
 810b38e:	d907      	bls.n	810b3a0 <_fwalk_sglue+0x38>
 810b390:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810b394:	3301      	adds	r3, #1
 810b396:	d003      	beq.n	810b3a0 <_fwalk_sglue+0x38>
 810b398:	4629      	mov	r1, r5
 810b39a:	4638      	mov	r0, r7
 810b39c:	47c0      	blx	r8
 810b39e:	4306      	orrs	r6, r0
 810b3a0:	3568      	adds	r5, #104	@ 0x68
 810b3a2:	e7e9      	b.n	810b378 <_fwalk_sglue+0x10>

0810b3a4 <siprintf>:
 810b3a4:	b40e      	push	{r1, r2, r3}
 810b3a6:	b500      	push	{lr}
 810b3a8:	b09c      	sub	sp, #112	@ 0x70
 810b3aa:	ab1d      	add	r3, sp, #116	@ 0x74
 810b3ac:	9002      	str	r0, [sp, #8]
 810b3ae:	9006      	str	r0, [sp, #24]
 810b3b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 810b3b4:	4809      	ldr	r0, [pc, #36]	@ (810b3dc <siprintf+0x38>)
 810b3b6:	9107      	str	r1, [sp, #28]
 810b3b8:	9104      	str	r1, [sp, #16]
 810b3ba:	4909      	ldr	r1, [pc, #36]	@ (810b3e0 <siprintf+0x3c>)
 810b3bc:	f853 2b04 	ldr.w	r2, [r3], #4
 810b3c0:	9105      	str	r1, [sp, #20]
 810b3c2:	6800      	ldr	r0, [r0, #0]
 810b3c4:	9301      	str	r3, [sp, #4]
 810b3c6:	a902      	add	r1, sp, #8
 810b3c8:	f000 fa10 	bl	810b7ec <_svfiprintf_r>
 810b3cc:	9b02      	ldr	r3, [sp, #8]
 810b3ce:	2200      	movs	r2, #0
 810b3d0:	701a      	strb	r2, [r3, #0]
 810b3d2:	b01c      	add	sp, #112	@ 0x70
 810b3d4:	f85d eb04 	ldr.w	lr, [sp], #4
 810b3d8:	b003      	add	sp, #12
 810b3da:	4770      	bx	lr
 810b3dc:	100000c8 	.word	0x100000c8
 810b3e0:	ffff0208 	.word	0xffff0208

0810b3e4 <__sread>:
 810b3e4:	b510      	push	{r4, lr}
 810b3e6:	460c      	mov	r4, r1
 810b3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b3ec:	f000 f8e2 	bl	810b5b4 <_read_r>
 810b3f0:	2800      	cmp	r0, #0
 810b3f2:	bfab      	itete	ge
 810b3f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810b3f6:	89a3      	ldrhlt	r3, [r4, #12]
 810b3f8:	181b      	addge	r3, r3, r0
 810b3fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810b3fe:	bfac      	ite	ge
 810b400:	6563      	strge	r3, [r4, #84]	@ 0x54
 810b402:	81a3      	strhlt	r3, [r4, #12]
 810b404:	bd10      	pop	{r4, pc}

0810b406 <__swrite>:
 810b406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b40a:	461f      	mov	r7, r3
 810b40c:	898b      	ldrh	r3, [r1, #12]
 810b40e:	05db      	lsls	r3, r3, #23
 810b410:	4605      	mov	r5, r0
 810b412:	460c      	mov	r4, r1
 810b414:	4616      	mov	r6, r2
 810b416:	d505      	bpl.n	810b424 <__swrite+0x1e>
 810b418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b41c:	2302      	movs	r3, #2
 810b41e:	2200      	movs	r2, #0
 810b420:	f000 f8b6 	bl	810b590 <_lseek_r>
 810b424:	89a3      	ldrh	r3, [r4, #12]
 810b426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b42a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810b42e:	81a3      	strh	r3, [r4, #12]
 810b430:	4632      	mov	r2, r6
 810b432:	463b      	mov	r3, r7
 810b434:	4628      	mov	r0, r5
 810b436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810b43a:	f000 b8dd 	b.w	810b5f8 <_write_r>

0810b43e <__sseek>:
 810b43e:	b510      	push	{r4, lr}
 810b440:	460c      	mov	r4, r1
 810b442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b446:	f000 f8a3 	bl	810b590 <_lseek_r>
 810b44a:	1c43      	adds	r3, r0, #1
 810b44c:	89a3      	ldrh	r3, [r4, #12]
 810b44e:	bf15      	itete	ne
 810b450:	6560      	strne	r0, [r4, #84]	@ 0x54
 810b452:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810b456:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810b45a:	81a3      	strheq	r3, [r4, #12]
 810b45c:	bf18      	it	ne
 810b45e:	81a3      	strhne	r3, [r4, #12]
 810b460:	bd10      	pop	{r4, pc}

0810b462 <__sclose>:
 810b462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b466:	f000 b82d 	b.w	810b4c4 <_close_r>

0810b46a <memset>:
 810b46a:	4402      	add	r2, r0
 810b46c:	4603      	mov	r3, r0
 810b46e:	4293      	cmp	r3, r2
 810b470:	d100      	bne.n	810b474 <memset+0xa>
 810b472:	4770      	bx	lr
 810b474:	f803 1b01 	strb.w	r1, [r3], #1
 810b478:	e7f9      	b.n	810b46e <memset+0x4>

0810b47a <strncmp>:
 810b47a:	b510      	push	{r4, lr}
 810b47c:	b16a      	cbz	r2, 810b49a <strncmp+0x20>
 810b47e:	3901      	subs	r1, #1
 810b480:	1884      	adds	r4, r0, r2
 810b482:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b486:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810b48a:	429a      	cmp	r2, r3
 810b48c:	d103      	bne.n	810b496 <strncmp+0x1c>
 810b48e:	42a0      	cmp	r0, r4
 810b490:	d001      	beq.n	810b496 <strncmp+0x1c>
 810b492:	2a00      	cmp	r2, #0
 810b494:	d1f5      	bne.n	810b482 <strncmp+0x8>
 810b496:	1ad0      	subs	r0, r2, r3
 810b498:	bd10      	pop	{r4, pc}
 810b49a:	4610      	mov	r0, r2
 810b49c:	e7fc      	b.n	810b498 <strncmp+0x1e>

0810b49e <strncpy>:
 810b49e:	b510      	push	{r4, lr}
 810b4a0:	3901      	subs	r1, #1
 810b4a2:	4603      	mov	r3, r0
 810b4a4:	b132      	cbz	r2, 810b4b4 <strncpy+0x16>
 810b4a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 810b4aa:	f803 4b01 	strb.w	r4, [r3], #1
 810b4ae:	3a01      	subs	r2, #1
 810b4b0:	2c00      	cmp	r4, #0
 810b4b2:	d1f7      	bne.n	810b4a4 <strncpy+0x6>
 810b4b4:	441a      	add	r2, r3
 810b4b6:	2100      	movs	r1, #0
 810b4b8:	4293      	cmp	r3, r2
 810b4ba:	d100      	bne.n	810b4be <strncpy+0x20>
 810b4bc:	bd10      	pop	{r4, pc}
 810b4be:	f803 1b01 	strb.w	r1, [r3], #1
 810b4c2:	e7f9      	b.n	810b4b8 <strncpy+0x1a>

0810b4c4 <_close_r>:
 810b4c4:	b538      	push	{r3, r4, r5, lr}
 810b4c6:	4d06      	ldr	r5, [pc, #24]	@ (810b4e0 <_close_r+0x1c>)
 810b4c8:	2300      	movs	r3, #0
 810b4ca:	4604      	mov	r4, r0
 810b4cc:	4608      	mov	r0, r1
 810b4ce:	602b      	str	r3, [r5, #0]
 810b4d0:	f7f5 fb9c 	bl	8100c0c <_close>
 810b4d4:	1c43      	adds	r3, r0, #1
 810b4d6:	d102      	bne.n	810b4de <_close_r+0x1a>
 810b4d8:	682b      	ldr	r3, [r5, #0]
 810b4da:	b103      	cbz	r3, 810b4de <_close_r+0x1a>
 810b4dc:	6023      	str	r3, [r4, #0]
 810b4de:	bd38      	pop	{r3, r4, r5, pc}
 810b4e0:	10004e54 	.word	0x10004e54

0810b4e4 <_reclaim_reent>:
 810b4e4:	4b29      	ldr	r3, [pc, #164]	@ (810b58c <_reclaim_reent+0xa8>)
 810b4e6:	681b      	ldr	r3, [r3, #0]
 810b4e8:	4283      	cmp	r3, r0
 810b4ea:	b570      	push	{r4, r5, r6, lr}
 810b4ec:	4604      	mov	r4, r0
 810b4ee:	d04b      	beq.n	810b588 <_reclaim_reent+0xa4>
 810b4f0:	69c3      	ldr	r3, [r0, #28]
 810b4f2:	b1ab      	cbz	r3, 810b520 <_reclaim_reent+0x3c>
 810b4f4:	68db      	ldr	r3, [r3, #12]
 810b4f6:	b16b      	cbz	r3, 810b514 <_reclaim_reent+0x30>
 810b4f8:	2500      	movs	r5, #0
 810b4fa:	69e3      	ldr	r3, [r4, #28]
 810b4fc:	68db      	ldr	r3, [r3, #12]
 810b4fe:	5959      	ldr	r1, [r3, r5]
 810b500:	2900      	cmp	r1, #0
 810b502:	d13b      	bne.n	810b57c <_reclaim_reent+0x98>
 810b504:	3504      	adds	r5, #4
 810b506:	2d80      	cmp	r5, #128	@ 0x80
 810b508:	d1f7      	bne.n	810b4fa <_reclaim_reent+0x16>
 810b50a:	69e3      	ldr	r3, [r4, #28]
 810b50c:	4620      	mov	r0, r4
 810b50e:	68d9      	ldr	r1, [r3, #12]
 810b510:	f000 f8c6 	bl	810b6a0 <_free_r>
 810b514:	69e3      	ldr	r3, [r4, #28]
 810b516:	6819      	ldr	r1, [r3, #0]
 810b518:	b111      	cbz	r1, 810b520 <_reclaim_reent+0x3c>
 810b51a:	4620      	mov	r0, r4
 810b51c:	f000 f8c0 	bl	810b6a0 <_free_r>
 810b520:	6961      	ldr	r1, [r4, #20]
 810b522:	b111      	cbz	r1, 810b52a <_reclaim_reent+0x46>
 810b524:	4620      	mov	r0, r4
 810b526:	f000 f8bb 	bl	810b6a0 <_free_r>
 810b52a:	69e1      	ldr	r1, [r4, #28]
 810b52c:	b111      	cbz	r1, 810b534 <_reclaim_reent+0x50>
 810b52e:	4620      	mov	r0, r4
 810b530:	f000 f8b6 	bl	810b6a0 <_free_r>
 810b534:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 810b536:	b111      	cbz	r1, 810b53e <_reclaim_reent+0x5a>
 810b538:	4620      	mov	r0, r4
 810b53a:	f000 f8b1 	bl	810b6a0 <_free_r>
 810b53e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810b540:	b111      	cbz	r1, 810b548 <_reclaim_reent+0x64>
 810b542:	4620      	mov	r0, r4
 810b544:	f000 f8ac 	bl	810b6a0 <_free_r>
 810b548:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 810b54a:	b111      	cbz	r1, 810b552 <_reclaim_reent+0x6e>
 810b54c:	4620      	mov	r0, r4
 810b54e:	f000 f8a7 	bl	810b6a0 <_free_r>
 810b552:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 810b554:	b111      	cbz	r1, 810b55c <_reclaim_reent+0x78>
 810b556:	4620      	mov	r0, r4
 810b558:	f000 f8a2 	bl	810b6a0 <_free_r>
 810b55c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 810b55e:	b111      	cbz	r1, 810b566 <_reclaim_reent+0x82>
 810b560:	4620      	mov	r0, r4
 810b562:	f000 f89d 	bl	810b6a0 <_free_r>
 810b566:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 810b568:	b111      	cbz	r1, 810b570 <_reclaim_reent+0x8c>
 810b56a:	4620      	mov	r0, r4
 810b56c:	f000 f898 	bl	810b6a0 <_free_r>
 810b570:	6a23      	ldr	r3, [r4, #32]
 810b572:	b14b      	cbz	r3, 810b588 <_reclaim_reent+0xa4>
 810b574:	4620      	mov	r0, r4
 810b576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 810b57a:	4718      	bx	r3
 810b57c:	680e      	ldr	r6, [r1, #0]
 810b57e:	4620      	mov	r0, r4
 810b580:	f000 f88e 	bl	810b6a0 <_free_r>
 810b584:	4631      	mov	r1, r6
 810b586:	e7bb      	b.n	810b500 <_reclaim_reent+0x1c>
 810b588:	bd70      	pop	{r4, r5, r6, pc}
 810b58a:	bf00      	nop
 810b58c:	100000c8 	.word	0x100000c8

0810b590 <_lseek_r>:
 810b590:	b538      	push	{r3, r4, r5, lr}
 810b592:	4d07      	ldr	r5, [pc, #28]	@ (810b5b0 <_lseek_r+0x20>)
 810b594:	4604      	mov	r4, r0
 810b596:	4608      	mov	r0, r1
 810b598:	4611      	mov	r1, r2
 810b59a:	2200      	movs	r2, #0
 810b59c:	602a      	str	r2, [r5, #0]
 810b59e:	461a      	mov	r2, r3
 810b5a0:	f7f5 fb5b 	bl	8100c5a <_lseek>
 810b5a4:	1c43      	adds	r3, r0, #1
 810b5a6:	d102      	bne.n	810b5ae <_lseek_r+0x1e>
 810b5a8:	682b      	ldr	r3, [r5, #0]
 810b5aa:	b103      	cbz	r3, 810b5ae <_lseek_r+0x1e>
 810b5ac:	6023      	str	r3, [r4, #0]
 810b5ae:	bd38      	pop	{r3, r4, r5, pc}
 810b5b0:	10004e54 	.word	0x10004e54

0810b5b4 <_read_r>:
 810b5b4:	b538      	push	{r3, r4, r5, lr}
 810b5b6:	4d07      	ldr	r5, [pc, #28]	@ (810b5d4 <_read_r+0x20>)
 810b5b8:	4604      	mov	r4, r0
 810b5ba:	4608      	mov	r0, r1
 810b5bc:	4611      	mov	r1, r2
 810b5be:	2200      	movs	r2, #0
 810b5c0:	602a      	str	r2, [r5, #0]
 810b5c2:	461a      	mov	r2, r3
 810b5c4:	f7f5 fae9 	bl	8100b9a <_read>
 810b5c8:	1c43      	adds	r3, r0, #1
 810b5ca:	d102      	bne.n	810b5d2 <_read_r+0x1e>
 810b5cc:	682b      	ldr	r3, [r5, #0]
 810b5ce:	b103      	cbz	r3, 810b5d2 <_read_r+0x1e>
 810b5d0:	6023      	str	r3, [r4, #0]
 810b5d2:	bd38      	pop	{r3, r4, r5, pc}
 810b5d4:	10004e54 	.word	0x10004e54

0810b5d8 <_sbrk_r>:
 810b5d8:	b538      	push	{r3, r4, r5, lr}
 810b5da:	4d06      	ldr	r5, [pc, #24]	@ (810b5f4 <_sbrk_r+0x1c>)
 810b5dc:	2300      	movs	r3, #0
 810b5de:	4604      	mov	r4, r0
 810b5e0:	4608      	mov	r0, r1
 810b5e2:	602b      	str	r3, [r5, #0]
 810b5e4:	f7f5 fb46 	bl	8100c74 <_sbrk>
 810b5e8:	1c43      	adds	r3, r0, #1
 810b5ea:	d102      	bne.n	810b5f2 <_sbrk_r+0x1a>
 810b5ec:	682b      	ldr	r3, [r5, #0]
 810b5ee:	b103      	cbz	r3, 810b5f2 <_sbrk_r+0x1a>
 810b5f0:	6023      	str	r3, [r4, #0]
 810b5f2:	bd38      	pop	{r3, r4, r5, pc}
 810b5f4:	10004e54 	.word	0x10004e54

0810b5f8 <_write_r>:
 810b5f8:	b538      	push	{r3, r4, r5, lr}
 810b5fa:	4d07      	ldr	r5, [pc, #28]	@ (810b618 <_write_r+0x20>)
 810b5fc:	4604      	mov	r4, r0
 810b5fe:	4608      	mov	r0, r1
 810b600:	4611      	mov	r1, r2
 810b602:	2200      	movs	r2, #0
 810b604:	602a      	str	r2, [r5, #0]
 810b606:	461a      	mov	r2, r3
 810b608:	f7f5 fae4 	bl	8100bd4 <_write>
 810b60c:	1c43      	adds	r3, r0, #1
 810b60e:	d102      	bne.n	810b616 <_write_r+0x1e>
 810b610:	682b      	ldr	r3, [r5, #0]
 810b612:	b103      	cbz	r3, 810b616 <_write_r+0x1e>
 810b614:	6023      	str	r3, [r4, #0]
 810b616:	bd38      	pop	{r3, r4, r5, pc}
 810b618:	10004e54 	.word	0x10004e54

0810b61c <__errno>:
 810b61c:	4b01      	ldr	r3, [pc, #4]	@ (810b624 <__errno+0x8>)
 810b61e:	6818      	ldr	r0, [r3, #0]
 810b620:	4770      	bx	lr
 810b622:	bf00      	nop
 810b624:	100000c8 	.word	0x100000c8

0810b628 <__libc_init_array>:
 810b628:	b570      	push	{r4, r5, r6, lr}
 810b62a:	4d0d      	ldr	r5, [pc, #52]	@ (810b660 <__libc_init_array+0x38>)
 810b62c:	4c0d      	ldr	r4, [pc, #52]	@ (810b664 <__libc_init_array+0x3c>)
 810b62e:	1b64      	subs	r4, r4, r5
 810b630:	10a4      	asrs	r4, r4, #2
 810b632:	2600      	movs	r6, #0
 810b634:	42a6      	cmp	r6, r4
 810b636:	d109      	bne.n	810b64c <__libc_init_array+0x24>
 810b638:	4d0b      	ldr	r5, [pc, #44]	@ (810b668 <__libc_init_array+0x40>)
 810b63a:	4c0c      	ldr	r4, [pc, #48]	@ (810b66c <__libc_init_array+0x44>)
 810b63c:	f000 fefa 	bl	810c434 <_init>
 810b640:	1b64      	subs	r4, r4, r5
 810b642:	10a4      	asrs	r4, r4, #2
 810b644:	2600      	movs	r6, #0
 810b646:	42a6      	cmp	r6, r4
 810b648:	d105      	bne.n	810b656 <__libc_init_array+0x2e>
 810b64a:	bd70      	pop	{r4, r5, r6, pc}
 810b64c:	f855 3b04 	ldr.w	r3, [r5], #4
 810b650:	4798      	blx	r3
 810b652:	3601      	adds	r6, #1
 810b654:	e7ee      	b.n	810b634 <__libc_init_array+0xc>
 810b656:	f855 3b04 	ldr.w	r3, [r5], #4
 810b65a:	4798      	blx	r3
 810b65c:	3601      	adds	r6, #1
 810b65e:	e7f2      	b.n	810b646 <__libc_init_array+0x1e>
 810b660:	0810c7f0 	.word	0x0810c7f0
 810b664:	0810c7f0 	.word	0x0810c7f0
 810b668:	0810c7f0 	.word	0x0810c7f0
 810b66c:	0810c7f4 	.word	0x0810c7f4

0810b670 <__retarget_lock_init_recursive>:
 810b670:	4770      	bx	lr

0810b672 <__retarget_lock_acquire_recursive>:
 810b672:	4770      	bx	lr

0810b674 <__retarget_lock_release_recursive>:
 810b674:	4770      	bx	lr

0810b676 <memcpy>:
 810b676:	440a      	add	r2, r1
 810b678:	4291      	cmp	r1, r2
 810b67a:	f100 33ff 	add.w	r3, r0, #4294967295
 810b67e:	d100      	bne.n	810b682 <memcpy+0xc>
 810b680:	4770      	bx	lr
 810b682:	b510      	push	{r4, lr}
 810b684:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b688:	f803 4f01 	strb.w	r4, [r3, #1]!
 810b68c:	4291      	cmp	r1, r2
 810b68e:	d1f9      	bne.n	810b684 <memcpy+0xe>
 810b690:	bd10      	pop	{r4, pc}

0810b692 <abort>:
 810b692:	b508      	push	{r3, lr}
 810b694:	2006      	movs	r0, #6
 810b696:	f000 fdf7 	bl	810c288 <raise>
 810b69a:	2001      	movs	r0, #1
 810b69c:	f7f5 fa72 	bl	8100b84 <_exit>

0810b6a0 <_free_r>:
 810b6a0:	b538      	push	{r3, r4, r5, lr}
 810b6a2:	4605      	mov	r5, r0
 810b6a4:	2900      	cmp	r1, #0
 810b6a6:	d041      	beq.n	810b72c <_free_r+0x8c>
 810b6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b6ac:	1f0c      	subs	r4, r1, #4
 810b6ae:	2b00      	cmp	r3, #0
 810b6b0:	bfb8      	it	lt
 810b6b2:	18e4      	addlt	r4, r4, r3
 810b6b4:	f7ff fd96 	bl	810b1e4 <__malloc_lock>
 810b6b8:	4a1d      	ldr	r2, [pc, #116]	@ (810b730 <_free_r+0x90>)
 810b6ba:	6813      	ldr	r3, [r2, #0]
 810b6bc:	b933      	cbnz	r3, 810b6cc <_free_r+0x2c>
 810b6be:	6063      	str	r3, [r4, #4]
 810b6c0:	6014      	str	r4, [r2, #0]
 810b6c2:	4628      	mov	r0, r5
 810b6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b6c8:	f7ff bd92 	b.w	810b1f0 <__malloc_unlock>
 810b6cc:	42a3      	cmp	r3, r4
 810b6ce:	d908      	bls.n	810b6e2 <_free_r+0x42>
 810b6d0:	6820      	ldr	r0, [r4, #0]
 810b6d2:	1821      	adds	r1, r4, r0
 810b6d4:	428b      	cmp	r3, r1
 810b6d6:	bf01      	itttt	eq
 810b6d8:	6819      	ldreq	r1, [r3, #0]
 810b6da:	685b      	ldreq	r3, [r3, #4]
 810b6dc:	1809      	addeq	r1, r1, r0
 810b6de:	6021      	streq	r1, [r4, #0]
 810b6e0:	e7ed      	b.n	810b6be <_free_r+0x1e>
 810b6e2:	461a      	mov	r2, r3
 810b6e4:	685b      	ldr	r3, [r3, #4]
 810b6e6:	b10b      	cbz	r3, 810b6ec <_free_r+0x4c>
 810b6e8:	42a3      	cmp	r3, r4
 810b6ea:	d9fa      	bls.n	810b6e2 <_free_r+0x42>
 810b6ec:	6811      	ldr	r1, [r2, #0]
 810b6ee:	1850      	adds	r0, r2, r1
 810b6f0:	42a0      	cmp	r0, r4
 810b6f2:	d10b      	bne.n	810b70c <_free_r+0x6c>
 810b6f4:	6820      	ldr	r0, [r4, #0]
 810b6f6:	4401      	add	r1, r0
 810b6f8:	1850      	adds	r0, r2, r1
 810b6fa:	4283      	cmp	r3, r0
 810b6fc:	6011      	str	r1, [r2, #0]
 810b6fe:	d1e0      	bne.n	810b6c2 <_free_r+0x22>
 810b700:	6818      	ldr	r0, [r3, #0]
 810b702:	685b      	ldr	r3, [r3, #4]
 810b704:	6053      	str	r3, [r2, #4]
 810b706:	4408      	add	r0, r1
 810b708:	6010      	str	r0, [r2, #0]
 810b70a:	e7da      	b.n	810b6c2 <_free_r+0x22>
 810b70c:	d902      	bls.n	810b714 <_free_r+0x74>
 810b70e:	230c      	movs	r3, #12
 810b710:	602b      	str	r3, [r5, #0]
 810b712:	e7d6      	b.n	810b6c2 <_free_r+0x22>
 810b714:	6820      	ldr	r0, [r4, #0]
 810b716:	1821      	adds	r1, r4, r0
 810b718:	428b      	cmp	r3, r1
 810b71a:	bf04      	itt	eq
 810b71c:	6819      	ldreq	r1, [r3, #0]
 810b71e:	685b      	ldreq	r3, [r3, #4]
 810b720:	6063      	str	r3, [r4, #4]
 810b722:	bf04      	itt	eq
 810b724:	1809      	addeq	r1, r1, r0
 810b726:	6021      	streq	r1, [r4, #0]
 810b728:	6054      	str	r4, [r2, #4]
 810b72a:	e7ca      	b.n	810b6c2 <_free_r+0x22>
 810b72c:	bd38      	pop	{r3, r4, r5, pc}
 810b72e:	bf00      	nop
 810b730:	10004d14 	.word	0x10004d14

0810b734 <__ssputs_r>:
 810b734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b738:	688e      	ldr	r6, [r1, #8]
 810b73a:	461f      	mov	r7, r3
 810b73c:	42be      	cmp	r6, r7
 810b73e:	680b      	ldr	r3, [r1, #0]
 810b740:	4682      	mov	sl, r0
 810b742:	460c      	mov	r4, r1
 810b744:	4690      	mov	r8, r2
 810b746:	d82d      	bhi.n	810b7a4 <__ssputs_r+0x70>
 810b748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810b74c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 810b750:	d026      	beq.n	810b7a0 <__ssputs_r+0x6c>
 810b752:	6965      	ldr	r5, [r4, #20]
 810b754:	6909      	ldr	r1, [r1, #16]
 810b756:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810b75a:	eba3 0901 	sub.w	r9, r3, r1
 810b75e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810b762:	1c7b      	adds	r3, r7, #1
 810b764:	444b      	add	r3, r9
 810b766:	106d      	asrs	r5, r5, #1
 810b768:	429d      	cmp	r5, r3
 810b76a:	bf38      	it	cc
 810b76c:	461d      	movcc	r5, r3
 810b76e:	0553      	lsls	r3, r2, #21
 810b770:	d527      	bpl.n	810b7c2 <__ssputs_r+0x8e>
 810b772:	4629      	mov	r1, r5
 810b774:	f7ff fcb6 	bl	810b0e4 <_malloc_r>
 810b778:	4606      	mov	r6, r0
 810b77a:	b360      	cbz	r0, 810b7d6 <__ssputs_r+0xa2>
 810b77c:	6921      	ldr	r1, [r4, #16]
 810b77e:	464a      	mov	r2, r9
 810b780:	f7ff ff79 	bl	810b676 <memcpy>
 810b784:	89a3      	ldrh	r3, [r4, #12]
 810b786:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 810b78a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810b78e:	81a3      	strh	r3, [r4, #12]
 810b790:	6126      	str	r6, [r4, #16]
 810b792:	6165      	str	r5, [r4, #20]
 810b794:	444e      	add	r6, r9
 810b796:	eba5 0509 	sub.w	r5, r5, r9
 810b79a:	6026      	str	r6, [r4, #0]
 810b79c:	60a5      	str	r5, [r4, #8]
 810b79e:	463e      	mov	r6, r7
 810b7a0:	42be      	cmp	r6, r7
 810b7a2:	d900      	bls.n	810b7a6 <__ssputs_r+0x72>
 810b7a4:	463e      	mov	r6, r7
 810b7a6:	6820      	ldr	r0, [r4, #0]
 810b7a8:	4632      	mov	r2, r6
 810b7aa:	4641      	mov	r1, r8
 810b7ac:	f000 fd2a 	bl	810c204 <memmove>
 810b7b0:	68a3      	ldr	r3, [r4, #8]
 810b7b2:	1b9b      	subs	r3, r3, r6
 810b7b4:	60a3      	str	r3, [r4, #8]
 810b7b6:	6823      	ldr	r3, [r4, #0]
 810b7b8:	4433      	add	r3, r6
 810b7ba:	6023      	str	r3, [r4, #0]
 810b7bc:	2000      	movs	r0, #0
 810b7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b7c2:	462a      	mov	r2, r5
 810b7c4:	f000 fd7c 	bl	810c2c0 <_realloc_r>
 810b7c8:	4606      	mov	r6, r0
 810b7ca:	2800      	cmp	r0, #0
 810b7cc:	d1e0      	bne.n	810b790 <__ssputs_r+0x5c>
 810b7ce:	6921      	ldr	r1, [r4, #16]
 810b7d0:	4650      	mov	r0, sl
 810b7d2:	f7ff ff65 	bl	810b6a0 <_free_r>
 810b7d6:	230c      	movs	r3, #12
 810b7d8:	f8ca 3000 	str.w	r3, [sl]
 810b7dc:	89a3      	ldrh	r3, [r4, #12]
 810b7de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810b7e2:	81a3      	strh	r3, [r4, #12]
 810b7e4:	f04f 30ff 	mov.w	r0, #4294967295
 810b7e8:	e7e9      	b.n	810b7be <__ssputs_r+0x8a>
	...

0810b7ec <_svfiprintf_r>:
 810b7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b7f0:	4698      	mov	r8, r3
 810b7f2:	898b      	ldrh	r3, [r1, #12]
 810b7f4:	061b      	lsls	r3, r3, #24
 810b7f6:	b09d      	sub	sp, #116	@ 0x74
 810b7f8:	4607      	mov	r7, r0
 810b7fa:	460d      	mov	r5, r1
 810b7fc:	4614      	mov	r4, r2
 810b7fe:	d510      	bpl.n	810b822 <_svfiprintf_r+0x36>
 810b800:	690b      	ldr	r3, [r1, #16]
 810b802:	b973      	cbnz	r3, 810b822 <_svfiprintf_r+0x36>
 810b804:	2140      	movs	r1, #64	@ 0x40
 810b806:	f7ff fc6d 	bl	810b0e4 <_malloc_r>
 810b80a:	6028      	str	r0, [r5, #0]
 810b80c:	6128      	str	r0, [r5, #16]
 810b80e:	b930      	cbnz	r0, 810b81e <_svfiprintf_r+0x32>
 810b810:	230c      	movs	r3, #12
 810b812:	603b      	str	r3, [r7, #0]
 810b814:	f04f 30ff 	mov.w	r0, #4294967295
 810b818:	b01d      	add	sp, #116	@ 0x74
 810b81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b81e:	2340      	movs	r3, #64	@ 0x40
 810b820:	616b      	str	r3, [r5, #20]
 810b822:	2300      	movs	r3, #0
 810b824:	9309      	str	r3, [sp, #36]	@ 0x24
 810b826:	2320      	movs	r3, #32
 810b828:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810b82c:	f8cd 800c 	str.w	r8, [sp, #12]
 810b830:	2330      	movs	r3, #48	@ 0x30
 810b832:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 810b9d0 <_svfiprintf_r+0x1e4>
 810b836:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810b83a:	f04f 0901 	mov.w	r9, #1
 810b83e:	4623      	mov	r3, r4
 810b840:	469a      	mov	sl, r3
 810b842:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b846:	b10a      	cbz	r2, 810b84c <_svfiprintf_r+0x60>
 810b848:	2a25      	cmp	r2, #37	@ 0x25
 810b84a:	d1f9      	bne.n	810b840 <_svfiprintf_r+0x54>
 810b84c:	ebba 0b04 	subs.w	fp, sl, r4
 810b850:	d00b      	beq.n	810b86a <_svfiprintf_r+0x7e>
 810b852:	465b      	mov	r3, fp
 810b854:	4622      	mov	r2, r4
 810b856:	4629      	mov	r1, r5
 810b858:	4638      	mov	r0, r7
 810b85a:	f7ff ff6b 	bl	810b734 <__ssputs_r>
 810b85e:	3001      	adds	r0, #1
 810b860:	f000 80a7 	beq.w	810b9b2 <_svfiprintf_r+0x1c6>
 810b864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810b866:	445a      	add	r2, fp
 810b868:	9209      	str	r2, [sp, #36]	@ 0x24
 810b86a:	f89a 3000 	ldrb.w	r3, [sl]
 810b86e:	2b00      	cmp	r3, #0
 810b870:	f000 809f 	beq.w	810b9b2 <_svfiprintf_r+0x1c6>
 810b874:	2300      	movs	r3, #0
 810b876:	f04f 32ff 	mov.w	r2, #4294967295
 810b87a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810b87e:	f10a 0a01 	add.w	sl, sl, #1
 810b882:	9304      	str	r3, [sp, #16]
 810b884:	9307      	str	r3, [sp, #28]
 810b886:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810b88a:	931a      	str	r3, [sp, #104]	@ 0x68
 810b88c:	4654      	mov	r4, sl
 810b88e:	2205      	movs	r2, #5
 810b890:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b894:	484e      	ldr	r0, [pc, #312]	@ (810b9d0 <_svfiprintf_r+0x1e4>)
 810b896:	f7f4 fd3b 	bl	8100310 <memchr>
 810b89a:	9a04      	ldr	r2, [sp, #16]
 810b89c:	b9d8      	cbnz	r0, 810b8d6 <_svfiprintf_r+0xea>
 810b89e:	06d0      	lsls	r0, r2, #27
 810b8a0:	bf44      	itt	mi
 810b8a2:	2320      	movmi	r3, #32
 810b8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810b8a8:	0711      	lsls	r1, r2, #28
 810b8aa:	bf44      	itt	mi
 810b8ac:	232b      	movmi	r3, #43	@ 0x2b
 810b8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810b8b2:	f89a 3000 	ldrb.w	r3, [sl]
 810b8b6:	2b2a      	cmp	r3, #42	@ 0x2a
 810b8b8:	d015      	beq.n	810b8e6 <_svfiprintf_r+0xfa>
 810b8ba:	9a07      	ldr	r2, [sp, #28]
 810b8bc:	4654      	mov	r4, sl
 810b8be:	2000      	movs	r0, #0
 810b8c0:	f04f 0c0a 	mov.w	ip, #10
 810b8c4:	4621      	mov	r1, r4
 810b8c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 810b8ca:	3b30      	subs	r3, #48	@ 0x30
 810b8cc:	2b09      	cmp	r3, #9
 810b8ce:	d94b      	bls.n	810b968 <_svfiprintf_r+0x17c>
 810b8d0:	b1b0      	cbz	r0, 810b900 <_svfiprintf_r+0x114>
 810b8d2:	9207      	str	r2, [sp, #28]
 810b8d4:	e014      	b.n	810b900 <_svfiprintf_r+0x114>
 810b8d6:	eba0 0308 	sub.w	r3, r0, r8
 810b8da:	fa09 f303 	lsl.w	r3, r9, r3
 810b8de:	4313      	orrs	r3, r2
 810b8e0:	9304      	str	r3, [sp, #16]
 810b8e2:	46a2      	mov	sl, r4
 810b8e4:	e7d2      	b.n	810b88c <_svfiprintf_r+0xa0>
 810b8e6:	9b03      	ldr	r3, [sp, #12]
 810b8e8:	1d19      	adds	r1, r3, #4
 810b8ea:	681b      	ldr	r3, [r3, #0]
 810b8ec:	9103      	str	r1, [sp, #12]
 810b8ee:	2b00      	cmp	r3, #0
 810b8f0:	bfbb      	ittet	lt
 810b8f2:	425b      	neglt	r3, r3
 810b8f4:	f042 0202 	orrlt.w	r2, r2, #2
 810b8f8:	9307      	strge	r3, [sp, #28]
 810b8fa:	9307      	strlt	r3, [sp, #28]
 810b8fc:	bfb8      	it	lt
 810b8fe:	9204      	strlt	r2, [sp, #16]
 810b900:	7823      	ldrb	r3, [r4, #0]
 810b902:	2b2e      	cmp	r3, #46	@ 0x2e
 810b904:	d10a      	bne.n	810b91c <_svfiprintf_r+0x130>
 810b906:	7863      	ldrb	r3, [r4, #1]
 810b908:	2b2a      	cmp	r3, #42	@ 0x2a
 810b90a:	d132      	bne.n	810b972 <_svfiprintf_r+0x186>
 810b90c:	9b03      	ldr	r3, [sp, #12]
 810b90e:	1d1a      	adds	r2, r3, #4
 810b910:	681b      	ldr	r3, [r3, #0]
 810b912:	9203      	str	r2, [sp, #12]
 810b914:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810b918:	3402      	adds	r4, #2
 810b91a:	9305      	str	r3, [sp, #20]
 810b91c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 810b9e0 <_svfiprintf_r+0x1f4>
 810b920:	7821      	ldrb	r1, [r4, #0]
 810b922:	2203      	movs	r2, #3
 810b924:	4650      	mov	r0, sl
 810b926:	f7f4 fcf3 	bl	8100310 <memchr>
 810b92a:	b138      	cbz	r0, 810b93c <_svfiprintf_r+0x150>
 810b92c:	9b04      	ldr	r3, [sp, #16]
 810b92e:	eba0 000a 	sub.w	r0, r0, sl
 810b932:	2240      	movs	r2, #64	@ 0x40
 810b934:	4082      	lsls	r2, r0
 810b936:	4313      	orrs	r3, r2
 810b938:	3401      	adds	r4, #1
 810b93a:	9304      	str	r3, [sp, #16]
 810b93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b940:	4824      	ldr	r0, [pc, #144]	@ (810b9d4 <_svfiprintf_r+0x1e8>)
 810b942:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810b946:	2206      	movs	r2, #6
 810b948:	f7f4 fce2 	bl	8100310 <memchr>
 810b94c:	2800      	cmp	r0, #0
 810b94e:	d036      	beq.n	810b9be <_svfiprintf_r+0x1d2>
 810b950:	4b21      	ldr	r3, [pc, #132]	@ (810b9d8 <_svfiprintf_r+0x1ec>)
 810b952:	bb1b      	cbnz	r3, 810b99c <_svfiprintf_r+0x1b0>
 810b954:	9b03      	ldr	r3, [sp, #12]
 810b956:	3307      	adds	r3, #7
 810b958:	f023 0307 	bic.w	r3, r3, #7
 810b95c:	3308      	adds	r3, #8
 810b95e:	9303      	str	r3, [sp, #12]
 810b960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b962:	4433      	add	r3, r6
 810b964:	9309      	str	r3, [sp, #36]	@ 0x24
 810b966:	e76a      	b.n	810b83e <_svfiprintf_r+0x52>
 810b968:	fb0c 3202 	mla	r2, ip, r2, r3
 810b96c:	460c      	mov	r4, r1
 810b96e:	2001      	movs	r0, #1
 810b970:	e7a8      	b.n	810b8c4 <_svfiprintf_r+0xd8>
 810b972:	2300      	movs	r3, #0
 810b974:	3401      	adds	r4, #1
 810b976:	9305      	str	r3, [sp, #20]
 810b978:	4619      	mov	r1, r3
 810b97a:	f04f 0c0a 	mov.w	ip, #10
 810b97e:	4620      	mov	r0, r4
 810b980:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b984:	3a30      	subs	r2, #48	@ 0x30
 810b986:	2a09      	cmp	r2, #9
 810b988:	d903      	bls.n	810b992 <_svfiprintf_r+0x1a6>
 810b98a:	2b00      	cmp	r3, #0
 810b98c:	d0c6      	beq.n	810b91c <_svfiprintf_r+0x130>
 810b98e:	9105      	str	r1, [sp, #20]
 810b990:	e7c4      	b.n	810b91c <_svfiprintf_r+0x130>
 810b992:	fb0c 2101 	mla	r1, ip, r1, r2
 810b996:	4604      	mov	r4, r0
 810b998:	2301      	movs	r3, #1
 810b99a:	e7f0      	b.n	810b97e <_svfiprintf_r+0x192>
 810b99c:	ab03      	add	r3, sp, #12
 810b99e:	9300      	str	r3, [sp, #0]
 810b9a0:	462a      	mov	r2, r5
 810b9a2:	4b0e      	ldr	r3, [pc, #56]	@ (810b9dc <_svfiprintf_r+0x1f0>)
 810b9a4:	a904      	add	r1, sp, #16
 810b9a6:	4638      	mov	r0, r7
 810b9a8:	f3af 8000 	nop.w
 810b9ac:	1c42      	adds	r2, r0, #1
 810b9ae:	4606      	mov	r6, r0
 810b9b0:	d1d6      	bne.n	810b960 <_svfiprintf_r+0x174>
 810b9b2:	89ab      	ldrh	r3, [r5, #12]
 810b9b4:	065b      	lsls	r3, r3, #25
 810b9b6:	f53f af2d 	bmi.w	810b814 <_svfiprintf_r+0x28>
 810b9ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810b9bc:	e72c      	b.n	810b818 <_svfiprintf_r+0x2c>
 810b9be:	ab03      	add	r3, sp, #12
 810b9c0:	9300      	str	r3, [sp, #0]
 810b9c2:	462a      	mov	r2, r5
 810b9c4:	4b05      	ldr	r3, [pc, #20]	@ (810b9dc <_svfiprintf_r+0x1f0>)
 810b9c6:	a904      	add	r1, sp, #16
 810b9c8:	4638      	mov	r0, r7
 810b9ca:	f000 f9bb 	bl	810bd44 <_printf_i>
 810b9ce:	e7ed      	b.n	810b9ac <_svfiprintf_r+0x1c0>
 810b9d0:	0810c7b2 	.word	0x0810c7b2
 810b9d4:	0810c7bc 	.word	0x0810c7bc
 810b9d8:	00000000 	.word	0x00000000
 810b9dc:	0810b735 	.word	0x0810b735
 810b9e0:	0810c7b8 	.word	0x0810c7b8

0810b9e4 <__sfputc_r>:
 810b9e4:	6893      	ldr	r3, [r2, #8]
 810b9e6:	3b01      	subs	r3, #1
 810b9e8:	2b00      	cmp	r3, #0
 810b9ea:	b410      	push	{r4}
 810b9ec:	6093      	str	r3, [r2, #8]
 810b9ee:	da08      	bge.n	810ba02 <__sfputc_r+0x1e>
 810b9f0:	6994      	ldr	r4, [r2, #24]
 810b9f2:	42a3      	cmp	r3, r4
 810b9f4:	db01      	blt.n	810b9fa <__sfputc_r+0x16>
 810b9f6:	290a      	cmp	r1, #10
 810b9f8:	d103      	bne.n	810ba02 <__sfputc_r+0x1e>
 810b9fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 810b9fe:	f000 bb6d 	b.w	810c0dc <__swbuf_r>
 810ba02:	6813      	ldr	r3, [r2, #0]
 810ba04:	1c58      	adds	r0, r3, #1
 810ba06:	6010      	str	r0, [r2, #0]
 810ba08:	7019      	strb	r1, [r3, #0]
 810ba0a:	4608      	mov	r0, r1
 810ba0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 810ba10:	4770      	bx	lr

0810ba12 <__sfputs_r>:
 810ba12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ba14:	4606      	mov	r6, r0
 810ba16:	460f      	mov	r7, r1
 810ba18:	4614      	mov	r4, r2
 810ba1a:	18d5      	adds	r5, r2, r3
 810ba1c:	42ac      	cmp	r4, r5
 810ba1e:	d101      	bne.n	810ba24 <__sfputs_r+0x12>
 810ba20:	2000      	movs	r0, #0
 810ba22:	e007      	b.n	810ba34 <__sfputs_r+0x22>
 810ba24:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ba28:	463a      	mov	r2, r7
 810ba2a:	4630      	mov	r0, r6
 810ba2c:	f7ff ffda 	bl	810b9e4 <__sfputc_r>
 810ba30:	1c43      	adds	r3, r0, #1
 810ba32:	d1f3      	bne.n	810ba1c <__sfputs_r+0xa>
 810ba34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810ba38 <_vfiprintf_r>:
 810ba38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ba3c:	460d      	mov	r5, r1
 810ba3e:	b09d      	sub	sp, #116	@ 0x74
 810ba40:	4614      	mov	r4, r2
 810ba42:	4698      	mov	r8, r3
 810ba44:	4606      	mov	r6, r0
 810ba46:	b118      	cbz	r0, 810ba50 <_vfiprintf_r+0x18>
 810ba48:	6a03      	ldr	r3, [r0, #32]
 810ba4a:	b90b      	cbnz	r3, 810ba50 <_vfiprintf_r+0x18>
 810ba4c:	f7ff fc62 	bl	810b314 <__sinit>
 810ba50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810ba52:	07d9      	lsls	r1, r3, #31
 810ba54:	d405      	bmi.n	810ba62 <_vfiprintf_r+0x2a>
 810ba56:	89ab      	ldrh	r3, [r5, #12]
 810ba58:	059a      	lsls	r2, r3, #22
 810ba5a:	d402      	bmi.n	810ba62 <_vfiprintf_r+0x2a>
 810ba5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810ba5e:	f7ff fe08 	bl	810b672 <__retarget_lock_acquire_recursive>
 810ba62:	89ab      	ldrh	r3, [r5, #12]
 810ba64:	071b      	lsls	r3, r3, #28
 810ba66:	d501      	bpl.n	810ba6c <_vfiprintf_r+0x34>
 810ba68:	692b      	ldr	r3, [r5, #16]
 810ba6a:	b99b      	cbnz	r3, 810ba94 <_vfiprintf_r+0x5c>
 810ba6c:	4629      	mov	r1, r5
 810ba6e:	4630      	mov	r0, r6
 810ba70:	f000 fb72 	bl	810c158 <__swsetup_r>
 810ba74:	b170      	cbz	r0, 810ba94 <_vfiprintf_r+0x5c>
 810ba76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810ba78:	07dc      	lsls	r4, r3, #31
 810ba7a:	d504      	bpl.n	810ba86 <_vfiprintf_r+0x4e>
 810ba7c:	f04f 30ff 	mov.w	r0, #4294967295
 810ba80:	b01d      	add	sp, #116	@ 0x74
 810ba82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ba86:	89ab      	ldrh	r3, [r5, #12]
 810ba88:	0598      	lsls	r0, r3, #22
 810ba8a:	d4f7      	bmi.n	810ba7c <_vfiprintf_r+0x44>
 810ba8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810ba8e:	f7ff fdf1 	bl	810b674 <__retarget_lock_release_recursive>
 810ba92:	e7f3      	b.n	810ba7c <_vfiprintf_r+0x44>
 810ba94:	2300      	movs	r3, #0
 810ba96:	9309      	str	r3, [sp, #36]	@ 0x24
 810ba98:	2320      	movs	r3, #32
 810ba9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810ba9e:	f8cd 800c 	str.w	r8, [sp, #12]
 810baa2:	2330      	movs	r3, #48	@ 0x30
 810baa4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810bc54 <_vfiprintf_r+0x21c>
 810baa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810baac:	f04f 0901 	mov.w	r9, #1
 810bab0:	4623      	mov	r3, r4
 810bab2:	469a      	mov	sl, r3
 810bab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 810bab8:	b10a      	cbz	r2, 810babe <_vfiprintf_r+0x86>
 810baba:	2a25      	cmp	r2, #37	@ 0x25
 810babc:	d1f9      	bne.n	810bab2 <_vfiprintf_r+0x7a>
 810babe:	ebba 0b04 	subs.w	fp, sl, r4
 810bac2:	d00b      	beq.n	810badc <_vfiprintf_r+0xa4>
 810bac4:	465b      	mov	r3, fp
 810bac6:	4622      	mov	r2, r4
 810bac8:	4629      	mov	r1, r5
 810baca:	4630      	mov	r0, r6
 810bacc:	f7ff ffa1 	bl	810ba12 <__sfputs_r>
 810bad0:	3001      	adds	r0, #1
 810bad2:	f000 80a7 	beq.w	810bc24 <_vfiprintf_r+0x1ec>
 810bad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810bad8:	445a      	add	r2, fp
 810bada:	9209      	str	r2, [sp, #36]	@ 0x24
 810badc:	f89a 3000 	ldrb.w	r3, [sl]
 810bae0:	2b00      	cmp	r3, #0
 810bae2:	f000 809f 	beq.w	810bc24 <_vfiprintf_r+0x1ec>
 810bae6:	2300      	movs	r3, #0
 810bae8:	f04f 32ff 	mov.w	r2, #4294967295
 810baec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810baf0:	f10a 0a01 	add.w	sl, sl, #1
 810baf4:	9304      	str	r3, [sp, #16]
 810baf6:	9307      	str	r3, [sp, #28]
 810baf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810bafc:	931a      	str	r3, [sp, #104]	@ 0x68
 810bafe:	4654      	mov	r4, sl
 810bb00:	2205      	movs	r2, #5
 810bb02:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bb06:	4853      	ldr	r0, [pc, #332]	@ (810bc54 <_vfiprintf_r+0x21c>)
 810bb08:	f7f4 fc02 	bl	8100310 <memchr>
 810bb0c:	9a04      	ldr	r2, [sp, #16]
 810bb0e:	b9d8      	cbnz	r0, 810bb48 <_vfiprintf_r+0x110>
 810bb10:	06d1      	lsls	r1, r2, #27
 810bb12:	bf44      	itt	mi
 810bb14:	2320      	movmi	r3, #32
 810bb16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810bb1a:	0713      	lsls	r3, r2, #28
 810bb1c:	bf44      	itt	mi
 810bb1e:	232b      	movmi	r3, #43	@ 0x2b
 810bb20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810bb24:	f89a 3000 	ldrb.w	r3, [sl]
 810bb28:	2b2a      	cmp	r3, #42	@ 0x2a
 810bb2a:	d015      	beq.n	810bb58 <_vfiprintf_r+0x120>
 810bb2c:	9a07      	ldr	r2, [sp, #28]
 810bb2e:	4654      	mov	r4, sl
 810bb30:	2000      	movs	r0, #0
 810bb32:	f04f 0c0a 	mov.w	ip, #10
 810bb36:	4621      	mov	r1, r4
 810bb38:	f811 3b01 	ldrb.w	r3, [r1], #1
 810bb3c:	3b30      	subs	r3, #48	@ 0x30
 810bb3e:	2b09      	cmp	r3, #9
 810bb40:	d94b      	bls.n	810bbda <_vfiprintf_r+0x1a2>
 810bb42:	b1b0      	cbz	r0, 810bb72 <_vfiprintf_r+0x13a>
 810bb44:	9207      	str	r2, [sp, #28]
 810bb46:	e014      	b.n	810bb72 <_vfiprintf_r+0x13a>
 810bb48:	eba0 0308 	sub.w	r3, r0, r8
 810bb4c:	fa09 f303 	lsl.w	r3, r9, r3
 810bb50:	4313      	orrs	r3, r2
 810bb52:	9304      	str	r3, [sp, #16]
 810bb54:	46a2      	mov	sl, r4
 810bb56:	e7d2      	b.n	810bafe <_vfiprintf_r+0xc6>
 810bb58:	9b03      	ldr	r3, [sp, #12]
 810bb5a:	1d19      	adds	r1, r3, #4
 810bb5c:	681b      	ldr	r3, [r3, #0]
 810bb5e:	9103      	str	r1, [sp, #12]
 810bb60:	2b00      	cmp	r3, #0
 810bb62:	bfbb      	ittet	lt
 810bb64:	425b      	neglt	r3, r3
 810bb66:	f042 0202 	orrlt.w	r2, r2, #2
 810bb6a:	9307      	strge	r3, [sp, #28]
 810bb6c:	9307      	strlt	r3, [sp, #28]
 810bb6e:	bfb8      	it	lt
 810bb70:	9204      	strlt	r2, [sp, #16]
 810bb72:	7823      	ldrb	r3, [r4, #0]
 810bb74:	2b2e      	cmp	r3, #46	@ 0x2e
 810bb76:	d10a      	bne.n	810bb8e <_vfiprintf_r+0x156>
 810bb78:	7863      	ldrb	r3, [r4, #1]
 810bb7a:	2b2a      	cmp	r3, #42	@ 0x2a
 810bb7c:	d132      	bne.n	810bbe4 <_vfiprintf_r+0x1ac>
 810bb7e:	9b03      	ldr	r3, [sp, #12]
 810bb80:	1d1a      	adds	r2, r3, #4
 810bb82:	681b      	ldr	r3, [r3, #0]
 810bb84:	9203      	str	r2, [sp, #12]
 810bb86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810bb8a:	3402      	adds	r4, #2
 810bb8c:	9305      	str	r3, [sp, #20]
 810bb8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810bc64 <_vfiprintf_r+0x22c>
 810bb92:	7821      	ldrb	r1, [r4, #0]
 810bb94:	2203      	movs	r2, #3
 810bb96:	4650      	mov	r0, sl
 810bb98:	f7f4 fbba 	bl	8100310 <memchr>
 810bb9c:	b138      	cbz	r0, 810bbae <_vfiprintf_r+0x176>
 810bb9e:	9b04      	ldr	r3, [sp, #16]
 810bba0:	eba0 000a 	sub.w	r0, r0, sl
 810bba4:	2240      	movs	r2, #64	@ 0x40
 810bba6:	4082      	lsls	r2, r0
 810bba8:	4313      	orrs	r3, r2
 810bbaa:	3401      	adds	r4, #1
 810bbac:	9304      	str	r3, [sp, #16]
 810bbae:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bbb2:	4829      	ldr	r0, [pc, #164]	@ (810bc58 <_vfiprintf_r+0x220>)
 810bbb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810bbb8:	2206      	movs	r2, #6
 810bbba:	f7f4 fba9 	bl	8100310 <memchr>
 810bbbe:	2800      	cmp	r0, #0
 810bbc0:	d03f      	beq.n	810bc42 <_vfiprintf_r+0x20a>
 810bbc2:	4b26      	ldr	r3, [pc, #152]	@ (810bc5c <_vfiprintf_r+0x224>)
 810bbc4:	bb1b      	cbnz	r3, 810bc0e <_vfiprintf_r+0x1d6>
 810bbc6:	9b03      	ldr	r3, [sp, #12]
 810bbc8:	3307      	adds	r3, #7
 810bbca:	f023 0307 	bic.w	r3, r3, #7
 810bbce:	3308      	adds	r3, #8
 810bbd0:	9303      	str	r3, [sp, #12]
 810bbd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810bbd4:	443b      	add	r3, r7
 810bbd6:	9309      	str	r3, [sp, #36]	@ 0x24
 810bbd8:	e76a      	b.n	810bab0 <_vfiprintf_r+0x78>
 810bbda:	fb0c 3202 	mla	r2, ip, r2, r3
 810bbde:	460c      	mov	r4, r1
 810bbe0:	2001      	movs	r0, #1
 810bbe2:	e7a8      	b.n	810bb36 <_vfiprintf_r+0xfe>
 810bbe4:	2300      	movs	r3, #0
 810bbe6:	3401      	adds	r4, #1
 810bbe8:	9305      	str	r3, [sp, #20]
 810bbea:	4619      	mov	r1, r3
 810bbec:	f04f 0c0a 	mov.w	ip, #10
 810bbf0:	4620      	mov	r0, r4
 810bbf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 810bbf6:	3a30      	subs	r2, #48	@ 0x30
 810bbf8:	2a09      	cmp	r2, #9
 810bbfa:	d903      	bls.n	810bc04 <_vfiprintf_r+0x1cc>
 810bbfc:	2b00      	cmp	r3, #0
 810bbfe:	d0c6      	beq.n	810bb8e <_vfiprintf_r+0x156>
 810bc00:	9105      	str	r1, [sp, #20]
 810bc02:	e7c4      	b.n	810bb8e <_vfiprintf_r+0x156>
 810bc04:	fb0c 2101 	mla	r1, ip, r1, r2
 810bc08:	4604      	mov	r4, r0
 810bc0a:	2301      	movs	r3, #1
 810bc0c:	e7f0      	b.n	810bbf0 <_vfiprintf_r+0x1b8>
 810bc0e:	ab03      	add	r3, sp, #12
 810bc10:	9300      	str	r3, [sp, #0]
 810bc12:	462a      	mov	r2, r5
 810bc14:	4b12      	ldr	r3, [pc, #72]	@ (810bc60 <_vfiprintf_r+0x228>)
 810bc16:	a904      	add	r1, sp, #16
 810bc18:	4630      	mov	r0, r6
 810bc1a:	f3af 8000 	nop.w
 810bc1e:	4607      	mov	r7, r0
 810bc20:	1c78      	adds	r0, r7, #1
 810bc22:	d1d6      	bne.n	810bbd2 <_vfiprintf_r+0x19a>
 810bc24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810bc26:	07d9      	lsls	r1, r3, #31
 810bc28:	d405      	bmi.n	810bc36 <_vfiprintf_r+0x1fe>
 810bc2a:	89ab      	ldrh	r3, [r5, #12]
 810bc2c:	059a      	lsls	r2, r3, #22
 810bc2e:	d402      	bmi.n	810bc36 <_vfiprintf_r+0x1fe>
 810bc30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810bc32:	f7ff fd1f 	bl	810b674 <__retarget_lock_release_recursive>
 810bc36:	89ab      	ldrh	r3, [r5, #12]
 810bc38:	065b      	lsls	r3, r3, #25
 810bc3a:	f53f af1f 	bmi.w	810ba7c <_vfiprintf_r+0x44>
 810bc3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810bc40:	e71e      	b.n	810ba80 <_vfiprintf_r+0x48>
 810bc42:	ab03      	add	r3, sp, #12
 810bc44:	9300      	str	r3, [sp, #0]
 810bc46:	462a      	mov	r2, r5
 810bc48:	4b05      	ldr	r3, [pc, #20]	@ (810bc60 <_vfiprintf_r+0x228>)
 810bc4a:	a904      	add	r1, sp, #16
 810bc4c:	4630      	mov	r0, r6
 810bc4e:	f000 f879 	bl	810bd44 <_printf_i>
 810bc52:	e7e4      	b.n	810bc1e <_vfiprintf_r+0x1e6>
 810bc54:	0810c7b2 	.word	0x0810c7b2
 810bc58:	0810c7bc 	.word	0x0810c7bc
 810bc5c:	00000000 	.word	0x00000000
 810bc60:	0810ba13 	.word	0x0810ba13
 810bc64:	0810c7b8 	.word	0x0810c7b8

0810bc68 <_printf_common>:
 810bc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810bc6c:	4616      	mov	r6, r2
 810bc6e:	4698      	mov	r8, r3
 810bc70:	688a      	ldr	r2, [r1, #8]
 810bc72:	690b      	ldr	r3, [r1, #16]
 810bc74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810bc78:	4293      	cmp	r3, r2
 810bc7a:	bfb8      	it	lt
 810bc7c:	4613      	movlt	r3, r2
 810bc7e:	6033      	str	r3, [r6, #0]
 810bc80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810bc84:	4607      	mov	r7, r0
 810bc86:	460c      	mov	r4, r1
 810bc88:	b10a      	cbz	r2, 810bc8e <_printf_common+0x26>
 810bc8a:	3301      	adds	r3, #1
 810bc8c:	6033      	str	r3, [r6, #0]
 810bc8e:	6823      	ldr	r3, [r4, #0]
 810bc90:	0699      	lsls	r1, r3, #26
 810bc92:	bf42      	ittt	mi
 810bc94:	6833      	ldrmi	r3, [r6, #0]
 810bc96:	3302      	addmi	r3, #2
 810bc98:	6033      	strmi	r3, [r6, #0]
 810bc9a:	6825      	ldr	r5, [r4, #0]
 810bc9c:	f015 0506 	ands.w	r5, r5, #6
 810bca0:	d106      	bne.n	810bcb0 <_printf_common+0x48>
 810bca2:	f104 0a19 	add.w	sl, r4, #25
 810bca6:	68e3      	ldr	r3, [r4, #12]
 810bca8:	6832      	ldr	r2, [r6, #0]
 810bcaa:	1a9b      	subs	r3, r3, r2
 810bcac:	42ab      	cmp	r3, r5
 810bcae:	dc26      	bgt.n	810bcfe <_printf_common+0x96>
 810bcb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810bcb4:	6822      	ldr	r2, [r4, #0]
 810bcb6:	3b00      	subs	r3, #0
 810bcb8:	bf18      	it	ne
 810bcba:	2301      	movne	r3, #1
 810bcbc:	0692      	lsls	r2, r2, #26
 810bcbe:	d42b      	bmi.n	810bd18 <_printf_common+0xb0>
 810bcc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810bcc4:	4641      	mov	r1, r8
 810bcc6:	4638      	mov	r0, r7
 810bcc8:	47c8      	blx	r9
 810bcca:	3001      	adds	r0, #1
 810bccc:	d01e      	beq.n	810bd0c <_printf_common+0xa4>
 810bcce:	6823      	ldr	r3, [r4, #0]
 810bcd0:	6922      	ldr	r2, [r4, #16]
 810bcd2:	f003 0306 	and.w	r3, r3, #6
 810bcd6:	2b04      	cmp	r3, #4
 810bcd8:	bf02      	ittt	eq
 810bcda:	68e5      	ldreq	r5, [r4, #12]
 810bcdc:	6833      	ldreq	r3, [r6, #0]
 810bcde:	1aed      	subeq	r5, r5, r3
 810bce0:	68a3      	ldr	r3, [r4, #8]
 810bce2:	bf0c      	ite	eq
 810bce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810bce8:	2500      	movne	r5, #0
 810bcea:	4293      	cmp	r3, r2
 810bcec:	bfc4      	itt	gt
 810bcee:	1a9b      	subgt	r3, r3, r2
 810bcf0:	18ed      	addgt	r5, r5, r3
 810bcf2:	2600      	movs	r6, #0
 810bcf4:	341a      	adds	r4, #26
 810bcf6:	42b5      	cmp	r5, r6
 810bcf8:	d11a      	bne.n	810bd30 <_printf_common+0xc8>
 810bcfa:	2000      	movs	r0, #0
 810bcfc:	e008      	b.n	810bd10 <_printf_common+0xa8>
 810bcfe:	2301      	movs	r3, #1
 810bd00:	4652      	mov	r2, sl
 810bd02:	4641      	mov	r1, r8
 810bd04:	4638      	mov	r0, r7
 810bd06:	47c8      	blx	r9
 810bd08:	3001      	adds	r0, #1
 810bd0a:	d103      	bne.n	810bd14 <_printf_common+0xac>
 810bd0c:	f04f 30ff 	mov.w	r0, #4294967295
 810bd10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810bd14:	3501      	adds	r5, #1
 810bd16:	e7c6      	b.n	810bca6 <_printf_common+0x3e>
 810bd18:	18e1      	adds	r1, r4, r3
 810bd1a:	1c5a      	adds	r2, r3, #1
 810bd1c:	2030      	movs	r0, #48	@ 0x30
 810bd1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810bd22:	4422      	add	r2, r4
 810bd24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810bd28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810bd2c:	3302      	adds	r3, #2
 810bd2e:	e7c7      	b.n	810bcc0 <_printf_common+0x58>
 810bd30:	2301      	movs	r3, #1
 810bd32:	4622      	mov	r2, r4
 810bd34:	4641      	mov	r1, r8
 810bd36:	4638      	mov	r0, r7
 810bd38:	47c8      	blx	r9
 810bd3a:	3001      	adds	r0, #1
 810bd3c:	d0e6      	beq.n	810bd0c <_printf_common+0xa4>
 810bd3e:	3601      	adds	r6, #1
 810bd40:	e7d9      	b.n	810bcf6 <_printf_common+0x8e>
	...

0810bd44 <_printf_i>:
 810bd44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810bd48:	7e0f      	ldrb	r7, [r1, #24]
 810bd4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810bd4c:	2f78      	cmp	r7, #120	@ 0x78
 810bd4e:	4691      	mov	r9, r2
 810bd50:	4680      	mov	r8, r0
 810bd52:	460c      	mov	r4, r1
 810bd54:	469a      	mov	sl, r3
 810bd56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810bd5a:	d807      	bhi.n	810bd6c <_printf_i+0x28>
 810bd5c:	2f62      	cmp	r7, #98	@ 0x62
 810bd5e:	d80a      	bhi.n	810bd76 <_printf_i+0x32>
 810bd60:	2f00      	cmp	r7, #0
 810bd62:	f000 80d2 	beq.w	810bf0a <_printf_i+0x1c6>
 810bd66:	2f58      	cmp	r7, #88	@ 0x58
 810bd68:	f000 80b9 	beq.w	810bede <_printf_i+0x19a>
 810bd6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810bd70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810bd74:	e03a      	b.n	810bdec <_printf_i+0xa8>
 810bd76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810bd7a:	2b15      	cmp	r3, #21
 810bd7c:	d8f6      	bhi.n	810bd6c <_printf_i+0x28>
 810bd7e:	a101      	add	r1, pc, #4	@ (adr r1, 810bd84 <_printf_i+0x40>)
 810bd80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810bd84:	0810bddd 	.word	0x0810bddd
 810bd88:	0810bdf1 	.word	0x0810bdf1
 810bd8c:	0810bd6d 	.word	0x0810bd6d
 810bd90:	0810bd6d 	.word	0x0810bd6d
 810bd94:	0810bd6d 	.word	0x0810bd6d
 810bd98:	0810bd6d 	.word	0x0810bd6d
 810bd9c:	0810bdf1 	.word	0x0810bdf1
 810bda0:	0810bd6d 	.word	0x0810bd6d
 810bda4:	0810bd6d 	.word	0x0810bd6d
 810bda8:	0810bd6d 	.word	0x0810bd6d
 810bdac:	0810bd6d 	.word	0x0810bd6d
 810bdb0:	0810bef1 	.word	0x0810bef1
 810bdb4:	0810be1b 	.word	0x0810be1b
 810bdb8:	0810beab 	.word	0x0810beab
 810bdbc:	0810bd6d 	.word	0x0810bd6d
 810bdc0:	0810bd6d 	.word	0x0810bd6d
 810bdc4:	0810bf13 	.word	0x0810bf13
 810bdc8:	0810bd6d 	.word	0x0810bd6d
 810bdcc:	0810be1b 	.word	0x0810be1b
 810bdd0:	0810bd6d 	.word	0x0810bd6d
 810bdd4:	0810bd6d 	.word	0x0810bd6d
 810bdd8:	0810beb3 	.word	0x0810beb3
 810bddc:	6833      	ldr	r3, [r6, #0]
 810bdde:	1d1a      	adds	r2, r3, #4
 810bde0:	681b      	ldr	r3, [r3, #0]
 810bde2:	6032      	str	r2, [r6, #0]
 810bde4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810bde8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810bdec:	2301      	movs	r3, #1
 810bdee:	e09d      	b.n	810bf2c <_printf_i+0x1e8>
 810bdf0:	6833      	ldr	r3, [r6, #0]
 810bdf2:	6820      	ldr	r0, [r4, #0]
 810bdf4:	1d19      	adds	r1, r3, #4
 810bdf6:	6031      	str	r1, [r6, #0]
 810bdf8:	0606      	lsls	r6, r0, #24
 810bdfa:	d501      	bpl.n	810be00 <_printf_i+0xbc>
 810bdfc:	681d      	ldr	r5, [r3, #0]
 810bdfe:	e003      	b.n	810be08 <_printf_i+0xc4>
 810be00:	0645      	lsls	r5, r0, #25
 810be02:	d5fb      	bpl.n	810bdfc <_printf_i+0xb8>
 810be04:	f9b3 5000 	ldrsh.w	r5, [r3]
 810be08:	2d00      	cmp	r5, #0
 810be0a:	da03      	bge.n	810be14 <_printf_i+0xd0>
 810be0c:	232d      	movs	r3, #45	@ 0x2d
 810be0e:	426d      	negs	r5, r5
 810be10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810be14:	4859      	ldr	r0, [pc, #356]	@ (810bf7c <_printf_i+0x238>)
 810be16:	230a      	movs	r3, #10
 810be18:	e011      	b.n	810be3e <_printf_i+0xfa>
 810be1a:	6821      	ldr	r1, [r4, #0]
 810be1c:	6833      	ldr	r3, [r6, #0]
 810be1e:	0608      	lsls	r0, r1, #24
 810be20:	f853 5b04 	ldr.w	r5, [r3], #4
 810be24:	d402      	bmi.n	810be2c <_printf_i+0xe8>
 810be26:	0649      	lsls	r1, r1, #25
 810be28:	bf48      	it	mi
 810be2a:	b2ad      	uxthmi	r5, r5
 810be2c:	2f6f      	cmp	r7, #111	@ 0x6f
 810be2e:	4853      	ldr	r0, [pc, #332]	@ (810bf7c <_printf_i+0x238>)
 810be30:	6033      	str	r3, [r6, #0]
 810be32:	bf14      	ite	ne
 810be34:	230a      	movne	r3, #10
 810be36:	2308      	moveq	r3, #8
 810be38:	2100      	movs	r1, #0
 810be3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810be3e:	6866      	ldr	r6, [r4, #4]
 810be40:	60a6      	str	r6, [r4, #8]
 810be42:	2e00      	cmp	r6, #0
 810be44:	bfa2      	ittt	ge
 810be46:	6821      	ldrge	r1, [r4, #0]
 810be48:	f021 0104 	bicge.w	r1, r1, #4
 810be4c:	6021      	strge	r1, [r4, #0]
 810be4e:	b90d      	cbnz	r5, 810be54 <_printf_i+0x110>
 810be50:	2e00      	cmp	r6, #0
 810be52:	d04b      	beq.n	810beec <_printf_i+0x1a8>
 810be54:	4616      	mov	r6, r2
 810be56:	fbb5 f1f3 	udiv	r1, r5, r3
 810be5a:	fb03 5711 	mls	r7, r3, r1, r5
 810be5e:	5dc7      	ldrb	r7, [r0, r7]
 810be60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810be64:	462f      	mov	r7, r5
 810be66:	42bb      	cmp	r3, r7
 810be68:	460d      	mov	r5, r1
 810be6a:	d9f4      	bls.n	810be56 <_printf_i+0x112>
 810be6c:	2b08      	cmp	r3, #8
 810be6e:	d10b      	bne.n	810be88 <_printf_i+0x144>
 810be70:	6823      	ldr	r3, [r4, #0]
 810be72:	07df      	lsls	r7, r3, #31
 810be74:	d508      	bpl.n	810be88 <_printf_i+0x144>
 810be76:	6923      	ldr	r3, [r4, #16]
 810be78:	6861      	ldr	r1, [r4, #4]
 810be7a:	4299      	cmp	r1, r3
 810be7c:	bfde      	ittt	le
 810be7e:	2330      	movle	r3, #48	@ 0x30
 810be80:	f806 3c01 	strble.w	r3, [r6, #-1]
 810be84:	f106 36ff 	addle.w	r6, r6, #4294967295
 810be88:	1b92      	subs	r2, r2, r6
 810be8a:	6122      	str	r2, [r4, #16]
 810be8c:	f8cd a000 	str.w	sl, [sp]
 810be90:	464b      	mov	r3, r9
 810be92:	aa03      	add	r2, sp, #12
 810be94:	4621      	mov	r1, r4
 810be96:	4640      	mov	r0, r8
 810be98:	f7ff fee6 	bl	810bc68 <_printf_common>
 810be9c:	3001      	adds	r0, #1
 810be9e:	d14a      	bne.n	810bf36 <_printf_i+0x1f2>
 810bea0:	f04f 30ff 	mov.w	r0, #4294967295
 810bea4:	b004      	add	sp, #16
 810bea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810beaa:	6823      	ldr	r3, [r4, #0]
 810beac:	f043 0320 	orr.w	r3, r3, #32
 810beb0:	6023      	str	r3, [r4, #0]
 810beb2:	4833      	ldr	r0, [pc, #204]	@ (810bf80 <_printf_i+0x23c>)
 810beb4:	2778      	movs	r7, #120	@ 0x78
 810beb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810beba:	6823      	ldr	r3, [r4, #0]
 810bebc:	6831      	ldr	r1, [r6, #0]
 810bebe:	061f      	lsls	r7, r3, #24
 810bec0:	f851 5b04 	ldr.w	r5, [r1], #4
 810bec4:	d402      	bmi.n	810becc <_printf_i+0x188>
 810bec6:	065f      	lsls	r7, r3, #25
 810bec8:	bf48      	it	mi
 810beca:	b2ad      	uxthmi	r5, r5
 810becc:	6031      	str	r1, [r6, #0]
 810bece:	07d9      	lsls	r1, r3, #31
 810bed0:	bf44      	itt	mi
 810bed2:	f043 0320 	orrmi.w	r3, r3, #32
 810bed6:	6023      	strmi	r3, [r4, #0]
 810bed8:	b11d      	cbz	r5, 810bee2 <_printf_i+0x19e>
 810beda:	2310      	movs	r3, #16
 810bedc:	e7ac      	b.n	810be38 <_printf_i+0xf4>
 810bede:	4827      	ldr	r0, [pc, #156]	@ (810bf7c <_printf_i+0x238>)
 810bee0:	e7e9      	b.n	810beb6 <_printf_i+0x172>
 810bee2:	6823      	ldr	r3, [r4, #0]
 810bee4:	f023 0320 	bic.w	r3, r3, #32
 810bee8:	6023      	str	r3, [r4, #0]
 810beea:	e7f6      	b.n	810beda <_printf_i+0x196>
 810beec:	4616      	mov	r6, r2
 810beee:	e7bd      	b.n	810be6c <_printf_i+0x128>
 810bef0:	6833      	ldr	r3, [r6, #0]
 810bef2:	6825      	ldr	r5, [r4, #0]
 810bef4:	6961      	ldr	r1, [r4, #20]
 810bef6:	1d18      	adds	r0, r3, #4
 810bef8:	6030      	str	r0, [r6, #0]
 810befa:	062e      	lsls	r6, r5, #24
 810befc:	681b      	ldr	r3, [r3, #0]
 810befe:	d501      	bpl.n	810bf04 <_printf_i+0x1c0>
 810bf00:	6019      	str	r1, [r3, #0]
 810bf02:	e002      	b.n	810bf0a <_printf_i+0x1c6>
 810bf04:	0668      	lsls	r0, r5, #25
 810bf06:	d5fb      	bpl.n	810bf00 <_printf_i+0x1bc>
 810bf08:	8019      	strh	r1, [r3, #0]
 810bf0a:	2300      	movs	r3, #0
 810bf0c:	6123      	str	r3, [r4, #16]
 810bf0e:	4616      	mov	r6, r2
 810bf10:	e7bc      	b.n	810be8c <_printf_i+0x148>
 810bf12:	6833      	ldr	r3, [r6, #0]
 810bf14:	1d1a      	adds	r2, r3, #4
 810bf16:	6032      	str	r2, [r6, #0]
 810bf18:	681e      	ldr	r6, [r3, #0]
 810bf1a:	6862      	ldr	r2, [r4, #4]
 810bf1c:	2100      	movs	r1, #0
 810bf1e:	4630      	mov	r0, r6
 810bf20:	f7f4 f9f6 	bl	8100310 <memchr>
 810bf24:	b108      	cbz	r0, 810bf2a <_printf_i+0x1e6>
 810bf26:	1b80      	subs	r0, r0, r6
 810bf28:	6060      	str	r0, [r4, #4]
 810bf2a:	6863      	ldr	r3, [r4, #4]
 810bf2c:	6123      	str	r3, [r4, #16]
 810bf2e:	2300      	movs	r3, #0
 810bf30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810bf34:	e7aa      	b.n	810be8c <_printf_i+0x148>
 810bf36:	6923      	ldr	r3, [r4, #16]
 810bf38:	4632      	mov	r2, r6
 810bf3a:	4649      	mov	r1, r9
 810bf3c:	4640      	mov	r0, r8
 810bf3e:	47d0      	blx	sl
 810bf40:	3001      	adds	r0, #1
 810bf42:	d0ad      	beq.n	810bea0 <_printf_i+0x15c>
 810bf44:	6823      	ldr	r3, [r4, #0]
 810bf46:	079b      	lsls	r3, r3, #30
 810bf48:	d413      	bmi.n	810bf72 <_printf_i+0x22e>
 810bf4a:	68e0      	ldr	r0, [r4, #12]
 810bf4c:	9b03      	ldr	r3, [sp, #12]
 810bf4e:	4298      	cmp	r0, r3
 810bf50:	bfb8      	it	lt
 810bf52:	4618      	movlt	r0, r3
 810bf54:	e7a6      	b.n	810bea4 <_printf_i+0x160>
 810bf56:	2301      	movs	r3, #1
 810bf58:	4632      	mov	r2, r6
 810bf5a:	4649      	mov	r1, r9
 810bf5c:	4640      	mov	r0, r8
 810bf5e:	47d0      	blx	sl
 810bf60:	3001      	adds	r0, #1
 810bf62:	d09d      	beq.n	810bea0 <_printf_i+0x15c>
 810bf64:	3501      	adds	r5, #1
 810bf66:	68e3      	ldr	r3, [r4, #12]
 810bf68:	9903      	ldr	r1, [sp, #12]
 810bf6a:	1a5b      	subs	r3, r3, r1
 810bf6c:	42ab      	cmp	r3, r5
 810bf6e:	dcf2      	bgt.n	810bf56 <_printf_i+0x212>
 810bf70:	e7eb      	b.n	810bf4a <_printf_i+0x206>
 810bf72:	2500      	movs	r5, #0
 810bf74:	f104 0619 	add.w	r6, r4, #25
 810bf78:	e7f5      	b.n	810bf66 <_printf_i+0x222>
 810bf7a:	bf00      	nop
 810bf7c:	0810c7c3 	.word	0x0810c7c3
 810bf80:	0810c7d4 	.word	0x0810c7d4

0810bf84 <__sflush_r>:
 810bf84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810bf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810bf8c:	0716      	lsls	r6, r2, #28
 810bf8e:	4605      	mov	r5, r0
 810bf90:	460c      	mov	r4, r1
 810bf92:	d454      	bmi.n	810c03e <__sflush_r+0xba>
 810bf94:	684b      	ldr	r3, [r1, #4]
 810bf96:	2b00      	cmp	r3, #0
 810bf98:	dc02      	bgt.n	810bfa0 <__sflush_r+0x1c>
 810bf9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810bf9c:	2b00      	cmp	r3, #0
 810bf9e:	dd48      	ble.n	810c032 <__sflush_r+0xae>
 810bfa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810bfa2:	2e00      	cmp	r6, #0
 810bfa4:	d045      	beq.n	810c032 <__sflush_r+0xae>
 810bfa6:	2300      	movs	r3, #0
 810bfa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810bfac:	682f      	ldr	r7, [r5, #0]
 810bfae:	6a21      	ldr	r1, [r4, #32]
 810bfb0:	602b      	str	r3, [r5, #0]
 810bfb2:	d030      	beq.n	810c016 <__sflush_r+0x92>
 810bfb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810bfb6:	89a3      	ldrh	r3, [r4, #12]
 810bfb8:	0759      	lsls	r1, r3, #29
 810bfba:	d505      	bpl.n	810bfc8 <__sflush_r+0x44>
 810bfbc:	6863      	ldr	r3, [r4, #4]
 810bfbe:	1ad2      	subs	r2, r2, r3
 810bfc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810bfc2:	b10b      	cbz	r3, 810bfc8 <__sflush_r+0x44>
 810bfc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810bfc6:	1ad2      	subs	r2, r2, r3
 810bfc8:	2300      	movs	r3, #0
 810bfca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810bfcc:	6a21      	ldr	r1, [r4, #32]
 810bfce:	4628      	mov	r0, r5
 810bfd0:	47b0      	blx	r6
 810bfd2:	1c43      	adds	r3, r0, #1
 810bfd4:	89a3      	ldrh	r3, [r4, #12]
 810bfd6:	d106      	bne.n	810bfe6 <__sflush_r+0x62>
 810bfd8:	6829      	ldr	r1, [r5, #0]
 810bfda:	291d      	cmp	r1, #29
 810bfdc:	d82b      	bhi.n	810c036 <__sflush_r+0xb2>
 810bfde:	4a2a      	ldr	r2, [pc, #168]	@ (810c088 <__sflush_r+0x104>)
 810bfe0:	410a      	asrs	r2, r1
 810bfe2:	07d6      	lsls	r6, r2, #31
 810bfe4:	d427      	bmi.n	810c036 <__sflush_r+0xb2>
 810bfe6:	2200      	movs	r2, #0
 810bfe8:	6062      	str	r2, [r4, #4]
 810bfea:	04d9      	lsls	r1, r3, #19
 810bfec:	6922      	ldr	r2, [r4, #16]
 810bfee:	6022      	str	r2, [r4, #0]
 810bff0:	d504      	bpl.n	810bffc <__sflush_r+0x78>
 810bff2:	1c42      	adds	r2, r0, #1
 810bff4:	d101      	bne.n	810bffa <__sflush_r+0x76>
 810bff6:	682b      	ldr	r3, [r5, #0]
 810bff8:	b903      	cbnz	r3, 810bffc <__sflush_r+0x78>
 810bffa:	6560      	str	r0, [r4, #84]	@ 0x54
 810bffc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810bffe:	602f      	str	r7, [r5, #0]
 810c000:	b1b9      	cbz	r1, 810c032 <__sflush_r+0xae>
 810c002:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810c006:	4299      	cmp	r1, r3
 810c008:	d002      	beq.n	810c010 <__sflush_r+0x8c>
 810c00a:	4628      	mov	r0, r5
 810c00c:	f7ff fb48 	bl	810b6a0 <_free_r>
 810c010:	2300      	movs	r3, #0
 810c012:	6363      	str	r3, [r4, #52]	@ 0x34
 810c014:	e00d      	b.n	810c032 <__sflush_r+0xae>
 810c016:	2301      	movs	r3, #1
 810c018:	4628      	mov	r0, r5
 810c01a:	47b0      	blx	r6
 810c01c:	4602      	mov	r2, r0
 810c01e:	1c50      	adds	r0, r2, #1
 810c020:	d1c9      	bne.n	810bfb6 <__sflush_r+0x32>
 810c022:	682b      	ldr	r3, [r5, #0]
 810c024:	2b00      	cmp	r3, #0
 810c026:	d0c6      	beq.n	810bfb6 <__sflush_r+0x32>
 810c028:	2b1d      	cmp	r3, #29
 810c02a:	d001      	beq.n	810c030 <__sflush_r+0xac>
 810c02c:	2b16      	cmp	r3, #22
 810c02e:	d11e      	bne.n	810c06e <__sflush_r+0xea>
 810c030:	602f      	str	r7, [r5, #0]
 810c032:	2000      	movs	r0, #0
 810c034:	e022      	b.n	810c07c <__sflush_r+0xf8>
 810c036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810c03a:	b21b      	sxth	r3, r3
 810c03c:	e01b      	b.n	810c076 <__sflush_r+0xf2>
 810c03e:	690f      	ldr	r7, [r1, #16]
 810c040:	2f00      	cmp	r7, #0
 810c042:	d0f6      	beq.n	810c032 <__sflush_r+0xae>
 810c044:	0793      	lsls	r3, r2, #30
 810c046:	680e      	ldr	r6, [r1, #0]
 810c048:	bf08      	it	eq
 810c04a:	694b      	ldreq	r3, [r1, #20]
 810c04c:	600f      	str	r7, [r1, #0]
 810c04e:	bf18      	it	ne
 810c050:	2300      	movne	r3, #0
 810c052:	eba6 0807 	sub.w	r8, r6, r7
 810c056:	608b      	str	r3, [r1, #8]
 810c058:	f1b8 0f00 	cmp.w	r8, #0
 810c05c:	dde9      	ble.n	810c032 <__sflush_r+0xae>
 810c05e:	6a21      	ldr	r1, [r4, #32]
 810c060:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810c062:	4643      	mov	r3, r8
 810c064:	463a      	mov	r2, r7
 810c066:	4628      	mov	r0, r5
 810c068:	47b0      	blx	r6
 810c06a:	2800      	cmp	r0, #0
 810c06c:	dc08      	bgt.n	810c080 <__sflush_r+0xfc>
 810c06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810c076:	81a3      	strh	r3, [r4, #12]
 810c078:	f04f 30ff 	mov.w	r0, #4294967295
 810c07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c080:	4407      	add	r7, r0
 810c082:	eba8 0800 	sub.w	r8, r8, r0
 810c086:	e7e7      	b.n	810c058 <__sflush_r+0xd4>
 810c088:	dfbffffe 	.word	0xdfbffffe

0810c08c <_fflush_r>:
 810c08c:	b538      	push	{r3, r4, r5, lr}
 810c08e:	690b      	ldr	r3, [r1, #16]
 810c090:	4605      	mov	r5, r0
 810c092:	460c      	mov	r4, r1
 810c094:	b913      	cbnz	r3, 810c09c <_fflush_r+0x10>
 810c096:	2500      	movs	r5, #0
 810c098:	4628      	mov	r0, r5
 810c09a:	bd38      	pop	{r3, r4, r5, pc}
 810c09c:	b118      	cbz	r0, 810c0a6 <_fflush_r+0x1a>
 810c09e:	6a03      	ldr	r3, [r0, #32]
 810c0a0:	b90b      	cbnz	r3, 810c0a6 <_fflush_r+0x1a>
 810c0a2:	f7ff f937 	bl	810b314 <__sinit>
 810c0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c0aa:	2b00      	cmp	r3, #0
 810c0ac:	d0f3      	beq.n	810c096 <_fflush_r+0xa>
 810c0ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810c0b0:	07d0      	lsls	r0, r2, #31
 810c0b2:	d404      	bmi.n	810c0be <_fflush_r+0x32>
 810c0b4:	0599      	lsls	r1, r3, #22
 810c0b6:	d402      	bmi.n	810c0be <_fflush_r+0x32>
 810c0b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810c0ba:	f7ff fada 	bl	810b672 <__retarget_lock_acquire_recursive>
 810c0be:	4628      	mov	r0, r5
 810c0c0:	4621      	mov	r1, r4
 810c0c2:	f7ff ff5f 	bl	810bf84 <__sflush_r>
 810c0c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810c0c8:	07da      	lsls	r2, r3, #31
 810c0ca:	4605      	mov	r5, r0
 810c0cc:	d4e4      	bmi.n	810c098 <_fflush_r+0xc>
 810c0ce:	89a3      	ldrh	r3, [r4, #12]
 810c0d0:	059b      	lsls	r3, r3, #22
 810c0d2:	d4e1      	bmi.n	810c098 <_fflush_r+0xc>
 810c0d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810c0d6:	f7ff facd 	bl	810b674 <__retarget_lock_release_recursive>
 810c0da:	e7dd      	b.n	810c098 <_fflush_r+0xc>

0810c0dc <__swbuf_r>:
 810c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c0de:	460e      	mov	r6, r1
 810c0e0:	4614      	mov	r4, r2
 810c0e2:	4605      	mov	r5, r0
 810c0e4:	b118      	cbz	r0, 810c0ee <__swbuf_r+0x12>
 810c0e6:	6a03      	ldr	r3, [r0, #32]
 810c0e8:	b90b      	cbnz	r3, 810c0ee <__swbuf_r+0x12>
 810c0ea:	f7ff f913 	bl	810b314 <__sinit>
 810c0ee:	69a3      	ldr	r3, [r4, #24]
 810c0f0:	60a3      	str	r3, [r4, #8]
 810c0f2:	89a3      	ldrh	r3, [r4, #12]
 810c0f4:	071a      	lsls	r2, r3, #28
 810c0f6:	d501      	bpl.n	810c0fc <__swbuf_r+0x20>
 810c0f8:	6923      	ldr	r3, [r4, #16]
 810c0fa:	b943      	cbnz	r3, 810c10e <__swbuf_r+0x32>
 810c0fc:	4621      	mov	r1, r4
 810c0fe:	4628      	mov	r0, r5
 810c100:	f000 f82a 	bl	810c158 <__swsetup_r>
 810c104:	b118      	cbz	r0, 810c10e <__swbuf_r+0x32>
 810c106:	f04f 37ff 	mov.w	r7, #4294967295
 810c10a:	4638      	mov	r0, r7
 810c10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c10e:	6823      	ldr	r3, [r4, #0]
 810c110:	6922      	ldr	r2, [r4, #16]
 810c112:	1a98      	subs	r0, r3, r2
 810c114:	6963      	ldr	r3, [r4, #20]
 810c116:	b2f6      	uxtb	r6, r6
 810c118:	4283      	cmp	r3, r0
 810c11a:	4637      	mov	r7, r6
 810c11c:	dc05      	bgt.n	810c12a <__swbuf_r+0x4e>
 810c11e:	4621      	mov	r1, r4
 810c120:	4628      	mov	r0, r5
 810c122:	f7ff ffb3 	bl	810c08c <_fflush_r>
 810c126:	2800      	cmp	r0, #0
 810c128:	d1ed      	bne.n	810c106 <__swbuf_r+0x2a>
 810c12a:	68a3      	ldr	r3, [r4, #8]
 810c12c:	3b01      	subs	r3, #1
 810c12e:	60a3      	str	r3, [r4, #8]
 810c130:	6823      	ldr	r3, [r4, #0]
 810c132:	1c5a      	adds	r2, r3, #1
 810c134:	6022      	str	r2, [r4, #0]
 810c136:	701e      	strb	r6, [r3, #0]
 810c138:	6962      	ldr	r2, [r4, #20]
 810c13a:	1c43      	adds	r3, r0, #1
 810c13c:	429a      	cmp	r2, r3
 810c13e:	d004      	beq.n	810c14a <__swbuf_r+0x6e>
 810c140:	89a3      	ldrh	r3, [r4, #12]
 810c142:	07db      	lsls	r3, r3, #31
 810c144:	d5e1      	bpl.n	810c10a <__swbuf_r+0x2e>
 810c146:	2e0a      	cmp	r6, #10
 810c148:	d1df      	bne.n	810c10a <__swbuf_r+0x2e>
 810c14a:	4621      	mov	r1, r4
 810c14c:	4628      	mov	r0, r5
 810c14e:	f7ff ff9d 	bl	810c08c <_fflush_r>
 810c152:	2800      	cmp	r0, #0
 810c154:	d0d9      	beq.n	810c10a <__swbuf_r+0x2e>
 810c156:	e7d6      	b.n	810c106 <__swbuf_r+0x2a>

0810c158 <__swsetup_r>:
 810c158:	b538      	push	{r3, r4, r5, lr}
 810c15a:	4b29      	ldr	r3, [pc, #164]	@ (810c200 <__swsetup_r+0xa8>)
 810c15c:	4605      	mov	r5, r0
 810c15e:	6818      	ldr	r0, [r3, #0]
 810c160:	460c      	mov	r4, r1
 810c162:	b118      	cbz	r0, 810c16c <__swsetup_r+0x14>
 810c164:	6a03      	ldr	r3, [r0, #32]
 810c166:	b90b      	cbnz	r3, 810c16c <__swsetup_r+0x14>
 810c168:	f7ff f8d4 	bl	810b314 <__sinit>
 810c16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c170:	0719      	lsls	r1, r3, #28
 810c172:	d422      	bmi.n	810c1ba <__swsetup_r+0x62>
 810c174:	06da      	lsls	r2, r3, #27
 810c176:	d407      	bmi.n	810c188 <__swsetup_r+0x30>
 810c178:	2209      	movs	r2, #9
 810c17a:	602a      	str	r2, [r5, #0]
 810c17c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810c180:	81a3      	strh	r3, [r4, #12]
 810c182:	f04f 30ff 	mov.w	r0, #4294967295
 810c186:	e033      	b.n	810c1f0 <__swsetup_r+0x98>
 810c188:	0758      	lsls	r0, r3, #29
 810c18a:	d512      	bpl.n	810c1b2 <__swsetup_r+0x5a>
 810c18c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810c18e:	b141      	cbz	r1, 810c1a2 <__swsetup_r+0x4a>
 810c190:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810c194:	4299      	cmp	r1, r3
 810c196:	d002      	beq.n	810c19e <__swsetup_r+0x46>
 810c198:	4628      	mov	r0, r5
 810c19a:	f7ff fa81 	bl	810b6a0 <_free_r>
 810c19e:	2300      	movs	r3, #0
 810c1a0:	6363      	str	r3, [r4, #52]	@ 0x34
 810c1a2:	89a3      	ldrh	r3, [r4, #12]
 810c1a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810c1a8:	81a3      	strh	r3, [r4, #12]
 810c1aa:	2300      	movs	r3, #0
 810c1ac:	6063      	str	r3, [r4, #4]
 810c1ae:	6923      	ldr	r3, [r4, #16]
 810c1b0:	6023      	str	r3, [r4, #0]
 810c1b2:	89a3      	ldrh	r3, [r4, #12]
 810c1b4:	f043 0308 	orr.w	r3, r3, #8
 810c1b8:	81a3      	strh	r3, [r4, #12]
 810c1ba:	6923      	ldr	r3, [r4, #16]
 810c1bc:	b94b      	cbnz	r3, 810c1d2 <__swsetup_r+0x7a>
 810c1be:	89a3      	ldrh	r3, [r4, #12]
 810c1c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810c1c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810c1c8:	d003      	beq.n	810c1d2 <__swsetup_r+0x7a>
 810c1ca:	4621      	mov	r1, r4
 810c1cc:	4628      	mov	r0, r5
 810c1ce:	f000 f8cb 	bl	810c368 <__smakebuf_r>
 810c1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c1d6:	f013 0201 	ands.w	r2, r3, #1
 810c1da:	d00a      	beq.n	810c1f2 <__swsetup_r+0x9a>
 810c1dc:	2200      	movs	r2, #0
 810c1de:	60a2      	str	r2, [r4, #8]
 810c1e0:	6962      	ldr	r2, [r4, #20]
 810c1e2:	4252      	negs	r2, r2
 810c1e4:	61a2      	str	r2, [r4, #24]
 810c1e6:	6922      	ldr	r2, [r4, #16]
 810c1e8:	b942      	cbnz	r2, 810c1fc <__swsetup_r+0xa4>
 810c1ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810c1ee:	d1c5      	bne.n	810c17c <__swsetup_r+0x24>
 810c1f0:	bd38      	pop	{r3, r4, r5, pc}
 810c1f2:	0799      	lsls	r1, r3, #30
 810c1f4:	bf58      	it	pl
 810c1f6:	6962      	ldrpl	r2, [r4, #20]
 810c1f8:	60a2      	str	r2, [r4, #8]
 810c1fa:	e7f4      	b.n	810c1e6 <__swsetup_r+0x8e>
 810c1fc:	2000      	movs	r0, #0
 810c1fe:	e7f7      	b.n	810c1f0 <__swsetup_r+0x98>
 810c200:	100000c8 	.word	0x100000c8

0810c204 <memmove>:
 810c204:	4288      	cmp	r0, r1
 810c206:	b510      	push	{r4, lr}
 810c208:	eb01 0402 	add.w	r4, r1, r2
 810c20c:	d902      	bls.n	810c214 <memmove+0x10>
 810c20e:	4284      	cmp	r4, r0
 810c210:	4623      	mov	r3, r4
 810c212:	d807      	bhi.n	810c224 <memmove+0x20>
 810c214:	1e43      	subs	r3, r0, #1
 810c216:	42a1      	cmp	r1, r4
 810c218:	d008      	beq.n	810c22c <memmove+0x28>
 810c21a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810c21e:	f803 2f01 	strb.w	r2, [r3, #1]!
 810c222:	e7f8      	b.n	810c216 <memmove+0x12>
 810c224:	4402      	add	r2, r0
 810c226:	4601      	mov	r1, r0
 810c228:	428a      	cmp	r2, r1
 810c22a:	d100      	bne.n	810c22e <memmove+0x2a>
 810c22c:	bd10      	pop	{r4, pc}
 810c22e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810c232:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810c236:	e7f7      	b.n	810c228 <memmove+0x24>

0810c238 <_raise_r>:
 810c238:	291f      	cmp	r1, #31
 810c23a:	b538      	push	{r3, r4, r5, lr}
 810c23c:	4605      	mov	r5, r0
 810c23e:	460c      	mov	r4, r1
 810c240:	d904      	bls.n	810c24c <_raise_r+0x14>
 810c242:	2316      	movs	r3, #22
 810c244:	6003      	str	r3, [r0, #0]
 810c246:	f04f 30ff 	mov.w	r0, #4294967295
 810c24a:	bd38      	pop	{r3, r4, r5, pc}
 810c24c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 810c24e:	b112      	cbz	r2, 810c256 <_raise_r+0x1e>
 810c250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810c254:	b94b      	cbnz	r3, 810c26a <_raise_r+0x32>
 810c256:	4628      	mov	r0, r5
 810c258:	f000 f830 	bl	810c2bc <_getpid_r>
 810c25c:	4622      	mov	r2, r4
 810c25e:	4601      	mov	r1, r0
 810c260:	4628      	mov	r0, r5
 810c262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810c266:	f000 b817 	b.w	810c298 <_kill_r>
 810c26a:	2b01      	cmp	r3, #1
 810c26c:	d00a      	beq.n	810c284 <_raise_r+0x4c>
 810c26e:	1c59      	adds	r1, r3, #1
 810c270:	d103      	bne.n	810c27a <_raise_r+0x42>
 810c272:	2316      	movs	r3, #22
 810c274:	6003      	str	r3, [r0, #0]
 810c276:	2001      	movs	r0, #1
 810c278:	e7e7      	b.n	810c24a <_raise_r+0x12>
 810c27a:	2100      	movs	r1, #0
 810c27c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 810c280:	4620      	mov	r0, r4
 810c282:	4798      	blx	r3
 810c284:	2000      	movs	r0, #0
 810c286:	e7e0      	b.n	810c24a <_raise_r+0x12>

0810c288 <raise>:
 810c288:	4b02      	ldr	r3, [pc, #8]	@ (810c294 <raise+0xc>)
 810c28a:	4601      	mov	r1, r0
 810c28c:	6818      	ldr	r0, [r3, #0]
 810c28e:	f7ff bfd3 	b.w	810c238 <_raise_r>
 810c292:	bf00      	nop
 810c294:	100000c8 	.word	0x100000c8

0810c298 <_kill_r>:
 810c298:	b538      	push	{r3, r4, r5, lr}
 810c29a:	4d07      	ldr	r5, [pc, #28]	@ (810c2b8 <_kill_r+0x20>)
 810c29c:	2300      	movs	r3, #0
 810c29e:	4604      	mov	r4, r0
 810c2a0:	4608      	mov	r0, r1
 810c2a2:	4611      	mov	r1, r2
 810c2a4:	602b      	str	r3, [r5, #0]
 810c2a6:	f7f4 fc5d 	bl	8100b64 <_kill>
 810c2aa:	1c43      	adds	r3, r0, #1
 810c2ac:	d102      	bne.n	810c2b4 <_kill_r+0x1c>
 810c2ae:	682b      	ldr	r3, [r5, #0]
 810c2b0:	b103      	cbz	r3, 810c2b4 <_kill_r+0x1c>
 810c2b2:	6023      	str	r3, [r4, #0]
 810c2b4:	bd38      	pop	{r3, r4, r5, pc}
 810c2b6:	bf00      	nop
 810c2b8:	10004e54 	.word	0x10004e54

0810c2bc <_getpid_r>:
 810c2bc:	f7f4 bc4a 	b.w	8100b54 <_getpid>

0810c2c0 <_realloc_r>:
 810c2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c2c4:	4680      	mov	r8, r0
 810c2c6:	4615      	mov	r5, r2
 810c2c8:	460c      	mov	r4, r1
 810c2ca:	b921      	cbnz	r1, 810c2d6 <_realloc_r+0x16>
 810c2cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810c2d0:	4611      	mov	r1, r2
 810c2d2:	f7fe bf07 	b.w	810b0e4 <_malloc_r>
 810c2d6:	b92a      	cbnz	r2, 810c2e4 <_realloc_r+0x24>
 810c2d8:	f7ff f9e2 	bl	810b6a0 <_free_r>
 810c2dc:	2400      	movs	r4, #0
 810c2de:	4620      	mov	r0, r4
 810c2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c2e4:	f000 f89e 	bl	810c424 <_malloc_usable_size_r>
 810c2e8:	4285      	cmp	r5, r0
 810c2ea:	4606      	mov	r6, r0
 810c2ec:	d802      	bhi.n	810c2f4 <_realloc_r+0x34>
 810c2ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 810c2f2:	d8f4      	bhi.n	810c2de <_realloc_r+0x1e>
 810c2f4:	4629      	mov	r1, r5
 810c2f6:	4640      	mov	r0, r8
 810c2f8:	f7fe fef4 	bl	810b0e4 <_malloc_r>
 810c2fc:	4607      	mov	r7, r0
 810c2fe:	2800      	cmp	r0, #0
 810c300:	d0ec      	beq.n	810c2dc <_realloc_r+0x1c>
 810c302:	42b5      	cmp	r5, r6
 810c304:	462a      	mov	r2, r5
 810c306:	4621      	mov	r1, r4
 810c308:	bf28      	it	cs
 810c30a:	4632      	movcs	r2, r6
 810c30c:	f7ff f9b3 	bl	810b676 <memcpy>
 810c310:	4621      	mov	r1, r4
 810c312:	4640      	mov	r0, r8
 810c314:	f7ff f9c4 	bl	810b6a0 <_free_r>
 810c318:	463c      	mov	r4, r7
 810c31a:	e7e0      	b.n	810c2de <_realloc_r+0x1e>

0810c31c <__swhatbuf_r>:
 810c31c:	b570      	push	{r4, r5, r6, lr}
 810c31e:	460c      	mov	r4, r1
 810c320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810c324:	2900      	cmp	r1, #0
 810c326:	b096      	sub	sp, #88	@ 0x58
 810c328:	4615      	mov	r5, r2
 810c32a:	461e      	mov	r6, r3
 810c32c:	da0d      	bge.n	810c34a <__swhatbuf_r+0x2e>
 810c32e:	89a3      	ldrh	r3, [r4, #12]
 810c330:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810c334:	f04f 0100 	mov.w	r1, #0
 810c338:	bf14      	ite	ne
 810c33a:	2340      	movne	r3, #64	@ 0x40
 810c33c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810c340:	2000      	movs	r0, #0
 810c342:	6031      	str	r1, [r6, #0]
 810c344:	602b      	str	r3, [r5, #0]
 810c346:	b016      	add	sp, #88	@ 0x58
 810c348:	bd70      	pop	{r4, r5, r6, pc}
 810c34a:	466a      	mov	r2, sp
 810c34c:	f000 f848 	bl	810c3e0 <_fstat_r>
 810c350:	2800      	cmp	r0, #0
 810c352:	dbec      	blt.n	810c32e <__swhatbuf_r+0x12>
 810c354:	9901      	ldr	r1, [sp, #4]
 810c356:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810c35a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810c35e:	4259      	negs	r1, r3
 810c360:	4159      	adcs	r1, r3
 810c362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810c366:	e7eb      	b.n	810c340 <__swhatbuf_r+0x24>

0810c368 <__smakebuf_r>:
 810c368:	898b      	ldrh	r3, [r1, #12]
 810c36a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810c36c:	079d      	lsls	r5, r3, #30
 810c36e:	4606      	mov	r6, r0
 810c370:	460c      	mov	r4, r1
 810c372:	d507      	bpl.n	810c384 <__smakebuf_r+0x1c>
 810c374:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810c378:	6023      	str	r3, [r4, #0]
 810c37a:	6123      	str	r3, [r4, #16]
 810c37c:	2301      	movs	r3, #1
 810c37e:	6163      	str	r3, [r4, #20]
 810c380:	b003      	add	sp, #12
 810c382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810c384:	ab01      	add	r3, sp, #4
 810c386:	466a      	mov	r2, sp
 810c388:	f7ff ffc8 	bl	810c31c <__swhatbuf_r>
 810c38c:	9f00      	ldr	r7, [sp, #0]
 810c38e:	4605      	mov	r5, r0
 810c390:	4639      	mov	r1, r7
 810c392:	4630      	mov	r0, r6
 810c394:	f7fe fea6 	bl	810b0e4 <_malloc_r>
 810c398:	b948      	cbnz	r0, 810c3ae <__smakebuf_r+0x46>
 810c39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c39e:	059a      	lsls	r2, r3, #22
 810c3a0:	d4ee      	bmi.n	810c380 <__smakebuf_r+0x18>
 810c3a2:	f023 0303 	bic.w	r3, r3, #3
 810c3a6:	f043 0302 	orr.w	r3, r3, #2
 810c3aa:	81a3      	strh	r3, [r4, #12]
 810c3ac:	e7e2      	b.n	810c374 <__smakebuf_r+0xc>
 810c3ae:	89a3      	ldrh	r3, [r4, #12]
 810c3b0:	6020      	str	r0, [r4, #0]
 810c3b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810c3b6:	81a3      	strh	r3, [r4, #12]
 810c3b8:	9b01      	ldr	r3, [sp, #4]
 810c3ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810c3be:	b15b      	cbz	r3, 810c3d8 <__smakebuf_r+0x70>
 810c3c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810c3c4:	4630      	mov	r0, r6
 810c3c6:	f000 f81d 	bl	810c404 <_isatty_r>
 810c3ca:	b128      	cbz	r0, 810c3d8 <__smakebuf_r+0x70>
 810c3cc:	89a3      	ldrh	r3, [r4, #12]
 810c3ce:	f023 0303 	bic.w	r3, r3, #3
 810c3d2:	f043 0301 	orr.w	r3, r3, #1
 810c3d6:	81a3      	strh	r3, [r4, #12]
 810c3d8:	89a3      	ldrh	r3, [r4, #12]
 810c3da:	431d      	orrs	r5, r3
 810c3dc:	81a5      	strh	r5, [r4, #12]
 810c3de:	e7cf      	b.n	810c380 <__smakebuf_r+0x18>

0810c3e0 <_fstat_r>:
 810c3e0:	b538      	push	{r3, r4, r5, lr}
 810c3e2:	4d07      	ldr	r5, [pc, #28]	@ (810c400 <_fstat_r+0x20>)
 810c3e4:	2300      	movs	r3, #0
 810c3e6:	4604      	mov	r4, r0
 810c3e8:	4608      	mov	r0, r1
 810c3ea:	4611      	mov	r1, r2
 810c3ec:	602b      	str	r3, [r5, #0]
 810c3ee:	f7f4 fc19 	bl	8100c24 <_fstat>
 810c3f2:	1c43      	adds	r3, r0, #1
 810c3f4:	d102      	bne.n	810c3fc <_fstat_r+0x1c>
 810c3f6:	682b      	ldr	r3, [r5, #0]
 810c3f8:	b103      	cbz	r3, 810c3fc <_fstat_r+0x1c>
 810c3fa:	6023      	str	r3, [r4, #0]
 810c3fc:	bd38      	pop	{r3, r4, r5, pc}
 810c3fe:	bf00      	nop
 810c400:	10004e54 	.word	0x10004e54

0810c404 <_isatty_r>:
 810c404:	b538      	push	{r3, r4, r5, lr}
 810c406:	4d06      	ldr	r5, [pc, #24]	@ (810c420 <_isatty_r+0x1c>)
 810c408:	2300      	movs	r3, #0
 810c40a:	4604      	mov	r4, r0
 810c40c:	4608      	mov	r0, r1
 810c40e:	602b      	str	r3, [r5, #0]
 810c410:	f7f4 fc18 	bl	8100c44 <_isatty>
 810c414:	1c43      	adds	r3, r0, #1
 810c416:	d102      	bne.n	810c41e <_isatty_r+0x1a>
 810c418:	682b      	ldr	r3, [r5, #0]
 810c41a:	b103      	cbz	r3, 810c41e <_isatty_r+0x1a>
 810c41c:	6023      	str	r3, [r4, #0]
 810c41e:	bd38      	pop	{r3, r4, r5, pc}
 810c420:	10004e54 	.word	0x10004e54

0810c424 <_malloc_usable_size_r>:
 810c424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810c428:	1f18      	subs	r0, r3, #4
 810c42a:	2b00      	cmp	r3, #0
 810c42c:	bfbc      	itt	lt
 810c42e:	580b      	ldrlt	r3, [r1, r0]
 810c430:	18c0      	addlt	r0, r0, r3
 810c432:	4770      	bx	lr

0810c434 <_init>:
 810c434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c436:	bf00      	nop
 810c438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c43a:	bc08      	pop	{r3}
 810c43c:	469e      	mov	lr, r3
 810c43e:	4770      	bx	lr

0810c440 <_fini>:
 810c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c442:	bf00      	nop
 810c444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c446:	bc08      	pop	{r3}
 810c448:	469e      	mov	lr, r3
 810c44a:	4770      	bx	lr
